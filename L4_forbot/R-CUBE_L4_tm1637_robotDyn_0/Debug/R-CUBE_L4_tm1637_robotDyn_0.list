
R-CUBE_L4_tm1637_robotDyn_0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000018f4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08001a7c  08001a7c  00011a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ad0  08001ad0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001ad0  08001ad0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001ad0  08001ad0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001ad0  08001ad0  00011ad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001ad4  08001ad4  00011ad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001ad8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001ae4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001ae4  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000062ed  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000012fa  00000000  00000000  00026329  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000610  00000000  00000000  00027628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000568  00000000  00000000  00027c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002474d  00000000  00000000  000281a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000062b6  00000000  00000000  0004c8ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e017b  00000000  00000000  00052ba3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00132d1e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001618  00000000  00000000  00132d74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001a64 	.word	0x08001a64

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001a64 	.word	0x08001a64

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ce:	f000 fa98 	bl	8000702 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d2:	f000 f820 	bl	8000216 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d6:	f000 f865 	bl	80002a4 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  volatile uint32_t counter=0;
 80001da:	2300      	movs	r3, #0
 80001dc:	607b      	str	r3, [r7, #4]
  tm1637Init();
 80001de:	f000 f897 	bl	8000310 <tm1637Init>
  tm1637SetBrightness(8);
 80001e2:	2008      	movs	r0, #8
 80001e4:	f000 f946 	bl	8000474 <tm1637SetBrightness>
  tm1637DisplayDecimal(1234, 1);
 80001e8:	2101      	movs	r1, #1
 80001ea:	f240 40d2 	movw	r0, #1234	; 0x4d2
 80001ee:	f000 f8d3 	bl	8000398 <tm1637DisplayDecimal>
  while (1)
  {
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80001f2:	2120      	movs	r1, #32
 80001f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80001f8:	f000 fdc4 	bl	8000d84 <HAL_GPIO_TogglePin>

	  HAL_Delay(300);
 80001fc:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000200:	f000 faf4 	bl	80007ec <HAL_Delay>
	  tm1637DisplayDecimal(counter, 1);
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	2101      	movs	r1, #1
 8000208:	4618      	mov	r0, r3
 800020a:	f000 f8c5 	bl	8000398 <tm1637DisplayDecimal>
	  counter++;
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	3301      	adds	r3, #1
 8000212:	607b      	str	r3, [r7, #4]
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000214:	e7ed      	b.n	80001f2 <main+0x2a>

08000216 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000216:	b580      	push	{r7, lr}
 8000218:	b096      	sub	sp, #88	; 0x58
 800021a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800021c:	f107 0314 	add.w	r3, r7, #20
 8000220:	2244      	movs	r2, #68	; 0x44
 8000222:	2100      	movs	r1, #0
 8000224:	4618      	mov	r0, r3
 8000226:	f001 fc15 	bl	8001a54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800022a:	463b      	mov	r3, r7
 800022c:	2200      	movs	r2, #0
 800022e:	601a      	str	r2, [r3, #0]
 8000230:	605a      	str	r2, [r3, #4]
 8000232:	609a      	str	r2, [r3, #8]
 8000234:	60da      	str	r2, [r3, #12]
 8000236:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000238:	f44f 7000 	mov.w	r0, #512	; 0x200
 800023c:	f000 fdca 	bl	8000dd4 <HAL_PWREx_ControlVoltageScaling>
 8000240:	4603      	mov	r3, r0
 8000242:	2b00      	cmp	r3, #0
 8000244:	d001      	beq.n	800024a <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000246:	f000 f85d 	bl	8000304 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800024a:	2310      	movs	r3, #16
 800024c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800024e:	2301      	movs	r3, #1
 8000250:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000252:	2300      	movs	r3, #0
 8000254:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000256:	2360      	movs	r3, #96	; 0x60
 8000258:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800025a:	2300      	movs	r3, #0
 800025c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800025e:	f107 0314 	add.w	r3, r7, #20
 8000262:	4618      	mov	r0, r3
 8000264:	f000 fe0c 	bl	8000e80 <HAL_RCC_OscConfig>
 8000268:	4603      	mov	r3, r0
 800026a:	2b00      	cmp	r3, #0
 800026c:	d001      	beq.n	8000272 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 800026e:	f000 f849 	bl	8000304 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000272:	230f      	movs	r3, #15
 8000274:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000276:	2300      	movs	r3, #0
 8000278:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800027a:	2300      	movs	r3, #0
 800027c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800027e:	2300      	movs	r3, #0
 8000280:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000282:	2300      	movs	r3, #0
 8000284:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000286:	463b      	mov	r3, r7
 8000288:	2100      	movs	r1, #0
 800028a:	4618      	mov	r0, r3
 800028c:	f001 f9d2 	bl	8001634 <HAL_RCC_ClockConfig>
 8000290:	4603      	mov	r3, r0
 8000292:	2b00      	cmp	r3, #0
 8000294:	d001      	beq.n	800029a <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000296:	f000 f835 	bl	8000304 <Error_Handler>
  }
}
 800029a:	bf00      	nop
 800029c:	3758      	adds	r7, #88	; 0x58
 800029e:	46bd      	mov	sp, r7
 80002a0:	bd80      	pop	{r7, pc}
	...

080002a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b086      	sub	sp, #24
 80002a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	2200      	movs	r2, #0
 80002ae:	601a      	str	r2, [r3, #0]
 80002b0:	605a      	str	r2, [r3, #4]
 80002b2:	609a      	str	r2, [r3, #8]
 80002b4:	60da      	str	r2, [r3, #12]
 80002b6:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002b8:	4b11      	ldr	r3, [pc, #68]	; (8000300 <MX_GPIO_Init+0x5c>)
 80002ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002bc:	4a10      	ldr	r2, [pc, #64]	; (8000300 <MX_GPIO_Init+0x5c>)
 80002be:	f043 0301 	orr.w	r3, r3, #1
 80002c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80002c4:	4b0e      	ldr	r3, [pc, #56]	; (8000300 <MX_GPIO_Init+0x5c>)
 80002c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002c8:	f003 0301 	and.w	r3, r3, #1
 80002cc:	603b      	str	r3, [r7, #0]
 80002ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80002d0:	2200      	movs	r2, #0
 80002d2:	2120      	movs	r1, #32
 80002d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002d8:	f000 fd3c 	bl	8000d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80002dc:	2320      	movs	r3, #32
 80002de:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002e0:	2301      	movs	r3, #1
 80002e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002e4:	2300      	movs	r3, #0
 80002e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002e8:	2300      	movs	r3, #0
 80002ea:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80002ec:	1d3b      	adds	r3, r7, #4
 80002ee:	4619      	mov	r1, r3
 80002f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002f4:	f000 fb84 	bl	8000a00 <HAL_GPIO_Init>

}
 80002f8:	bf00      	nop
 80002fa:	3718      	adds	r7, #24
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	40021000 	.word	0x40021000

08000304 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000304:	b480      	push	{r7}
 8000306:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000308:	b672      	cpsid	i
}
 800030a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800030c:	e7fe      	b.n	800030c <Error_Handler+0x8>
	...

08000310 <tm1637Init>:
    0x00
};


void tm1637Init(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b088      	sub	sp, #32
 8000314:	af00      	add	r7, sp, #0
    CLK_PORT_CLK_ENABLE();
 8000316:	4b1e      	ldr	r3, [pc, #120]	; (8000390 <tm1637Init+0x80>)
 8000318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800031a:	4a1d      	ldr	r2, [pc, #116]	; (8000390 <tm1637Init+0x80>)
 800031c:	f043 0304 	orr.w	r3, r3, #4
 8000320:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000322:	4b1b      	ldr	r3, [pc, #108]	; (8000390 <tm1637Init+0x80>)
 8000324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000326:	f003 0304 	and.w	r3, r3, #4
 800032a:	60bb      	str	r3, [r7, #8]
 800032c:	68bb      	ldr	r3, [r7, #8]
    DIO_PORT_CLK_ENABLE();
 800032e:	4b18      	ldr	r3, [pc, #96]	; (8000390 <tm1637Init+0x80>)
 8000330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000332:	4a17      	ldr	r2, [pc, #92]	; (8000390 <tm1637Init+0x80>)
 8000334:	f043 0304 	orr.w	r3, r3, #4
 8000338:	64d3      	str	r3, [r2, #76]	; 0x4c
 800033a:	4b15      	ldr	r3, [pc, #84]	; (8000390 <tm1637Init+0x80>)
 800033c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800033e:	f003 0304 	and.w	r3, r3, #4
 8000342:	607b      	str	r3, [r7, #4]
 8000344:	687b      	ldr	r3, [r7, #4]
    GPIO_InitTypeDef g = {0};
 8000346:	f107 030c 	add.w	r3, r7, #12
 800034a:	2200      	movs	r2, #0
 800034c:	601a      	str	r2, [r3, #0]
 800034e:	605a      	str	r2, [r3, #4]
 8000350:	609a      	str	r2, [r3, #8]
 8000352:	60da      	str	r2, [r3, #12]
 8000354:	611a      	str	r2, [r3, #16]
    g.Pull = GPIO_PULLUP;
 8000356:	2301      	movs	r3, #1
 8000358:	617b      	str	r3, [r7, #20]
    g.Mode = GPIO_MODE_OUTPUT_OD; // OD = open drain
 800035a:	2311      	movs	r3, #17
 800035c:	613b      	str	r3, [r7, #16]
    g.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800035e:	2303      	movs	r3, #3
 8000360:	61bb      	str	r3, [r7, #24]
    g.Pin = CLK_PIN;
 8000362:	2308      	movs	r3, #8
 8000364:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(CLK_PORT, &g);
 8000366:	f107 030c 	add.w	r3, r7, #12
 800036a:	4619      	mov	r1, r3
 800036c:	4809      	ldr	r0, [pc, #36]	; (8000394 <tm1637Init+0x84>)
 800036e:	f000 fb47 	bl	8000a00 <HAL_GPIO_Init>
    g.Pin = DIO_PIN;
 8000372:	2301      	movs	r3, #1
 8000374:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(DIO_PORT, &g);
 8000376:	f107 030c 	add.w	r3, r7, #12
 800037a:	4619      	mov	r1, r3
 800037c:	4805      	ldr	r0, [pc, #20]	; (8000394 <tm1637Init+0x84>)
 800037e:	f000 fb3f 	bl	8000a00 <HAL_GPIO_Init>

    tm1637SetBrightness(8);
 8000382:	2008      	movs	r0, #8
 8000384:	f000 f876 	bl	8000474 <tm1637SetBrightness>
}
 8000388:	bf00      	nop
 800038a:	3720      	adds	r7, #32
 800038c:	46bd      	mov	sp, r7
 800038e:	bd80      	pop	{r7, pc}
 8000390:	40021000 	.word	0x40021000
 8000394:	48000800 	.word	0x48000800

08000398 <tm1637DisplayDecimal>:

void tm1637DisplayDecimal(int v, int displaySeparator)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b086      	sub	sp, #24
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
 80003a0:	6039      	str	r1, [r7, #0]
    unsigned char digitArr[4];
    for (int i = 0; i < 4; ++i) {
 80003a2:	2300      	movs	r3, #0
 80003a4:	617b      	str	r3, [r7, #20]
 80003a6:	e032      	b.n	800040e <tm1637DisplayDecimal+0x76>
        digitArr[i] = segmentMap[v % 10];
 80003a8:	6879      	ldr	r1, [r7, #4]
 80003aa:	4b30      	ldr	r3, [pc, #192]	; (800046c <tm1637DisplayDecimal+0xd4>)
 80003ac:	fb83 2301 	smull	r2, r3, r3, r1
 80003b0:	109a      	asrs	r2, r3, #2
 80003b2:	17cb      	asrs	r3, r1, #31
 80003b4:	1ad2      	subs	r2, r2, r3
 80003b6:	4613      	mov	r3, r2
 80003b8:	009b      	lsls	r3, r3, #2
 80003ba:	4413      	add	r3, r2
 80003bc:	005b      	lsls	r3, r3, #1
 80003be:	1aca      	subs	r2, r1, r3
 80003c0:	4b2b      	ldr	r3, [pc, #172]	; (8000470 <tm1637DisplayDecimal+0xd8>)
 80003c2:	5c99      	ldrb	r1, [r3, r2]
 80003c4:	f107 020c 	add.w	r2, r7, #12
 80003c8:	697b      	ldr	r3, [r7, #20]
 80003ca:	4413      	add	r3, r2
 80003cc:	460a      	mov	r2, r1
 80003ce:	701a      	strb	r2, [r3, #0]
        if (i == 2 && displaySeparator) {
 80003d0:	697b      	ldr	r3, [r7, #20]
 80003d2:	2b02      	cmp	r3, #2
 80003d4:	d110      	bne.n	80003f8 <tm1637DisplayDecimal+0x60>
 80003d6:	683b      	ldr	r3, [r7, #0]
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d00d      	beq.n	80003f8 <tm1637DisplayDecimal+0x60>
            digitArr[i] |= 1 << 7;
 80003dc:	f107 020c 	add.w	r2, r7, #12
 80003e0:	697b      	ldr	r3, [r7, #20]
 80003e2:	4413      	add	r3, r2
 80003e4:	781b      	ldrb	r3, [r3, #0]
 80003e6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80003ea:	b2d9      	uxtb	r1, r3
 80003ec:	f107 020c 	add.w	r2, r7, #12
 80003f0:	697b      	ldr	r3, [r7, #20]
 80003f2:	4413      	add	r3, r2
 80003f4:	460a      	mov	r2, r1
 80003f6:	701a      	strb	r2, [r3, #0]
        }
        v /= 10;
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	4a1c      	ldr	r2, [pc, #112]	; (800046c <tm1637DisplayDecimal+0xd4>)
 80003fc:	fb82 1203 	smull	r1, r2, r2, r3
 8000400:	1092      	asrs	r2, r2, #2
 8000402:	17db      	asrs	r3, r3, #31
 8000404:	1ad3      	subs	r3, r2, r3
 8000406:	607b      	str	r3, [r7, #4]
    for (int i = 0; i < 4; ++i) {
 8000408:	697b      	ldr	r3, [r7, #20]
 800040a:	3301      	adds	r3, #1
 800040c:	617b      	str	r3, [r7, #20]
 800040e:	697b      	ldr	r3, [r7, #20]
 8000410:	2b03      	cmp	r3, #3
 8000412:	ddc9      	ble.n	80003a8 <tm1637DisplayDecimal+0x10>
    }

    _tm1637Start();
 8000414:	f000 f843 	bl	800049e <_tm1637Start>
    _tm1637WriteByte(0x40);
 8000418:	2040      	movs	r0, #64	; 0x40
 800041a:	f000 f872 	bl	8000502 <_tm1637WriteByte>
    _tm1637ReadResult();
 800041e:	f000 f860 	bl	80004e2 <_tm1637ReadResult>
    _tm1637Stop();
 8000422:	f000 f849 	bl	80004b8 <_tm1637Stop>

    _tm1637Start();
 8000426:	f000 f83a 	bl	800049e <_tm1637Start>
    _tm1637WriteByte(0xc0);
 800042a:	20c0      	movs	r0, #192	; 0xc0
 800042c:	f000 f869 	bl	8000502 <_tm1637WriteByte>
    _tm1637ReadResult();
 8000430:	f000 f857 	bl	80004e2 <_tm1637ReadResult>

    for (int i = 0; i < 4; ++i) {
 8000434:	2300      	movs	r3, #0
 8000436:	613b      	str	r3, [r7, #16]
 8000438:	e00f      	b.n	800045a <tm1637DisplayDecimal+0xc2>
        _tm1637WriteByte(digitArr[3 - i]);
 800043a:	693b      	ldr	r3, [r7, #16]
 800043c:	f1c3 0303 	rsb	r3, r3, #3
 8000440:	f107 0218 	add.w	r2, r7, #24
 8000444:	4413      	add	r3, r2
 8000446:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800044a:	4618      	mov	r0, r3
 800044c:	f000 f859 	bl	8000502 <_tm1637WriteByte>
        _tm1637ReadResult();
 8000450:	f000 f847 	bl	80004e2 <_tm1637ReadResult>
    for (int i = 0; i < 4; ++i) {
 8000454:	693b      	ldr	r3, [r7, #16]
 8000456:	3301      	adds	r3, #1
 8000458:	613b      	str	r3, [r7, #16]
 800045a:	693b      	ldr	r3, [r7, #16]
 800045c:	2b03      	cmp	r3, #3
 800045e:	ddec      	ble.n	800043a <tm1637DisplayDecimal+0xa2>
    }

    _tm1637Stop();
 8000460:	f000 f82a 	bl	80004b8 <_tm1637Stop>
}
 8000464:	bf00      	nop
 8000466:	3718      	adds	r7, #24
 8000468:	46bd      	mov	sp, r7
 800046a:	bd80      	pop	{r7, pc}
 800046c:	66666667 	.word	0x66666667
 8000470:	08001a7c 	.word	0x08001a7c

08000474 <tm1637SetBrightness>:

// Valid brightness values: 0 - 8.
// 0 = display off.
void tm1637SetBrightness(char brightness)
{
 8000474:	b580      	push	{r7, lr}
 8000476:	b082      	sub	sp, #8
 8000478:	af00      	add	r7, sp, #0
 800047a:	4603      	mov	r3, r0
 800047c:	71fb      	strb	r3, [r7, #7]
    // Brightness command:
    // 1000 0XXX = display off
    // 1000 1BBB = display on, brightness 0-7
    // X = don't care
    // B = brightness
    _tm1637Start();
 800047e:	f000 f80e 	bl	800049e <_tm1637Start>
    _tm1637WriteByte(0x87 + brightness);
 8000482:	79fb      	ldrb	r3, [r7, #7]
 8000484:	3b79      	subs	r3, #121	; 0x79
 8000486:	b2db      	uxtb	r3, r3
 8000488:	4618      	mov	r0, r3
 800048a:	f000 f83a 	bl	8000502 <_tm1637WriteByte>
    _tm1637ReadResult();
 800048e:	f000 f828 	bl	80004e2 <_tm1637ReadResult>
    _tm1637Stop();
 8000492:	f000 f811 	bl	80004b8 <_tm1637Stop>
}
 8000496:	bf00      	nop
 8000498:	3708      	adds	r7, #8
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}

0800049e <_tm1637Start>:

void _tm1637Start(void)
{
 800049e:	b580      	push	{r7, lr}
 80004a0:	af00      	add	r7, sp, #0
    _tm1637ClkHigh();
 80004a2:	f000 f875 	bl	8000590 <_tm1637ClkHigh>
    _tm1637DioHigh();
 80004a6:	f000 f88b 	bl	80005c0 <_tm1637DioHigh>
    _tm1637DelayUsec(2);
 80004aa:	2002      	movs	r0, #2
 80004ac:	f000 f853 	bl	8000556 <_tm1637DelayUsec>
    _tm1637DioLow();
 80004b0:	f000 f892 	bl	80005d8 <_tm1637DioLow>
}
 80004b4:	bf00      	nop
 80004b6:	bd80      	pop	{r7, pc}

080004b8 <_tm1637Stop>:

void _tm1637Stop(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
    _tm1637ClkLow();
 80004bc:	f000 f874 	bl	80005a8 <_tm1637ClkLow>
    _tm1637DelayUsec(2);
 80004c0:	2002      	movs	r0, #2
 80004c2:	f000 f848 	bl	8000556 <_tm1637DelayUsec>
    _tm1637DioLow();
 80004c6:	f000 f887 	bl	80005d8 <_tm1637DioLow>
    _tm1637DelayUsec(2);
 80004ca:	2002      	movs	r0, #2
 80004cc:	f000 f843 	bl	8000556 <_tm1637DelayUsec>
    _tm1637ClkHigh();
 80004d0:	f000 f85e 	bl	8000590 <_tm1637ClkHigh>
    _tm1637DelayUsec(2);
 80004d4:	2002      	movs	r0, #2
 80004d6:	f000 f83e 	bl	8000556 <_tm1637DelayUsec>
    _tm1637DioHigh();
 80004da:	f000 f871 	bl	80005c0 <_tm1637DioHigh>
}
 80004de:	bf00      	nop
 80004e0:	bd80      	pop	{r7, pc}

080004e2 <_tm1637ReadResult>:

void _tm1637ReadResult(void)
{
 80004e2:	b580      	push	{r7, lr}
 80004e4:	af00      	add	r7, sp, #0
    _tm1637ClkLow();
 80004e6:	f000 f85f 	bl	80005a8 <_tm1637ClkLow>
    _tm1637DelayUsec(5);
 80004ea:	2005      	movs	r0, #5
 80004ec:	f000 f833 	bl	8000556 <_tm1637DelayUsec>
    // while (dio); // We're cheating here and not actually reading back the response.
    _tm1637ClkHigh();
 80004f0:	f000 f84e 	bl	8000590 <_tm1637ClkHigh>
    _tm1637DelayUsec(2);
 80004f4:	2002      	movs	r0, #2
 80004f6:	f000 f82e 	bl	8000556 <_tm1637DelayUsec>
    _tm1637ClkLow();
 80004fa:	f000 f855 	bl	80005a8 <_tm1637ClkLow>
}
 80004fe:	bf00      	nop
 8000500:	bd80      	pop	{r7, pc}

08000502 <_tm1637WriteByte>:

void _tm1637WriteByte(unsigned char b)
{
 8000502:	b580      	push	{r7, lr}
 8000504:	b084      	sub	sp, #16
 8000506:	af00      	add	r7, sp, #0
 8000508:	4603      	mov	r3, r0
 800050a:	71fb      	strb	r3, [r7, #7]
    for (int i = 0; i < 8; ++i) {
 800050c:	2300      	movs	r3, #0
 800050e:	60fb      	str	r3, [r7, #12]
 8000510:	e019      	b.n	8000546 <_tm1637WriteByte+0x44>
        _tm1637ClkLow();
 8000512:	f000 f849 	bl	80005a8 <_tm1637ClkLow>
        if (b & 0x01) {
 8000516:	79fb      	ldrb	r3, [r7, #7]
 8000518:	f003 0301 	and.w	r3, r3, #1
 800051c:	2b00      	cmp	r3, #0
 800051e:	d002      	beq.n	8000526 <_tm1637WriteByte+0x24>
            _tm1637DioHigh();
 8000520:	f000 f84e 	bl	80005c0 <_tm1637DioHigh>
 8000524:	e001      	b.n	800052a <_tm1637WriteByte+0x28>
        }
        else {
            _tm1637DioLow();
 8000526:	f000 f857 	bl	80005d8 <_tm1637DioLow>
        }
        _tm1637DelayUsec(3);
 800052a:	2003      	movs	r0, #3
 800052c:	f000 f813 	bl	8000556 <_tm1637DelayUsec>
        b >>= 1;
 8000530:	79fb      	ldrb	r3, [r7, #7]
 8000532:	085b      	lsrs	r3, r3, #1
 8000534:	71fb      	strb	r3, [r7, #7]
        _tm1637ClkHigh();
 8000536:	f000 f82b 	bl	8000590 <_tm1637ClkHigh>
        _tm1637DelayUsec(3);
 800053a:	2003      	movs	r0, #3
 800053c:	f000 f80b 	bl	8000556 <_tm1637DelayUsec>
    for (int i = 0; i < 8; ++i) {
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	3301      	adds	r3, #1
 8000544:	60fb      	str	r3, [r7, #12]
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	2b07      	cmp	r3, #7
 800054a:	dde2      	ble.n	8000512 <_tm1637WriteByte+0x10>
    }
}
 800054c:	bf00      	nop
 800054e:	bf00      	nop
 8000550:	3710      	adds	r7, #16
 8000552:	46bd      	mov	sp, r7
 8000554:	bd80      	pop	{r7, pc}

08000556 <_tm1637DelayUsec>:

void _tm1637DelayUsec(unsigned int i)
{
 8000556:	b480      	push	{r7}
 8000558:	b085      	sub	sp, #20
 800055a:	af00      	add	r7, sp, #0
 800055c:	6078      	str	r0, [r7, #4]
    for (; i>0; i--) {
 800055e:	e00c      	b.n	800057a <_tm1637DelayUsec+0x24>
        for (int j = 0; j < 10; ++j) {
 8000560:	2300      	movs	r3, #0
 8000562:	60fb      	str	r3, [r7, #12]
 8000564:	e003      	b.n	800056e <_tm1637DelayUsec+0x18>
            __asm__ __volatile__("nop\n\t":::"memory");
 8000566:	bf00      	nop
        for (int j = 0; j < 10; ++j) {
 8000568:	68fb      	ldr	r3, [r7, #12]
 800056a:	3301      	adds	r3, #1
 800056c:	60fb      	str	r3, [r7, #12]
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	2b09      	cmp	r3, #9
 8000572:	ddf8      	ble.n	8000566 <_tm1637DelayUsec+0x10>
    for (; i>0; i--) {
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	3b01      	subs	r3, #1
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	2b00      	cmp	r3, #0
 800057e:	d1ef      	bne.n	8000560 <_tm1637DelayUsec+0xa>
        }
    }
}
 8000580:	bf00      	nop
 8000582:	bf00      	nop
 8000584:	3714      	adds	r7, #20
 8000586:	46bd      	mov	sp, r7
 8000588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058c:	4770      	bx	lr
	...

08000590 <_tm1637ClkHigh>:

void _tm1637ClkHigh(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CLK_PORT, CLK_PIN, GPIO_PIN_SET);
 8000594:	2201      	movs	r2, #1
 8000596:	2108      	movs	r1, #8
 8000598:	4802      	ldr	r0, [pc, #8]	; (80005a4 <_tm1637ClkHigh+0x14>)
 800059a:	f000 fbdb 	bl	8000d54 <HAL_GPIO_WritePin>
}
 800059e:	bf00      	nop
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	48000800 	.word	0x48000800

080005a8 <_tm1637ClkLow>:

void _tm1637ClkLow(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CLK_PORT, CLK_PIN, GPIO_PIN_RESET);
 80005ac:	2200      	movs	r2, #0
 80005ae:	2108      	movs	r1, #8
 80005b0:	4802      	ldr	r0, [pc, #8]	; (80005bc <_tm1637ClkLow+0x14>)
 80005b2:	f000 fbcf 	bl	8000d54 <HAL_GPIO_WritePin>
}
 80005b6:	bf00      	nop
 80005b8:	bd80      	pop	{r7, pc}
 80005ba:	bf00      	nop
 80005bc:	48000800 	.word	0x48000800

080005c0 <_tm1637DioHigh>:

void _tm1637DioHigh(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(DIO_PORT, DIO_PIN, GPIO_PIN_SET);
 80005c4:	2201      	movs	r2, #1
 80005c6:	2101      	movs	r1, #1
 80005c8:	4802      	ldr	r0, [pc, #8]	; (80005d4 <_tm1637DioHigh+0x14>)
 80005ca:	f000 fbc3 	bl	8000d54 <HAL_GPIO_WritePin>
}
 80005ce:	bf00      	nop
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	48000800 	.word	0x48000800

080005d8 <_tm1637DioLow>:

void _tm1637DioLow(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(DIO_PORT, DIO_PIN, GPIO_PIN_RESET);
 80005dc:	2200      	movs	r2, #0
 80005de:	2101      	movs	r1, #1
 80005e0:	4802      	ldr	r0, [pc, #8]	; (80005ec <_tm1637DioLow+0x14>)
 80005e2:	f000 fbb7 	bl	8000d54 <HAL_GPIO_WritePin>
}
 80005e6:	bf00      	nop
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	48000800 	.word	0x48000800

080005f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005f6:	4b0f      	ldr	r3, [pc, #60]	; (8000634 <HAL_MspInit+0x44>)
 80005f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005fa:	4a0e      	ldr	r2, [pc, #56]	; (8000634 <HAL_MspInit+0x44>)
 80005fc:	f043 0301 	orr.w	r3, r3, #1
 8000600:	6613      	str	r3, [r2, #96]	; 0x60
 8000602:	4b0c      	ldr	r3, [pc, #48]	; (8000634 <HAL_MspInit+0x44>)
 8000604:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000606:	f003 0301 	and.w	r3, r3, #1
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800060e:	4b09      	ldr	r3, [pc, #36]	; (8000634 <HAL_MspInit+0x44>)
 8000610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000612:	4a08      	ldr	r2, [pc, #32]	; (8000634 <HAL_MspInit+0x44>)
 8000614:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000618:	6593      	str	r3, [r2, #88]	; 0x58
 800061a:	4b06      	ldr	r3, [pc, #24]	; (8000634 <HAL_MspInit+0x44>)
 800061c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800061e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000622:	603b      	str	r3, [r7, #0]
 8000624:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000626:	bf00      	nop
 8000628:	370c      	adds	r7, #12
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	40021000 	.word	0x40021000

08000638 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800063c:	e7fe      	b.n	800063c <NMI_Handler+0x4>

0800063e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800063e:	b480      	push	{r7}
 8000640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000642:	e7fe      	b.n	8000642 <HardFault_Handler+0x4>

08000644 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000648:	e7fe      	b.n	8000648 <MemManage_Handler+0x4>

0800064a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800064a:	b480      	push	{r7}
 800064c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800064e:	e7fe      	b.n	800064e <BusFault_Handler+0x4>

08000650 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000654:	e7fe      	b.n	8000654 <UsageFault_Handler+0x4>

08000656 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000656:	b480      	push	{r7}
 8000658:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800065a:	bf00      	nop
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr

08000664 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000668:	bf00      	nop
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr

08000672 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000672:	b480      	push	{r7}
 8000674:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000676:	bf00      	nop
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr

08000680 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000684:	f000 f892 	bl	80007ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000688:	bf00      	nop
 800068a:	bd80      	pop	{r7, pc}

0800068c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000690:	4b06      	ldr	r3, [pc, #24]	; (80006ac <SystemInit+0x20>)
 8000692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000696:	4a05      	ldr	r2, [pc, #20]	; (80006ac <SystemInit+0x20>)
 8000698:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800069c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80006a0:	bf00      	nop
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	e000ed00 	.word	0xe000ed00

080006b0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80006b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80006e8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006b4:	f7ff ffea 	bl	800068c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006b8:	480c      	ldr	r0, [pc, #48]	; (80006ec <LoopForever+0x6>)
  ldr r1, =_edata
 80006ba:	490d      	ldr	r1, [pc, #52]	; (80006f0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006bc:	4a0d      	ldr	r2, [pc, #52]	; (80006f4 <LoopForever+0xe>)
  movs r3, #0
 80006be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006c0:	e002      	b.n	80006c8 <LoopCopyDataInit>

080006c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006c6:	3304      	adds	r3, #4

080006c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006cc:	d3f9      	bcc.n	80006c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ce:	4a0a      	ldr	r2, [pc, #40]	; (80006f8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006d0:	4c0a      	ldr	r4, [pc, #40]	; (80006fc <LoopForever+0x16>)
  movs r3, #0
 80006d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006d4:	e001      	b.n	80006da <LoopFillZerobss>

080006d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006d8:	3204      	adds	r2, #4

080006da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006dc:	d3fb      	bcc.n	80006d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006de:	f001 f995 	bl	8001a0c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006e2:	f7ff fd71 	bl	80001c8 <main>

080006e6 <LoopForever>:

LoopForever:
    b LoopForever
 80006e6:	e7fe      	b.n	80006e6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80006e8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80006ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006f0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80006f4:	08001ad8 	.word	0x08001ad8
  ldr r2, =_sbss
 80006f8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80006fc:	2000002c 	.word	0x2000002c

08000700 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000700:	e7fe      	b.n	8000700 <ADC1_2_IRQHandler>

08000702 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000702:	b580      	push	{r7, lr}
 8000704:	b082      	sub	sp, #8
 8000706:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000708:	2300      	movs	r3, #0
 800070a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800070c:	2003      	movs	r0, #3
 800070e:	f000 f943 	bl	8000998 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000712:	200f      	movs	r0, #15
 8000714:	f000 f80e 	bl	8000734 <HAL_InitTick>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d002      	beq.n	8000724 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800071e:	2301      	movs	r3, #1
 8000720:	71fb      	strb	r3, [r7, #7]
 8000722:	e001      	b.n	8000728 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000724:	f7ff ff64 	bl	80005f0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000728:	79fb      	ldrb	r3, [r7, #7]
}
 800072a:	4618      	mov	r0, r3
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
	...

08000734 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800073c:	2300      	movs	r3, #0
 800073e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000740:	4b17      	ldr	r3, [pc, #92]	; (80007a0 <HAL_InitTick+0x6c>)
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d023      	beq.n	8000790 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000748:	4b16      	ldr	r3, [pc, #88]	; (80007a4 <HAL_InitTick+0x70>)
 800074a:	681a      	ldr	r2, [r3, #0]
 800074c:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <HAL_InitTick+0x6c>)
 800074e:	781b      	ldrb	r3, [r3, #0]
 8000750:	4619      	mov	r1, r3
 8000752:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000756:	fbb3 f3f1 	udiv	r3, r3, r1
 800075a:	fbb2 f3f3 	udiv	r3, r2, r3
 800075e:	4618      	mov	r0, r3
 8000760:	f000 f941 	bl	80009e6 <HAL_SYSTICK_Config>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d10f      	bne.n	800078a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	2b0f      	cmp	r3, #15
 800076e:	d809      	bhi.n	8000784 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000770:	2200      	movs	r2, #0
 8000772:	6879      	ldr	r1, [r7, #4]
 8000774:	f04f 30ff 	mov.w	r0, #4294967295
 8000778:	f000 f919 	bl	80009ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800077c:	4a0a      	ldr	r2, [pc, #40]	; (80007a8 <HAL_InitTick+0x74>)
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	6013      	str	r3, [r2, #0]
 8000782:	e007      	b.n	8000794 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000784:	2301      	movs	r3, #1
 8000786:	73fb      	strb	r3, [r7, #15]
 8000788:	e004      	b.n	8000794 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800078a:	2301      	movs	r3, #1
 800078c:	73fb      	strb	r3, [r7, #15]
 800078e:	e001      	b.n	8000794 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000790:	2301      	movs	r3, #1
 8000792:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000794:	7bfb      	ldrb	r3, [r7, #15]
}
 8000796:	4618      	mov	r0, r3
 8000798:	3710      	adds	r7, #16
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20000008 	.word	0x20000008
 80007a4:	20000000 	.word	0x20000000
 80007a8:	20000004 	.word	0x20000004

080007ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80007b0:	4b06      	ldr	r3, [pc, #24]	; (80007cc <HAL_IncTick+0x20>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	461a      	mov	r2, r3
 80007b6:	4b06      	ldr	r3, [pc, #24]	; (80007d0 <HAL_IncTick+0x24>)
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	4413      	add	r3, r2
 80007bc:	4a04      	ldr	r2, [pc, #16]	; (80007d0 <HAL_IncTick+0x24>)
 80007be:	6013      	str	r3, [r2, #0]
}
 80007c0:	bf00      	nop
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	20000008 	.word	0x20000008
 80007d0:	20000028 	.word	0x20000028

080007d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  return uwTick;
 80007d8:	4b03      	ldr	r3, [pc, #12]	; (80007e8 <HAL_GetTick+0x14>)
 80007da:	681b      	ldr	r3, [r3, #0]
}
 80007dc:	4618      	mov	r0, r3
 80007de:	46bd      	mov	sp, r7
 80007e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop
 80007e8:	20000028 	.word	0x20000028

080007ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80007f4:	f7ff ffee 	bl	80007d4 <HAL_GetTick>
 80007f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000804:	d005      	beq.n	8000812 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000806:	4b0a      	ldr	r3, [pc, #40]	; (8000830 <HAL_Delay+0x44>)
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	461a      	mov	r2, r3
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	4413      	add	r3, r2
 8000810:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000812:	bf00      	nop
 8000814:	f7ff ffde 	bl	80007d4 <HAL_GetTick>
 8000818:	4602      	mov	r2, r0
 800081a:	68bb      	ldr	r3, [r7, #8]
 800081c:	1ad3      	subs	r3, r2, r3
 800081e:	68fa      	ldr	r2, [r7, #12]
 8000820:	429a      	cmp	r2, r3
 8000822:	d8f7      	bhi.n	8000814 <HAL_Delay+0x28>
  {
  }
}
 8000824:	bf00      	nop
 8000826:	bf00      	nop
 8000828:	3710      	adds	r7, #16
 800082a:	46bd      	mov	sp, r7
 800082c:	bd80      	pop	{r7, pc}
 800082e:	bf00      	nop
 8000830:	20000008 	.word	0x20000008

08000834 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000834:	b480      	push	{r7}
 8000836:	b085      	sub	sp, #20
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	f003 0307 	and.w	r3, r3, #7
 8000842:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000844:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <__NVIC_SetPriorityGrouping+0x44>)
 8000846:	68db      	ldr	r3, [r3, #12]
 8000848:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800084a:	68ba      	ldr	r2, [r7, #8]
 800084c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000850:	4013      	ands	r3, r2
 8000852:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000858:	68bb      	ldr	r3, [r7, #8]
 800085a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800085c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000860:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000864:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000866:	4a04      	ldr	r2, [pc, #16]	; (8000878 <__NVIC_SetPriorityGrouping+0x44>)
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	60d3      	str	r3, [r2, #12]
}
 800086c:	bf00      	nop
 800086e:	3714      	adds	r7, #20
 8000870:	46bd      	mov	sp, r7
 8000872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000876:	4770      	bx	lr
 8000878:	e000ed00 	.word	0xe000ed00

0800087c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000880:	4b04      	ldr	r3, [pc, #16]	; (8000894 <__NVIC_GetPriorityGrouping+0x18>)
 8000882:	68db      	ldr	r3, [r3, #12]
 8000884:	0a1b      	lsrs	r3, r3, #8
 8000886:	f003 0307 	and.w	r3, r3, #7
}
 800088a:	4618      	mov	r0, r3
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr
 8000894:	e000ed00 	.word	0xe000ed00

08000898 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000898:	b480      	push	{r7}
 800089a:	b083      	sub	sp, #12
 800089c:	af00      	add	r7, sp, #0
 800089e:	4603      	mov	r3, r0
 80008a0:	6039      	str	r1, [r7, #0]
 80008a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	db0a      	blt.n	80008c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	b2da      	uxtb	r2, r3
 80008b0:	490c      	ldr	r1, [pc, #48]	; (80008e4 <__NVIC_SetPriority+0x4c>)
 80008b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b6:	0112      	lsls	r2, r2, #4
 80008b8:	b2d2      	uxtb	r2, r2
 80008ba:	440b      	add	r3, r1
 80008bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008c0:	e00a      	b.n	80008d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	b2da      	uxtb	r2, r3
 80008c6:	4908      	ldr	r1, [pc, #32]	; (80008e8 <__NVIC_SetPriority+0x50>)
 80008c8:	79fb      	ldrb	r3, [r7, #7]
 80008ca:	f003 030f 	and.w	r3, r3, #15
 80008ce:	3b04      	subs	r3, #4
 80008d0:	0112      	lsls	r2, r2, #4
 80008d2:	b2d2      	uxtb	r2, r2
 80008d4:	440b      	add	r3, r1
 80008d6:	761a      	strb	r2, [r3, #24]
}
 80008d8:	bf00      	nop
 80008da:	370c      	adds	r7, #12
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr
 80008e4:	e000e100 	.word	0xe000e100
 80008e8:	e000ed00 	.word	0xe000ed00

080008ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b089      	sub	sp, #36	; 0x24
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	60f8      	str	r0, [r7, #12]
 80008f4:	60b9      	str	r1, [r7, #8]
 80008f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	f003 0307 	and.w	r3, r3, #7
 80008fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000900:	69fb      	ldr	r3, [r7, #28]
 8000902:	f1c3 0307 	rsb	r3, r3, #7
 8000906:	2b04      	cmp	r3, #4
 8000908:	bf28      	it	cs
 800090a:	2304      	movcs	r3, #4
 800090c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800090e:	69fb      	ldr	r3, [r7, #28]
 8000910:	3304      	adds	r3, #4
 8000912:	2b06      	cmp	r3, #6
 8000914:	d902      	bls.n	800091c <NVIC_EncodePriority+0x30>
 8000916:	69fb      	ldr	r3, [r7, #28]
 8000918:	3b03      	subs	r3, #3
 800091a:	e000      	b.n	800091e <NVIC_EncodePriority+0x32>
 800091c:	2300      	movs	r3, #0
 800091e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000920:	f04f 32ff 	mov.w	r2, #4294967295
 8000924:	69bb      	ldr	r3, [r7, #24]
 8000926:	fa02 f303 	lsl.w	r3, r2, r3
 800092a:	43da      	mvns	r2, r3
 800092c:	68bb      	ldr	r3, [r7, #8]
 800092e:	401a      	ands	r2, r3
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000934:	f04f 31ff 	mov.w	r1, #4294967295
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	fa01 f303 	lsl.w	r3, r1, r3
 800093e:	43d9      	mvns	r1, r3
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000944:	4313      	orrs	r3, r2
         );
}
 8000946:	4618      	mov	r0, r3
 8000948:	3724      	adds	r7, #36	; 0x24
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr
	...

08000954 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	3b01      	subs	r3, #1
 8000960:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000964:	d301      	bcc.n	800096a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000966:	2301      	movs	r3, #1
 8000968:	e00f      	b.n	800098a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800096a:	4a0a      	ldr	r2, [pc, #40]	; (8000994 <SysTick_Config+0x40>)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	3b01      	subs	r3, #1
 8000970:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000972:	210f      	movs	r1, #15
 8000974:	f04f 30ff 	mov.w	r0, #4294967295
 8000978:	f7ff ff8e 	bl	8000898 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800097c:	4b05      	ldr	r3, [pc, #20]	; (8000994 <SysTick_Config+0x40>)
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000982:	4b04      	ldr	r3, [pc, #16]	; (8000994 <SysTick_Config+0x40>)
 8000984:	2207      	movs	r2, #7
 8000986:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000988:	2300      	movs	r3, #0
}
 800098a:	4618      	mov	r0, r3
 800098c:	3708      	adds	r7, #8
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	e000e010 	.word	0xe000e010

08000998 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009a0:	6878      	ldr	r0, [r7, #4]
 80009a2:	f7ff ff47 	bl	8000834 <__NVIC_SetPriorityGrouping>
}
 80009a6:	bf00      	nop
 80009a8:	3708      	adds	r7, #8
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}

080009ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009ae:	b580      	push	{r7, lr}
 80009b0:	b086      	sub	sp, #24
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	4603      	mov	r3, r0
 80009b6:	60b9      	str	r1, [r7, #8]
 80009b8:	607a      	str	r2, [r7, #4]
 80009ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80009bc:	2300      	movs	r3, #0
 80009be:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80009c0:	f7ff ff5c 	bl	800087c <__NVIC_GetPriorityGrouping>
 80009c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009c6:	687a      	ldr	r2, [r7, #4]
 80009c8:	68b9      	ldr	r1, [r7, #8]
 80009ca:	6978      	ldr	r0, [r7, #20]
 80009cc:	f7ff ff8e 	bl	80008ec <NVIC_EncodePriority>
 80009d0:	4602      	mov	r2, r0
 80009d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009d6:	4611      	mov	r1, r2
 80009d8:	4618      	mov	r0, r3
 80009da:	f7ff ff5d 	bl	8000898 <__NVIC_SetPriority>
}
 80009de:	bf00      	nop
 80009e0:	3718      	adds	r7, #24
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}

080009e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009e6:	b580      	push	{r7, lr}
 80009e8:	b082      	sub	sp, #8
 80009ea:	af00      	add	r7, sp, #0
 80009ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009ee:	6878      	ldr	r0, [r7, #4]
 80009f0:	f7ff ffb0 	bl	8000954 <SysTick_Config>
 80009f4:	4603      	mov	r3, r0
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
	...

08000a00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b087      	sub	sp, #28
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
 8000a08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a0e:	e17f      	b.n	8000d10 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	681a      	ldr	r2, [r3, #0]
 8000a14:	2101      	movs	r1, #1
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	fa01 f303 	lsl.w	r3, r1, r3
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	f000 8171 	beq.w	8000d0a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	f003 0303 	and.w	r3, r3, #3
 8000a30:	2b01      	cmp	r3, #1
 8000a32:	d005      	beq.n	8000a40 <HAL_GPIO_Init+0x40>
 8000a34:	683b      	ldr	r3, [r7, #0]
 8000a36:	685b      	ldr	r3, [r3, #4]
 8000a38:	f003 0303 	and.w	r3, r3, #3
 8000a3c:	2b02      	cmp	r3, #2
 8000a3e:	d130      	bne.n	8000aa2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	689b      	ldr	r3, [r3, #8]
 8000a44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	005b      	lsls	r3, r3, #1
 8000a4a:	2203      	movs	r2, #3
 8000a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a50:	43db      	mvns	r3, r3
 8000a52:	693a      	ldr	r2, [r7, #16]
 8000a54:	4013      	ands	r3, r2
 8000a56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a58:	683b      	ldr	r3, [r7, #0]
 8000a5a:	68da      	ldr	r2, [r3, #12]
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	fa02 f303 	lsl.w	r3, r2, r3
 8000a64:	693a      	ldr	r2, [r7, #16]
 8000a66:	4313      	orrs	r3, r2
 8000a68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	693a      	ldr	r2, [r7, #16]
 8000a6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	685b      	ldr	r3, [r3, #4]
 8000a74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a76:	2201      	movs	r2, #1
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7e:	43db      	mvns	r3, r3
 8000a80:	693a      	ldr	r2, [r7, #16]
 8000a82:	4013      	ands	r3, r2
 8000a84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	685b      	ldr	r3, [r3, #4]
 8000a8a:	091b      	lsrs	r3, r3, #4
 8000a8c:	f003 0201 	and.w	r2, r3, #1
 8000a90:	697b      	ldr	r3, [r7, #20]
 8000a92:	fa02 f303 	lsl.w	r3, r2, r3
 8000a96:	693a      	ldr	r2, [r7, #16]
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	693a      	ldr	r2, [r7, #16]
 8000aa0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	f003 0303 	and.w	r3, r3, #3
 8000aaa:	2b03      	cmp	r3, #3
 8000aac:	d118      	bne.n	8000ae0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ab2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8000abc:	43db      	mvns	r3, r3
 8000abe:	693a      	ldr	r2, [r7, #16]
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000ac4:	683b      	ldr	r3, [r7, #0]
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	08db      	lsrs	r3, r3, #3
 8000aca:	f003 0201 	and.w	r2, r3, #1
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad4:	693a      	ldr	r2, [r7, #16]
 8000ad6:	4313      	orrs	r3, r2
 8000ad8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	693a      	ldr	r2, [r7, #16]
 8000ade:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	f003 0303 	and.w	r3, r3, #3
 8000ae8:	2b03      	cmp	r3, #3
 8000aea:	d017      	beq.n	8000b1c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	005b      	lsls	r3, r3, #1
 8000af6:	2203      	movs	r2, #3
 8000af8:	fa02 f303 	lsl.w	r3, r2, r3
 8000afc:	43db      	mvns	r3, r3
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	4013      	ands	r3, r2
 8000b02:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	689a      	ldr	r2, [r3, #8]
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	005b      	lsls	r3, r3, #1
 8000b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b10:	693a      	ldr	r2, [r7, #16]
 8000b12:	4313      	orrs	r3, r2
 8000b14:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	693a      	ldr	r2, [r7, #16]
 8000b1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	f003 0303 	and.w	r3, r3, #3
 8000b24:	2b02      	cmp	r3, #2
 8000b26:	d123      	bne.n	8000b70 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	08da      	lsrs	r2, r3, #3
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	3208      	adds	r2, #8
 8000b30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b34:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	f003 0307 	and.w	r3, r3, #7
 8000b3c:	009b      	lsls	r3, r3, #2
 8000b3e:	220f      	movs	r2, #15
 8000b40:	fa02 f303 	lsl.w	r3, r2, r3
 8000b44:	43db      	mvns	r3, r3
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	4013      	ands	r3, r2
 8000b4a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	691a      	ldr	r2, [r3, #16]
 8000b50:	697b      	ldr	r3, [r7, #20]
 8000b52:	f003 0307 	and.w	r3, r3, #7
 8000b56:	009b      	lsls	r3, r3, #2
 8000b58:	fa02 f303 	lsl.w	r3, r2, r3
 8000b5c:	693a      	ldr	r2, [r7, #16]
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	08da      	lsrs	r2, r3, #3
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	3208      	adds	r2, #8
 8000b6a:	6939      	ldr	r1, [r7, #16]
 8000b6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000b76:	697b      	ldr	r3, [r7, #20]
 8000b78:	005b      	lsls	r3, r3, #1
 8000b7a:	2203      	movs	r2, #3
 8000b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000b80:	43db      	mvns	r3, r3
 8000b82:	693a      	ldr	r2, [r7, #16]
 8000b84:	4013      	ands	r3, r2
 8000b86:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	f003 0203 	and.w	r2, r3, #3
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	005b      	lsls	r3, r3, #1
 8000b94:	fa02 f303 	lsl.w	r3, r2, r3
 8000b98:	693a      	ldr	r2, [r7, #16]
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	693a      	ldr	r2, [r7, #16]
 8000ba2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	f000 80ac 	beq.w	8000d0a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb2:	4b5f      	ldr	r3, [pc, #380]	; (8000d30 <HAL_GPIO_Init+0x330>)
 8000bb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bb6:	4a5e      	ldr	r2, [pc, #376]	; (8000d30 <HAL_GPIO_Init+0x330>)
 8000bb8:	f043 0301 	orr.w	r3, r3, #1
 8000bbc:	6613      	str	r3, [r2, #96]	; 0x60
 8000bbe:	4b5c      	ldr	r3, [pc, #368]	; (8000d30 <HAL_GPIO_Init+0x330>)
 8000bc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bc2:	f003 0301 	and.w	r3, r3, #1
 8000bc6:	60bb      	str	r3, [r7, #8]
 8000bc8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000bca:	4a5a      	ldr	r2, [pc, #360]	; (8000d34 <HAL_GPIO_Init+0x334>)
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	089b      	lsrs	r3, r3, #2
 8000bd0:	3302      	adds	r3, #2
 8000bd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bd6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	f003 0303 	and.w	r3, r3, #3
 8000bde:	009b      	lsls	r3, r3, #2
 8000be0:	220f      	movs	r2, #15
 8000be2:	fa02 f303 	lsl.w	r3, r2, r3
 8000be6:	43db      	mvns	r3, r3
 8000be8:	693a      	ldr	r2, [r7, #16]
 8000bea:	4013      	ands	r3, r2
 8000bec:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000bf4:	d025      	beq.n	8000c42 <HAL_GPIO_Init+0x242>
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4a4f      	ldr	r2, [pc, #316]	; (8000d38 <HAL_GPIO_Init+0x338>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d01f      	beq.n	8000c3e <HAL_GPIO_Init+0x23e>
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4a4e      	ldr	r2, [pc, #312]	; (8000d3c <HAL_GPIO_Init+0x33c>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d019      	beq.n	8000c3a <HAL_GPIO_Init+0x23a>
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4a4d      	ldr	r2, [pc, #308]	; (8000d40 <HAL_GPIO_Init+0x340>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d013      	beq.n	8000c36 <HAL_GPIO_Init+0x236>
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4a4c      	ldr	r2, [pc, #304]	; (8000d44 <HAL_GPIO_Init+0x344>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d00d      	beq.n	8000c32 <HAL_GPIO_Init+0x232>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	4a4b      	ldr	r2, [pc, #300]	; (8000d48 <HAL_GPIO_Init+0x348>)
 8000c1a:	4293      	cmp	r3, r2
 8000c1c:	d007      	beq.n	8000c2e <HAL_GPIO_Init+0x22e>
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4a4a      	ldr	r2, [pc, #296]	; (8000d4c <HAL_GPIO_Init+0x34c>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d101      	bne.n	8000c2a <HAL_GPIO_Init+0x22a>
 8000c26:	2306      	movs	r3, #6
 8000c28:	e00c      	b.n	8000c44 <HAL_GPIO_Init+0x244>
 8000c2a:	2307      	movs	r3, #7
 8000c2c:	e00a      	b.n	8000c44 <HAL_GPIO_Init+0x244>
 8000c2e:	2305      	movs	r3, #5
 8000c30:	e008      	b.n	8000c44 <HAL_GPIO_Init+0x244>
 8000c32:	2304      	movs	r3, #4
 8000c34:	e006      	b.n	8000c44 <HAL_GPIO_Init+0x244>
 8000c36:	2303      	movs	r3, #3
 8000c38:	e004      	b.n	8000c44 <HAL_GPIO_Init+0x244>
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	e002      	b.n	8000c44 <HAL_GPIO_Init+0x244>
 8000c3e:	2301      	movs	r3, #1
 8000c40:	e000      	b.n	8000c44 <HAL_GPIO_Init+0x244>
 8000c42:	2300      	movs	r3, #0
 8000c44:	697a      	ldr	r2, [r7, #20]
 8000c46:	f002 0203 	and.w	r2, r2, #3
 8000c4a:	0092      	lsls	r2, r2, #2
 8000c4c:	4093      	lsls	r3, r2
 8000c4e:	693a      	ldr	r2, [r7, #16]
 8000c50:	4313      	orrs	r3, r2
 8000c52:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c54:	4937      	ldr	r1, [pc, #220]	; (8000d34 <HAL_GPIO_Init+0x334>)
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	089b      	lsrs	r3, r3, #2
 8000c5a:	3302      	adds	r3, #2
 8000c5c:	693a      	ldr	r2, [r7, #16]
 8000c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000c62:	4b3b      	ldr	r3, [pc, #236]	; (8000d50 <HAL_GPIO_Init+0x350>)
 8000c64:	689b      	ldr	r3, [r3, #8]
 8000c66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	43db      	mvns	r3, r3
 8000c6c:	693a      	ldr	r2, [r7, #16]
 8000c6e:	4013      	ands	r3, r2
 8000c70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d003      	beq.n	8000c86 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	4313      	orrs	r3, r2
 8000c84:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000c86:	4a32      	ldr	r2, [pc, #200]	; (8000d50 <HAL_GPIO_Init+0x350>)
 8000c88:	693b      	ldr	r3, [r7, #16]
 8000c8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000c8c:	4b30      	ldr	r3, [pc, #192]	; (8000d50 <HAL_GPIO_Init+0x350>)
 8000c8e:	68db      	ldr	r3, [r3, #12]
 8000c90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	43db      	mvns	r3, r3
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	4013      	ands	r3, r2
 8000c9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d003      	beq.n	8000cb0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000ca8:	693a      	ldr	r2, [r7, #16]
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	4313      	orrs	r3, r2
 8000cae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000cb0:	4a27      	ldr	r2, [pc, #156]	; (8000d50 <HAL_GPIO_Init+0x350>)
 8000cb2:	693b      	ldr	r3, [r7, #16]
 8000cb4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000cb6:	4b26      	ldr	r3, [pc, #152]	; (8000d50 <HAL_GPIO_Init+0x350>)
 8000cb8:	685b      	ldr	r3, [r3, #4]
 8000cba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cbc:	68fb      	ldr	r3, [r7, #12]
 8000cbe:	43db      	mvns	r3, r3
 8000cc0:	693a      	ldr	r2, [r7, #16]
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d003      	beq.n	8000cda <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000cd2:	693a      	ldr	r2, [r7, #16]
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000cda:	4a1d      	ldr	r2, [pc, #116]	; (8000d50 <HAL_GPIO_Init+0x350>)
 8000cdc:	693b      	ldr	r3, [r7, #16]
 8000cde:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000ce0:	4b1b      	ldr	r3, [pc, #108]	; (8000d50 <HAL_GPIO_Init+0x350>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	43db      	mvns	r3, r3
 8000cea:	693a      	ldr	r2, [r7, #16]
 8000cec:	4013      	ands	r3, r2
 8000cee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000cf0:	683b      	ldr	r3, [r7, #0]
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d003      	beq.n	8000d04 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000cfc:	693a      	ldr	r2, [r7, #16]
 8000cfe:	68fb      	ldr	r3, [r7, #12]
 8000d00:	4313      	orrs	r3, r2
 8000d02:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000d04:	4a12      	ldr	r2, [pc, #72]	; (8000d50 <HAL_GPIO_Init+0x350>)
 8000d06:	693b      	ldr	r3, [r7, #16]
 8000d08:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	fa22 f303 	lsr.w	r3, r2, r3
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	f47f ae78 	bne.w	8000a10 <HAL_GPIO_Init+0x10>
  }
}
 8000d20:	bf00      	nop
 8000d22:	bf00      	nop
 8000d24:	371c      	adds	r7, #28
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr
 8000d2e:	bf00      	nop
 8000d30:	40021000 	.word	0x40021000
 8000d34:	40010000 	.word	0x40010000
 8000d38:	48000400 	.word	0x48000400
 8000d3c:	48000800 	.word	0x48000800
 8000d40:	48000c00 	.word	0x48000c00
 8000d44:	48001000 	.word	0x48001000
 8000d48:	48001400 	.word	0x48001400
 8000d4c:	48001800 	.word	0x48001800
 8000d50:	40010400 	.word	0x40010400

08000d54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
 8000d5c:	460b      	mov	r3, r1
 8000d5e:	807b      	strh	r3, [r7, #2]
 8000d60:	4613      	mov	r3, r2
 8000d62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d64:	787b      	ldrb	r3, [r7, #1]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d003      	beq.n	8000d72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d6a:	887a      	ldrh	r2, [r7, #2]
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d70:	e002      	b.n	8000d78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d72:	887a      	ldrh	r2, [r7, #2]
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d78:	bf00      	nop
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr

08000d84 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	460b      	mov	r3, r1
 8000d8e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	695b      	ldr	r3, [r3, #20]
 8000d94:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d96:	887a      	ldrh	r2, [r7, #2]
 8000d98:	68fb      	ldr	r3, [r7, #12]
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	041a      	lsls	r2, r3, #16
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	43d9      	mvns	r1, r3
 8000da2:	887b      	ldrh	r3, [r7, #2]
 8000da4:	400b      	ands	r3, r1
 8000da6:	431a      	orrs	r2, r3
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	619a      	str	r2, [r3, #24]
}
 8000dac:	bf00      	nop
 8000dae:	3714      	adds	r7, #20
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000dbc:	4b04      	ldr	r3, [pc, #16]	; (8000dd0 <HAL_PWREx_GetVoltageRange+0x18>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	40007000 	.word	0x40007000

08000dd4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b085      	sub	sp, #20
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000de2:	d130      	bne.n	8000e46 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000de4:	4b23      	ldr	r3, [pc, #140]	; (8000e74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000dec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000df0:	d038      	beq.n	8000e64 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000df2:	4b20      	ldr	r3, [pc, #128]	; (8000e74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000dfa:	4a1e      	ldr	r2, [pc, #120]	; (8000e74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dfc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e00:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000e02:	4b1d      	ldr	r3, [pc, #116]	; (8000e78 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	2232      	movs	r2, #50	; 0x32
 8000e08:	fb02 f303 	mul.w	r3, r2, r3
 8000e0c:	4a1b      	ldr	r2, [pc, #108]	; (8000e7c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000e0e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e12:	0c9b      	lsrs	r3, r3, #18
 8000e14:	3301      	adds	r3, #1
 8000e16:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e18:	e002      	b.n	8000e20 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	3b01      	subs	r3, #1
 8000e1e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e20:	4b14      	ldr	r3, [pc, #80]	; (8000e74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e22:	695b      	ldr	r3, [r3, #20]
 8000e24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e2c:	d102      	bne.n	8000e34 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d1f2      	bne.n	8000e1a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e34:	4b0f      	ldr	r3, [pc, #60]	; (8000e74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e36:	695b      	ldr	r3, [r3, #20]
 8000e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e40:	d110      	bne.n	8000e64 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000e42:	2303      	movs	r3, #3
 8000e44:	e00f      	b.n	8000e66 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000e46:	4b0b      	ldr	r3, [pc, #44]	; (8000e74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e52:	d007      	beq.n	8000e64 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e54:	4b07      	ldr	r3, [pc, #28]	; (8000e74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e5c:	4a05      	ldr	r2, [pc, #20]	; (8000e74 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e62:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000e64:	2300      	movs	r3, #0
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3714      	adds	r7, #20
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	40007000 	.word	0x40007000
 8000e78:	20000000 	.word	0x20000000
 8000e7c:	431bde83 	.word	0x431bde83

08000e80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b088      	sub	sp, #32
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d101      	bne.n	8000e92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e3c6      	b.n	8001620 <HAL_RCC_OscConfig+0x7a0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e92:	4ba1      	ldr	r3, [pc, #644]	; (8001118 <HAL_RCC_OscConfig+0x298>)
 8000e94:	689b      	ldr	r3, [r3, #8]
 8000e96:	f003 030c 	and.w	r3, r3, #12
 8000e9a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e9c:	4b9e      	ldr	r3, [pc, #632]	; (8001118 <HAL_RCC_OscConfig+0x298>)
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	f003 0303 	and.w	r3, r3, #3
 8000ea4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f003 0310 	and.w	r3, r3, #16
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	f000 80e4 	beq.w	800107c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000eb4:	69bb      	ldr	r3, [r7, #24]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d007      	beq.n	8000eca <HAL_RCC_OscConfig+0x4a>
 8000eba:	69bb      	ldr	r3, [r7, #24]
 8000ebc:	2b0c      	cmp	r3, #12
 8000ebe:	f040 808b 	bne.w	8000fd8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	f040 8087 	bne.w	8000fd8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000eca:	4b93      	ldr	r3, [pc, #588]	; (8001118 <HAL_RCC_OscConfig+0x298>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f003 0302 	and.w	r3, r3, #2
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d005      	beq.n	8000ee2 <HAL_RCC_OscConfig+0x62>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	699b      	ldr	r3, [r3, #24]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d101      	bne.n	8000ee2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e39e      	b.n	8001620 <HAL_RCC_OscConfig+0x7a0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6a1a      	ldr	r2, [r3, #32]
 8000ee6:	4b8c      	ldr	r3, [pc, #560]	; (8001118 <HAL_RCC_OscConfig+0x298>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f003 0308 	and.w	r3, r3, #8
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d004      	beq.n	8000efc <HAL_RCC_OscConfig+0x7c>
 8000ef2:	4b89      	ldr	r3, [pc, #548]	; (8001118 <HAL_RCC_OscConfig+0x298>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000efa:	e005      	b.n	8000f08 <HAL_RCC_OscConfig+0x88>
 8000efc:	4b86      	ldr	r3, [pc, #536]	; (8001118 <HAL_RCC_OscConfig+0x298>)
 8000efe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f02:	091b      	lsrs	r3, r3, #4
 8000f04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	d223      	bcs.n	8000f54 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	6a1b      	ldr	r3, [r3, #32]
 8000f10:	4618      	mov	r0, r3
 8000f12:	f000 fd1b 	bl	800194c <RCC_SetFlashLatencyFromMSIRange>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	e37f      	b.n	8001620 <HAL_RCC_OscConfig+0x7a0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f20:	4b7d      	ldr	r3, [pc, #500]	; (8001118 <HAL_RCC_OscConfig+0x298>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	4a7c      	ldr	r2, [pc, #496]	; (8001118 <HAL_RCC_OscConfig+0x298>)
 8000f26:	f043 0308 	orr.w	r3, r3, #8
 8000f2a:	6013      	str	r3, [r2, #0]
 8000f2c:	4b7a      	ldr	r3, [pc, #488]	; (8001118 <HAL_RCC_OscConfig+0x298>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6a1b      	ldr	r3, [r3, #32]
 8000f38:	4977      	ldr	r1, [pc, #476]	; (8001118 <HAL_RCC_OscConfig+0x298>)
 8000f3a:	4313      	orrs	r3, r2
 8000f3c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f3e:	4b76      	ldr	r3, [pc, #472]	; (8001118 <HAL_RCC_OscConfig+0x298>)
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	69db      	ldr	r3, [r3, #28]
 8000f4a:	021b      	lsls	r3, r3, #8
 8000f4c:	4972      	ldr	r1, [pc, #456]	; (8001118 <HAL_RCC_OscConfig+0x298>)
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	604b      	str	r3, [r1, #4]
 8000f52:	e025      	b.n	8000fa0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f54:	4b70      	ldr	r3, [pc, #448]	; (8001118 <HAL_RCC_OscConfig+0x298>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a6f      	ldr	r2, [pc, #444]	; (8001118 <HAL_RCC_OscConfig+0x298>)
 8000f5a:	f043 0308 	orr.w	r3, r3, #8
 8000f5e:	6013      	str	r3, [r2, #0]
 8000f60:	4b6d      	ldr	r3, [pc, #436]	; (8001118 <HAL_RCC_OscConfig+0x298>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6a1b      	ldr	r3, [r3, #32]
 8000f6c:	496a      	ldr	r1, [pc, #424]	; (8001118 <HAL_RCC_OscConfig+0x298>)
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f72:	4b69      	ldr	r3, [pc, #420]	; (8001118 <HAL_RCC_OscConfig+0x298>)
 8000f74:	685b      	ldr	r3, [r3, #4]
 8000f76:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	69db      	ldr	r3, [r3, #28]
 8000f7e:	021b      	lsls	r3, r3, #8
 8000f80:	4965      	ldr	r1, [pc, #404]	; (8001118 <HAL_RCC_OscConfig+0x298>)
 8000f82:	4313      	orrs	r3, r2
 8000f84:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000f86:	69bb      	ldr	r3, [r7, #24]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d109      	bne.n	8000fa0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6a1b      	ldr	r3, [r3, #32]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f000 fcdb 	bl	800194c <RCC_SetFlashLatencyFromMSIRange>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	e33f      	b.n	8001620 <HAL_RCC_OscConfig+0x7a0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000fa0:	f000 fc48 	bl	8001834 <HAL_RCC_GetSysClockFreq>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	4b5c      	ldr	r3, [pc, #368]	; (8001118 <HAL_RCC_OscConfig+0x298>)
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	091b      	lsrs	r3, r3, #4
 8000fac:	f003 030f 	and.w	r3, r3, #15
 8000fb0:	495a      	ldr	r1, [pc, #360]	; (800111c <HAL_RCC_OscConfig+0x29c>)
 8000fb2:	5ccb      	ldrb	r3, [r1, r3]
 8000fb4:	f003 031f 	and.w	r3, r3, #31
 8000fb8:	fa22 f303 	lsr.w	r3, r2, r3
 8000fbc:	4a58      	ldr	r2, [pc, #352]	; (8001120 <HAL_RCC_OscConfig+0x2a0>)
 8000fbe:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000fc0:	4b58      	ldr	r3, [pc, #352]	; (8001124 <HAL_RCC_OscConfig+0x2a4>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff fbb5 	bl	8000734 <HAL_InitTick>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000fce:	7bfb      	ldrb	r3, [r7, #15]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d052      	beq.n	800107a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000fd4:	7bfb      	ldrb	r3, [r7, #15]
 8000fd6:	e323      	b.n	8001620 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d032      	beq.n	8001046 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000fe0:	4b4d      	ldr	r3, [pc, #308]	; (8001118 <HAL_RCC_OscConfig+0x298>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a4c      	ldr	r2, [pc, #304]	; (8001118 <HAL_RCC_OscConfig+0x298>)
 8000fe6:	f043 0301 	orr.w	r3, r3, #1
 8000fea:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000fec:	f7ff fbf2 	bl	80007d4 <HAL_GetTick>
 8000ff0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000ff2:	e008      	b.n	8001006 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ff4:	f7ff fbee 	bl	80007d4 <HAL_GetTick>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	2b02      	cmp	r3, #2
 8001000:	d901      	bls.n	8001006 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001002:	2303      	movs	r3, #3
 8001004:	e30c      	b.n	8001620 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001006:	4b44      	ldr	r3, [pc, #272]	; (8001118 <HAL_RCC_OscConfig+0x298>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f003 0302 	and.w	r3, r3, #2
 800100e:	2b00      	cmp	r3, #0
 8001010:	d0f0      	beq.n	8000ff4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001012:	4b41      	ldr	r3, [pc, #260]	; (8001118 <HAL_RCC_OscConfig+0x298>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a40      	ldr	r2, [pc, #256]	; (8001118 <HAL_RCC_OscConfig+0x298>)
 8001018:	f043 0308 	orr.w	r3, r3, #8
 800101c:	6013      	str	r3, [r2, #0]
 800101e:	4b3e      	ldr	r3, [pc, #248]	; (8001118 <HAL_RCC_OscConfig+0x298>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6a1b      	ldr	r3, [r3, #32]
 800102a:	493b      	ldr	r1, [pc, #236]	; (8001118 <HAL_RCC_OscConfig+0x298>)
 800102c:	4313      	orrs	r3, r2
 800102e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001030:	4b39      	ldr	r3, [pc, #228]	; (8001118 <HAL_RCC_OscConfig+0x298>)
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	69db      	ldr	r3, [r3, #28]
 800103c:	021b      	lsls	r3, r3, #8
 800103e:	4936      	ldr	r1, [pc, #216]	; (8001118 <HAL_RCC_OscConfig+0x298>)
 8001040:	4313      	orrs	r3, r2
 8001042:	604b      	str	r3, [r1, #4]
 8001044:	e01a      	b.n	800107c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001046:	4b34      	ldr	r3, [pc, #208]	; (8001118 <HAL_RCC_OscConfig+0x298>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4a33      	ldr	r2, [pc, #204]	; (8001118 <HAL_RCC_OscConfig+0x298>)
 800104c:	f023 0301 	bic.w	r3, r3, #1
 8001050:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001052:	f7ff fbbf 	bl	80007d4 <HAL_GetTick>
 8001056:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001058:	e008      	b.n	800106c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800105a:	f7ff fbbb 	bl	80007d4 <HAL_GetTick>
 800105e:	4602      	mov	r2, r0
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	2b02      	cmp	r3, #2
 8001066:	d901      	bls.n	800106c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001068:	2303      	movs	r3, #3
 800106a:	e2d9      	b.n	8001620 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800106c:	4b2a      	ldr	r3, [pc, #168]	; (8001118 <HAL_RCC_OscConfig+0x298>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f003 0302 	and.w	r3, r3, #2
 8001074:	2b00      	cmp	r3, #0
 8001076:	d1f0      	bne.n	800105a <HAL_RCC_OscConfig+0x1da>
 8001078:	e000      	b.n	800107c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800107a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f003 0301 	and.w	r3, r3, #1
 8001084:	2b00      	cmp	r3, #0
 8001086:	d074      	beq.n	8001172 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	2b08      	cmp	r3, #8
 800108c:	d005      	beq.n	800109a <HAL_RCC_OscConfig+0x21a>
 800108e:	69bb      	ldr	r3, [r7, #24]
 8001090:	2b0c      	cmp	r3, #12
 8001092:	d10e      	bne.n	80010b2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	2b03      	cmp	r3, #3
 8001098:	d10b      	bne.n	80010b2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800109a:	4b1f      	ldr	r3, [pc, #124]	; (8001118 <HAL_RCC_OscConfig+0x298>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d064      	beq.n	8001170 <HAL_RCC_OscConfig+0x2f0>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d160      	bne.n	8001170 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e2b6      	b.n	8001620 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010ba:	d106      	bne.n	80010ca <HAL_RCC_OscConfig+0x24a>
 80010bc:	4b16      	ldr	r3, [pc, #88]	; (8001118 <HAL_RCC_OscConfig+0x298>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a15      	ldr	r2, [pc, #84]	; (8001118 <HAL_RCC_OscConfig+0x298>)
 80010c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010c6:	6013      	str	r3, [r2, #0]
 80010c8:	e01d      	b.n	8001106 <HAL_RCC_OscConfig+0x286>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	685b      	ldr	r3, [r3, #4]
 80010ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010d2:	d10c      	bne.n	80010ee <HAL_RCC_OscConfig+0x26e>
 80010d4:	4b10      	ldr	r3, [pc, #64]	; (8001118 <HAL_RCC_OscConfig+0x298>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a0f      	ldr	r2, [pc, #60]	; (8001118 <HAL_RCC_OscConfig+0x298>)
 80010da:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010de:	6013      	str	r3, [r2, #0]
 80010e0:	4b0d      	ldr	r3, [pc, #52]	; (8001118 <HAL_RCC_OscConfig+0x298>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a0c      	ldr	r2, [pc, #48]	; (8001118 <HAL_RCC_OscConfig+0x298>)
 80010e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010ea:	6013      	str	r3, [r2, #0]
 80010ec:	e00b      	b.n	8001106 <HAL_RCC_OscConfig+0x286>
 80010ee:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <HAL_RCC_OscConfig+0x298>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a09      	ldr	r2, [pc, #36]	; (8001118 <HAL_RCC_OscConfig+0x298>)
 80010f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010f8:	6013      	str	r3, [r2, #0]
 80010fa:	4b07      	ldr	r3, [pc, #28]	; (8001118 <HAL_RCC_OscConfig+0x298>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a06      	ldr	r2, [pc, #24]	; (8001118 <HAL_RCC_OscConfig+0x298>)
 8001100:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001104:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d01c      	beq.n	8001148 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800110e:	f7ff fb61 	bl	80007d4 <HAL_GetTick>
 8001112:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001114:	e011      	b.n	800113a <HAL_RCC_OscConfig+0x2ba>
 8001116:	bf00      	nop
 8001118:	40021000 	.word	0x40021000
 800111c:	08001a90 	.word	0x08001a90
 8001120:	20000000 	.word	0x20000000
 8001124:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001128:	f7ff fb54 	bl	80007d4 <HAL_GetTick>
 800112c:	4602      	mov	r2, r0
 800112e:	693b      	ldr	r3, [r7, #16]
 8001130:	1ad3      	subs	r3, r2, r3
 8001132:	2b64      	cmp	r3, #100	; 0x64
 8001134:	d901      	bls.n	800113a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001136:	2303      	movs	r3, #3
 8001138:	e272      	b.n	8001620 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800113a:	4baf      	ldr	r3, [pc, #700]	; (80013f8 <HAL_RCC_OscConfig+0x578>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d0f0      	beq.n	8001128 <HAL_RCC_OscConfig+0x2a8>
 8001146:	e014      	b.n	8001172 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001148:	f7ff fb44 	bl	80007d4 <HAL_GetTick>
 800114c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800114e:	e008      	b.n	8001162 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001150:	f7ff fb40 	bl	80007d4 <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	2b64      	cmp	r3, #100	; 0x64
 800115c:	d901      	bls.n	8001162 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800115e:	2303      	movs	r3, #3
 8001160:	e25e      	b.n	8001620 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001162:	4ba5      	ldr	r3, [pc, #660]	; (80013f8 <HAL_RCC_OscConfig+0x578>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800116a:	2b00      	cmp	r3, #0
 800116c:	d1f0      	bne.n	8001150 <HAL_RCC_OscConfig+0x2d0>
 800116e:	e000      	b.n	8001172 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001170:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	2b00      	cmp	r3, #0
 800117c:	d060      	beq.n	8001240 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	2b04      	cmp	r3, #4
 8001182:	d005      	beq.n	8001190 <HAL_RCC_OscConfig+0x310>
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	2b0c      	cmp	r3, #12
 8001188:	d119      	bne.n	80011be <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	2b02      	cmp	r3, #2
 800118e:	d116      	bne.n	80011be <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001190:	4b99      	ldr	r3, [pc, #612]	; (80013f8 <HAL_RCC_OscConfig+0x578>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001198:	2b00      	cmp	r3, #0
 800119a:	d005      	beq.n	80011a8 <HAL_RCC_OscConfig+0x328>
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	68db      	ldr	r3, [r3, #12]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d101      	bne.n	80011a8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	e23b      	b.n	8001620 <HAL_RCC_OscConfig+0x7a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011a8:	4b93      	ldr	r3, [pc, #588]	; (80013f8 <HAL_RCC_OscConfig+0x578>)
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	691b      	ldr	r3, [r3, #16]
 80011b4:	061b      	lsls	r3, r3, #24
 80011b6:	4990      	ldr	r1, [pc, #576]	; (80013f8 <HAL_RCC_OscConfig+0x578>)
 80011b8:	4313      	orrs	r3, r2
 80011ba:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011bc:	e040      	b.n	8001240 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	68db      	ldr	r3, [r3, #12]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d023      	beq.n	800120e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011c6:	4b8c      	ldr	r3, [pc, #560]	; (80013f8 <HAL_RCC_OscConfig+0x578>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a8b      	ldr	r2, [pc, #556]	; (80013f8 <HAL_RCC_OscConfig+0x578>)
 80011cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011d2:	f7ff faff 	bl	80007d4 <HAL_GetTick>
 80011d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011d8:	e008      	b.n	80011ec <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011da:	f7ff fafb 	bl	80007d4 <HAL_GetTick>
 80011de:	4602      	mov	r2, r0
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	d901      	bls.n	80011ec <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80011e8:	2303      	movs	r3, #3
 80011ea:	e219      	b.n	8001620 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011ec:	4b82      	ldr	r3, [pc, #520]	; (80013f8 <HAL_RCC_OscConfig+0x578>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d0f0      	beq.n	80011da <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011f8:	4b7f      	ldr	r3, [pc, #508]	; (80013f8 <HAL_RCC_OscConfig+0x578>)
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	691b      	ldr	r3, [r3, #16]
 8001204:	061b      	lsls	r3, r3, #24
 8001206:	497c      	ldr	r1, [pc, #496]	; (80013f8 <HAL_RCC_OscConfig+0x578>)
 8001208:	4313      	orrs	r3, r2
 800120a:	604b      	str	r3, [r1, #4]
 800120c:	e018      	b.n	8001240 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800120e:	4b7a      	ldr	r3, [pc, #488]	; (80013f8 <HAL_RCC_OscConfig+0x578>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a79      	ldr	r2, [pc, #484]	; (80013f8 <HAL_RCC_OscConfig+0x578>)
 8001214:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001218:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800121a:	f7ff fadb 	bl	80007d4 <HAL_GetTick>
 800121e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001220:	e008      	b.n	8001234 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001222:	f7ff fad7 	bl	80007d4 <HAL_GetTick>
 8001226:	4602      	mov	r2, r0
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	1ad3      	subs	r3, r2, r3
 800122c:	2b02      	cmp	r3, #2
 800122e:	d901      	bls.n	8001234 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001230:	2303      	movs	r3, #3
 8001232:	e1f5      	b.n	8001620 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001234:	4b70      	ldr	r3, [pc, #448]	; (80013f8 <HAL_RCC_OscConfig+0x578>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800123c:	2b00      	cmp	r3, #0
 800123e:	d1f0      	bne.n	8001222 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f003 0308 	and.w	r3, r3, #8
 8001248:	2b00      	cmp	r3, #0
 800124a:	d03c      	beq.n	80012c6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	695b      	ldr	r3, [r3, #20]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d01c      	beq.n	800128e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001254:	4b68      	ldr	r3, [pc, #416]	; (80013f8 <HAL_RCC_OscConfig+0x578>)
 8001256:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800125a:	4a67      	ldr	r2, [pc, #412]	; (80013f8 <HAL_RCC_OscConfig+0x578>)
 800125c:	f043 0301 	orr.w	r3, r3, #1
 8001260:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001264:	f7ff fab6 	bl	80007d4 <HAL_GetTick>
 8001268:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800126a:	e008      	b.n	800127e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800126c:	f7ff fab2 	bl	80007d4 <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	2b02      	cmp	r3, #2
 8001278:	d901      	bls.n	800127e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e1d0      	b.n	8001620 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800127e:	4b5e      	ldr	r3, [pc, #376]	; (80013f8 <HAL_RCC_OscConfig+0x578>)
 8001280:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001284:	f003 0302 	and.w	r3, r3, #2
 8001288:	2b00      	cmp	r3, #0
 800128a:	d0ef      	beq.n	800126c <HAL_RCC_OscConfig+0x3ec>
 800128c:	e01b      	b.n	80012c6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800128e:	4b5a      	ldr	r3, [pc, #360]	; (80013f8 <HAL_RCC_OscConfig+0x578>)
 8001290:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001294:	4a58      	ldr	r2, [pc, #352]	; (80013f8 <HAL_RCC_OscConfig+0x578>)
 8001296:	f023 0301 	bic.w	r3, r3, #1
 800129a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800129e:	f7ff fa99 	bl	80007d4 <HAL_GetTick>
 80012a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80012a4:	e008      	b.n	80012b8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012a6:	f7ff fa95 	bl	80007d4 <HAL_GetTick>
 80012aa:	4602      	mov	r2, r0
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	2b02      	cmp	r3, #2
 80012b2:	d901      	bls.n	80012b8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80012b4:	2303      	movs	r3, #3
 80012b6:	e1b3      	b.n	8001620 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80012b8:	4b4f      	ldr	r3, [pc, #316]	; (80013f8 <HAL_RCC_OscConfig+0x578>)
 80012ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d1ef      	bne.n	80012a6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0304 	and.w	r3, r3, #4
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	f000 80a6 	beq.w	8001420 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012d4:	2300      	movs	r3, #0
 80012d6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80012d8:	4b47      	ldr	r3, [pc, #284]	; (80013f8 <HAL_RCC_OscConfig+0x578>)
 80012da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d10d      	bne.n	8001300 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012e4:	4b44      	ldr	r3, [pc, #272]	; (80013f8 <HAL_RCC_OscConfig+0x578>)
 80012e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012e8:	4a43      	ldr	r2, [pc, #268]	; (80013f8 <HAL_RCC_OscConfig+0x578>)
 80012ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ee:	6593      	str	r3, [r2, #88]	; 0x58
 80012f0:	4b41      	ldr	r3, [pc, #260]	; (80013f8 <HAL_RCC_OscConfig+0x578>)
 80012f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f8:	60bb      	str	r3, [r7, #8]
 80012fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012fc:	2301      	movs	r3, #1
 80012fe:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001300:	4b3e      	ldr	r3, [pc, #248]	; (80013fc <HAL_RCC_OscConfig+0x57c>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001308:	2b00      	cmp	r3, #0
 800130a:	d118      	bne.n	800133e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800130c:	4b3b      	ldr	r3, [pc, #236]	; (80013fc <HAL_RCC_OscConfig+0x57c>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a3a      	ldr	r2, [pc, #232]	; (80013fc <HAL_RCC_OscConfig+0x57c>)
 8001312:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001316:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001318:	f7ff fa5c 	bl	80007d4 <HAL_GetTick>
 800131c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800131e:	e008      	b.n	8001332 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001320:	f7ff fa58 	bl	80007d4 <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b02      	cmp	r3, #2
 800132c:	d901      	bls.n	8001332 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e176      	b.n	8001620 <HAL_RCC_OscConfig+0x7a0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001332:	4b32      	ldr	r3, [pc, #200]	; (80013fc <HAL_RCC_OscConfig+0x57c>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800133a:	2b00      	cmp	r3, #0
 800133c:	d0f0      	beq.n	8001320 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	2b01      	cmp	r3, #1
 8001344:	d108      	bne.n	8001358 <HAL_RCC_OscConfig+0x4d8>
 8001346:	4b2c      	ldr	r3, [pc, #176]	; (80013f8 <HAL_RCC_OscConfig+0x578>)
 8001348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800134c:	4a2a      	ldr	r2, [pc, #168]	; (80013f8 <HAL_RCC_OscConfig+0x578>)
 800134e:	f043 0301 	orr.w	r3, r3, #1
 8001352:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001356:	e024      	b.n	80013a2 <HAL_RCC_OscConfig+0x522>
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	2b05      	cmp	r3, #5
 800135e:	d110      	bne.n	8001382 <HAL_RCC_OscConfig+0x502>
 8001360:	4b25      	ldr	r3, [pc, #148]	; (80013f8 <HAL_RCC_OscConfig+0x578>)
 8001362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001366:	4a24      	ldr	r2, [pc, #144]	; (80013f8 <HAL_RCC_OscConfig+0x578>)
 8001368:	f043 0304 	orr.w	r3, r3, #4
 800136c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001370:	4b21      	ldr	r3, [pc, #132]	; (80013f8 <HAL_RCC_OscConfig+0x578>)
 8001372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001376:	4a20      	ldr	r2, [pc, #128]	; (80013f8 <HAL_RCC_OscConfig+0x578>)
 8001378:	f043 0301 	orr.w	r3, r3, #1
 800137c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001380:	e00f      	b.n	80013a2 <HAL_RCC_OscConfig+0x522>
 8001382:	4b1d      	ldr	r3, [pc, #116]	; (80013f8 <HAL_RCC_OscConfig+0x578>)
 8001384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001388:	4a1b      	ldr	r2, [pc, #108]	; (80013f8 <HAL_RCC_OscConfig+0x578>)
 800138a:	f023 0301 	bic.w	r3, r3, #1
 800138e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001392:	4b19      	ldr	r3, [pc, #100]	; (80013f8 <HAL_RCC_OscConfig+0x578>)
 8001394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001398:	4a17      	ldr	r2, [pc, #92]	; (80013f8 <HAL_RCC_OscConfig+0x578>)
 800139a:	f023 0304 	bic.w	r3, r3, #4
 800139e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d016      	beq.n	80013d8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013aa:	f7ff fa13 	bl	80007d4 <HAL_GetTick>
 80013ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80013b0:	e00a      	b.n	80013c8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013b2:	f7ff fa0f 	bl	80007d4 <HAL_GetTick>
 80013b6:	4602      	mov	r2, r0
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d901      	bls.n	80013c8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80013c4:	2303      	movs	r3, #3
 80013c6:	e12b      	b.n	8001620 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80013c8:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <HAL_RCC_OscConfig+0x578>)
 80013ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013ce:	f003 0302 	and.w	r3, r3, #2
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d0ed      	beq.n	80013b2 <HAL_RCC_OscConfig+0x532>
 80013d6:	e01a      	b.n	800140e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013d8:	f7ff f9fc 	bl	80007d4 <HAL_GetTick>
 80013dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80013de:	e00f      	b.n	8001400 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013e0:	f7ff f9f8 	bl	80007d4 <HAL_GetTick>
 80013e4:	4602      	mov	r2, r0
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d906      	bls.n	8001400 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e114      	b.n	8001620 <HAL_RCC_OscConfig+0x7a0>
 80013f6:	bf00      	nop
 80013f8:	40021000 	.word	0x40021000
 80013fc:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001400:	4b89      	ldr	r3, [pc, #548]	; (8001628 <HAL_RCC_OscConfig+0x7a8>)
 8001402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001406:	f003 0302 	and.w	r3, r3, #2
 800140a:	2b00      	cmp	r3, #0
 800140c:	d1e8      	bne.n	80013e0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800140e:	7ffb      	ldrb	r3, [r7, #31]
 8001410:	2b01      	cmp	r3, #1
 8001412:	d105      	bne.n	8001420 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001414:	4b84      	ldr	r3, [pc, #528]	; (8001628 <HAL_RCC_OscConfig+0x7a8>)
 8001416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001418:	4a83      	ldr	r2, [pc, #524]	; (8001628 <HAL_RCC_OscConfig+0x7a8>)
 800141a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800141e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001424:	2b00      	cmp	r3, #0
 8001426:	f000 80fa 	beq.w	800161e <HAL_RCC_OscConfig+0x79e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800142e:	2b02      	cmp	r3, #2
 8001430:	f040 80d0 	bne.w	80015d4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001434:	4b7c      	ldr	r3, [pc, #496]	; (8001628 <HAL_RCC_OscConfig+0x7a8>)
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	f003 0203 	and.w	r2, r3, #3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001444:	429a      	cmp	r2, r3
 8001446:	d130      	bne.n	80014aa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	3b01      	subs	r3, #1
 8001454:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001456:	429a      	cmp	r2, r3
 8001458:	d127      	bne.n	80014aa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001464:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001466:	429a      	cmp	r2, r3
 8001468:	d11f      	bne.n	80014aa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001474:	2a07      	cmp	r2, #7
 8001476:	bf14      	ite	ne
 8001478:	2201      	movne	r2, #1
 800147a:	2200      	moveq	r2, #0
 800147c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800147e:	4293      	cmp	r3, r2
 8001480:	d113      	bne.n	80014aa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001482:	697b      	ldr	r3, [r7, #20]
 8001484:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800148c:	085b      	lsrs	r3, r3, #1
 800148e:	3b01      	subs	r3, #1
 8001490:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001492:	429a      	cmp	r2, r3
 8001494:	d109      	bne.n	80014aa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a0:	085b      	lsrs	r3, r3, #1
 80014a2:	3b01      	subs	r3, #1
 80014a4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80014a6:	429a      	cmp	r2, r3
 80014a8:	d06e      	beq.n	8001588 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	2b0c      	cmp	r3, #12
 80014ae:	d069      	beq.n	8001584 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80014b0:	4b5d      	ldr	r3, [pc, #372]	; (8001628 <HAL_RCC_OscConfig+0x7a8>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d105      	bne.n	80014c8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80014bc:	4b5a      	ldr	r3, [pc, #360]	; (8001628 <HAL_RCC_OscConfig+0x7a8>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e0a9      	b.n	8001620 <HAL_RCC_OscConfig+0x7a0>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80014cc:	4b56      	ldr	r3, [pc, #344]	; (8001628 <HAL_RCC_OscConfig+0x7a8>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a55      	ldr	r2, [pc, #340]	; (8001628 <HAL_RCC_OscConfig+0x7a8>)
 80014d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80014d6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80014d8:	f7ff f97c 	bl	80007d4 <HAL_GetTick>
 80014dc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014de:	e008      	b.n	80014f2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014e0:	f7ff f978 	bl	80007d4 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e096      	b.n	8001620 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014f2:	4b4d      	ldr	r3, [pc, #308]	; (8001628 <HAL_RCC_OscConfig+0x7a8>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d1f0      	bne.n	80014e0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014fe:	4b4a      	ldr	r3, [pc, #296]	; (8001628 <HAL_RCC_OscConfig+0x7a8>)
 8001500:	68da      	ldr	r2, [r3, #12]
 8001502:	4b4a      	ldr	r3, [pc, #296]	; (800162c <HAL_RCC_OscConfig+0x7ac>)
 8001504:	4013      	ands	r3, r2
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800150a:	687a      	ldr	r2, [r7, #4]
 800150c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800150e:	3a01      	subs	r2, #1
 8001510:	0112      	lsls	r2, r2, #4
 8001512:	4311      	orrs	r1, r2
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001518:	0212      	lsls	r2, r2, #8
 800151a:	4311      	orrs	r1, r2
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001520:	0852      	lsrs	r2, r2, #1
 8001522:	3a01      	subs	r2, #1
 8001524:	0552      	lsls	r2, r2, #21
 8001526:	4311      	orrs	r1, r2
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800152c:	0852      	lsrs	r2, r2, #1
 800152e:	3a01      	subs	r2, #1
 8001530:	0652      	lsls	r2, r2, #25
 8001532:	4311      	orrs	r1, r2
 8001534:	687a      	ldr	r2, [r7, #4]
 8001536:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001538:	0912      	lsrs	r2, r2, #4
 800153a:	0452      	lsls	r2, r2, #17
 800153c:	430a      	orrs	r2, r1
 800153e:	493a      	ldr	r1, [pc, #232]	; (8001628 <HAL_RCC_OscConfig+0x7a8>)
 8001540:	4313      	orrs	r3, r2
 8001542:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001544:	4b38      	ldr	r3, [pc, #224]	; (8001628 <HAL_RCC_OscConfig+0x7a8>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a37      	ldr	r2, [pc, #220]	; (8001628 <HAL_RCC_OscConfig+0x7a8>)
 800154a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800154e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001550:	4b35      	ldr	r3, [pc, #212]	; (8001628 <HAL_RCC_OscConfig+0x7a8>)
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	4a34      	ldr	r2, [pc, #208]	; (8001628 <HAL_RCC_OscConfig+0x7a8>)
 8001556:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800155a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800155c:	f7ff f93a 	bl	80007d4 <HAL_GetTick>
 8001560:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001562:	e008      	b.n	8001576 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001564:	f7ff f936 	bl	80007d4 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	2b02      	cmp	r3, #2
 8001570:	d901      	bls.n	8001576 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e054      	b.n	8001620 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001576:	4b2c      	ldr	r3, [pc, #176]	; (8001628 <HAL_RCC_OscConfig+0x7a8>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d0f0      	beq.n	8001564 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001582:	e04c      	b.n	800161e <HAL_RCC_OscConfig+0x79e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e04b      	b.n	8001620 <HAL_RCC_OscConfig+0x7a0>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001588:	4b27      	ldr	r3, [pc, #156]	; (8001628 <HAL_RCC_OscConfig+0x7a8>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001590:	2b00      	cmp	r3, #0
 8001592:	d144      	bne.n	800161e <HAL_RCC_OscConfig+0x79e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001594:	4b24      	ldr	r3, [pc, #144]	; (8001628 <HAL_RCC_OscConfig+0x7a8>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a23      	ldr	r2, [pc, #140]	; (8001628 <HAL_RCC_OscConfig+0x7a8>)
 800159a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800159e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80015a0:	4b21      	ldr	r3, [pc, #132]	; (8001628 <HAL_RCC_OscConfig+0x7a8>)
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	4a20      	ldr	r2, [pc, #128]	; (8001628 <HAL_RCC_OscConfig+0x7a8>)
 80015a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015aa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80015ac:	f7ff f912 	bl	80007d4 <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015b2:	e008      	b.n	80015c6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015b4:	f7ff f90e 	bl	80007d4 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e02c      	b.n	8001620 <HAL_RCC_OscConfig+0x7a0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015c6:	4b18      	ldr	r3, [pc, #96]	; (8001628 <HAL_RCC_OscConfig+0x7a8>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d0f0      	beq.n	80015b4 <HAL_RCC_OscConfig+0x734>
 80015d2:	e024      	b.n	800161e <HAL_RCC_OscConfig+0x79e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	2b0c      	cmp	r3, #12
 80015d8:	d01f      	beq.n	800161a <HAL_RCC_OscConfig+0x79a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015da:	4b13      	ldr	r3, [pc, #76]	; (8001628 <HAL_RCC_OscConfig+0x7a8>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a12      	ldr	r2, [pc, #72]	; (8001628 <HAL_RCC_OscConfig+0x7a8>)
 80015e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e6:	f7ff f8f5 	bl	80007d4 <HAL_GetTick>
 80015ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80015ec:	e008      	b.n	8001600 <HAL_RCC_OscConfig+0x780>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015ee:	f7ff f8f1 	bl	80007d4 <HAL_GetTick>
 80015f2:	4602      	mov	r2, r0
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d901      	bls.n	8001600 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e00f      	b.n	8001620 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001600:	4b09      	ldr	r3, [pc, #36]	; (8001628 <HAL_RCC_OscConfig+0x7a8>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001608:	2b00      	cmp	r3, #0
 800160a:	d1f0      	bne.n	80015ee <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800160c:	4b06      	ldr	r3, [pc, #24]	; (8001628 <HAL_RCC_OscConfig+0x7a8>)
 800160e:	68da      	ldr	r2, [r3, #12]
 8001610:	4905      	ldr	r1, [pc, #20]	; (8001628 <HAL_RCC_OscConfig+0x7a8>)
 8001612:	4b07      	ldr	r3, [pc, #28]	; (8001630 <HAL_RCC_OscConfig+0x7b0>)
 8001614:	4013      	ands	r3, r2
 8001616:	60cb      	str	r3, [r1, #12]
 8001618:	e001      	b.n	800161e <HAL_RCC_OscConfig+0x79e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	e000      	b.n	8001620 <HAL_RCC_OscConfig+0x7a0>
      }
    }
  }
  return HAL_OK;
 800161e:	2300      	movs	r3, #0
}
 8001620:	4618      	mov	r0, r3
 8001622:	3720      	adds	r7, #32
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	40021000 	.word	0x40021000
 800162c:	f99d808c 	.word	0xf99d808c
 8001630:	feeefffc 	.word	0xfeeefffc

08001634 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
 800163c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d101      	bne.n	8001648 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e0e7      	b.n	8001818 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001648:	4b75      	ldr	r3, [pc, #468]	; (8001820 <HAL_RCC_ClockConfig+0x1ec>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0307 	and.w	r3, r3, #7
 8001650:	683a      	ldr	r2, [r7, #0]
 8001652:	429a      	cmp	r2, r3
 8001654:	d910      	bls.n	8001678 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001656:	4b72      	ldr	r3, [pc, #456]	; (8001820 <HAL_RCC_ClockConfig+0x1ec>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f023 0207 	bic.w	r2, r3, #7
 800165e:	4970      	ldr	r1, [pc, #448]	; (8001820 <HAL_RCC_ClockConfig+0x1ec>)
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	4313      	orrs	r3, r2
 8001664:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001666:	4b6e      	ldr	r3, [pc, #440]	; (8001820 <HAL_RCC_ClockConfig+0x1ec>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0307 	and.w	r3, r3, #7
 800166e:	683a      	ldr	r2, [r7, #0]
 8001670:	429a      	cmp	r2, r3
 8001672:	d001      	beq.n	8001678 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e0cf      	b.n	8001818 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0302 	and.w	r3, r3, #2
 8001680:	2b00      	cmp	r3, #0
 8001682:	d010      	beq.n	80016a6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	689a      	ldr	r2, [r3, #8]
 8001688:	4b66      	ldr	r3, [pc, #408]	; (8001824 <HAL_RCC_ClockConfig+0x1f0>)
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001690:	429a      	cmp	r2, r3
 8001692:	d908      	bls.n	80016a6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001694:	4b63      	ldr	r3, [pc, #396]	; (8001824 <HAL_RCC_ClockConfig+0x1f0>)
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	4960      	ldr	r1, [pc, #384]	; (8001824 <HAL_RCC_ClockConfig+0x1f0>)
 80016a2:	4313      	orrs	r3, r2
 80016a4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0301 	and.w	r3, r3, #1
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d04c      	beq.n	800174c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	2b03      	cmp	r3, #3
 80016b8:	d107      	bne.n	80016ca <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80016ba:	4b5a      	ldr	r3, [pc, #360]	; (8001824 <HAL_RCC_ClockConfig+0x1f0>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d121      	bne.n	800170a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e0a6      	b.n	8001818 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d107      	bne.n	80016e2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016d2:	4b54      	ldr	r3, [pc, #336]	; (8001824 <HAL_RCC_ClockConfig+0x1f0>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d115      	bne.n	800170a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80016de:	2301      	movs	r3, #1
 80016e0:	e09a      	b.n	8001818 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d107      	bne.n	80016fa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016ea:	4b4e      	ldr	r3, [pc, #312]	; (8001824 <HAL_RCC_ClockConfig+0x1f0>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d109      	bne.n	800170a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80016f6:	2301      	movs	r3, #1
 80016f8:	e08e      	b.n	8001818 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016fa:	4b4a      	ldr	r3, [pc, #296]	; (8001824 <HAL_RCC_ClockConfig+0x1f0>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001702:	2b00      	cmp	r3, #0
 8001704:	d101      	bne.n	800170a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e086      	b.n	8001818 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800170a:	4b46      	ldr	r3, [pc, #280]	; (8001824 <HAL_RCC_ClockConfig+0x1f0>)
 800170c:	689b      	ldr	r3, [r3, #8]
 800170e:	f023 0203 	bic.w	r2, r3, #3
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	4943      	ldr	r1, [pc, #268]	; (8001824 <HAL_RCC_ClockConfig+0x1f0>)
 8001718:	4313      	orrs	r3, r2
 800171a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800171c:	f7ff f85a 	bl	80007d4 <HAL_GetTick>
 8001720:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001722:	e00a      	b.n	800173a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001724:	f7ff f856 	bl	80007d4 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001732:	4293      	cmp	r3, r2
 8001734:	d901      	bls.n	800173a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e06e      	b.n	8001818 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800173a:	4b3a      	ldr	r3, [pc, #232]	; (8001824 <HAL_RCC_ClockConfig+0x1f0>)
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	f003 020c 	and.w	r2, r3, #12
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	429a      	cmp	r2, r3
 800174a:	d1eb      	bne.n	8001724 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f003 0302 	and.w	r3, r3, #2
 8001754:	2b00      	cmp	r3, #0
 8001756:	d010      	beq.n	800177a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	689a      	ldr	r2, [r3, #8]
 800175c:	4b31      	ldr	r3, [pc, #196]	; (8001824 <HAL_RCC_ClockConfig+0x1f0>)
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001764:	429a      	cmp	r2, r3
 8001766:	d208      	bcs.n	800177a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001768:	4b2e      	ldr	r3, [pc, #184]	; (8001824 <HAL_RCC_ClockConfig+0x1f0>)
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	689b      	ldr	r3, [r3, #8]
 8001774:	492b      	ldr	r1, [pc, #172]	; (8001824 <HAL_RCC_ClockConfig+0x1f0>)
 8001776:	4313      	orrs	r3, r2
 8001778:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800177a:	4b29      	ldr	r3, [pc, #164]	; (8001820 <HAL_RCC_ClockConfig+0x1ec>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0307 	and.w	r3, r3, #7
 8001782:	683a      	ldr	r2, [r7, #0]
 8001784:	429a      	cmp	r2, r3
 8001786:	d210      	bcs.n	80017aa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001788:	4b25      	ldr	r3, [pc, #148]	; (8001820 <HAL_RCC_ClockConfig+0x1ec>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f023 0207 	bic.w	r2, r3, #7
 8001790:	4923      	ldr	r1, [pc, #140]	; (8001820 <HAL_RCC_ClockConfig+0x1ec>)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	4313      	orrs	r3, r2
 8001796:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001798:	4b21      	ldr	r3, [pc, #132]	; (8001820 <HAL_RCC_ClockConfig+0x1ec>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0307 	and.w	r3, r3, #7
 80017a0:	683a      	ldr	r2, [r7, #0]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d001      	beq.n	80017aa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e036      	b.n	8001818 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0304 	and.w	r3, r3, #4
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d008      	beq.n	80017c8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017b6:	4b1b      	ldr	r3, [pc, #108]	; (8001824 <HAL_RCC_ClockConfig+0x1f0>)
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	68db      	ldr	r3, [r3, #12]
 80017c2:	4918      	ldr	r1, [pc, #96]	; (8001824 <HAL_RCC_ClockConfig+0x1f0>)
 80017c4:	4313      	orrs	r3, r2
 80017c6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0308 	and.w	r3, r3, #8
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d009      	beq.n	80017e8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80017d4:	4b13      	ldr	r3, [pc, #76]	; (8001824 <HAL_RCC_ClockConfig+0x1f0>)
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	691b      	ldr	r3, [r3, #16]
 80017e0:	00db      	lsls	r3, r3, #3
 80017e2:	4910      	ldr	r1, [pc, #64]	; (8001824 <HAL_RCC_ClockConfig+0x1f0>)
 80017e4:	4313      	orrs	r3, r2
 80017e6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80017e8:	f000 f824 	bl	8001834 <HAL_RCC_GetSysClockFreq>
 80017ec:	4602      	mov	r2, r0
 80017ee:	4b0d      	ldr	r3, [pc, #52]	; (8001824 <HAL_RCC_ClockConfig+0x1f0>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	091b      	lsrs	r3, r3, #4
 80017f4:	f003 030f 	and.w	r3, r3, #15
 80017f8:	490b      	ldr	r1, [pc, #44]	; (8001828 <HAL_RCC_ClockConfig+0x1f4>)
 80017fa:	5ccb      	ldrb	r3, [r1, r3]
 80017fc:	f003 031f 	and.w	r3, r3, #31
 8001800:	fa22 f303 	lsr.w	r3, r2, r3
 8001804:	4a09      	ldr	r2, [pc, #36]	; (800182c <HAL_RCC_ClockConfig+0x1f8>)
 8001806:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001808:	4b09      	ldr	r3, [pc, #36]	; (8001830 <HAL_RCC_ClockConfig+0x1fc>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4618      	mov	r0, r3
 800180e:	f7fe ff91 	bl	8000734 <HAL_InitTick>
 8001812:	4603      	mov	r3, r0
 8001814:	72fb      	strb	r3, [r7, #11]

  return status;
 8001816:	7afb      	ldrb	r3, [r7, #11]
}
 8001818:	4618      	mov	r0, r3
 800181a:	3710      	adds	r7, #16
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40022000 	.word	0x40022000
 8001824:	40021000 	.word	0x40021000
 8001828:	08001a90 	.word	0x08001a90
 800182c:	20000000 	.word	0x20000000
 8001830:	20000004 	.word	0x20000004

08001834 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001834:	b480      	push	{r7}
 8001836:	b089      	sub	sp, #36	; 0x24
 8001838:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800183a:	2300      	movs	r3, #0
 800183c:	61fb      	str	r3, [r7, #28]
 800183e:	2300      	movs	r3, #0
 8001840:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001842:	4b3e      	ldr	r3, [pc, #248]	; (800193c <HAL_RCC_GetSysClockFreq+0x108>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f003 030c 	and.w	r3, r3, #12
 800184a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800184c:	4b3b      	ldr	r3, [pc, #236]	; (800193c <HAL_RCC_GetSysClockFreq+0x108>)
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	f003 0303 	and.w	r3, r3, #3
 8001854:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d005      	beq.n	8001868 <HAL_RCC_GetSysClockFreq+0x34>
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	2b0c      	cmp	r3, #12
 8001860:	d121      	bne.n	80018a6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	2b01      	cmp	r3, #1
 8001866:	d11e      	bne.n	80018a6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001868:	4b34      	ldr	r3, [pc, #208]	; (800193c <HAL_RCC_GetSysClockFreq+0x108>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0308 	and.w	r3, r3, #8
 8001870:	2b00      	cmp	r3, #0
 8001872:	d107      	bne.n	8001884 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001874:	4b31      	ldr	r3, [pc, #196]	; (800193c <HAL_RCC_GetSysClockFreq+0x108>)
 8001876:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800187a:	0a1b      	lsrs	r3, r3, #8
 800187c:	f003 030f 	and.w	r3, r3, #15
 8001880:	61fb      	str	r3, [r7, #28]
 8001882:	e005      	b.n	8001890 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001884:	4b2d      	ldr	r3, [pc, #180]	; (800193c <HAL_RCC_GetSysClockFreq+0x108>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	091b      	lsrs	r3, r3, #4
 800188a:	f003 030f 	and.w	r3, r3, #15
 800188e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001890:	4a2b      	ldr	r2, [pc, #172]	; (8001940 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001898:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d10d      	bne.n	80018bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80018a4:	e00a      	b.n	80018bc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	2b04      	cmp	r3, #4
 80018aa:	d102      	bne.n	80018b2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80018ac:	4b25      	ldr	r3, [pc, #148]	; (8001944 <HAL_RCC_GetSysClockFreq+0x110>)
 80018ae:	61bb      	str	r3, [r7, #24]
 80018b0:	e004      	b.n	80018bc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	2b08      	cmp	r3, #8
 80018b6:	d101      	bne.n	80018bc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80018b8:	4b23      	ldr	r3, [pc, #140]	; (8001948 <HAL_RCC_GetSysClockFreq+0x114>)
 80018ba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	2b0c      	cmp	r3, #12
 80018c0:	d134      	bne.n	800192c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80018c2:	4b1e      	ldr	r3, [pc, #120]	; (800193c <HAL_RCC_GetSysClockFreq+0x108>)
 80018c4:	68db      	ldr	r3, [r3, #12]
 80018c6:	f003 0303 	and.w	r3, r3, #3
 80018ca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d003      	beq.n	80018da <HAL_RCC_GetSysClockFreq+0xa6>
 80018d2:	68bb      	ldr	r3, [r7, #8]
 80018d4:	2b03      	cmp	r3, #3
 80018d6:	d003      	beq.n	80018e0 <HAL_RCC_GetSysClockFreq+0xac>
 80018d8:	e005      	b.n	80018e6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80018da:	4b1a      	ldr	r3, [pc, #104]	; (8001944 <HAL_RCC_GetSysClockFreq+0x110>)
 80018dc:	617b      	str	r3, [r7, #20]
      break;
 80018de:	e005      	b.n	80018ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80018e0:	4b19      	ldr	r3, [pc, #100]	; (8001948 <HAL_RCC_GetSysClockFreq+0x114>)
 80018e2:	617b      	str	r3, [r7, #20]
      break;
 80018e4:	e002      	b.n	80018ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	617b      	str	r3, [r7, #20]
      break;
 80018ea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80018ec:	4b13      	ldr	r3, [pc, #76]	; (800193c <HAL_RCC_GetSysClockFreq+0x108>)
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	091b      	lsrs	r3, r3, #4
 80018f2:	f003 0307 	and.w	r3, r3, #7
 80018f6:	3301      	adds	r3, #1
 80018f8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80018fa:	4b10      	ldr	r3, [pc, #64]	; (800193c <HAL_RCC_GetSysClockFreq+0x108>)
 80018fc:	68db      	ldr	r3, [r3, #12]
 80018fe:	0a1b      	lsrs	r3, r3, #8
 8001900:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001904:	697a      	ldr	r2, [r7, #20]
 8001906:	fb02 f203 	mul.w	r2, r2, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001910:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001912:	4b0a      	ldr	r3, [pc, #40]	; (800193c <HAL_RCC_GetSysClockFreq+0x108>)
 8001914:	68db      	ldr	r3, [r3, #12]
 8001916:	0e5b      	lsrs	r3, r3, #25
 8001918:	f003 0303 	and.w	r3, r3, #3
 800191c:	3301      	adds	r3, #1
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001922:	697a      	ldr	r2, [r7, #20]
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	fbb2 f3f3 	udiv	r3, r2, r3
 800192a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800192c:	69bb      	ldr	r3, [r7, #24]
}
 800192e:	4618      	mov	r0, r3
 8001930:	3724      	adds	r7, #36	; 0x24
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	40021000 	.word	0x40021000
 8001940:	08001aa0 	.word	0x08001aa0
 8001944:	00f42400 	.word	0x00f42400
 8001948:	007a1200 	.word	0x007a1200

0800194c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001954:	2300      	movs	r3, #0
 8001956:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001958:	4b2a      	ldr	r3, [pc, #168]	; (8001a04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800195a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800195c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001960:	2b00      	cmp	r3, #0
 8001962:	d003      	beq.n	800196c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001964:	f7ff fa28 	bl	8000db8 <HAL_PWREx_GetVoltageRange>
 8001968:	6178      	str	r0, [r7, #20]
 800196a:	e014      	b.n	8001996 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800196c:	4b25      	ldr	r3, [pc, #148]	; (8001a04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800196e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001970:	4a24      	ldr	r2, [pc, #144]	; (8001a04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001972:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001976:	6593      	str	r3, [r2, #88]	; 0x58
 8001978:	4b22      	ldr	r3, [pc, #136]	; (8001a04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800197a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800197c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001980:	60fb      	str	r3, [r7, #12]
 8001982:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001984:	f7ff fa18 	bl	8000db8 <HAL_PWREx_GetVoltageRange>
 8001988:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800198a:	4b1e      	ldr	r3, [pc, #120]	; (8001a04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800198c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800198e:	4a1d      	ldr	r2, [pc, #116]	; (8001a04 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001990:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001994:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800199c:	d10b      	bne.n	80019b6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2b80      	cmp	r3, #128	; 0x80
 80019a2:	d919      	bls.n	80019d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2ba0      	cmp	r3, #160	; 0xa0
 80019a8:	d902      	bls.n	80019b0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80019aa:	2302      	movs	r3, #2
 80019ac:	613b      	str	r3, [r7, #16]
 80019ae:	e013      	b.n	80019d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80019b0:	2301      	movs	r3, #1
 80019b2:	613b      	str	r3, [r7, #16]
 80019b4:	e010      	b.n	80019d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2b80      	cmp	r3, #128	; 0x80
 80019ba:	d902      	bls.n	80019c2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80019bc:	2303      	movs	r3, #3
 80019be:	613b      	str	r3, [r7, #16]
 80019c0:	e00a      	b.n	80019d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2b80      	cmp	r3, #128	; 0x80
 80019c6:	d102      	bne.n	80019ce <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80019c8:	2302      	movs	r3, #2
 80019ca:	613b      	str	r3, [r7, #16]
 80019cc:	e004      	b.n	80019d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2b70      	cmp	r3, #112	; 0x70
 80019d2:	d101      	bne.n	80019d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80019d4:	2301      	movs	r3, #1
 80019d6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80019d8:	4b0b      	ldr	r3, [pc, #44]	; (8001a08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f023 0207 	bic.w	r2, r3, #7
 80019e0:	4909      	ldr	r1, [pc, #36]	; (8001a08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80019e8:	4b07      	ldr	r3, [pc, #28]	; (8001a08 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0307 	and.w	r3, r3, #7
 80019f0:	693a      	ldr	r2, [r7, #16]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d001      	beq.n	80019fa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e000      	b.n	80019fc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80019fa:	2300      	movs	r3, #0
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3718      	adds	r7, #24
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	40021000 	.word	0x40021000
 8001a08:	40022000 	.word	0x40022000

08001a0c <__libc_init_array>:
 8001a0c:	b570      	push	{r4, r5, r6, lr}
 8001a0e:	4d0d      	ldr	r5, [pc, #52]	; (8001a44 <__libc_init_array+0x38>)
 8001a10:	4c0d      	ldr	r4, [pc, #52]	; (8001a48 <__libc_init_array+0x3c>)
 8001a12:	1b64      	subs	r4, r4, r5
 8001a14:	10a4      	asrs	r4, r4, #2
 8001a16:	2600      	movs	r6, #0
 8001a18:	42a6      	cmp	r6, r4
 8001a1a:	d109      	bne.n	8001a30 <__libc_init_array+0x24>
 8001a1c:	4d0b      	ldr	r5, [pc, #44]	; (8001a4c <__libc_init_array+0x40>)
 8001a1e:	4c0c      	ldr	r4, [pc, #48]	; (8001a50 <__libc_init_array+0x44>)
 8001a20:	f000 f820 	bl	8001a64 <_init>
 8001a24:	1b64      	subs	r4, r4, r5
 8001a26:	10a4      	asrs	r4, r4, #2
 8001a28:	2600      	movs	r6, #0
 8001a2a:	42a6      	cmp	r6, r4
 8001a2c:	d105      	bne.n	8001a3a <__libc_init_array+0x2e>
 8001a2e:	bd70      	pop	{r4, r5, r6, pc}
 8001a30:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a34:	4798      	blx	r3
 8001a36:	3601      	adds	r6, #1
 8001a38:	e7ee      	b.n	8001a18 <__libc_init_array+0xc>
 8001a3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a3e:	4798      	blx	r3
 8001a40:	3601      	adds	r6, #1
 8001a42:	e7f2      	b.n	8001a2a <__libc_init_array+0x1e>
 8001a44:	08001ad0 	.word	0x08001ad0
 8001a48:	08001ad0 	.word	0x08001ad0
 8001a4c:	08001ad0 	.word	0x08001ad0
 8001a50:	08001ad4 	.word	0x08001ad4

08001a54 <memset>:
 8001a54:	4402      	add	r2, r0
 8001a56:	4603      	mov	r3, r0
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d100      	bne.n	8001a5e <memset+0xa>
 8001a5c:	4770      	bx	lr
 8001a5e:	f803 1b01 	strb.w	r1, [r3], #1
 8001a62:	e7f9      	b.n	8001a58 <memset+0x4>

08001a64 <_init>:
 8001a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a66:	bf00      	nop
 8001a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a6a:	bc08      	pop	{r3}
 8001a6c:	469e      	mov	lr, r3
 8001a6e:	4770      	bx	lr

08001a70 <_fini>:
 8001a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a72:	bf00      	nop
 8001a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a76:	bc08      	pop	{r3}
 8001a78:	469e      	mov	lr, r3
 8001a7a:	4770      	bx	lr
