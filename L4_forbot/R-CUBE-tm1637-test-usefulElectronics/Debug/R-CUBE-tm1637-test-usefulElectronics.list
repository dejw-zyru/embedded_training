
R-CUBE-tm1637-test-usefulElectronics.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001df4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08001eb4  08001eb4  00011eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ed4  08001ed4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08001ed4  08001ed4  00011ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001edc  08001edc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001edc  08001edc  00011edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001ee0  08001ee0  00011ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08001ee4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000010  08001ef4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000044  08001ef4  00020044  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000038f7  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001030  00000000  00000000  0002392f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000440  00000000  00000000  00024960  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000003a8  00000000  00000000  00024da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010329  00000000  00000000  00025148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000548b  00000000  00000000  00035471  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00062d16  00000000  00000000  0003a8fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0009d612  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000db8  00000000  00000000  0009d668  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001e9c 	.word	0x08001e9c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08001e9c 	.word	0x08001e9c

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f82e 	bl	80002b0 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__udivmoddi4>:
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	4657      	mov	r7, sl
 80002b4:	464e      	mov	r6, r9
 80002b6:	4645      	mov	r5, r8
 80002b8:	46de      	mov	lr, fp
 80002ba:	b5e0      	push	{r5, r6, r7, lr}
 80002bc:	0004      	movs	r4, r0
 80002be:	000d      	movs	r5, r1
 80002c0:	4692      	mov	sl, r2
 80002c2:	4699      	mov	r9, r3
 80002c4:	b083      	sub	sp, #12
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d830      	bhi.n	800032c <__udivmoddi4+0x7c>
 80002ca:	d02d      	beq.n	8000328 <__udivmoddi4+0x78>
 80002cc:	4649      	mov	r1, r9
 80002ce:	4650      	mov	r0, sl
 80002d0:	f000 f8ba 	bl	8000448 <__clzdi2>
 80002d4:	0029      	movs	r1, r5
 80002d6:	0006      	movs	r6, r0
 80002d8:	0020      	movs	r0, r4
 80002da:	f000 f8b5 	bl	8000448 <__clzdi2>
 80002de:	1a33      	subs	r3, r6, r0
 80002e0:	4698      	mov	r8, r3
 80002e2:	3b20      	subs	r3, #32
 80002e4:	469b      	mov	fp, r3
 80002e6:	d433      	bmi.n	8000350 <__udivmoddi4+0xa0>
 80002e8:	465a      	mov	r2, fp
 80002ea:	4653      	mov	r3, sl
 80002ec:	4093      	lsls	r3, r2
 80002ee:	4642      	mov	r2, r8
 80002f0:	001f      	movs	r7, r3
 80002f2:	4653      	mov	r3, sl
 80002f4:	4093      	lsls	r3, r2
 80002f6:	001e      	movs	r6, r3
 80002f8:	42af      	cmp	r7, r5
 80002fa:	d83a      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d100      	bne.n	8000302 <__udivmoddi4+0x52>
 8000300:	e078      	b.n	80003f4 <__udivmoddi4+0x144>
 8000302:	465b      	mov	r3, fp
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5e>
 800030c:	e075      	b.n	80003fa <__udivmoddi4+0x14a>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	465a      	mov	r2, fp
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4642      	mov	r2, r8
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e028      	b.n	800037a <__udivmoddi4+0xca>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9cf      	bls.n	80002cc <__udivmoddi4+0x1c>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8e>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b003      	add	sp, #12
 8000344:	bcf0      	pop	{r4, r5, r6, r7}
 8000346:	46bb      	mov	fp, r7
 8000348:	46b2      	mov	sl, r6
 800034a:	46a9      	mov	r9, r5
 800034c:	46a0      	mov	r8, r4
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	4642      	mov	r2, r8
 8000352:	2320      	movs	r3, #32
 8000354:	1a9b      	subs	r3, r3, r2
 8000356:	4652      	mov	r2, sl
 8000358:	40da      	lsrs	r2, r3
 800035a:	4641      	mov	r1, r8
 800035c:	0013      	movs	r3, r2
 800035e:	464a      	mov	r2, r9
 8000360:	408a      	lsls	r2, r1
 8000362:	0017      	movs	r7, r2
 8000364:	4642      	mov	r2, r8
 8000366:	431f      	orrs	r7, r3
 8000368:	4653      	mov	r3, sl
 800036a:	4093      	lsls	r3, r2
 800036c:	001e      	movs	r6, r3
 800036e:	42af      	cmp	r7, r5
 8000370:	d9c4      	bls.n	80002fc <__udivmoddi4+0x4c>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	4643      	mov	r3, r8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0d9      	beq.n	8000334 <__udivmoddi4+0x84>
 8000380:	07fb      	lsls	r3, r7, #31
 8000382:	0872      	lsrs	r2, r6, #1
 8000384:	431a      	orrs	r2, r3
 8000386:	4646      	mov	r6, r8
 8000388:	087b      	lsrs	r3, r7, #1
 800038a:	e00e      	b.n	80003aa <__udivmoddi4+0xfa>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d101      	bne.n	8000394 <__udivmoddi4+0xe4>
 8000390:	42a2      	cmp	r2, r4
 8000392:	d80c      	bhi.n	80003ae <__udivmoddi4+0xfe>
 8000394:	1aa4      	subs	r4, r4, r2
 8000396:	419d      	sbcs	r5, r3
 8000398:	2001      	movs	r0, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	3e01      	subs	r6, #1
 80003a2:	1824      	adds	r4, r4, r0
 80003a4:	414d      	adcs	r5, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d006      	beq.n	80003b8 <__udivmoddi4+0x108>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d9ee      	bls.n	800038c <__udivmoddi4+0xdc>
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1924      	adds	r4, r4, r4
 80003b2:	416d      	adcs	r5, r5
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d1f8      	bne.n	80003aa <__udivmoddi4+0xfa>
 80003b8:	9800      	ldr	r0, [sp, #0]
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	465b      	mov	r3, fp
 80003be:	1900      	adds	r0, r0, r4
 80003c0:	4169      	adcs	r1, r5
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db24      	blt.n	8000410 <__udivmoddi4+0x160>
 80003c6:	002b      	movs	r3, r5
 80003c8:	465a      	mov	r2, fp
 80003ca:	4644      	mov	r4, r8
 80003cc:	40d3      	lsrs	r3, r2
 80003ce:	002a      	movs	r2, r5
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	465b      	mov	r3, fp
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db2a      	blt.n	8000432 <__udivmoddi4+0x182>
 80003dc:	0026      	movs	r6, r4
 80003de:	409e      	lsls	r6, r3
 80003e0:	0033      	movs	r3, r6
 80003e2:	0026      	movs	r6, r4
 80003e4:	4647      	mov	r7, r8
 80003e6:	40be      	lsls	r6, r7
 80003e8:	0032      	movs	r2, r6
 80003ea:	1a80      	subs	r0, r0, r2
 80003ec:	4199      	sbcs	r1, r3
 80003ee:	9000      	str	r0, [sp, #0]
 80003f0:	9101      	str	r1, [sp, #4]
 80003f2:	e79f      	b.n	8000334 <__udivmoddi4+0x84>
 80003f4:	42a3      	cmp	r3, r4
 80003f6:	d8bc      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80003f8:	e783      	b.n	8000302 <__udivmoddi4+0x52>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	9100      	str	r1, [sp, #0]
 8000406:	9201      	str	r2, [sp, #4]
 8000408:	2201      	movs	r2, #1
 800040a:	40da      	lsrs	r2, r3
 800040c:	9201      	str	r2, [sp, #4]
 800040e:	e786      	b.n	800031e <__udivmoddi4+0x6e>
 8000410:	4642      	mov	r2, r8
 8000412:	2320      	movs	r3, #32
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	4646      	mov	r6, r8
 800041a:	409a      	lsls	r2, r3
 800041c:	0023      	movs	r3, r4
 800041e:	40f3      	lsrs	r3, r6
 8000420:	4644      	mov	r4, r8
 8000422:	4313      	orrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	dad4      	bge.n	80003dc <__udivmoddi4+0x12c>
 8000432:	4642      	mov	r2, r8
 8000434:	002f      	movs	r7, r5
 8000436:	2320      	movs	r3, #32
 8000438:	0026      	movs	r6, r4
 800043a:	4097      	lsls	r7, r2
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	40de      	lsrs	r6, r3
 8000440:	003b      	movs	r3, r7
 8000442:	4333      	orrs	r3, r6
 8000444:	e7cd      	b.n	80003e2 <__udivmoddi4+0x132>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__clzdi2>:
 8000448:	b510      	push	{r4, lr}
 800044a:	2900      	cmp	r1, #0
 800044c:	d103      	bne.n	8000456 <__clzdi2+0xe>
 800044e:	f000 f807 	bl	8000460 <__clzsi2>
 8000452:	3020      	adds	r0, #32
 8000454:	e002      	b.n	800045c <__clzdi2+0x14>
 8000456:	1c08      	adds	r0, r1, #0
 8000458:	f000 f802 	bl	8000460 <__clzsi2>
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__clzsi2>:
 8000460:	211c      	movs	r1, #28
 8000462:	2301      	movs	r3, #1
 8000464:	041b      	lsls	r3, r3, #16
 8000466:	4298      	cmp	r0, r3
 8000468:	d301      	bcc.n	800046e <__clzsi2+0xe>
 800046a:	0c00      	lsrs	r0, r0, #16
 800046c:	3910      	subs	r1, #16
 800046e:	0a1b      	lsrs	r3, r3, #8
 8000470:	4298      	cmp	r0, r3
 8000472:	d301      	bcc.n	8000478 <__clzsi2+0x18>
 8000474:	0a00      	lsrs	r0, r0, #8
 8000476:	3908      	subs	r1, #8
 8000478:	091b      	lsrs	r3, r3, #4
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0x22>
 800047e:	0900      	lsrs	r0, r0, #4
 8000480:	3904      	subs	r1, #4
 8000482:	a202      	add	r2, pc, #8	; (adr r2, 800048c <__clzsi2+0x2c>)
 8000484:	5c10      	ldrb	r0, [r2, r0]
 8000486:	1840      	adds	r0, r0, r1
 8000488:	4770      	bx	lr
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	02020304 	.word	0x02020304
 8000490:	01010101 	.word	0x01010101
	...

0800049c <tm1637_CLKhigh>:

extern uint32_t Timer1;
extern uint8_t CurrentDisplay[4];
extern uint8_t tm1637_Segments[8];
void tm1637_CLKhigh()
{																	  	//SCL high period
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);		  	//Setting SCL frequency
 80004a0:	4b0a      	ldr	r3, [pc, #40]	; (80004cc <tm1637_CLKhigh+0x30>)
 80004a2:	2201      	movs	r2, #1
 80004a4:	2110      	movs	r1, #16
 80004a6:	0018      	movs	r0, r3
 80004a8:	f000 ff57 	bl	800135a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 80004ac:	4b07      	ldr	r3, [pc, #28]	; (80004cc <tm1637_CLKhigh+0x30>)
 80004ae:	2201      	movs	r2, #1
 80004b0:	2110      	movs	r1, #16
 80004b2:	0018      	movs	r0, r3
 80004b4:	f000 ff51 	bl	800135a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 80004b8:	4b04      	ldr	r3, [pc, #16]	; (80004cc <tm1637_CLKhigh+0x30>)
 80004ba:	2201      	movs	r2, #1
 80004bc:	2110      	movs	r1, #16
 80004be:	0018      	movs	r0, r3
 80004c0:	f000 ff4b 	bl	800135a <HAL_GPIO_WritePin>
}
 80004c4:	46c0      	nop			; (mov r8, r8)
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bd80      	pop	{r7, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	50000400 	.word	0x50000400

080004d0 <tm1637_CLKlow>:
void tm1637_CLKlow()
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);		//SCL low period
 80004d4:	4b0a      	ldr	r3, [pc, #40]	; (8000500 <tm1637_CLKlow+0x30>)
 80004d6:	2200      	movs	r2, #0
 80004d8:	2110      	movs	r1, #16
 80004da:	0018      	movs	r0, r3
 80004dc:	f000 ff3d 	bl	800135a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 80004e0:	4b07      	ldr	r3, [pc, #28]	; (8000500 <tm1637_CLKlow+0x30>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	2110      	movs	r1, #16
 80004e6:	0018      	movs	r0, r3
 80004e8:	f000 ff37 	bl	800135a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 80004ec:	4b04      	ldr	r3, [pc, #16]	; (8000500 <tm1637_CLKlow+0x30>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	2110      	movs	r1, #16
 80004f2:	0018      	movs	r0, r3
 80004f4:	f000 ff31 	bl	800135a <HAL_GPIO_WritePin>
}
 80004f8:	46c0      	nop			; (mov r8, r8)
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	46c0      	nop			; (mov r8, r8)
 8000500:	50000400 	.word	0x50000400

08000504 <tm1637_SDOhigh>:
void tm1637_SDOhigh()
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_SET);			//SDO high period
 8000508:	4b0a      	ldr	r3, [pc, #40]	; (8000534 <tm1637_SDOhigh+0x30>)
 800050a:	2201      	movs	r2, #1
 800050c:	2120      	movs	r1, #32
 800050e:	0018      	movs	r0, r3
 8000510:	f000 ff23 	bl	800135a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_SET);
 8000514:	4b07      	ldr	r3, [pc, #28]	; (8000534 <tm1637_SDOhigh+0x30>)
 8000516:	2201      	movs	r2, #1
 8000518:	2120      	movs	r1, #32
 800051a:	0018      	movs	r0, r3
 800051c:	f000 ff1d 	bl	800135a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_SET);
 8000520:	4b04      	ldr	r3, [pc, #16]	; (8000534 <tm1637_SDOhigh+0x30>)
 8000522:	2201      	movs	r2, #1
 8000524:	2120      	movs	r1, #32
 8000526:	0018      	movs	r0, r3
 8000528:	f000 ff17 	bl	800135a <HAL_GPIO_WritePin>
}
 800052c:	46c0      	nop			; (mov r8, r8)
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	46c0      	nop			; (mov r8, r8)
 8000534:	50000400 	.word	0x50000400

08000538 <tm1637_SDOlow>:
void tm1637_SDOlow()
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_RESET);			//SDO low period
 800053c:	4b0a      	ldr	r3, [pc, #40]	; (8000568 <tm1637_SDOlow+0x30>)
 800053e:	2200      	movs	r2, #0
 8000540:	2120      	movs	r1, #32
 8000542:	0018      	movs	r0, r3
 8000544:	f000 ff09 	bl	800135a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_RESET);
 8000548:	4b07      	ldr	r3, [pc, #28]	; (8000568 <tm1637_SDOlow+0x30>)
 800054a:	2200      	movs	r2, #0
 800054c:	2120      	movs	r1, #32
 800054e:	0018      	movs	r0, r3
 8000550:	f000 ff03 	bl	800135a <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_RESET);
 8000554:	4b04      	ldr	r3, [pc, #16]	; (8000568 <tm1637_SDOlow+0x30>)
 8000556:	2200      	movs	r2, #0
 8000558:	2120      	movs	r1, #32
 800055a:	0018      	movs	r0, r3
 800055c:	f000 fefd 	bl	800135a <HAL_GPIO_WritePin>
}
 8000560:	46c0      	nop			; (mov r8, r8)
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	46c0      	nop			; (mov r8, r8)
 8000568:	50000400 	.word	0x50000400

0800056c <tm1637_StartPacket>:
void tm1637_StartPacket()												//Lower SDO line while CLK line is high
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
	tm1637_CLKhigh();
 8000570:	f7ff ff94 	bl	800049c <tm1637_CLKhigh>

	tm1637_SDOhigh();
 8000574:	f7ff ffc6 	bl	8000504 <tm1637_SDOhigh>
	tm1637_SDOlow();
 8000578:	f7ff ffde 	bl	8000538 <tm1637_SDOlow>

	tm1637_CLKlow();
 800057c:	f7ff ffa8 	bl	80004d0 <tm1637_CLKlow>
}
 8000580:	46c0      	nop			; (mov r8, r8)
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}

08000586 <tm1637_EndPacket>:
void tm1637_EndPacket()													//SDO line is pulled high while SCL line is high
{
 8000586:	b580      	push	{r7, lr}
 8000588:	af00      	add	r7, sp, #0
	tm1637_CLKlow();
 800058a:	f7ff ffa1 	bl	80004d0 <tm1637_CLKlow>
	tm1637_SDOlow();
 800058e:	f7ff ffd3 	bl	8000538 <tm1637_SDOlow>

	tm1637_CLKhigh();
 8000592:	f7ff ff83 	bl	800049c <tm1637_CLKhigh>
	tm1637_SDOhigh();
 8000596:	f7ff ffb5 	bl	8000504 <tm1637_SDOhigh>
}
 800059a:	46c0      	nop			; (mov r8, r8)
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}

080005a0 <tm1637_DataOut>:
void tm1637_DataOut(uint8_t *tm1637_TxBuffer)							//Low level data transfer function
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b084      	sub	sp, #16
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]

	for(int8_t j = 0; j < PACKET_SIZE; j++)								//Send least significant bit first
 80005a8:	230f      	movs	r3, #15
 80005aa:	18fb      	adds	r3, r7, r3
 80005ac:	2200      	movs	r2, #0
 80005ae:	701a      	strb	r2, [r3, #0]
 80005b0:	e01a      	b.n	80005e8 <tm1637_DataOut+0x48>
	{
		tm1637_CLKlow();
 80005b2:	f7ff ff8d 	bl	80004d0 <tm1637_CLKlow>
		if(tm1637_TxBuffer[j] == GPIO_PIN_SET)							//Check logic level
 80005b6:	230f      	movs	r3, #15
 80005b8:	18fb      	adds	r3, r7, r3
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	b25b      	sxtb	r3, r3
 80005be:	687a      	ldr	r2, [r7, #4]
 80005c0:	18d3      	adds	r3, r2, r3
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	2b01      	cmp	r3, #1
 80005c6:	d102      	bne.n	80005ce <tm1637_DataOut+0x2e>
		{
			tm1637_SDOhigh();
 80005c8:	f7ff ff9c 	bl	8000504 <tm1637_SDOhigh>
 80005cc:	e001      	b.n	80005d2 <tm1637_DataOut+0x32>

		}
		else
		{
			tm1637_SDOlow();
 80005ce:	f7ff ffb3 	bl	8000538 <tm1637_SDOlow>

		}
		tm1637_CLKhigh();
 80005d2:	f7ff ff63 	bl	800049c <tm1637_CLKhigh>
	for(int8_t j = 0; j < PACKET_SIZE; j++)								//Send least significant bit first
 80005d6:	210f      	movs	r1, #15
 80005d8:	187b      	adds	r3, r7, r1
 80005da:	781b      	ldrb	r3, [r3, #0]
 80005dc:	b25b      	sxtb	r3, r3
 80005de:	b2db      	uxtb	r3, r3
 80005e0:	3301      	adds	r3, #1
 80005e2:	b2da      	uxtb	r2, r3
 80005e4:	187b      	adds	r3, r7, r1
 80005e6:	701a      	strb	r2, [r3, #0]
 80005e8:	230f      	movs	r3, #15
 80005ea:	18fb      	adds	r3, r7, r3
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	b25b      	sxtb	r3, r3
 80005f0:	2b07      	cmp	r3, #7
 80005f2:	ddde      	ble.n	80005b2 <tm1637_DataOut+0x12>
	} 
}
 80005f4:	46c0      	nop			; (mov r8, r8)
 80005f6:	46c0      	nop			; (mov r8, r8)
 80005f8:	46bd      	mov	sp, r7
 80005fa:	b004      	add	sp, #16
 80005fc:	bd80      	pop	{r7, pc}

080005fe <tm1637_TxCommand>:
void tm1637_TxCommand(uint8_t *Command)
{																		//Handles high level (bit by bit) transmission operation
 80005fe:	b580      	push	{r7, lr}
 8000600:	b086      	sub	sp, #24
 8000602:	af00      	add	r7, sp, #0
 8000604:	6078      	str	r0, [r7, #4]
	uint8_t ByteData[8] = {0};
 8000606:	230c      	movs	r3, #12
 8000608:	18fb      	adds	r3, r7, r3
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
 800060e:	2200      	movs	r2, #0
 8000610:	605a      	str	r2, [r3, #4]

	for(uint8_t i = 0; i < PACKET_SIZE; i++)
 8000612:	2317      	movs	r3, #23
 8000614:	18fb      	adds	r3, r7, r3
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
 800061a:	e018      	b.n	800064e <tm1637_TxCommand+0x50>
	{

		ByteData[i] = (Command[0] & (0x01 << i)) && 1;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	001a      	movs	r2, r3
 8000622:	2117      	movs	r1, #23
 8000624:	187b      	adds	r3, r7, r1
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	411a      	asrs	r2, r3
 800062a:	0013      	movs	r3, r2
 800062c:	2201      	movs	r2, #1
 800062e:	4013      	ands	r3, r2
 8000630:	1e5a      	subs	r2, r3, #1
 8000632:	4193      	sbcs	r3, r2
 8000634:	b2da      	uxtb	r2, r3
 8000636:	0008      	movs	r0, r1
 8000638:	187b      	adds	r3, r7, r1
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	0011      	movs	r1, r2
 800063e:	220c      	movs	r2, #12
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i = 0; i < PACKET_SIZE; i++)
 8000644:	183b      	adds	r3, r7, r0
 8000646:	781a      	ldrb	r2, [r3, #0]
 8000648:	183b      	adds	r3, r7, r0
 800064a:	3201      	adds	r2, #1
 800064c:	701a      	strb	r2, [r3, #0]
 800064e:	2317      	movs	r3, #23
 8000650:	18fb      	adds	r3, r7, r3
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	2b07      	cmp	r3, #7
 8000656:	d9e1      	bls.n	800061c <tm1637_TxCommand+0x1e>

																		//Convert from byte to bit per array element
	}

	tm1637_StartPacket();												//Send start packet bit
 8000658:	f7ff ff88 	bl	800056c <tm1637_StartPacket>
	tm1637_DataOut(ByteData);											//Send one byte
 800065c:	230c      	movs	r3, #12
 800065e:	18fb      	adds	r3, r7, r3
 8000660:	0018      	movs	r0, r3
 8000662:	f7ff ff9d 	bl	80005a0 <tm1637_DataOut>
	tm1637_CLKlow();													//Send one CLK for acknowledgment
 8000666:	f7ff ff33 	bl	80004d0 <tm1637_CLKlow>
	tm1637_CLKhigh();
 800066a:	f7ff ff17 	bl	800049c <tm1637_CLKhigh>
	tm1637_ACKcheck();													//wait for acknowledgment.
 800066e:	f000 f89f 	bl	80007b0 <tm1637_ACKcheck>
	if((Command[0] & 0xC0) != (0xC0))										//Check if the received packet is not an address.
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	781b      	ldrb	r3, [r3, #0]
 8000676:	001a      	movs	r2, r3
 8000678:	23c0      	movs	r3, #192	; 0xc0
 800067a:	4013      	ands	r3, r2
 800067c:	2bc0      	cmp	r3, #192	; 0xc0
 800067e:	d001      	beq.n	8000684 <tm1637_TxCommand+0x86>
	{
		tm1637_EndPacket();
 8000680:	f7ff ff81 	bl	8000586 <tm1637_EndPacket>
	}

}
 8000684:	46c0      	nop			; (mov r8, r8)
 8000686:	46bd      	mov	sp, r7
 8000688:	b006      	add	sp, #24
 800068a:	bd80      	pop	{r7, pc}

0800068c <tm1637_TxData>:
void tm1637_TxData(uint8_t *Data, uint8_t PacketSize)
{																		//Handles high level (bit by bit) transmission operation
 800068c:	b580      	push	{r7, lr}
 800068e:	b086      	sub	sp, #24
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
 8000694:	000a      	movs	r2, r1
 8000696:	1cfb      	adds	r3, r7, #3
 8000698:	701a      	strb	r2, [r3, #0]
	uint8_t ByteData[8] = {0};
 800069a:	230c      	movs	r3, #12
 800069c:	18fb      	adds	r3, r7, r3
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	2200      	movs	r2, #0
 80006a4:	605a      	str	r2, [r3, #4]

	for(uint8_t i = 0; i < PacketSize; i++)
 80006a6:	2317      	movs	r3, #23
 80006a8:	18fb      	adds	r3, r7, r3
 80006aa:	2200      	movs	r2, #0
 80006ac:	701a      	strb	r2, [r3, #0]
 80006ae:	e037      	b.n	8000720 <tm1637_TxData+0x94>
	{
		for(uint8_t j = 0; j < 8; j++)
 80006b0:	2316      	movs	r3, #22
 80006b2:	18fb      	adds	r3, r7, r3
 80006b4:	2200      	movs	r2, #0
 80006b6:	701a      	strb	r2, [r3, #0]
 80006b8:	e01c      	b.n	80006f4 <tm1637_TxData+0x68>
		{
			ByteData[j] = (Data[i] & (0x01 << j)) && 1;
 80006ba:	2317      	movs	r3, #23
 80006bc:	18fb      	adds	r3, r7, r3
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	687a      	ldr	r2, [r7, #4]
 80006c2:	18d3      	adds	r3, r2, r3
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	001a      	movs	r2, r3
 80006c8:	2116      	movs	r1, #22
 80006ca:	187b      	adds	r3, r7, r1
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	411a      	asrs	r2, r3
 80006d0:	0013      	movs	r3, r2
 80006d2:	2201      	movs	r2, #1
 80006d4:	4013      	ands	r3, r2
 80006d6:	1e5a      	subs	r2, r3, #1
 80006d8:	4193      	sbcs	r3, r2
 80006da:	b2da      	uxtb	r2, r3
 80006dc:	0008      	movs	r0, r1
 80006de:	187b      	adds	r3, r7, r1
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	0011      	movs	r1, r2
 80006e4:	220c      	movs	r2, #12
 80006e6:	18ba      	adds	r2, r7, r2
 80006e8:	54d1      	strb	r1, [r2, r3]
		for(uint8_t j = 0; j < 8; j++)
 80006ea:	183b      	adds	r3, r7, r0
 80006ec:	781a      	ldrb	r2, [r3, #0]
 80006ee:	183b      	adds	r3, r7, r0
 80006f0:	3201      	adds	r2, #1
 80006f2:	701a      	strb	r2, [r3, #0]
 80006f4:	2316      	movs	r3, #22
 80006f6:	18fb      	adds	r3, r7, r3
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	2b07      	cmp	r3, #7
 80006fc:	d9dd      	bls.n	80006ba <tm1637_TxData+0x2e>
		}
		tm1637_DataOut(ByteData);
 80006fe:	230c      	movs	r3, #12
 8000700:	18fb      	adds	r3, r7, r3
 8000702:	0018      	movs	r0, r3
 8000704:	f7ff ff4c 	bl	80005a0 <tm1637_DataOut>
		tm1637_CLKlow();
 8000708:	f7ff fee2 	bl	80004d0 <tm1637_CLKlow>
		tm1637_CLKhigh();
 800070c:	f7ff fec6 	bl	800049c <tm1637_CLKhigh>
		tm1637_ACKcheck();												//Transmit byte by byte
 8000710:	f000 f84e 	bl	80007b0 <tm1637_ACKcheck>
	for(uint8_t i = 0; i < PacketSize; i++)
 8000714:	2117      	movs	r1, #23
 8000716:	187b      	adds	r3, r7, r1
 8000718:	781a      	ldrb	r2, [r3, #0]
 800071a:	187b      	adds	r3, r7, r1
 800071c:	3201      	adds	r2, #1
 800071e:	701a      	strb	r2, [r3, #0]
 8000720:	2317      	movs	r3, #23
 8000722:	18fa      	adds	r2, r7, r3
 8000724:	1cfb      	adds	r3, r7, #3
 8000726:	7812      	ldrb	r2, [r2, #0]
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	429a      	cmp	r2, r3
 800072c:	d3c0      	bcc.n	80006b0 <tm1637_TxData+0x24>

	}
	tm1637_EndPacket();													//Send end packet at the end of data transmission.
 800072e:	f7ff ff2a 	bl	8000586 <tm1637_EndPacket>


}
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	46bd      	mov	sp, r7
 8000736:	b006      	add	sp, #24
 8000738:	bd80      	pop	{r7, pc}
	...

0800073c <tm1637_Initialize>:
void tm1637_Initialize(uint8_t Direction)								//Since SDI line is doing both transmission and reception
{																		//the corresponding GPIO pin must be reinitialized on the run
 800073c:	b590      	push	{r4, r7, lr}
 800073e:	b089      	sub	sp, #36	; 0x24
 8000740:	af00      	add	r7, sp, #0
 8000742:	0002      	movs	r2, r0
 8000744:	1dfb      	adds	r3, r7, #7
 8000746:	701a      	strb	r2, [r3, #0]
	GPIO_InitTypeDef GPIO_InitStruct = {0};								//To read ACK from TM1637 and to write data to it
 8000748:	240c      	movs	r4, #12
 800074a:	193b      	adds	r3, r7, r4
 800074c:	0018      	movs	r0, r3
 800074e:	2314      	movs	r3, #20
 8000750:	001a      	movs	r2, r3
 8000752:	2100      	movs	r1, #0
 8000754:	f001 fb9a 	bl	8001e8c <memset>
	GPIO_InitStruct.Pin = SCLK_Pin;
 8000758:	0021      	movs	r1, r4
 800075a:	187b      	adds	r3, r7, r1
 800075c:	2210      	movs	r2, #16
 800075e:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000760:	187b      	adds	r3, r7, r1
 8000762:	2200      	movs	r2, #0
 8000764:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000766:	187b      	adds	r3, r7, r1
 8000768:	2200      	movs	r2, #0
 800076a:	60da      	str	r2, [r3, #12]
	switch (Direction)													//Depending on the function input initialize the pin as input or output
 800076c:	1dfb      	adds	r3, r7, #7
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	2b00      	cmp	r3, #0
 8000772:	d00b      	beq.n	800078c <tm1637_Initialize+0x50>
 8000774:	2b01      	cmp	r3, #1
 8000776:	d114      	bne.n	80007a2 <tm1637_Initialize+0x66>
	{
		case DISPLAY2STM:
			GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000778:	187b      	adds	r3, r7, r1
 800077a:	2200      	movs	r2, #0
 800077c:	605a      	str	r2, [r3, #4]
			HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800077e:	187b      	adds	r3, r7, r1
 8000780:	4a0a      	ldr	r2, [pc, #40]	; (80007ac <tm1637_Initialize+0x70>)
 8000782:	0019      	movs	r1, r3
 8000784:	0010      	movs	r0, r2
 8000786:	f000 fc55 	bl	8001034 <HAL_GPIO_Init>
			break;
 800078a:	e00a      	b.n	80007a2 <tm1637_Initialize+0x66>
		case STM2DISPLAY:
			GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078c:	210c      	movs	r1, #12
 800078e:	187b      	adds	r3, r7, r1
 8000790:	2201      	movs	r2, #1
 8000792:	605a      	str	r2, [r3, #4]
			HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000794:	187b      	adds	r3, r7, r1
 8000796:	4a05      	ldr	r2, [pc, #20]	; (80007ac <tm1637_Initialize+0x70>)
 8000798:	0019      	movs	r1, r3
 800079a:	0010      	movs	r0, r2
 800079c:	f000 fc4a 	bl	8001034 <HAL_GPIO_Init>
			break;
 80007a0:	46c0      	nop			; (mov r8, r8)

	}

}
 80007a2:	46c0      	nop			; (mov r8, r8)
 80007a4:	46bd      	mov	sp, r7
 80007a6:	b009      	add	sp, #36	; 0x24
 80007a8:	bd90      	pop	{r4, r7, pc}
 80007aa:	46c0      	nop			; (mov r8, r8)
 80007ac:	50000c00 	.word	0x50000c00

080007b0 <tm1637_ACKcheck>:
void tm1637_ACKcheck()
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
	//Wait for acknowledgment bit
	tm1637_Initialize(DISPLAY2STM);										//initialize pin as input
 80007b4:	2001      	movs	r0, #1
 80007b6:	f7ff ffc1 	bl	800073c <tm1637_Initialize>
	tm1637_CLKlow();													//lower CLK line
 80007ba:	f7ff fe89 	bl	80004d0 <tm1637_CLKlow>
	while(HAL_GPIO_ReadPin(SCLK_GPIO_Port, SCLK_Pin))					//Wait until ACK bit is received
 80007be:	e002      	b.n	80007c6 <tm1637_ACKcheck+0x16>
	tm1637_Initialize(STM2DISPLAY);										//initialize pin as output for data transfer
 80007c0:	2000      	movs	r0, #0
 80007c2:	f7ff ffbb 	bl	800073c <tm1637_Initialize>
	while(HAL_GPIO_ReadPin(SCLK_GPIO_Port, SCLK_Pin))					//Wait until ACK bit is received
 80007c6:	4b05      	ldr	r3, [pc, #20]	; (80007dc <tm1637_ACKcheck+0x2c>)
 80007c8:	2110      	movs	r1, #16
 80007ca:	0018      	movs	r0, r3
 80007cc:	f000 fda8 	bl	8001320 <HAL_GPIO_ReadPin>
 80007d0:	1e03      	subs	r3, r0, #0
 80007d2:	d1f5      	bne.n	80007c0 <tm1637_ACKcheck+0x10>
}
 80007d4:	46c0      	nop			; (mov r8, r8)
 80007d6:	46c0      	nop			; (mov r8, r8)
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	50000400 	.word	0x50000400

080007e0 <tm1637_DisplayClear>:
void tm1637_DisplayClear()
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
	uint8_t EmptyBuffer[4] = {0};
 80007e6:	1d3b      	adds	r3, r7, #4
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
	uint8_t CommandCarrier[1] = {0};
 80007ec:	003b      	movs	r3, r7
 80007ee:	4a10      	ldr	r2, [pc, #64]	; (8000830 <tm1637_DisplayClear+0x50>)
 80007f0:	7812      	ldrb	r2, [r2, #0]
 80007f2:	701a      	strb	r2, [r3, #0]
	CommandCarrier[0] = DATA_SET;									//Send set data command
 80007f4:	003b      	movs	r3, r7
 80007f6:	2240      	movs	r2, #64	; 0x40
 80007f8:	701a      	strb	r2, [r3, #0]
	tm1637_TxCommand(CommandCarrier);
 80007fa:	003b      	movs	r3, r7
 80007fc:	0018      	movs	r0, r3
 80007fe:	f7ff fefe 	bl	80005fe <tm1637_TxCommand>
	CommandCarrier[0] = C0H;										//Set address
 8000802:	003b      	movs	r3, r7
 8000804:	22c0      	movs	r2, #192	; 0xc0
 8000806:	701a      	strb	r2, [r3, #0]
	tm1637_TxCommand(CommandCarrier);
 8000808:	003b      	movs	r3, r7
 800080a:	0018      	movs	r0, r3
 800080c:	f7ff fef7 	bl	80005fe <tm1637_TxCommand>
	tm1637_TxData(EmptyBuffer, 4);
 8000810:	1d3b      	adds	r3, r7, #4
 8000812:	2104      	movs	r1, #4
 8000814:	0018      	movs	r0, r3
 8000816:	f7ff ff39 	bl	800068c <tm1637_TxData>
	CommandCarrier[0] = DISPLAY_OFF;
 800081a:	003b      	movs	r3, r7
 800081c:	2280      	movs	r2, #128	; 0x80
 800081e:	701a      	strb	r2, [r3, #0]
	tm1637_TxCommand(CommandCarrier);
 8000820:	003b      	movs	r3, r7
 8000822:	0018      	movs	r0, r3
 8000824:	f7ff feeb 	bl	80005fe <tm1637_TxCommand>
}
 8000828:	46c0      	nop			; (mov r8, r8)
 800082a:	46bd      	mov	sp, r7
 800082c:	b002      	add	sp, #8
 800082e:	bd80      	pop	{r7, pc}
 8000830:	08001eb4 	.word	0x08001eb4

08000834 <tm1637_DisplayHandle>:
uint8_t tm1637_DisplayHandle(uint8_t Brightness, uint8_t *DisplayBuffer)
{
 8000834:	b5b0      	push	{r4, r5, r7, lr}
 8000836:	b084      	sub	sp, #16
 8000838:	af00      	add	r7, sp, #0
 800083a:	0002      	movs	r2, r0
 800083c:	6039      	str	r1, [r7, #0]
 800083e:	1dfb      	adds	r3, r7, #7
 8000840:	701a      	strb	r2, [r3, #0]
	//This function handles the low level protocol used to set data address of TM1637 and turn the display on
	//#param Brightness is used to set the brightness level of the display. This function accepts Brightness value between 0 and 7
	//#param *DisplayBuffer is the buffer used to map data from the RAM to the display each element corresponds to one segment in the display
	uint8_t CommandCarrier[1] = {0};
 8000842:	210c      	movs	r1, #12
 8000844:	187b      	adds	r3, r7, r1
 8000846:	4a19      	ldr	r2, [pc, #100]	; (80008ac <tm1637_DisplayHandle+0x78>)
 8000848:	7812      	ldrb	r2, [r2, #0]
 800084a:	701a      	strb	r2, [r3, #0]
	tm1637_StatusTypedef ParameterFalidation = TM1637_ERROR;
 800084c:	250f      	movs	r5, #15
 800084e:	197b      	adds	r3, r7, r5
 8000850:	2201      	movs	r2, #1
 8000852:	701a      	strb	r2, [r3, #0]
	if(Brightness <= 7)												//there are 7 levels of brightness
 8000854:	1dfb      	adds	r3, r7, #7
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	2b07      	cmp	r3, #7
 800085a:	d81f      	bhi.n	800089c <tm1637_DisplayHandle+0x68>
	{
	  CommandCarrier[0] = DATA_SET;									//Send set data command
 800085c:	187b      	adds	r3, r7, r1
 800085e:	2240      	movs	r2, #64	; 0x40
 8000860:	701a      	strb	r2, [r3, #0]
	  tm1637_TxCommand(CommandCarrier);
 8000862:	000c      	movs	r4, r1
 8000864:	187b      	adds	r3, r7, r1
 8000866:	0018      	movs	r0, r3
 8000868:	f7ff fec9 	bl	80005fe <tm1637_TxCommand>
	  CommandCarrier[0] = C0H;										//Set address
 800086c:	0021      	movs	r1, r4
 800086e:	187b      	adds	r3, r7, r1
 8000870:	22c0      	movs	r2, #192	; 0xc0
 8000872:	701a      	strb	r2, [r3, #0]
	  tm1637_TxCommand(CommandCarrier);
 8000874:	187b      	adds	r3, r7, r1
 8000876:	0018      	movs	r0, r3
 8000878:	f7ff fec1 	bl	80005fe <tm1637_TxCommand>

	  tm1637_TxData(DisplayBuffer, 4);								//Map the data stored in RAM to the display
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	2104      	movs	r1, #4
 8000880:	0018      	movs	r0, r3
 8000882:	f7ff ff03 	bl	800068c <tm1637_TxData>
	  tm1637_SetBrighness(Brightness);								//Turn on display and set brightness
 8000886:	1dfb      	adds	r3, r7, #7
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	0018      	movs	r0, r3
 800088c:	f000 f810 	bl	80008b0 <tm1637_SetBrighness>
		ParameterFalidation = TM1637_OK;
 8000890:	197b      	adds	r3, r7, r5
 8000892:	2200      	movs	r2, #0
 8000894:	701a      	strb	r2, [r3, #0]
		return ParameterFalidation;
 8000896:	197b      	adds	r3, r7, r5
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	e002      	b.n	80008a2 <tm1637_DisplayHandle+0x6e>
	}
	return ParameterFalidation;
 800089c:	230f      	movs	r3, #15
 800089e:	18fb      	adds	r3, r7, r3
 80008a0:	781b      	ldrb	r3, [r3, #0]
}
 80008a2:	0018      	movs	r0, r3
 80008a4:	46bd      	mov	sp, r7
 80008a6:	b004      	add	sp, #16
 80008a8:	bdb0      	pop	{r4, r5, r7, pc}
 80008aa:	46c0      	nop			; (mov r8, r8)
 80008ac:	08001eb4 	.word	0x08001eb4

080008b0 <tm1637_SetBrighness>:
tm1637_StatusTypedef tm1637_SetBrighness(uint8_t BrighnessLevel)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b086      	sub	sp, #24
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	0002      	movs	r2, r0
 80008b8:	1dfb      	adds	r3, r7, #7
 80008ba:	701a      	strb	r2, [r3, #0]
	uint8_t BrighnessBuffer[8] = {0};
 80008bc:	230c      	movs	r3, #12
 80008be:	18fb      	adds	r3, r7, r3
 80008c0:	2200      	movs	r2, #0
 80008c2:	601a      	str	r2, [r3, #0]
 80008c4:	2200      	movs	r2, #0
 80008c6:	605a      	str	r2, [r3, #4]
	tm1637_StatusTypedef ParameterFalidation = TM1637_ERROR;
 80008c8:	2316      	movs	r3, #22
 80008ca:	18fb      	adds	r3, r7, r3
 80008cc:	2201      	movs	r2, #1
 80008ce:	701a      	strb	r2, [r3, #0]
	if(BrighnessLevel <= 7)												//there are 7 levels of brightness
 80008d0:	1dfb      	adds	r3, r7, #7
 80008d2:	781b      	ldrb	r3, [r3, #0]
 80008d4:	2b07      	cmp	r3, #7
 80008d6:	d83e      	bhi.n	8000956 <tm1637_SetBrighness+0xa6>
	{																	//Any value above that will be ignored.
		BrighnessLevel = BrighnessLevel | DISPLAY_ON;					//Set Brightness level with display on command
 80008d8:	1dfb      	adds	r3, r7, #7
 80008da:	1dfa      	adds	r2, r7, #7
 80008dc:	7812      	ldrb	r2, [r2, #0]
 80008de:	2178      	movs	r1, #120	; 0x78
 80008e0:	4249      	negs	r1, r1
 80008e2:	430a      	orrs	r2, r1
 80008e4:	701a      	strb	r2, [r3, #0]

		for(uint8_t i = 0; i < 8; i++)
 80008e6:	2317      	movs	r3, #23
 80008e8:	18fb      	adds	r3, r7, r3
 80008ea:	2200      	movs	r2, #0
 80008ec:	701a      	strb	r2, [r3, #0]
 80008ee:	e017      	b.n	8000920 <tm1637_SetBrighness+0x70>
		{
			BrighnessBuffer[i] = (BrighnessLevel & (0x01 << i)) && 1;
 80008f0:	1dfb      	adds	r3, r7, #7
 80008f2:	781a      	ldrb	r2, [r3, #0]
 80008f4:	2117      	movs	r1, #23
 80008f6:	187b      	adds	r3, r7, r1
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	411a      	asrs	r2, r3
 80008fc:	0013      	movs	r3, r2
 80008fe:	2201      	movs	r2, #1
 8000900:	4013      	ands	r3, r2
 8000902:	1e5a      	subs	r2, r3, #1
 8000904:	4193      	sbcs	r3, r2
 8000906:	b2da      	uxtb	r2, r3
 8000908:	0008      	movs	r0, r1
 800090a:	187b      	adds	r3, r7, r1
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	0011      	movs	r1, r2
 8000910:	220c      	movs	r2, #12
 8000912:	18ba      	adds	r2, r7, r2
 8000914:	54d1      	strb	r1, [r2, r3]
		for(uint8_t i = 0; i < 8; i++)
 8000916:	183b      	adds	r3, r7, r0
 8000918:	781a      	ldrb	r2, [r3, #0]
 800091a:	183b      	adds	r3, r7, r0
 800091c:	3201      	adds	r2, #1
 800091e:	701a      	strb	r2, [r3, #0]
 8000920:	2317      	movs	r3, #23
 8000922:	18fb      	adds	r3, r7, r3
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	2b07      	cmp	r3, #7
 8000928:	d9e2      	bls.n	80008f0 <tm1637_SetBrighness+0x40>
		}
		tm1637_StartPacket();
 800092a:	f7ff fe1f 	bl	800056c <tm1637_StartPacket>
		tm1637_DataOut(BrighnessBuffer);
 800092e:	230c      	movs	r3, #12
 8000930:	18fb      	adds	r3, r7, r3
 8000932:	0018      	movs	r0, r3
 8000934:	f7ff fe34 	bl	80005a0 <tm1637_DataOut>
		tm1637_CLKlow();													//Send one CLK for acknowledgment
 8000938:	f7ff fdca 	bl	80004d0 <tm1637_CLKlow>
		tm1637_CLKhigh();
 800093c:	f7ff fdae 	bl	800049c <tm1637_CLKhigh>
		tm1637_ACKcheck();													//wait for acknowledgment.
 8000940:	f7ff ff36 	bl	80007b0 <tm1637_ACKcheck>
		tm1637_EndPacket();
 8000944:	f7ff fe1f 	bl	8000586 <tm1637_EndPacket>
		ParameterFalidation = TM1637_OK;
 8000948:	2116      	movs	r1, #22
 800094a:	187b      	adds	r3, r7, r1
 800094c:	2200      	movs	r2, #0
 800094e:	701a      	strb	r2, [r3, #0]
		return ParameterFalidation;
 8000950:	187b      	adds	r3, r7, r1
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	e002      	b.n	800095c <tm1637_SetBrighness+0xac>
	}
	return ParameterFalidation;
 8000956:	2316      	movs	r3, #22
 8000958:	18fb      	adds	r3, r7, r3
 800095a:	781b      	ldrb	r3, [r3, #0]
}
 800095c:	0018      	movs	r0, r3
 800095e:	46bd      	mov	sp, r7
 8000960:	b006      	add	sp, #24
 8000962:	bd80      	pop	{r7, pc}

08000964 <tm1637_Effect>:
void tm1637_Effect(uint8_t Rotationfrequency)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	0002      	movs	r2, r0
 800096c:	1dfb      	adds	r3, r7, #7
 800096e:	701a      	strb	r2, [r3, #0]
	  static uint8_t SegmentTracker = 0;
	  static uint8_t SegmentPointer = 0;
	  if(Timer1 >= 150)
 8000970:	4b5e      	ldr	r3, [pc, #376]	; (8000aec <tm1637_Effect+0x188>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	2b95      	cmp	r3, #149	; 0x95
 8000976:	d800      	bhi.n	800097a <tm1637_Effect+0x16>
 8000978:	e0b3      	b.n	8000ae2 <tm1637_Effect+0x17e>
	  {
		  Timer1 = 0;
 800097a:	4b5c      	ldr	r3, [pc, #368]	; (8000aec <tm1637_Effect+0x188>)
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
		  if(SegmentTracker < 4)
 8000980:	4b5b      	ldr	r3, [pc, #364]	; (8000af0 <tm1637_Effect+0x18c>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	2b03      	cmp	r3, #3
 8000986:	d81b      	bhi.n	80009c0 <tm1637_Effect+0x5c>
		  {
			  CurrentDisplay[0] = 0;
 8000988:	4b5a      	ldr	r3, [pc, #360]	; (8000af4 <tm1637_Effect+0x190>)
 800098a:	2200      	movs	r2, #0
 800098c:	701a      	strb	r2, [r3, #0]
			  CurrentDisplay[1] = 0;
 800098e:	4b59      	ldr	r3, [pc, #356]	; (8000af4 <tm1637_Effect+0x190>)
 8000990:	2200      	movs	r2, #0
 8000992:	705a      	strb	r2, [r3, #1]
			  CurrentDisplay[2] = 0;
 8000994:	4b57      	ldr	r3, [pc, #348]	; (8000af4 <tm1637_Effect+0x190>)
 8000996:	2200      	movs	r2, #0
 8000998:	709a      	strb	r2, [r3, #2]
			  CurrentDisplay[3] = tm1637_Segments[SegmentPointer];
 800099a:	4b57      	ldr	r3, [pc, #348]	; (8000af8 <tm1637_Effect+0x194>)
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	001a      	movs	r2, r3
 80009a0:	4b56      	ldr	r3, [pc, #344]	; (8000afc <tm1637_Effect+0x198>)
 80009a2:	5c9a      	ldrb	r2, [r3, r2]
 80009a4:	4b53      	ldr	r3, [pc, #332]	; (8000af4 <tm1637_Effect+0x190>)
 80009a6:	70da      	strb	r2, [r3, #3]
			  if(SegmentPointer != 3)
 80009a8:	4b53      	ldr	r3, [pc, #332]	; (8000af8 <tm1637_Effect+0x194>)
 80009aa:	781b      	ldrb	r3, [r3, #0]
 80009ac:	2b03      	cmp	r3, #3
 80009ae:	d100      	bne.n	80009b2 <tm1637_Effect+0x4e>
 80009b0:	e082      	b.n	8000ab8 <tm1637_Effect+0x154>
			  {
				  SegmentPointer ++;									//Prevent extra incrementing
 80009b2:	4b51      	ldr	r3, [pc, #324]	; (8000af8 <tm1637_Effect+0x194>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	3301      	adds	r3, #1
 80009b8:	b2da      	uxtb	r2, r3
 80009ba:	4b4f      	ldr	r3, [pc, #316]	; (8000af8 <tm1637_Effect+0x194>)
 80009bc:	701a      	strb	r2, [r3, #0]
 80009be:	e07b      	b.n	8000ab8 <tm1637_Effect+0x154>
			  }
		  }
		  else if((SegmentTracker > 5) && (SegmentTracker < 10))
 80009c0:	4b4b      	ldr	r3, [pc, #300]	; (8000af0 <tm1637_Effect+0x18c>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	2b05      	cmp	r3, #5
 80009c6:	d921      	bls.n	8000a0c <tm1637_Effect+0xa8>
 80009c8:	4b49      	ldr	r3, [pc, #292]	; (8000af0 <tm1637_Effect+0x18c>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	2b09      	cmp	r3, #9
 80009ce:	d81d      	bhi.n	8000a0c <tm1637_Effect+0xa8>
		  {
			  if(SegmentPointer == 6)
 80009d0:	4b49      	ldr	r3, [pc, #292]	; (8000af8 <tm1637_Effect+0x194>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	2b06      	cmp	r3, #6
 80009d6:	d102      	bne.n	80009de <tm1637_Effect+0x7a>
			  {
				  SegmentPointer = 0;
 80009d8:	4b47      	ldr	r3, [pc, #284]	; (8000af8 <tm1637_Effect+0x194>)
 80009da:	2200      	movs	r2, #0
 80009dc:	701a      	strb	r2, [r3, #0]
			  }
			  CurrentDisplay[0] = tm1637_Segments[SegmentPointer];
 80009de:	4b46      	ldr	r3, [pc, #280]	; (8000af8 <tm1637_Effect+0x194>)
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	001a      	movs	r2, r3
 80009e4:	4b45      	ldr	r3, [pc, #276]	; (8000afc <tm1637_Effect+0x198>)
 80009e6:	5c9a      	ldrb	r2, [r3, r2]
 80009e8:	4b42      	ldr	r3, [pc, #264]	; (8000af4 <tm1637_Effect+0x190>)
 80009ea:	701a      	strb	r2, [r3, #0]
			  CurrentDisplay[1] = 0;
 80009ec:	4b41      	ldr	r3, [pc, #260]	; (8000af4 <tm1637_Effect+0x190>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	705a      	strb	r2, [r3, #1]
			  CurrentDisplay[2] = 0;
 80009f2:	4b40      	ldr	r3, [pc, #256]	; (8000af4 <tm1637_Effect+0x190>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	709a      	strb	r2, [r3, #2]
			  CurrentDisplay[3] = 0;
 80009f8:	4b3e      	ldr	r3, [pc, #248]	; (8000af4 <tm1637_Effect+0x190>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	70da      	strb	r2, [r3, #3]

			  SegmentPointer ++;
 80009fe:	4b3e      	ldr	r3, [pc, #248]	; (8000af8 <tm1637_Effect+0x194>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	3301      	adds	r3, #1
 8000a04:	b2da      	uxtb	r2, r3
 8000a06:	4b3c      	ldr	r3, [pc, #240]	; (8000af8 <tm1637_Effect+0x194>)
 8000a08:	701a      	strb	r2, [r3, #0]
 8000a0a:	e055      	b.n	8000ab8 <tm1637_Effect+0x154>
		  }
		  else if(SegmentTracker == 4)
 8000a0c:	4b38      	ldr	r3, [pc, #224]	; (8000af0 <tm1637_Effect+0x18c>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	2b04      	cmp	r3, #4
 8000a12:	d110      	bne.n	8000a36 <tm1637_Effect+0xd2>
		  {
			  CurrentDisplay[0] = 0;
 8000a14:	4b37      	ldr	r3, [pc, #220]	; (8000af4 <tm1637_Effect+0x190>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	701a      	strb	r2, [r3, #0]
			  CurrentDisplay[1] = 0;
 8000a1a:	4b36      	ldr	r3, [pc, #216]	; (8000af4 <tm1637_Effect+0x190>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	705a      	strb	r2, [r3, #1]
			  CurrentDisplay[2] = tm1637_Segments[SegmentPointer];
 8000a20:	4b35      	ldr	r3, [pc, #212]	; (8000af8 <tm1637_Effect+0x194>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	001a      	movs	r2, r3
 8000a26:	4b35      	ldr	r3, [pc, #212]	; (8000afc <tm1637_Effect+0x198>)
 8000a28:	5c9a      	ldrb	r2, [r3, r2]
 8000a2a:	4b32      	ldr	r3, [pc, #200]	; (8000af4 <tm1637_Effect+0x190>)
 8000a2c:	709a      	strb	r2, [r3, #2]
			  CurrentDisplay[3] = 0;
 8000a2e:	4b31      	ldr	r3, [pc, #196]	; (8000af4 <tm1637_Effect+0x190>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	70da      	strb	r2, [r3, #3]
 8000a34:	e040      	b.n	8000ab8 <tm1637_Effect+0x154>
		  }
		  else if(SegmentTracker == 5)
 8000a36:	4b2e      	ldr	r3, [pc, #184]	; (8000af0 <tm1637_Effect+0x18c>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	2b05      	cmp	r3, #5
 8000a3c:	d110      	bne.n	8000a60 <tm1637_Effect+0xfc>
		  {
			  CurrentDisplay[0] = 0;
 8000a3e:	4b2d      	ldr	r3, [pc, #180]	; (8000af4 <tm1637_Effect+0x190>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	701a      	strb	r2, [r3, #0]
			  CurrentDisplay[1] = tm1637_Segments[SegmentPointer];
 8000a44:	4b2c      	ldr	r3, [pc, #176]	; (8000af8 <tm1637_Effect+0x194>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	001a      	movs	r2, r3
 8000a4a:	4b2c      	ldr	r3, [pc, #176]	; (8000afc <tm1637_Effect+0x198>)
 8000a4c:	5c9a      	ldrb	r2, [r3, r2]
 8000a4e:	4b29      	ldr	r3, [pc, #164]	; (8000af4 <tm1637_Effect+0x190>)
 8000a50:	705a      	strb	r2, [r3, #1]
			  CurrentDisplay[2] = 0;
 8000a52:	4b28      	ldr	r3, [pc, #160]	; (8000af4 <tm1637_Effect+0x190>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	709a      	strb	r2, [r3, #2]
			  CurrentDisplay[3] = 0;
 8000a58:	4b26      	ldr	r3, [pc, #152]	; (8000af4 <tm1637_Effect+0x190>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	70da      	strb	r2, [r3, #3]
 8000a5e:	e02b      	b.n	8000ab8 <tm1637_Effect+0x154>
		  }
		  else if(SegmentTracker == 10)
 8000a60:	4b23      	ldr	r3, [pc, #140]	; (8000af0 <tm1637_Effect+0x18c>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	2b0a      	cmp	r3, #10
 8000a66:	d113      	bne.n	8000a90 <tm1637_Effect+0x12c>
		  {
			  SegmentPointer = 0;
 8000a68:	4b23      	ldr	r3, [pc, #140]	; (8000af8 <tm1637_Effect+0x194>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	701a      	strb	r2, [r3, #0]
			  CurrentDisplay[0] = 0;
 8000a6e:	4b21      	ldr	r3, [pc, #132]	; (8000af4 <tm1637_Effect+0x190>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	701a      	strb	r2, [r3, #0]
			  CurrentDisplay[1] = tm1637_Segments[SegmentPointer];
 8000a74:	4b20      	ldr	r3, [pc, #128]	; (8000af8 <tm1637_Effect+0x194>)
 8000a76:	781b      	ldrb	r3, [r3, #0]
 8000a78:	001a      	movs	r2, r3
 8000a7a:	4b20      	ldr	r3, [pc, #128]	; (8000afc <tm1637_Effect+0x198>)
 8000a7c:	5c9a      	ldrb	r2, [r3, r2]
 8000a7e:	4b1d      	ldr	r3, [pc, #116]	; (8000af4 <tm1637_Effect+0x190>)
 8000a80:	705a      	strb	r2, [r3, #1]
			  CurrentDisplay[2] = 0;
 8000a82:	4b1c      	ldr	r3, [pc, #112]	; (8000af4 <tm1637_Effect+0x190>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	709a      	strb	r2, [r3, #2]
			  CurrentDisplay[3] = 0;
 8000a88:	4b1a      	ldr	r3, [pc, #104]	; (8000af4 <tm1637_Effect+0x190>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	70da      	strb	r2, [r3, #3]
 8000a8e:	e013      	b.n	8000ab8 <tm1637_Effect+0x154>
		  }
		  else if(SegmentTracker == 11)
 8000a90:	4b17      	ldr	r3, [pc, #92]	; (8000af0 <tm1637_Effect+0x18c>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	2b0b      	cmp	r3, #11
 8000a96:	d10f      	bne.n	8000ab8 <tm1637_Effect+0x154>
		  {
			  CurrentDisplay[0] = 0;
 8000a98:	4b16      	ldr	r3, [pc, #88]	; (8000af4 <tm1637_Effect+0x190>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	701a      	strb	r2, [r3, #0]
			  CurrentDisplay[1] = 0;
 8000a9e:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <tm1637_Effect+0x190>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	705a      	strb	r2, [r3, #1]
			  CurrentDisplay[2] = tm1637_Segments[SegmentPointer];
 8000aa4:	4b14      	ldr	r3, [pc, #80]	; (8000af8 <tm1637_Effect+0x194>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	001a      	movs	r2, r3
 8000aaa:	4b14      	ldr	r3, [pc, #80]	; (8000afc <tm1637_Effect+0x198>)
 8000aac:	5c9a      	ldrb	r2, [r3, r2]
 8000aae:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <tm1637_Effect+0x190>)
 8000ab0:	709a      	strb	r2, [r3, #2]
			  CurrentDisplay[3] = 0;
 8000ab2:	4b10      	ldr	r3, [pc, #64]	; (8000af4 <tm1637_Effect+0x190>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	70da      	strb	r2, [r3, #3]
		  }
		  tm1637_DisplayHandle(7, CurrentDisplay);
 8000ab8:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <tm1637_Effect+0x190>)
 8000aba:	0019      	movs	r1, r3
 8000abc:	2007      	movs	r0, #7
 8000abe:	f7ff feb9 	bl	8000834 <tm1637_DisplayHandle>
		  SegmentTracker++;
 8000ac2:	4b0b      	ldr	r3, [pc, #44]	; (8000af0 <tm1637_Effect+0x18c>)
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	b2da      	uxtb	r2, r3
 8000aca:	4b09      	ldr	r3, [pc, #36]	; (8000af0 <tm1637_Effect+0x18c>)
 8000acc:	701a      	strb	r2, [r3, #0]
		  if(SegmentTracker > 11)										//Once 12 steps are completed reset all trackers.
 8000ace:	4b08      	ldr	r3, [pc, #32]	; (8000af0 <tm1637_Effect+0x18c>)
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	2b0b      	cmp	r3, #11
 8000ad4:	d905      	bls.n	8000ae2 <tm1637_Effect+0x17e>
		  {
			  SegmentPointer = 0;
 8000ad6:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <tm1637_Effect+0x194>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	701a      	strb	r2, [r3, #0]
			  SegmentTracker = 0;
 8000adc:	4b04      	ldr	r3, [pc, #16]	; (8000af0 <tm1637_Effect+0x18c>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	701a      	strb	r2, [r3, #0]
		  }

	  }
}
 8000ae2:	46c0      	nop			; (mov r8, r8)
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	b002      	add	sp, #8
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	46c0      	nop			; (mov r8, r8)
 8000aec:	20000030 	.word	0x20000030
 8000af0:	2000002c 	.word	0x2000002c
 8000af4:	20000034 	.word	0x20000034
 8000af8:	2000002d 	.word	0x2000002d
 8000afc:	20000038 	.word	0x20000038

08000b00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	//DP is connected to the second digit MSB
	  tm1637_Segments[0] = A_SEG;
 8000b04:	4b22      	ldr	r3, [pc, #136]	; (8000b90 <main+0x90>)
 8000b06:	2201      	movs	r2, #1
 8000b08:	701a      	strb	r2, [r3, #0]
	  tm1637_Segments[1] = B_SEG;
 8000b0a:	4b21      	ldr	r3, [pc, #132]	; (8000b90 <main+0x90>)
 8000b0c:	2202      	movs	r2, #2
 8000b0e:	705a      	strb	r2, [r3, #1]
	  tm1637_Segments[2] = C_SEG;
 8000b10:	4b1f      	ldr	r3, [pc, #124]	; (8000b90 <main+0x90>)
 8000b12:	2204      	movs	r2, #4
 8000b14:	709a      	strb	r2, [r3, #2]
	  tm1637_Segments[3] = D_SEG;
 8000b16:	4b1e      	ldr	r3, [pc, #120]	; (8000b90 <main+0x90>)
 8000b18:	2208      	movs	r2, #8
 8000b1a:	70da      	strb	r2, [r3, #3]
	  tm1637_Segments[4] = E_SEG;
 8000b1c:	4b1c      	ldr	r3, [pc, #112]	; (8000b90 <main+0x90>)
 8000b1e:	2210      	movs	r2, #16
 8000b20:	711a      	strb	r2, [r3, #4]
	  tm1637_Segments[5] = F_SEG;
 8000b22:	4b1b      	ldr	r3, [pc, #108]	; (8000b90 <main+0x90>)
 8000b24:	2220      	movs	r2, #32
 8000b26:	715a      	strb	r2, [r3, #5]
	  tm1637_Segments[6] = G_SEG;
 8000b28:	4b19      	ldr	r3, [pc, #100]	; (8000b90 <main+0x90>)
 8000b2a:	2240      	movs	r2, #64	; 0x40
 8000b2c:	719a      	strb	r2, [r3, #6]
	  tm1637_Segments[7] = DP_SEG;
 8000b2e:	4b18      	ldr	r3, [pc, #96]	; (8000b90 <main+0x90>)
 8000b30:	2280      	movs	r2, #128	; 0x80
 8000b32:	71da      	strb	r2, [r3, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b34:	f000 f95a 	bl	8000dec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b38:	f000 f834 	bl	8000ba4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b3c:	f000 f886 	bl	8000c4c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 8000b40:	4b14      	ldr	r3, [pc, #80]	; (8000b94 <main+0x94>)
 8000b42:	2201      	movs	r2, #1
 8000b44:	2110      	movs	r1, #16
 8000b46:	0018      	movs	r0, r3
 8000b48:	f000 fc07 	bl	800135a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SDO_GPIO_Port, SDO_Pin, GPIO_PIN_SET);
 8000b4c:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <main+0x94>)
 8000b4e:	2201      	movs	r2, #1
 8000b50:	2120      	movs	r1, #32
 8000b52:	0018      	movs	r0, r3
 8000b54:	f000 fc01 	bl	800135a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_R_Pin_GPIO_Port, LED_R_Pin_Pin, GPIO_PIN_SET);
 8000b58:	23a0      	movs	r3, #160	; 0xa0
 8000b5a:	05db      	lsls	r3, r3, #23
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	2101      	movs	r1, #1
 8000b60:	0018      	movs	r0, r3
 8000b62:	f000 fbfa 	bl	800135a <HAL_GPIO_WritePin>

    tm1637_DisplayHandle(7, CurrentDisplay);						//
 8000b66:	4b0c      	ldr	r3, [pc, #48]	; (8000b98 <main+0x98>)
 8000b68:	0019      	movs	r1, r3
 8000b6a:	2007      	movs	r0, #7
 8000b6c:	f7ff fe62 	bl	8000834 <tm1637_DisplayHandle>

    Timer1Enable = ENABLE;
 8000b70:	4b0a      	ldr	r3, [pc, #40]	; (8000b9c <main+0x9c>)
 8000b72:	2201      	movs	r2, #1
 8000b74:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(HAL_GetTick() >= 10000)
 8000b76:	f000 f99f 	bl	8000eb8 <HAL_GetTick>
 8000b7a:	0003      	movs	r3, r0
 8000b7c:	4a08      	ldr	r2, [pc, #32]	; (8000ba0 <main+0xa0>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d902      	bls.n	8000b88 <main+0x88>
	  	  {
	  		  tm1637_DisplayClear();
 8000b82:	f7ff fe2d 	bl	80007e0 <tm1637_DisplayClear>
 8000b86:	e7f6      	b.n	8000b76 <main+0x76>
	  	  }
	  	  else
	  	  {
	  		  tm1637_Effect(80);
 8000b88:	2050      	movs	r0, #80	; 0x50
 8000b8a:	f7ff feeb 	bl	8000964 <tm1637_Effect>
	  if(HAL_GetTick() >= 10000)
 8000b8e:	e7f2      	b.n	8000b76 <main+0x76>
 8000b90:	20000038 	.word	0x20000038
 8000b94:	50000400 	.word	0x50000400
 8000b98:	20000034 	.word	0x20000034
 8000b9c:	20000000 	.word	0x20000000
 8000ba0:	0000270f 	.word	0x0000270f

08000ba4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ba4:	b590      	push	{r4, r7, lr}
 8000ba6:	b093      	sub	sp, #76	; 0x4c
 8000ba8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000baa:	2414      	movs	r4, #20
 8000bac:	193b      	adds	r3, r7, r4
 8000bae:	0018      	movs	r0, r3
 8000bb0:	2334      	movs	r3, #52	; 0x34
 8000bb2:	001a      	movs	r2, r3
 8000bb4:	2100      	movs	r1, #0
 8000bb6:	f001 f969 	bl	8001e8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bba:	003b      	movs	r3, r7
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	2314      	movs	r3, #20
 8000bc0:	001a      	movs	r2, r3
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	f001 f962 	bl	8001e8c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bc8:	4b1e      	ldr	r3, [pc, #120]	; (8000c44 <SystemClock_Config+0xa0>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a1e      	ldr	r2, [pc, #120]	; (8000c48 <SystemClock_Config+0xa4>)
 8000bce:	401a      	ands	r2, r3
 8000bd0:	4b1c      	ldr	r3, [pc, #112]	; (8000c44 <SystemClock_Config+0xa0>)
 8000bd2:	2180      	movs	r1, #128	; 0x80
 8000bd4:	0109      	lsls	r1, r1, #4
 8000bd6:	430a      	orrs	r2, r1
 8000bd8:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000bda:	0021      	movs	r1, r4
 8000bdc:	187b      	adds	r3, r7, r1
 8000bde:	2210      	movs	r2, #16
 8000be0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000be2:	187b      	adds	r3, r7, r1
 8000be4:	2201      	movs	r2, #1
 8000be6:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000be8:	187b      	adds	r3, r7, r1
 8000bea:	2200      	movs	r2, #0
 8000bec:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000bee:	187b      	adds	r3, r7, r1
 8000bf0:	22a0      	movs	r2, #160	; 0xa0
 8000bf2:	0212      	lsls	r2, r2, #8
 8000bf4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bf6:	187b      	adds	r3, r7, r1
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bfc:	187b      	adds	r3, r7, r1
 8000bfe:	0018      	movs	r0, r3
 8000c00:	f000 fbc8 	bl	8001394 <HAL_RCC_OscConfig>
 8000c04:	1e03      	subs	r3, r0, #0
 8000c06:	d001      	beq.n	8000c0c <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000c08:	f000 f87e 	bl	8000d08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c0c:	003b      	movs	r3, r7
 8000c0e:	220f      	movs	r2, #15
 8000c10:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000c12:	003b      	movs	r3, r7
 8000c14:	2200      	movs	r2, #0
 8000c16:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c18:	003b      	movs	r3, r7
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c1e:	003b      	movs	r3, r7
 8000c20:	2200      	movs	r2, #0
 8000c22:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c24:	003b      	movs	r3, r7
 8000c26:	2200      	movs	r2, #0
 8000c28:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000c2a:	003b      	movs	r3, r7
 8000c2c:	2100      	movs	r1, #0
 8000c2e:	0018      	movs	r0, r3
 8000c30:	f000 ff1a 	bl	8001a68 <HAL_RCC_ClockConfig>
 8000c34:	1e03      	subs	r3, r0, #0
 8000c36:	d001      	beq.n	8000c3c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000c38:	f000 f866 	bl	8000d08 <Error_Handler>
  }
}
 8000c3c:	46c0      	nop			; (mov r8, r8)
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	b013      	add	sp, #76	; 0x4c
 8000c42:	bd90      	pop	{r4, r7, pc}
 8000c44:	40007000 	.word	0x40007000
 8000c48:	ffffe7ff 	.word	0xffffe7ff

08000c4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c4c:	b590      	push	{r4, r7, lr}
 8000c4e:	b089      	sub	sp, #36	; 0x24
 8000c50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c52:	240c      	movs	r4, #12
 8000c54:	193b      	adds	r3, r7, r4
 8000c56:	0018      	movs	r0, r3
 8000c58:	2314      	movs	r3, #20
 8000c5a:	001a      	movs	r2, r3
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	f001 f915 	bl	8001e8c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c62:	4b27      	ldr	r3, [pc, #156]	; (8000d00 <MX_GPIO_Init+0xb4>)
 8000c64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c66:	4b26      	ldr	r3, [pc, #152]	; (8000d00 <MX_GPIO_Init+0xb4>)
 8000c68:	2101      	movs	r1, #1
 8000c6a:	430a      	orrs	r2, r1
 8000c6c:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c6e:	4b24      	ldr	r3, [pc, #144]	; (8000d00 <MX_GPIO_Init+0xb4>)
 8000c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c72:	2201      	movs	r2, #1
 8000c74:	4013      	ands	r3, r2
 8000c76:	60bb      	str	r3, [r7, #8]
 8000c78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7a:	4b21      	ldr	r3, [pc, #132]	; (8000d00 <MX_GPIO_Init+0xb4>)
 8000c7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c7e:	4b20      	ldr	r3, [pc, #128]	; (8000d00 <MX_GPIO_Init+0xb4>)
 8000c80:	2102      	movs	r1, #2
 8000c82:	430a      	orrs	r2, r1
 8000c84:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c86:	4b1e      	ldr	r3, [pc, #120]	; (8000d00 <MX_GPIO_Init+0xb4>)
 8000c88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c8a:	2202      	movs	r2, #2
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	607b      	str	r3, [r7, #4]
 8000c90:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_R_Pin_GPIO_Port, LED_R_Pin_Pin, GPIO_PIN_RESET);
 8000c92:	23a0      	movs	r3, #160	; 0xa0
 8000c94:	05db      	lsls	r3, r3, #23
 8000c96:	2200      	movs	r2, #0
 8000c98:	2101      	movs	r1, #1
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	f000 fb5d 	bl	800135a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SCLK_Pin|SDO_Pin, GPIO_PIN_RESET);
 8000ca0:	4b18      	ldr	r3, [pc, #96]	; (8000d04 <MX_GPIO_Init+0xb8>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2130      	movs	r1, #48	; 0x30
 8000ca6:	0018      	movs	r0, r3
 8000ca8:	f000 fb57 	bl	800135a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_R_Pin_Pin */
  GPIO_InitStruct.Pin = LED_R_Pin_Pin;
 8000cac:	193b      	adds	r3, r7, r4
 8000cae:	2201      	movs	r2, #1
 8000cb0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb2:	193b      	adds	r3, r7, r4
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb8:	193b      	adds	r3, r7, r4
 8000cba:	2200      	movs	r2, #0
 8000cbc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbe:	193b      	adds	r3, r7, r4
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_R_Pin_GPIO_Port, &GPIO_InitStruct);
 8000cc4:	193a      	adds	r2, r7, r4
 8000cc6:	23a0      	movs	r3, #160	; 0xa0
 8000cc8:	05db      	lsls	r3, r3, #23
 8000cca:	0011      	movs	r1, r2
 8000ccc:	0018      	movs	r0, r3
 8000cce:	f000 f9b1 	bl	8001034 <HAL_GPIO_Init>

  /*Configure GPIO pins : SCLK_Pin SDO_Pin */
  GPIO_InitStruct.Pin = SCLK_Pin|SDO_Pin;
 8000cd2:	0021      	movs	r1, r4
 8000cd4:	187b      	adds	r3, r7, r1
 8000cd6:	2230      	movs	r2, #48	; 0x30
 8000cd8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cda:	187b      	adds	r3, r7, r1
 8000cdc:	2201      	movs	r2, #1
 8000cde:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	187b      	adds	r3, r7, r1
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce6:	187b      	adds	r3, r7, r1
 8000ce8:	2200      	movs	r2, #0
 8000cea:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cec:	187b      	adds	r3, r7, r1
 8000cee:	4a05      	ldr	r2, [pc, #20]	; (8000d04 <MX_GPIO_Init+0xb8>)
 8000cf0:	0019      	movs	r1, r3
 8000cf2:	0010      	movs	r0, r2
 8000cf4:	f000 f99e 	bl	8001034 <HAL_GPIO_Init>

}
 8000cf8:	46c0      	nop			; (mov r8, r8)
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	b009      	add	sp, #36	; 0x24
 8000cfe:	bd90      	pop	{r4, r7, pc}
 8000d00:	40021000 	.word	0x40021000
 8000d04:	50000400 	.word	0x50000400

08000d08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d0c:	b672      	cpsid	i
}
 8000d0e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d10:	e7fe      	b.n	8000d10 <Error_Handler+0x8>
	...

08000d14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d18:	4b07      	ldr	r3, [pc, #28]	; (8000d38 <HAL_MspInit+0x24>)
 8000d1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d1c:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <HAL_MspInit+0x24>)
 8000d1e:	2101      	movs	r1, #1
 8000d20:	430a      	orrs	r2, r1
 8000d22:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d24:	4b04      	ldr	r3, [pc, #16]	; (8000d38 <HAL_MspInit+0x24>)
 8000d26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d28:	4b03      	ldr	r3, [pc, #12]	; (8000d38 <HAL_MspInit+0x24>)
 8000d2a:	2180      	movs	r1, #128	; 0x80
 8000d2c:	0549      	lsls	r1, r1, #21
 8000d2e:	430a      	orrs	r2, r1
 8000d30:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d32:	46c0      	nop			; (mov r8, r8)
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	40021000 	.word	0x40021000

08000d3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d40:	e7fe      	b.n	8000d40 <NMI_Handler+0x4>

08000d42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d42:	b580      	push	{r7, lr}
 8000d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d46:	e7fe      	b.n	8000d46 <HardFault_Handler+0x4>

08000d48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000d4c:	46c0      	nop			; (mov r8, r8)
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d52:	b580      	push	{r7, lr}
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d56:	46c0      	nop			; (mov r8, r8)
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}

08000d5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1Enable)
 8000d60:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <SysTick_Handler+0x28>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d005      	beq.n	8000d74 <SysTick_Handler+0x18>
		{
			Timer1++;
 8000d68:	4b07      	ldr	r3, [pc, #28]	; (8000d88 <SysTick_Handler+0x2c>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	1c5a      	adds	r2, r3, #1
 8000d6e:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <SysTick_Handler+0x2c>)
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	e002      	b.n	8000d7a <SysTick_Handler+0x1e>
		}
		else
		{
			Timer1 = 0;
 8000d74:	4b04      	ldr	r3, [pc, #16]	; (8000d88 <SysTick_Handler+0x2c>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	601a      	str	r2, [r3, #0]
		}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d7a:	f000 f88b 	bl	8000e94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d7e:	46c0      	nop			; (mov r8, r8)
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	20000000 	.word	0x20000000
 8000d88:	20000030 	.word	0x20000030

08000d8c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d90:	46c0      	nop			; (mov r8, r8)
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bd80      	pop	{r7, pc}
	...

08000d98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000d98:	480d      	ldr	r0, [pc, #52]	; (8000dd0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000d9a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d9c:	480d      	ldr	r0, [pc, #52]	; (8000dd4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d9e:	490e      	ldr	r1, [pc, #56]	; (8000dd8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000da0:	4a0e      	ldr	r2, [pc, #56]	; (8000ddc <LoopForever+0xe>)
  movs r3, #0
 8000da2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000da4:	e002      	b.n	8000dac <LoopCopyDataInit>

08000da6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000da6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000daa:	3304      	adds	r3, #4

08000dac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000db0:	d3f9      	bcc.n	8000da6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000db2:	4a0b      	ldr	r2, [pc, #44]	; (8000de0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000db4:	4c0b      	ldr	r4, [pc, #44]	; (8000de4 <LoopForever+0x16>)
  movs r3, #0
 8000db6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db8:	e001      	b.n	8000dbe <LoopFillZerobss>

08000dba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dbc:	3204      	adds	r2, #4

08000dbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dc0:	d3fb      	bcc.n	8000dba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000dc2:	f7ff ffe3 	bl	8000d8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dc6:	f001 f83d 	bl	8001e44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dca:	f7ff fe99 	bl	8000b00 <main>

08000dce <LoopForever>:

LoopForever:
    b LoopForever
 8000dce:	e7fe      	b.n	8000dce <LoopForever>
   ldr   r0, =_estack
 8000dd0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000dd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dd8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000ddc:	08001ee4 	.word	0x08001ee4
  ldr r2, =_sbss
 8000de0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000de4:	20000044 	.word	0x20000044

08000de8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000de8:	e7fe      	b.n	8000de8 <ADC1_COMP_IRQHandler>
	...

08000dec <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000df2:	1dfb      	adds	r3, r7, #7
 8000df4:	2200      	movs	r2, #0
 8000df6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000df8:	4b0b      	ldr	r3, [pc, #44]	; (8000e28 <HAL_Init+0x3c>)
 8000dfa:	681a      	ldr	r2, [r3, #0]
 8000dfc:	4b0a      	ldr	r3, [pc, #40]	; (8000e28 <HAL_Init+0x3c>)
 8000dfe:	2140      	movs	r1, #64	; 0x40
 8000e00:	430a      	orrs	r2, r1
 8000e02:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e04:	2003      	movs	r0, #3
 8000e06:	f000 f811 	bl	8000e2c <HAL_InitTick>
 8000e0a:	1e03      	subs	r3, r0, #0
 8000e0c:	d003      	beq.n	8000e16 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000e0e:	1dfb      	adds	r3, r7, #7
 8000e10:	2201      	movs	r2, #1
 8000e12:	701a      	strb	r2, [r3, #0]
 8000e14:	e001      	b.n	8000e1a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e16:	f7ff ff7d 	bl	8000d14 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e1a:	1dfb      	adds	r3, r7, #7
 8000e1c:	781b      	ldrb	r3, [r3, #0]
}
 8000e1e:	0018      	movs	r0, r3
 8000e20:	46bd      	mov	sp, r7
 8000e22:	b002      	add	sp, #8
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	46c0      	nop			; (mov r8, r8)
 8000e28:	40022000 	.word	0x40022000

08000e2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e2c:	b590      	push	{r4, r7, lr}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e34:	4b14      	ldr	r3, [pc, #80]	; (8000e88 <HAL_InitTick+0x5c>)
 8000e36:	681c      	ldr	r4, [r3, #0]
 8000e38:	4b14      	ldr	r3, [pc, #80]	; (8000e8c <HAL_InitTick+0x60>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	0019      	movs	r1, r3
 8000e3e:	23fa      	movs	r3, #250	; 0xfa
 8000e40:	0098      	lsls	r0, r3, #2
 8000e42:	f7ff f961 	bl	8000108 <__udivsi3>
 8000e46:	0003      	movs	r3, r0
 8000e48:	0019      	movs	r1, r3
 8000e4a:	0020      	movs	r0, r4
 8000e4c:	f7ff f95c 	bl	8000108 <__udivsi3>
 8000e50:	0003      	movs	r3, r0
 8000e52:	0018      	movs	r0, r3
 8000e54:	f000 f8e1 	bl	800101a <HAL_SYSTICK_Config>
 8000e58:	1e03      	subs	r3, r0, #0
 8000e5a:	d001      	beq.n	8000e60 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	e00f      	b.n	8000e80 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	2b03      	cmp	r3, #3
 8000e64:	d80b      	bhi.n	8000e7e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e66:	6879      	ldr	r1, [r7, #4]
 8000e68:	2301      	movs	r3, #1
 8000e6a:	425b      	negs	r3, r3
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	0018      	movs	r0, r3
 8000e70:	f000 f8be 	bl	8000ff0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e74:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <HAL_InitTick+0x64>)
 8000e76:	687a      	ldr	r2, [r7, #4]
 8000e78:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	e000      	b.n	8000e80 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000e7e:	2301      	movs	r3, #1
}
 8000e80:	0018      	movs	r0, r3
 8000e82:	46bd      	mov	sp, r7
 8000e84:	b003      	add	sp, #12
 8000e86:	bd90      	pop	{r4, r7, pc}
 8000e88:	20000004 	.word	0x20000004
 8000e8c:	2000000c 	.word	0x2000000c
 8000e90:	20000008 	.word	0x20000008

08000e94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e98:	4b05      	ldr	r3, [pc, #20]	; (8000eb0 <HAL_IncTick+0x1c>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	001a      	movs	r2, r3
 8000e9e:	4b05      	ldr	r3, [pc, #20]	; (8000eb4 <HAL_IncTick+0x20>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	18d2      	adds	r2, r2, r3
 8000ea4:	4b03      	ldr	r3, [pc, #12]	; (8000eb4 <HAL_IncTick+0x20>)
 8000ea6:	601a      	str	r2, [r3, #0]
}
 8000ea8:	46c0      	nop			; (mov r8, r8)
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	46c0      	nop			; (mov r8, r8)
 8000eb0:	2000000c 	.word	0x2000000c
 8000eb4:	20000040 	.word	0x20000040

08000eb8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  return uwTick;
 8000ebc:	4b02      	ldr	r3, [pc, #8]	; (8000ec8 <HAL_GetTick+0x10>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
}
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	46c0      	nop			; (mov r8, r8)
 8000ec8:	20000040 	.word	0x20000040

08000ecc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ecc:	b590      	push	{r4, r7, lr}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	0002      	movs	r2, r0
 8000ed4:	6039      	str	r1, [r7, #0]
 8000ed6:	1dfb      	adds	r3, r7, #7
 8000ed8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000eda:	1dfb      	adds	r3, r7, #7
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	2b7f      	cmp	r3, #127	; 0x7f
 8000ee0:	d828      	bhi.n	8000f34 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ee2:	4a2f      	ldr	r2, [pc, #188]	; (8000fa0 <__NVIC_SetPriority+0xd4>)
 8000ee4:	1dfb      	adds	r3, r7, #7
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	b25b      	sxtb	r3, r3
 8000eea:	089b      	lsrs	r3, r3, #2
 8000eec:	33c0      	adds	r3, #192	; 0xc0
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	589b      	ldr	r3, [r3, r2]
 8000ef2:	1dfa      	adds	r2, r7, #7
 8000ef4:	7812      	ldrb	r2, [r2, #0]
 8000ef6:	0011      	movs	r1, r2
 8000ef8:	2203      	movs	r2, #3
 8000efa:	400a      	ands	r2, r1
 8000efc:	00d2      	lsls	r2, r2, #3
 8000efe:	21ff      	movs	r1, #255	; 0xff
 8000f00:	4091      	lsls	r1, r2
 8000f02:	000a      	movs	r2, r1
 8000f04:	43d2      	mvns	r2, r2
 8000f06:	401a      	ands	r2, r3
 8000f08:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	019b      	lsls	r3, r3, #6
 8000f0e:	22ff      	movs	r2, #255	; 0xff
 8000f10:	401a      	ands	r2, r3
 8000f12:	1dfb      	adds	r3, r7, #7
 8000f14:	781b      	ldrb	r3, [r3, #0]
 8000f16:	0018      	movs	r0, r3
 8000f18:	2303      	movs	r3, #3
 8000f1a:	4003      	ands	r3, r0
 8000f1c:	00db      	lsls	r3, r3, #3
 8000f1e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f20:	481f      	ldr	r0, [pc, #124]	; (8000fa0 <__NVIC_SetPriority+0xd4>)
 8000f22:	1dfb      	adds	r3, r7, #7
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	b25b      	sxtb	r3, r3
 8000f28:	089b      	lsrs	r3, r3, #2
 8000f2a:	430a      	orrs	r2, r1
 8000f2c:	33c0      	adds	r3, #192	; 0xc0
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f32:	e031      	b.n	8000f98 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f34:	4a1b      	ldr	r2, [pc, #108]	; (8000fa4 <__NVIC_SetPriority+0xd8>)
 8000f36:	1dfb      	adds	r3, r7, #7
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	0019      	movs	r1, r3
 8000f3c:	230f      	movs	r3, #15
 8000f3e:	400b      	ands	r3, r1
 8000f40:	3b08      	subs	r3, #8
 8000f42:	089b      	lsrs	r3, r3, #2
 8000f44:	3306      	adds	r3, #6
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	18d3      	adds	r3, r2, r3
 8000f4a:	3304      	adds	r3, #4
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	1dfa      	adds	r2, r7, #7
 8000f50:	7812      	ldrb	r2, [r2, #0]
 8000f52:	0011      	movs	r1, r2
 8000f54:	2203      	movs	r2, #3
 8000f56:	400a      	ands	r2, r1
 8000f58:	00d2      	lsls	r2, r2, #3
 8000f5a:	21ff      	movs	r1, #255	; 0xff
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	000a      	movs	r2, r1
 8000f60:	43d2      	mvns	r2, r2
 8000f62:	401a      	ands	r2, r3
 8000f64:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	019b      	lsls	r3, r3, #6
 8000f6a:	22ff      	movs	r2, #255	; 0xff
 8000f6c:	401a      	ands	r2, r3
 8000f6e:	1dfb      	adds	r3, r7, #7
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	0018      	movs	r0, r3
 8000f74:	2303      	movs	r3, #3
 8000f76:	4003      	ands	r3, r0
 8000f78:	00db      	lsls	r3, r3, #3
 8000f7a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f7c:	4809      	ldr	r0, [pc, #36]	; (8000fa4 <__NVIC_SetPriority+0xd8>)
 8000f7e:	1dfb      	adds	r3, r7, #7
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	001c      	movs	r4, r3
 8000f84:	230f      	movs	r3, #15
 8000f86:	4023      	ands	r3, r4
 8000f88:	3b08      	subs	r3, #8
 8000f8a:	089b      	lsrs	r3, r3, #2
 8000f8c:	430a      	orrs	r2, r1
 8000f8e:	3306      	adds	r3, #6
 8000f90:	009b      	lsls	r3, r3, #2
 8000f92:	18c3      	adds	r3, r0, r3
 8000f94:	3304      	adds	r3, #4
 8000f96:	601a      	str	r2, [r3, #0]
}
 8000f98:	46c0      	nop			; (mov r8, r8)
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	b003      	add	sp, #12
 8000f9e:	bd90      	pop	{r4, r7, pc}
 8000fa0:	e000e100 	.word	0xe000e100
 8000fa4:	e000ed00 	.word	0xe000ed00

08000fa8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	1e5a      	subs	r2, r3, #1
 8000fb4:	2380      	movs	r3, #128	; 0x80
 8000fb6:	045b      	lsls	r3, r3, #17
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d301      	bcc.n	8000fc0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	e010      	b.n	8000fe2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fc0:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <SysTick_Config+0x44>)
 8000fc2:	687a      	ldr	r2, [r7, #4]
 8000fc4:	3a01      	subs	r2, #1
 8000fc6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fc8:	2301      	movs	r3, #1
 8000fca:	425b      	negs	r3, r3
 8000fcc:	2103      	movs	r1, #3
 8000fce:	0018      	movs	r0, r3
 8000fd0:	f7ff ff7c 	bl	8000ecc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fd4:	4b05      	ldr	r3, [pc, #20]	; (8000fec <SysTick_Config+0x44>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fda:	4b04      	ldr	r3, [pc, #16]	; (8000fec <SysTick_Config+0x44>)
 8000fdc:	2207      	movs	r2, #7
 8000fde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fe0:	2300      	movs	r3, #0
}
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	b002      	add	sp, #8
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	46c0      	nop			; (mov r8, r8)
 8000fec:	e000e010 	.word	0xe000e010

08000ff0 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	60b9      	str	r1, [r7, #8]
 8000ff8:	607a      	str	r2, [r7, #4]
 8000ffa:	210f      	movs	r1, #15
 8000ffc:	187b      	adds	r3, r7, r1
 8000ffe:	1c02      	adds	r2, r0, #0
 8001000:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001002:	68ba      	ldr	r2, [r7, #8]
 8001004:	187b      	adds	r3, r7, r1
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	b25b      	sxtb	r3, r3
 800100a:	0011      	movs	r1, r2
 800100c:	0018      	movs	r0, r3
 800100e:	f7ff ff5d 	bl	8000ecc <__NVIC_SetPriority>
}
 8001012:	46c0      	nop			; (mov r8, r8)
 8001014:	46bd      	mov	sp, r7
 8001016:	b004      	add	sp, #16
 8001018:	bd80      	pop	{r7, pc}

0800101a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	b082      	sub	sp, #8
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	0018      	movs	r0, r3
 8001026:	f7ff ffbf 	bl	8000fa8 <SysTick_Config>
 800102a:	0003      	movs	r3, r0
}
 800102c:	0018      	movs	r0, r3
 800102e:	46bd      	mov	sp, r7
 8001030:	b002      	add	sp, #8
 8001032:	bd80      	pop	{r7, pc}

08001034 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800103e:	2300      	movs	r3, #0
 8001040:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001042:	2300      	movs	r3, #0
 8001044:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001046:	2300      	movs	r3, #0
 8001048:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800104a:	e14f      	b.n	80012ec <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	2101      	movs	r1, #1
 8001052:	697a      	ldr	r2, [r7, #20]
 8001054:	4091      	lsls	r1, r2
 8001056:	000a      	movs	r2, r1
 8001058:	4013      	ands	r3, r2
 800105a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d100      	bne.n	8001064 <HAL_GPIO_Init+0x30>
 8001062:	e140      	b.n	80012e6 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	2203      	movs	r2, #3
 800106a:	4013      	ands	r3, r2
 800106c:	2b01      	cmp	r3, #1
 800106e:	d005      	beq.n	800107c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	2203      	movs	r2, #3
 8001076:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001078:	2b02      	cmp	r3, #2
 800107a:	d130      	bne.n	80010de <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	2203      	movs	r2, #3
 8001088:	409a      	lsls	r2, r3
 800108a:	0013      	movs	r3, r2
 800108c:	43da      	mvns	r2, r3
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	4013      	ands	r3, r2
 8001092:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	68da      	ldr	r2, [r3, #12]
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	409a      	lsls	r2, r3
 800109e:	0013      	movs	r3, r2
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	693a      	ldr	r2, [r7, #16]
 80010aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010b2:	2201      	movs	r2, #1
 80010b4:	697b      	ldr	r3, [r7, #20]
 80010b6:	409a      	lsls	r2, r3
 80010b8:	0013      	movs	r3, r2
 80010ba:	43da      	mvns	r2, r3
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	4013      	ands	r3, r2
 80010c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	091b      	lsrs	r3, r3, #4
 80010c8:	2201      	movs	r2, #1
 80010ca:	401a      	ands	r2, r3
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	409a      	lsls	r2, r3
 80010d0:	0013      	movs	r3, r2
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	2203      	movs	r2, #3
 80010e4:	4013      	ands	r3, r2
 80010e6:	2b03      	cmp	r3, #3
 80010e8:	d017      	beq.n	800111a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	68db      	ldr	r3, [r3, #12]
 80010ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	2203      	movs	r2, #3
 80010f6:	409a      	lsls	r2, r3
 80010f8:	0013      	movs	r3, r2
 80010fa:	43da      	mvns	r2, r3
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	4013      	ands	r3, r2
 8001100:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	689a      	ldr	r2, [r3, #8]
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	409a      	lsls	r2, r3
 800110c:	0013      	movs	r3, r2
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	4313      	orrs	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	2203      	movs	r2, #3
 8001120:	4013      	ands	r3, r2
 8001122:	2b02      	cmp	r3, #2
 8001124:	d123      	bne.n	800116e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	08da      	lsrs	r2, r3, #3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	3208      	adds	r2, #8
 800112e:	0092      	lsls	r2, r2, #2
 8001130:	58d3      	ldr	r3, [r2, r3]
 8001132:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	2207      	movs	r2, #7
 8001138:	4013      	ands	r3, r2
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	220f      	movs	r2, #15
 800113e:	409a      	lsls	r2, r3
 8001140:	0013      	movs	r3, r2
 8001142:	43da      	mvns	r2, r3
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	4013      	ands	r3, r2
 8001148:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	691a      	ldr	r2, [r3, #16]
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	2107      	movs	r1, #7
 8001152:	400b      	ands	r3, r1
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	409a      	lsls	r2, r3
 8001158:	0013      	movs	r3, r2
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	4313      	orrs	r3, r2
 800115e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001160:	697b      	ldr	r3, [r7, #20]
 8001162:	08da      	lsrs	r2, r3, #3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	3208      	adds	r2, #8
 8001168:	0092      	lsls	r2, r2, #2
 800116a:	6939      	ldr	r1, [r7, #16]
 800116c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	2203      	movs	r2, #3
 800117a:	409a      	lsls	r2, r3
 800117c:	0013      	movs	r3, r2
 800117e:	43da      	mvns	r2, r3
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	4013      	ands	r3, r2
 8001184:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	2203      	movs	r2, #3
 800118c:	401a      	ands	r2, r3
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	409a      	lsls	r2, r3
 8001194:	0013      	movs	r3, r2
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	4313      	orrs	r3, r2
 800119a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685a      	ldr	r2, [r3, #4]
 80011a6:	23c0      	movs	r3, #192	; 0xc0
 80011a8:	029b      	lsls	r3, r3, #10
 80011aa:	4013      	ands	r3, r2
 80011ac:	d100      	bne.n	80011b0 <HAL_GPIO_Init+0x17c>
 80011ae:	e09a      	b.n	80012e6 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b0:	4b54      	ldr	r3, [pc, #336]	; (8001304 <HAL_GPIO_Init+0x2d0>)
 80011b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80011b4:	4b53      	ldr	r3, [pc, #332]	; (8001304 <HAL_GPIO_Init+0x2d0>)
 80011b6:	2101      	movs	r1, #1
 80011b8:	430a      	orrs	r2, r1
 80011ba:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 80011bc:	4a52      	ldr	r2, [pc, #328]	; (8001308 <HAL_GPIO_Init+0x2d4>)
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	089b      	lsrs	r3, r3, #2
 80011c2:	3302      	adds	r3, #2
 80011c4:	009b      	lsls	r3, r3, #2
 80011c6:	589b      	ldr	r3, [r3, r2]
 80011c8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	2203      	movs	r2, #3
 80011ce:	4013      	ands	r3, r2
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	220f      	movs	r2, #15
 80011d4:	409a      	lsls	r2, r3
 80011d6:	0013      	movs	r3, r2
 80011d8:	43da      	mvns	r2, r3
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	4013      	ands	r3, r2
 80011de:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	23a0      	movs	r3, #160	; 0xa0
 80011e4:	05db      	lsls	r3, r3, #23
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d019      	beq.n	800121e <HAL_GPIO_Init+0x1ea>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a47      	ldr	r2, [pc, #284]	; (800130c <HAL_GPIO_Init+0x2d8>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d013      	beq.n	800121a <HAL_GPIO_Init+0x1e6>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a46      	ldr	r2, [pc, #280]	; (8001310 <HAL_GPIO_Init+0x2dc>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d00d      	beq.n	8001216 <HAL_GPIO_Init+0x1e2>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a45      	ldr	r2, [pc, #276]	; (8001314 <HAL_GPIO_Init+0x2e0>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d007      	beq.n	8001212 <HAL_GPIO_Init+0x1de>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a44      	ldr	r2, [pc, #272]	; (8001318 <HAL_GPIO_Init+0x2e4>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d101      	bne.n	800120e <HAL_GPIO_Init+0x1da>
 800120a:	2305      	movs	r3, #5
 800120c:	e008      	b.n	8001220 <HAL_GPIO_Init+0x1ec>
 800120e:	2306      	movs	r3, #6
 8001210:	e006      	b.n	8001220 <HAL_GPIO_Init+0x1ec>
 8001212:	2303      	movs	r3, #3
 8001214:	e004      	b.n	8001220 <HAL_GPIO_Init+0x1ec>
 8001216:	2302      	movs	r3, #2
 8001218:	e002      	b.n	8001220 <HAL_GPIO_Init+0x1ec>
 800121a:	2301      	movs	r3, #1
 800121c:	e000      	b.n	8001220 <HAL_GPIO_Init+0x1ec>
 800121e:	2300      	movs	r3, #0
 8001220:	697a      	ldr	r2, [r7, #20]
 8001222:	2103      	movs	r1, #3
 8001224:	400a      	ands	r2, r1
 8001226:	0092      	lsls	r2, r2, #2
 8001228:	4093      	lsls	r3, r2
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	4313      	orrs	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001230:	4935      	ldr	r1, [pc, #212]	; (8001308 <HAL_GPIO_Init+0x2d4>)
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	089b      	lsrs	r3, r3, #2
 8001236:	3302      	adds	r3, #2
 8001238:	009b      	lsls	r3, r3, #2
 800123a:	693a      	ldr	r2, [r7, #16]
 800123c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800123e:	4b37      	ldr	r3, [pc, #220]	; (800131c <HAL_GPIO_Init+0x2e8>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	43da      	mvns	r2, r3
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	4013      	ands	r3, r2
 800124c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685a      	ldr	r2, [r3, #4]
 8001252:	2380      	movs	r3, #128	; 0x80
 8001254:	025b      	lsls	r3, r3, #9
 8001256:	4013      	ands	r3, r2
 8001258:	d003      	beq.n	8001262 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 800125a:	693a      	ldr	r2, [r7, #16]
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	4313      	orrs	r3, r2
 8001260:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001262:	4b2e      	ldr	r3, [pc, #184]	; (800131c <HAL_GPIO_Init+0x2e8>)
 8001264:	693a      	ldr	r2, [r7, #16]
 8001266:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001268:	4b2c      	ldr	r3, [pc, #176]	; (800131c <HAL_GPIO_Init+0x2e8>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	43da      	mvns	r2, r3
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	4013      	ands	r3, r2
 8001276:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685a      	ldr	r2, [r3, #4]
 800127c:	2380      	movs	r3, #128	; 0x80
 800127e:	029b      	lsls	r3, r3, #10
 8001280:	4013      	ands	r3, r2
 8001282:	d003      	beq.n	800128c <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001284:	693a      	ldr	r2, [r7, #16]
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	4313      	orrs	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800128c:	4b23      	ldr	r3, [pc, #140]	; (800131c <HAL_GPIO_Init+0x2e8>)
 800128e:	693a      	ldr	r2, [r7, #16]
 8001290:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001292:	4b22      	ldr	r3, [pc, #136]	; (800131c <HAL_GPIO_Init+0x2e8>)
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	43da      	mvns	r2, r3
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	4013      	ands	r3, r2
 80012a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685a      	ldr	r2, [r3, #4]
 80012a6:	2380      	movs	r3, #128	; 0x80
 80012a8:	035b      	lsls	r3, r3, #13
 80012aa:	4013      	ands	r3, r2
 80012ac:	d003      	beq.n	80012b6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80012b6:	4b19      	ldr	r3, [pc, #100]	; (800131c <HAL_GPIO_Init+0x2e8>)
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80012bc:	4b17      	ldr	r3, [pc, #92]	; (800131c <HAL_GPIO_Init+0x2e8>)
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	43da      	mvns	r2, r3
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	4013      	ands	r3, r2
 80012ca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685a      	ldr	r2, [r3, #4]
 80012d0:	2380      	movs	r3, #128	; 0x80
 80012d2:	039b      	lsls	r3, r3, #14
 80012d4:	4013      	ands	r3, r2
 80012d6:	d003      	beq.n	80012e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	4313      	orrs	r3, r2
 80012de:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80012e0:	4b0e      	ldr	r3, [pc, #56]	; (800131c <HAL_GPIO_Init+0x2e8>)
 80012e2:	693a      	ldr	r2, [r7, #16]
 80012e4:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	3301      	adds	r3, #1
 80012ea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80012ec:	683b      	ldr	r3, [r7, #0]
 80012ee:	681a      	ldr	r2, [r3, #0]
 80012f0:	697b      	ldr	r3, [r7, #20]
 80012f2:	40da      	lsrs	r2, r3
 80012f4:	1e13      	subs	r3, r2, #0
 80012f6:	d000      	beq.n	80012fa <HAL_GPIO_Init+0x2c6>
 80012f8:	e6a8      	b.n	800104c <HAL_GPIO_Init+0x18>
  }
}
 80012fa:	46c0      	nop			; (mov r8, r8)
 80012fc:	46c0      	nop			; (mov r8, r8)
 80012fe:	46bd      	mov	sp, r7
 8001300:	b006      	add	sp, #24
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40021000 	.word	0x40021000
 8001308:	40010000 	.word	0x40010000
 800130c:	50000400 	.word	0x50000400
 8001310:	50000800 	.word	0x50000800
 8001314:	50000c00 	.word	0x50000c00
 8001318:	50001c00 	.word	0x50001c00
 800131c:	40010400 	.word	0x40010400

08001320 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	000a      	movs	r2, r1
 800132a:	1cbb      	adds	r3, r7, #2
 800132c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	691b      	ldr	r3, [r3, #16]
 8001332:	1cba      	adds	r2, r7, #2
 8001334:	8812      	ldrh	r2, [r2, #0]
 8001336:	4013      	ands	r3, r2
 8001338:	d004      	beq.n	8001344 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800133a:	230f      	movs	r3, #15
 800133c:	18fb      	adds	r3, r7, r3
 800133e:	2201      	movs	r2, #1
 8001340:	701a      	strb	r2, [r3, #0]
 8001342:	e003      	b.n	800134c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001344:	230f      	movs	r3, #15
 8001346:	18fb      	adds	r3, r7, r3
 8001348:	2200      	movs	r2, #0
 800134a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800134c:	230f      	movs	r3, #15
 800134e:	18fb      	adds	r3, r7, r3
 8001350:	781b      	ldrb	r3, [r3, #0]
}
 8001352:	0018      	movs	r0, r3
 8001354:	46bd      	mov	sp, r7
 8001356:	b004      	add	sp, #16
 8001358:	bd80      	pop	{r7, pc}

0800135a <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b082      	sub	sp, #8
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
 8001362:	0008      	movs	r0, r1
 8001364:	0011      	movs	r1, r2
 8001366:	1cbb      	adds	r3, r7, #2
 8001368:	1c02      	adds	r2, r0, #0
 800136a:	801a      	strh	r2, [r3, #0]
 800136c:	1c7b      	adds	r3, r7, #1
 800136e:	1c0a      	adds	r2, r1, #0
 8001370:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001372:	1c7b      	adds	r3, r7, #1
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d004      	beq.n	8001384 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800137a:	1cbb      	adds	r3, r7, #2
 800137c:	881a      	ldrh	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001382:	e003      	b.n	800138c <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001384:	1cbb      	adds	r3, r7, #2
 8001386:	881a      	ldrh	r2, [r3, #0]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800138c:	46c0      	nop			; (mov r8, r8)
 800138e:	46bd      	mov	sp, r7
 8001390:	b002      	add	sp, #8
 8001392:	bd80      	pop	{r7, pc}

08001394 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001394:	b5b0      	push	{r4, r5, r7, lr}
 8001396:	b08a      	sub	sp, #40	; 0x28
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d102      	bne.n	80013a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80013a2:	2301      	movs	r3, #1
 80013a4:	f000 fb5a 	bl	8001a5c <HAL_RCC_OscConfig+0x6c8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013a8:	4bce      	ldr	r3, [pc, #824]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	220c      	movs	r2, #12
 80013ae:	4013      	ands	r3, r2
 80013b0:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013b2:	4bcc      	ldr	r3, [pc, #816]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 80013b4:	68da      	ldr	r2, [r3, #12]
 80013b6:	2380      	movs	r3, #128	; 0x80
 80013b8:	025b      	lsls	r3, r3, #9
 80013ba:	4013      	ands	r3, r2
 80013bc:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2201      	movs	r2, #1
 80013c4:	4013      	ands	r3, r2
 80013c6:	d100      	bne.n	80013ca <HAL_RCC_OscConfig+0x36>
 80013c8:	e07c      	b.n	80014c4 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013ca:	6a3b      	ldr	r3, [r7, #32]
 80013cc:	2b08      	cmp	r3, #8
 80013ce:	d007      	beq.n	80013e0 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80013d0:	6a3b      	ldr	r3, [r7, #32]
 80013d2:	2b0c      	cmp	r3, #12
 80013d4:	d111      	bne.n	80013fa <HAL_RCC_OscConfig+0x66>
 80013d6:	69fa      	ldr	r2, [r7, #28]
 80013d8:	2380      	movs	r3, #128	; 0x80
 80013da:	025b      	lsls	r3, r3, #9
 80013dc:	429a      	cmp	r2, r3
 80013de:	d10c      	bne.n	80013fa <HAL_RCC_OscConfig+0x66>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013e0:	4bc0      	ldr	r3, [pc, #768]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	2380      	movs	r3, #128	; 0x80
 80013e6:	029b      	lsls	r3, r3, #10
 80013e8:	4013      	ands	r3, r2
 80013ea:	d100      	bne.n	80013ee <HAL_RCC_OscConfig+0x5a>
 80013ec:	e069      	b.n	80014c2 <HAL_RCC_OscConfig+0x12e>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d165      	bne.n	80014c2 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e330      	b.n	8001a5c <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	685a      	ldr	r2, [r3, #4]
 80013fe:	2380      	movs	r3, #128	; 0x80
 8001400:	025b      	lsls	r3, r3, #9
 8001402:	429a      	cmp	r2, r3
 8001404:	d107      	bne.n	8001416 <HAL_RCC_OscConfig+0x82>
 8001406:	4bb7      	ldr	r3, [pc, #732]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	4bb6      	ldr	r3, [pc, #728]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 800140c:	2180      	movs	r1, #128	; 0x80
 800140e:	0249      	lsls	r1, r1, #9
 8001410:	430a      	orrs	r2, r1
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	e027      	b.n	8001466 <HAL_RCC_OscConfig+0xd2>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	685a      	ldr	r2, [r3, #4]
 800141a:	23a0      	movs	r3, #160	; 0xa0
 800141c:	02db      	lsls	r3, r3, #11
 800141e:	429a      	cmp	r2, r3
 8001420:	d10e      	bne.n	8001440 <HAL_RCC_OscConfig+0xac>
 8001422:	4bb0      	ldr	r3, [pc, #704]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	4baf      	ldr	r3, [pc, #700]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 8001428:	2180      	movs	r1, #128	; 0x80
 800142a:	02c9      	lsls	r1, r1, #11
 800142c:	430a      	orrs	r2, r1
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	4bac      	ldr	r3, [pc, #688]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	4bab      	ldr	r3, [pc, #684]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 8001436:	2180      	movs	r1, #128	; 0x80
 8001438:	0249      	lsls	r1, r1, #9
 800143a:	430a      	orrs	r2, r1
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	e012      	b.n	8001466 <HAL_RCC_OscConfig+0xd2>
 8001440:	4ba8      	ldr	r3, [pc, #672]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	4ba7      	ldr	r3, [pc, #668]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 8001446:	49a8      	ldr	r1, [pc, #672]	; (80016e8 <HAL_RCC_OscConfig+0x354>)
 8001448:	400a      	ands	r2, r1
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	4ba5      	ldr	r3, [pc, #660]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 800144e:	681a      	ldr	r2, [r3, #0]
 8001450:	2380      	movs	r3, #128	; 0x80
 8001452:	025b      	lsls	r3, r3, #9
 8001454:	4013      	ands	r3, r2
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	4ba2      	ldr	r3, [pc, #648]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 800145c:	681a      	ldr	r2, [r3, #0]
 800145e:	4ba1      	ldr	r3, [pc, #644]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 8001460:	49a2      	ldr	r1, [pc, #648]	; (80016ec <HAL_RCC_OscConfig+0x358>)
 8001462:	400a      	ands	r2, r1
 8001464:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d014      	beq.n	8001498 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800146e:	f7ff fd23 	bl	8000eb8 <HAL_GetTick>
 8001472:	0003      	movs	r3, r0
 8001474:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001476:	e008      	b.n	800148a <HAL_RCC_OscConfig+0xf6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001478:	f7ff fd1e 	bl	8000eb8 <HAL_GetTick>
 800147c:	0002      	movs	r2, r0
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	2b64      	cmp	r3, #100	; 0x64
 8001484:	d901      	bls.n	800148a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e2e8      	b.n	8001a5c <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800148a:	4b96      	ldr	r3, [pc, #600]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	2380      	movs	r3, #128	; 0x80
 8001490:	029b      	lsls	r3, r3, #10
 8001492:	4013      	ands	r3, r2
 8001494:	d0f0      	beq.n	8001478 <HAL_RCC_OscConfig+0xe4>
 8001496:	e015      	b.n	80014c4 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001498:	f7ff fd0e 	bl	8000eb8 <HAL_GetTick>
 800149c:	0003      	movs	r3, r0
 800149e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80014a0:	e008      	b.n	80014b4 <HAL_RCC_OscConfig+0x120>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014a2:	f7ff fd09 	bl	8000eb8 <HAL_GetTick>
 80014a6:	0002      	movs	r2, r0
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	2b64      	cmp	r3, #100	; 0x64
 80014ae:	d901      	bls.n	80014b4 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80014b0:	2303      	movs	r3, #3
 80014b2:	e2d3      	b.n	8001a5c <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80014b4:	4b8b      	ldr	r3, [pc, #556]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	2380      	movs	r3, #128	; 0x80
 80014ba:	029b      	lsls	r3, r3, #10
 80014bc:	4013      	ands	r3, r2
 80014be:	d1f0      	bne.n	80014a2 <HAL_RCC_OscConfig+0x10e>
 80014c0:	e000      	b.n	80014c4 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014c2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2202      	movs	r2, #2
 80014ca:	4013      	ands	r3, r2
 80014cc:	d100      	bne.n	80014d0 <HAL_RCC_OscConfig+0x13c>
 80014ce:	e08b      	b.n	80015e8 <HAL_RCC_OscConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80014d6:	6a3b      	ldr	r3, [r7, #32]
 80014d8:	2b04      	cmp	r3, #4
 80014da:	d005      	beq.n	80014e8 <HAL_RCC_OscConfig+0x154>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80014dc:	6a3b      	ldr	r3, [r7, #32]
 80014de:	2b0c      	cmp	r3, #12
 80014e0:	d13e      	bne.n	8001560 <HAL_RCC_OscConfig+0x1cc>
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d13b      	bne.n	8001560 <HAL_RCC_OscConfig+0x1cc>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80014e8:	4b7e      	ldr	r3, [pc, #504]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2204      	movs	r2, #4
 80014ee:	4013      	ands	r3, r2
 80014f0:	d004      	beq.n	80014fc <HAL_RCC_OscConfig+0x168>
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d101      	bne.n	80014fc <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 80014f8:	2301      	movs	r3, #1
 80014fa:	e2af      	b.n	8001a5c <HAL_RCC_OscConfig+0x6c8>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014fc:	4b79      	ldr	r3, [pc, #484]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	4a7b      	ldr	r2, [pc, #492]	; (80016f0 <HAL_RCC_OscConfig+0x35c>)
 8001502:	4013      	ands	r3, r2
 8001504:	0019      	movs	r1, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	691b      	ldr	r3, [r3, #16]
 800150a:	021a      	lsls	r2, r3, #8
 800150c:	4b75      	ldr	r3, [pc, #468]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 800150e:	430a      	orrs	r2, r1
 8001510:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001512:	4b74      	ldr	r3, [pc, #464]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2209      	movs	r2, #9
 8001518:	4393      	bics	r3, r2
 800151a:	0019      	movs	r1, r3
 800151c:	4b71      	ldr	r3, [pc, #452]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 800151e:	697a      	ldr	r2, [r7, #20]
 8001520:	430a      	orrs	r2, r1
 8001522:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001524:	f000 fbe8 	bl	8001cf8 <HAL_RCC_GetSysClockFreq>
 8001528:	0001      	movs	r1, r0
 800152a:	4b6e      	ldr	r3, [pc, #440]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 800152c:	68db      	ldr	r3, [r3, #12]
 800152e:	091b      	lsrs	r3, r3, #4
 8001530:	220f      	movs	r2, #15
 8001532:	4013      	ands	r3, r2
 8001534:	4a6f      	ldr	r2, [pc, #444]	; (80016f4 <HAL_RCC_OscConfig+0x360>)
 8001536:	5cd3      	ldrb	r3, [r2, r3]
 8001538:	000a      	movs	r2, r1
 800153a:	40da      	lsrs	r2, r3
 800153c:	4b6e      	ldr	r3, [pc, #440]	; (80016f8 <HAL_RCC_OscConfig+0x364>)
 800153e:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001540:	4b6e      	ldr	r3, [pc, #440]	; (80016fc <HAL_RCC_OscConfig+0x368>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2513      	movs	r5, #19
 8001546:	197c      	adds	r4, r7, r5
 8001548:	0018      	movs	r0, r3
 800154a:	f7ff fc6f 	bl	8000e2c <HAL_InitTick>
 800154e:	0003      	movs	r3, r0
 8001550:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001552:	197b      	adds	r3, r7, r5
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d046      	beq.n	80015e8 <HAL_RCC_OscConfig+0x254>
      {
        return status;
 800155a:	197b      	adds	r3, r7, r5
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	e27d      	b.n	8001a5c <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d027      	beq.n	80015b6 <HAL_RCC_OscConfig+0x222>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001566:	4b5f      	ldr	r3, [pc, #380]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	2209      	movs	r2, #9
 800156c:	4393      	bics	r3, r2
 800156e:	0019      	movs	r1, r3
 8001570:	4b5c      	ldr	r3, [pc, #368]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 8001572:	697a      	ldr	r2, [r7, #20]
 8001574:	430a      	orrs	r2, r1
 8001576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001578:	f7ff fc9e 	bl	8000eb8 <HAL_GetTick>
 800157c:	0003      	movs	r3, r0
 800157e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001580:	e008      	b.n	8001594 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001582:	f7ff fc99 	bl	8000eb8 <HAL_GetTick>
 8001586:	0002      	movs	r2, r0
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	2b02      	cmp	r3, #2
 800158e:	d901      	bls.n	8001594 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001590:	2303      	movs	r3, #3
 8001592:	e263      	b.n	8001a5c <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001594:	4b53      	ldr	r3, [pc, #332]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2204      	movs	r2, #4
 800159a:	4013      	ands	r3, r2
 800159c:	d0f1      	beq.n	8001582 <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800159e:	4b51      	ldr	r3, [pc, #324]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	4a53      	ldr	r2, [pc, #332]	; (80016f0 <HAL_RCC_OscConfig+0x35c>)
 80015a4:	4013      	ands	r3, r2
 80015a6:	0019      	movs	r1, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	691b      	ldr	r3, [r3, #16]
 80015ac:	021a      	lsls	r2, r3, #8
 80015ae:	4b4d      	ldr	r3, [pc, #308]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 80015b0:	430a      	orrs	r2, r1
 80015b2:	605a      	str	r2, [r3, #4]
 80015b4:	e018      	b.n	80015e8 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015b6:	4b4b      	ldr	r3, [pc, #300]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	4b4a      	ldr	r3, [pc, #296]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 80015bc:	2101      	movs	r1, #1
 80015be:	438a      	bics	r2, r1
 80015c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c2:	f7ff fc79 	bl	8000eb8 <HAL_GetTick>
 80015c6:	0003      	movs	r3, r0
 80015c8:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80015ca:	e008      	b.n	80015de <HAL_RCC_OscConfig+0x24a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80015cc:	f7ff fc74 	bl	8000eb8 <HAL_GetTick>
 80015d0:	0002      	movs	r2, r0
 80015d2:	69bb      	ldr	r3, [r7, #24]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	2b02      	cmp	r3, #2
 80015d8:	d901      	bls.n	80015de <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80015da:	2303      	movs	r3, #3
 80015dc:	e23e      	b.n	8001a5c <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80015de:	4b41      	ldr	r3, [pc, #260]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	2204      	movs	r2, #4
 80015e4:	4013      	ands	r3, r2
 80015e6:	d1f1      	bne.n	80015cc <HAL_RCC_OscConfig+0x238>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2210      	movs	r2, #16
 80015ee:	4013      	ands	r3, r2
 80015f0:	d100      	bne.n	80015f4 <HAL_RCC_OscConfig+0x260>
 80015f2:	e0a1      	b.n	8001738 <HAL_RCC_OscConfig+0x3a4>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80015f4:	6a3b      	ldr	r3, [r7, #32]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d140      	bne.n	800167c <HAL_RCC_OscConfig+0x2e8>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015fa:	4b3a      	ldr	r3, [pc, #232]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	2380      	movs	r3, #128	; 0x80
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	4013      	ands	r3, r2
 8001604:	d005      	beq.n	8001612 <HAL_RCC_OscConfig+0x27e>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	699b      	ldr	r3, [r3, #24]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d101      	bne.n	8001612 <HAL_RCC_OscConfig+0x27e>
      {
        return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	e224      	b.n	8001a5c <HAL_RCC_OscConfig+0x6c8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001612:	4b34      	ldr	r3, [pc, #208]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	4a3a      	ldr	r2, [pc, #232]	; (8001700 <HAL_RCC_OscConfig+0x36c>)
 8001618:	4013      	ands	r3, r2
 800161a:	0019      	movs	r1, r3
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6a1a      	ldr	r2, [r3, #32]
 8001620:	4b30      	ldr	r3, [pc, #192]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 8001622:	430a      	orrs	r2, r1
 8001624:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001626:	4b2f      	ldr	r3, [pc, #188]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	021b      	lsls	r3, r3, #8
 800162c:	0a19      	lsrs	r1, r3, #8
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	69db      	ldr	r3, [r3, #28]
 8001632:	061a      	lsls	r2, r3, #24
 8001634:	4b2b      	ldr	r3, [pc, #172]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 8001636:	430a      	orrs	r2, r1
 8001638:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a1b      	ldr	r3, [r3, #32]
 800163e:	0b5b      	lsrs	r3, r3, #13
 8001640:	3301      	adds	r3, #1
 8001642:	2280      	movs	r2, #128	; 0x80
 8001644:	0212      	lsls	r2, r2, #8
 8001646:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001648:	4b26      	ldr	r3, [pc, #152]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 800164a:	68db      	ldr	r3, [r3, #12]
 800164c:	091b      	lsrs	r3, r3, #4
 800164e:	210f      	movs	r1, #15
 8001650:	400b      	ands	r3, r1
 8001652:	4928      	ldr	r1, [pc, #160]	; (80016f4 <HAL_RCC_OscConfig+0x360>)
 8001654:	5ccb      	ldrb	r3, [r1, r3]
 8001656:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001658:	4b27      	ldr	r3, [pc, #156]	; (80016f8 <HAL_RCC_OscConfig+0x364>)
 800165a:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800165c:	4b27      	ldr	r3, [pc, #156]	; (80016fc <HAL_RCC_OscConfig+0x368>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2513      	movs	r5, #19
 8001662:	197c      	adds	r4, r7, r5
 8001664:	0018      	movs	r0, r3
 8001666:	f7ff fbe1 	bl	8000e2c <HAL_InitTick>
 800166a:	0003      	movs	r3, r0
 800166c:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800166e:	197b      	adds	r3, r7, r5
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d060      	beq.n	8001738 <HAL_RCC_OscConfig+0x3a4>
        {
          return status;
 8001676:	197b      	adds	r3, r7, r5
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	e1ef      	b.n	8001a5c <HAL_RCC_OscConfig+0x6c8>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	699b      	ldr	r3, [r3, #24]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d03f      	beq.n	8001704 <HAL_RCC_OscConfig+0x370>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001684:	4b17      	ldr	r3, [pc, #92]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	4b16      	ldr	r3, [pc, #88]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 800168a:	2180      	movs	r1, #128	; 0x80
 800168c:	0049      	lsls	r1, r1, #1
 800168e:	430a      	orrs	r2, r1
 8001690:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001692:	f7ff fc11 	bl	8000eb8 <HAL_GetTick>
 8001696:	0003      	movs	r3, r0
 8001698:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800169a:	e008      	b.n	80016ae <HAL_RCC_OscConfig+0x31a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800169c:	f7ff fc0c 	bl	8000eb8 <HAL_GetTick>
 80016a0:	0002      	movs	r2, r0
 80016a2:	69bb      	ldr	r3, [r7, #24]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e1d6      	b.n	8001a5c <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80016ae:	4b0d      	ldr	r3, [pc, #52]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	2380      	movs	r3, #128	; 0x80
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	4013      	ands	r3, r2
 80016b8:	d0f0      	beq.n	800169c <HAL_RCC_OscConfig+0x308>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016ba:	4b0a      	ldr	r3, [pc, #40]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	4a10      	ldr	r2, [pc, #64]	; (8001700 <HAL_RCC_OscConfig+0x36c>)
 80016c0:	4013      	ands	r3, r2
 80016c2:	0019      	movs	r1, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6a1a      	ldr	r2, [r3, #32]
 80016c8:	4b06      	ldr	r3, [pc, #24]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 80016ca:	430a      	orrs	r2, r1
 80016cc:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016ce:	4b05      	ldr	r3, [pc, #20]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	021b      	lsls	r3, r3, #8
 80016d4:	0a19      	lsrs	r1, r3, #8
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	69db      	ldr	r3, [r3, #28]
 80016da:	061a      	lsls	r2, r3, #24
 80016dc:	4b01      	ldr	r3, [pc, #4]	; (80016e4 <HAL_RCC_OscConfig+0x350>)
 80016de:	430a      	orrs	r2, r1
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	e029      	b.n	8001738 <HAL_RCC_OscConfig+0x3a4>
 80016e4:	40021000 	.word	0x40021000
 80016e8:	fffeffff 	.word	0xfffeffff
 80016ec:	fffbffff 	.word	0xfffbffff
 80016f0:	ffffe0ff 	.word	0xffffe0ff
 80016f4:	08001eb8 	.word	0x08001eb8
 80016f8:	20000004 	.word	0x20000004
 80016fc:	20000008 	.word	0x20000008
 8001700:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001704:	4bbe      	ldr	r3, [pc, #760]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	4bbd      	ldr	r3, [pc, #756]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 800170a:	49be      	ldr	r1, [pc, #760]	; (8001a04 <HAL_RCC_OscConfig+0x670>)
 800170c:	400a      	ands	r2, r1
 800170e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001710:	f7ff fbd2 	bl	8000eb8 <HAL_GetTick>
 8001714:	0003      	movs	r3, r0
 8001716:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001718:	e008      	b.n	800172c <HAL_RCC_OscConfig+0x398>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800171a:	f7ff fbcd 	bl	8000eb8 <HAL_GetTick>
 800171e:	0002      	movs	r2, r0
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	1ad3      	subs	r3, r2, r3
 8001724:	2b02      	cmp	r3, #2
 8001726:	d901      	bls.n	800172c <HAL_RCC_OscConfig+0x398>
          {
            return HAL_TIMEOUT;
 8001728:	2303      	movs	r3, #3
 800172a:	e197      	b.n	8001a5c <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800172c:	4bb4      	ldr	r3, [pc, #720]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	2380      	movs	r3, #128	; 0x80
 8001732:	009b      	lsls	r3, r3, #2
 8001734:	4013      	ands	r3, r2
 8001736:	d1f0      	bne.n	800171a <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2208      	movs	r2, #8
 800173e:	4013      	ands	r3, r2
 8001740:	d036      	beq.n	80017b0 <HAL_RCC_OscConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	695b      	ldr	r3, [r3, #20]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d019      	beq.n	800177e <HAL_RCC_OscConfig+0x3ea>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800174a:	4bad      	ldr	r3, [pc, #692]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 800174c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800174e:	4bac      	ldr	r3, [pc, #688]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 8001750:	2101      	movs	r1, #1
 8001752:	430a      	orrs	r2, r1
 8001754:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001756:	f7ff fbaf 	bl	8000eb8 <HAL_GetTick>
 800175a:	0003      	movs	r3, r0
 800175c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800175e:	e008      	b.n	8001772 <HAL_RCC_OscConfig+0x3de>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001760:	f7ff fbaa 	bl	8000eb8 <HAL_GetTick>
 8001764:	0002      	movs	r2, r0
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	2b02      	cmp	r3, #2
 800176c:	d901      	bls.n	8001772 <HAL_RCC_OscConfig+0x3de>
        {
          return HAL_TIMEOUT;
 800176e:	2303      	movs	r3, #3
 8001770:	e174      	b.n	8001a5c <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001772:	4ba3      	ldr	r3, [pc, #652]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 8001774:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001776:	2202      	movs	r2, #2
 8001778:	4013      	ands	r3, r2
 800177a:	d0f1      	beq.n	8001760 <HAL_RCC_OscConfig+0x3cc>
 800177c:	e018      	b.n	80017b0 <HAL_RCC_OscConfig+0x41c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800177e:	4ba0      	ldr	r3, [pc, #640]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 8001780:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001782:	4b9f      	ldr	r3, [pc, #636]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 8001784:	2101      	movs	r1, #1
 8001786:	438a      	bics	r2, r1
 8001788:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800178a:	f7ff fb95 	bl	8000eb8 <HAL_GetTick>
 800178e:	0003      	movs	r3, r0
 8001790:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001792:	e008      	b.n	80017a6 <HAL_RCC_OscConfig+0x412>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001794:	f7ff fb90 	bl	8000eb8 <HAL_GetTick>
 8001798:	0002      	movs	r2, r0
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	2b02      	cmp	r3, #2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e15a      	b.n	8001a5c <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80017a6:	4b96      	ldr	r3, [pc, #600]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 80017a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80017aa:	2202      	movs	r2, #2
 80017ac:	4013      	ands	r3, r2
 80017ae:	d1f1      	bne.n	8001794 <HAL_RCC_OscConfig+0x400>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2204      	movs	r2, #4
 80017b6:	4013      	ands	r3, r2
 80017b8:	d100      	bne.n	80017bc <HAL_RCC_OscConfig+0x428>
 80017ba:	e0ae      	b.n	800191a <HAL_RCC_OscConfig+0x586>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017bc:	2027      	movs	r0, #39	; 0x27
 80017be:	183b      	adds	r3, r7, r0
 80017c0:	2200      	movs	r2, #0
 80017c2:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017c4:	4b8e      	ldr	r3, [pc, #568]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 80017c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017c8:	2380      	movs	r3, #128	; 0x80
 80017ca:	055b      	lsls	r3, r3, #21
 80017cc:	4013      	ands	r3, r2
 80017ce:	d109      	bne.n	80017e4 <HAL_RCC_OscConfig+0x450>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017d0:	4b8b      	ldr	r3, [pc, #556]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 80017d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017d4:	4b8a      	ldr	r3, [pc, #552]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 80017d6:	2180      	movs	r1, #128	; 0x80
 80017d8:	0549      	lsls	r1, r1, #21
 80017da:	430a      	orrs	r2, r1
 80017dc:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80017de:	183b      	adds	r3, r7, r0
 80017e0:	2201      	movs	r2, #1
 80017e2:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017e4:	4b88      	ldr	r3, [pc, #544]	; (8001a08 <HAL_RCC_OscConfig+0x674>)
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	2380      	movs	r3, #128	; 0x80
 80017ea:	005b      	lsls	r3, r3, #1
 80017ec:	4013      	ands	r3, r2
 80017ee:	d11a      	bne.n	8001826 <HAL_RCC_OscConfig+0x492>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017f0:	4b85      	ldr	r3, [pc, #532]	; (8001a08 <HAL_RCC_OscConfig+0x674>)
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	4b84      	ldr	r3, [pc, #528]	; (8001a08 <HAL_RCC_OscConfig+0x674>)
 80017f6:	2180      	movs	r1, #128	; 0x80
 80017f8:	0049      	lsls	r1, r1, #1
 80017fa:	430a      	orrs	r2, r1
 80017fc:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017fe:	f7ff fb5b 	bl	8000eb8 <HAL_GetTick>
 8001802:	0003      	movs	r3, r0
 8001804:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001806:	e008      	b.n	800181a <HAL_RCC_OscConfig+0x486>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001808:	f7ff fb56 	bl	8000eb8 <HAL_GetTick>
 800180c:	0002      	movs	r2, r0
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b64      	cmp	r3, #100	; 0x64
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0x486>
        {
          return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e120      	b.n	8001a5c <HAL_RCC_OscConfig+0x6c8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800181a:	4b7b      	ldr	r3, [pc, #492]	; (8001a08 <HAL_RCC_OscConfig+0x674>)
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	2380      	movs	r3, #128	; 0x80
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	4013      	ands	r3, r2
 8001824:	d0f0      	beq.n	8001808 <HAL_RCC_OscConfig+0x474>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	689a      	ldr	r2, [r3, #8]
 800182a:	2380      	movs	r3, #128	; 0x80
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	429a      	cmp	r2, r3
 8001830:	d107      	bne.n	8001842 <HAL_RCC_OscConfig+0x4ae>
 8001832:	4b73      	ldr	r3, [pc, #460]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 8001834:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001836:	4b72      	ldr	r3, [pc, #456]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 8001838:	2180      	movs	r1, #128	; 0x80
 800183a:	0049      	lsls	r1, r1, #1
 800183c:	430a      	orrs	r2, r1
 800183e:	651a      	str	r2, [r3, #80]	; 0x50
 8001840:	e031      	b.n	80018a6 <HAL_RCC_OscConfig+0x512>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	2b00      	cmp	r3, #0
 8001848:	d10c      	bne.n	8001864 <HAL_RCC_OscConfig+0x4d0>
 800184a:	4b6d      	ldr	r3, [pc, #436]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 800184c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800184e:	4b6c      	ldr	r3, [pc, #432]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 8001850:	496c      	ldr	r1, [pc, #432]	; (8001a04 <HAL_RCC_OscConfig+0x670>)
 8001852:	400a      	ands	r2, r1
 8001854:	651a      	str	r2, [r3, #80]	; 0x50
 8001856:	4b6a      	ldr	r3, [pc, #424]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 8001858:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800185a:	4b69      	ldr	r3, [pc, #420]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 800185c:	496b      	ldr	r1, [pc, #428]	; (8001a0c <HAL_RCC_OscConfig+0x678>)
 800185e:	400a      	ands	r2, r1
 8001860:	651a      	str	r2, [r3, #80]	; 0x50
 8001862:	e020      	b.n	80018a6 <HAL_RCC_OscConfig+0x512>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	689a      	ldr	r2, [r3, #8]
 8001868:	23a0      	movs	r3, #160	; 0xa0
 800186a:	00db      	lsls	r3, r3, #3
 800186c:	429a      	cmp	r2, r3
 800186e:	d10e      	bne.n	800188e <HAL_RCC_OscConfig+0x4fa>
 8001870:	4b63      	ldr	r3, [pc, #396]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 8001872:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001874:	4b62      	ldr	r3, [pc, #392]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 8001876:	2180      	movs	r1, #128	; 0x80
 8001878:	00c9      	lsls	r1, r1, #3
 800187a:	430a      	orrs	r2, r1
 800187c:	651a      	str	r2, [r3, #80]	; 0x50
 800187e:	4b60      	ldr	r3, [pc, #384]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 8001880:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001882:	4b5f      	ldr	r3, [pc, #380]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 8001884:	2180      	movs	r1, #128	; 0x80
 8001886:	0049      	lsls	r1, r1, #1
 8001888:	430a      	orrs	r2, r1
 800188a:	651a      	str	r2, [r3, #80]	; 0x50
 800188c:	e00b      	b.n	80018a6 <HAL_RCC_OscConfig+0x512>
 800188e:	4b5c      	ldr	r3, [pc, #368]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 8001890:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001892:	4b5b      	ldr	r3, [pc, #364]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 8001894:	495b      	ldr	r1, [pc, #364]	; (8001a04 <HAL_RCC_OscConfig+0x670>)
 8001896:	400a      	ands	r2, r1
 8001898:	651a      	str	r2, [r3, #80]	; 0x50
 800189a:	4b59      	ldr	r3, [pc, #356]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 800189c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800189e:	4b58      	ldr	r3, [pc, #352]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 80018a0:	495a      	ldr	r1, [pc, #360]	; (8001a0c <HAL_RCC_OscConfig+0x678>)
 80018a2:	400a      	ands	r2, r1
 80018a4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d015      	beq.n	80018da <HAL_RCC_OscConfig+0x546>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ae:	f7ff fb03 	bl	8000eb8 <HAL_GetTick>
 80018b2:	0003      	movs	r3, r0
 80018b4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80018b6:	e009      	b.n	80018cc <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018b8:	f7ff fafe 	bl	8000eb8 <HAL_GetTick>
 80018bc:	0002      	movs	r2, r0
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	4a53      	ldr	r2, [pc, #332]	; (8001a10 <HAL_RCC_OscConfig+0x67c>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d901      	bls.n	80018cc <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80018c8:	2303      	movs	r3, #3
 80018ca:	e0c7      	b.n	8001a5c <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80018cc:	4b4c      	ldr	r3, [pc, #304]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 80018ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018d0:	2380      	movs	r3, #128	; 0x80
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	4013      	ands	r3, r2
 80018d6:	d0ef      	beq.n	80018b8 <HAL_RCC_OscConfig+0x524>
 80018d8:	e014      	b.n	8001904 <HAL_RCC_OscConfig+0x570>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018da:	f7ff faed 	bl	8000eb8 <HAL_GetTick>
 80018de:	0003      	movs	r3, r0
 80018e0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80018e2:	e009      	b.n	80018f8 <HAL_RCC_OscConfig+0x564>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018e4:	f7ff fae8 	bl	8000eb8 <HAL_GetTick>
 80018e8:	0002      	movs	r2, r0
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	4a48      	ldr	r2, [pc, #288]	; (8001a10 <HAL_RCC_OscConfig+0x67c>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d901      	bls.n	80018f8 <HAL_RCC_OscConfig+0x564>
        {
          return HAL_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
 80018f6:	e0b1      	b.n	8001a5c <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80018f8:	4b41      	ldr	r3, [pc, #260]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 80018fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018fc:	2380      	movs	r3, #128	; 0x80
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	4013      	ands	r3, r2
 8001902:	d1ef      	bne.n	80018e4 <HAL_RCC_OscConfig+0x550>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001904:	2327      	movs	r3, #39	; 0x27
 8001906:	18fb      	adds	r3, r7, r3
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d105      	bne.n	800191a <HAL_RCC_OscConfig+0x586>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800190e:	4b3c      	ldr	r3, [pc, #240]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 8001910:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001912:	4b3b      	ldr	r3, [pc, #236]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 8001914:	493f      	ldr	r1, [pc, #252]	; (8001a14 <HAL_RCC_OscConfig+0x680>)
 8001916:	400a      	ands	r2, r1
 8001918:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800191e:	2b00      	cmp	r3, #0
 8001920:	d100      	bne.n	8001924 <HAL_RCC_OscConfig+0x590>
 8001922:	e09a      	b.n	8001a5a <HAL_RCC_OscConfig+0x6c6>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001924:	6a3b      	ldr	r3, [r7, #32]
 8001926:	2b0c      	cmp	r3, #12
 8001928:	d064      	beq.n	80019f4 <HAL_RCC_OscConfig+0x660>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800192e:	2b02      	cmp	r3, #2
 8001930:	d145      	bne.n	80019be <HAL_RCC_OscConfig+0x62a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001932:	4b33      	ldr	r3, [pc, #204]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	4b32      	ldr	r3, [pc, #200]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 8001938:	4937      	ldr	r1, [pc, #220]	; (8001a18 <HAL_RCC_OscConfig+0x684>)
 800193a:	400a      	ands	r2, r1
 800193c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800193e:	f7ff fabb 	bl	8000eb8 <HAL_GetTick>
 8001942:	0003      	movs	r3, r0
 8001944:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001946:	e008      	b.n	800195a <HAL_RCC_OscConfig+0x5c6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001948:	f7ff fab6 	bl	8000eb8 <HAL_GetTick>
 800194c:	0002      	movs	r2, r0
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	1ad3      	subs	r3, r2, r3
 8001952:	2b02      	cmp	r3, #2
 8001954:	d901      	bls.n	800195a <HAL_RCC_OscConfig+0x5c6>
          {
            return HAL_TIMEOUT;
 8001956:	2303      	movs	r3, #3
 8001958:	e080      	b.n	8001a5c <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800195a:	4b29      	ldr	r3, [pc, #164]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	2380      	movs	r3, #128	; 0x80
 8001960:	049b      	lsls	r3, r3, #18
 8001962:	4013      	ands	r3, r2
 8001964:	d1f0      	bne.n	8001948 <HAL_RCC_OscConfig+0x5b4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001966:	4b26      	ldr	r3, [pc, #152]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	4a2c      	ldr	r2, [pc, #176]	; (8001a1c <HAL_RCC_OscConfig+0x688>)
 800196c:	4013      	ands	r3, r2
 800196e:	0019      	movs	r1, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001978:	431a      	orrs	r2, r3
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197e:	431a      	orrs	r2, r3
 8001980:	4b1f      	ldr	r3, [pc, #124]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 8001982:	430a      	orrs	r2, r1
 8001984:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001986:	4b1e      	ldr	r3, [pc, #120]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	4b1d      	ldr	r3, [pc, #116]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 800198c:	2180      	movs	r1, #128	; 0x80
 800198e:	0449      	lsls	r1, r1, #17
 8001990:	430a      	orrs	r2, r1
 8001992:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001994:	f7ff fa90 	bl	8000eb8 <HAL_GetTick>
 8001998:	0003      	movs	r3, r0
 800199a:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800199c:	e008      	b.n	80019b0 <HAL_RCC_OscConfig+0x61c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800199e:	f7ff fa8b 	bl	8000eb8 <HAL_GetTick>
 80019a2:	0002      	movs	r2, r0
 80019a4:	69bb      	ldr	r3, [r7, #24]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d901      	bls.n	80019b0 <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e055      	b.n	8001a5c <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 80019b0:	4b13      	ldr	r3, [pc, #76]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	2380      	movs	r3, #128	; 0x80
 80019b6:	049b      	lsls	r3, r3, #18
 80019b8:	4013      	ands	r3, r2
 80019ba:	d0f0      	beq.n	800199e <HAL_RCC_OscConfig+0x60a>
 80019bc:	e04d      	b.n	8001a5a <HAL_RCC_OscConfig+0x6c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019be:	4b10      	ldr	r3, [pc, #64]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	4b0f      	ldr	r3, [pc, #60]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 80019c4:	4914      	ldr	r1, [pc, #80]	; (8001a18 <HAL_RCC_OscConfig+0x684>)
 80019c6:	400a      	ands	r2, r1
 80019c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ca:	f7ff fa75 	bl	8000eb8 <HAL_GetTick>
 80019ce:	0003      	movs	r3, r0
 80019d0:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0x652>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019d4:	f7ff fa70 	bl	8000eb8 <HAL_GetTick>
 80019d8:	0002      	movs	r2, r0
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x652>
          {
            return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e03a      	b.n	8001a5c <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80019e6:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <HAL_RCC_OscConfig+0x66c>)
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	2380      	movs	r3, #128	; 0x80
 80019ec:	049b      	lsls	r3, r3, #18
 80019ee:	4013      	ands	r3, r2
 80019f0:	d1f0      	bne.n	80019d4 <HAL_RCC_OscConfig+0x640>
 80019f2:	e032      	b.n	8001a5a <HAL_RCC_OscConfig+0x6c6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d111      	bne.n	8001a20 <HAL_RCC_OscConfig+0x68c>
      {
        return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e02d      	b.n	8001a5c <HAL_RCC_OscConfig+0x6c8>
 8001a00:	40021000 	.word	0x40021000
 8001a04:	fffffeff 	.word	0xfffffeff
 8001a08:	40007000 	.word	0x40007000
 8001a0c:	fffffbff 	.word	0xfffffbff
 8001a10:	00001388 	.word	0x00001388
 8001a14:	efffffff 	.word	0xefffffff
 8001a18:	feffffff 	.word	0xfeffffff
 8001a1c:	ff02ffff 	.word	0xff02ffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001a20:	4b10      	ldr	r3, [pc, #64]	; (8001a64 <HAL_RCC_OscConfig+0x6d0>)
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a26:	69fa      	ldr	r2, [r7, #28]
 8001a28:	2380      	movs	r3, #128	; 0x80
 8001a2a:	025b      	lsls	r3, r3, #9
 8001a2c:	401a      	ands	r2, r3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d10f      	bne.n	8001a56 <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001a36:	69fa      	ldr	r2, [r7, #28]
 8001a38:	23f0      	movs	r3, #240	; 0xf0
 8001a3a:	039b      	lsls	r3, r3, #14
 8001a3c:	401a      	ands	r2, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a42:	429a      	cmp	r2, r3
 8001a44:	d107      	bne.n	8001a56 <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001a46:	69fa      	ldr	r2, [r7, #28]
 8001a48:	23c0      	movs	r3, #192	; 0xc0
 8001a4a:	041b      	lsls	r3, r3, #16
 8001a4c:	401a      	ands	r2, r3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d001      	beq.n	8001a5a <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e000      	b.n	8001a5c <HAL_RCC_OscConfig+0x6c8>
        }
      }
    }
  }
  return HAL_OK;
 8001a5a:	2300      	movs	r3, #0
}
 8001a5c:	0018      	movs	r0, r3
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	b00a      	add	sp, #40	; 0x28
 8001a62:	bdb0      	pop	{r4, r5, r7, pc}
 8001a64:	40021000 	.word	0x40021000

08001a68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a68:	b5b0      	push	{r4, r5, r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d101      	bne.n	8001a7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e128      	b.n	8001cce <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a7c:	4b96      	ldr	r3, [pc, #600]	; (8001cd8 <HAL_RCC_ClockConfig+0x270>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2201      	movs	r2, #1
 8001a82:	4013      	ands	r3, r2
 8001a84:	683a      	ldr	r2, [r7, #0]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d91e      	bls.n	8001ac8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a8a:	4b93      	ldr	r3, [pc, #588]	; (8001cd8 <HAL_RCC_ClockConfig+0x270>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	2201      	movs	r2, #1
 8001a90:	4393      	bics	r3, r2
 8001a92:	0019      	movs	r1, r3
 8001a94:	4b90      	ldr	r3, [pc, #576]	; (8001cd8 <HAL_RCC_ClockConfig+0x270>)
 8001a96:	683a      	ldr	r2, [r7, #0]
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a9c:	f7ff fa0c 	bl	8000eb8 <HAL_GetTick>
 8001aa0:	0003      	movs	r3, r0
 8001aa2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aa4:	e009      	b.n	8001aba <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aa6:	f7ff fa07 	bl	8000eb8 <HAL_GetTick>
 8001aaa:	0002      	movs	r2, r0
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	4a8a      	ldr	r2, [pc, #552]	; (8001cdc <HAL_RCC_ClockConfig+0x274>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e109      	b.n	8001cce <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aba:	4b87      	ldr	r3, [pc, #540]	; (8001cd8 <HAL_RCC_ClockConfig+0x270>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	683a      	ldr	r2, [r7, #0]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d1ee      	bne.n	8001aa6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	2202      	movs	r2, #2
 8001ace:	4013      	ands	r3, r2
 8001ad0:	d009      	beq.n	8001ae6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ad2:	4b83      	ldr	r3, [pc, #524]	; (8001ce0 <HAL_RCC_ClockConfig+0x278>)
 8001ad4:	68db      	ldr	r3, [r3, #12]
 8001ad6:	22f0      	movs	r2, #240	; 0xf0
 8001ad8:	4393      	bics	r3, r2
 8001ada:	0019      	movs	r1, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689a      	ldr	r2, [r3, #8]
 8001ae0:	4b7f      	ldr	r3, [pc, #508]	; (8001ce0 <HAL_RCC_ClockConfig+0x278>)
 8001ae2:	430a      	orrs	r2, r1
 8001ae4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2201      	movs	r2, #1
 8001aec:	4013      	ands	r3, r2
 8001aee:	d100      	bne.n	8001af2 <HAL_RCC_ClockConfig+0x8a>
 8001af0:	e089      	b.n	8001c06 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d107      	bne.n	8001b0a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001afa:	4b79      	ldr	r3, [pc, #484]	; (8001ce0 <HAL_RCC_ClockConfig+0x278>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	2380      	movs	r3, #128	; 0x80
 8001b00:	029b      	lsls	r3, r3, #10
 8001b02:	4013      	ands	r3, r2
 8001b04:	d120      	bne.n	8001b48 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e0e1      	b.n	8001cce <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	2b03      	cmp	r3, #3
 8001b10:	d107      	bne.n	8001b22 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b12:	4b73      	ldr	r3, [pc, #460]	; (8001ce0 <HAL_RCC_ClockConfig+0x278>)
 8001b14:	681a      	ldr	r2, [r3, #0]
 8001b16:	2380      	movs	r3, #128	; 0x80
 8001b18:	049b      	lsls	r3, r3, #18
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	d114      	bne.n	8001b48 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e0d5      	b.n	8001cce <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	2b01      	cmp	r3, #1
 8001b28:	d106      	bne.n	8001b38 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b2a:	4b6d      	ldr	r3, [pc, #436]	; (8001ce0 <HAL_RCC_ClockConfig+0x278>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2204      	movs	r2, #4
 8001b30:	4013      	ands	r3, r2
 8001b32:	d109      	bne.n	8001b48 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e0ca      	b.n	8001cce <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001b38:	4b69      	ldr	r3, [pc, #420]	; (8001ce0 <HAL_RCC_ClockConfig+0x278>)
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	2380      	movs	r3, #128	; 0x80
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	4013      	ands	r3, r2
 8001b42:	d101      	bne.n	8001b48 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e0c2      	b.n	8001cce <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b48:	4b65      	ldr	r3, [pc, #404]	; (8001ce0 <HAL_RCC_ClockConfig+0x278>)
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	2203      	movs	r2, #3
 8001b4e:	4393      	bics	r3, r2
 8001b50:	0019      	movs	r1, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685a      	ldr	r2, [r3, #4]
 8001b56:	4b62      	ldr	r3, [pc, #392]	; (8001ce0 <HAL_RCC_ClockConfig+0x278>)
 8001b58:	430a      	orrs	r2, r1
 8001b5a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b5c:	f7ff f9ac 	bl	8000eb8 <HAL_GetTick>
 8001b60:	0003      	movs	r3, r0
 8001b62:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d111      	bne.n	8001b90 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b6c:	e009      	b.n	8001b82 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b6e:	f7ff f9a3 	bl	8000eb8 <HAL_GetTick>
 8001b72:	0002      	movs	r2, r0
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	4a58      	ldr	r2, [pc, #352]	; (8001cdc <HAL_RCC_ClockConfig+0x274>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e0a5      	b.n	8001cce <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b82:	4b57      	ldr	r3, [pc, #348]	; (8001ce0 <HAL_RCC_ClockConfig+0x278>)
 8001b84:	68db      	ldr	r3, [r3, #12]
 8001b86:	220c      	movs	r2, #12
 8001b88:	4013      	ands	r3, r2
 8001b8a:	2b08      	cmp	r3, #8
 8001b8c:	d1ef      	bne.n	8001b6e <HAL_RCC_ClockConfig+0x106>
 8001b8e:	e03a      	b.n	8001c06 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	2b03      	cmp	r3, #3
 8001b96:	d111      	bne.n	8001bbc <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001b98:	e009      	b.n	8001bae <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b9a:	f7ff f98d 	bl	8000eb8 <HAL_GetTick>
 8001b9e:	0002      	movs	r2, r0
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	4a4d      	ldr	r2, [pc, #308]	; (8001cdc <HAL_RCC_ClockConfig+0x274>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e08f      	b.n	8001cce <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001bae:	4b4c      	ldr	r3, [pc, #304]	; (8001ce0 <HAL_RCC_ClockConfig+0x278>)
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	220c      	movs	r2, #12
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	2b0c      	cmp	r3, #12
 8001bb8:	d1ef      	bne.n	8001b9a <HAL_RCC_ClockConfig+0x132>
 8001bba:	e024      	b.n	8001c06 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d11b      	bne.n	8001bfc <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bc4:	e009      	b.n	8001bda <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bc6:	f7ff f977 	bl	8000eb8 <HAL_GetTick>
 8001bca:	0002      	movs	r2, r0
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	4a42      	ldr	r2, [pc, #264]	; (8001cdc <HAL_RCC_ClockConfig+0x274>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e079      	b.n	8001cce <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bda:	4b41      	ldr	r3, [pc, #260]	; (8001ce0 <HAL_RCC_ClockConfig+0x278>)
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	220c      	movs	r2, #12
 8001be0:	4013      	ands	r3, r2
 8001be2:	2b04      	cmp	r3, #4
 8001be4:	d1ef      	bne.n	8001bc6 <HAL_RCC_ClockConfig+0x15e>
 8001be6:	e00e      	b.n	8001c06 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001be8:	f7ff f966 	bl	8000eb8 <HAL_GetTick>
 8001bec:	0002      	movs	r2, r0
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	4a3a      	ldr	r2, [pc, #232]	; (8001cdc <HAL_RCC_ClockConfig+0x274>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d901      	bls.n	8001bfc <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001bf8:	2303      	movs	r3, #3
 8001bfa:	e068      	b.n	8001cce <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001bfc:	4b38      	ldr	r3, [pc, #224]	; (8001ce0 <HAL_RCC_ClockConfig+0x278>)
 8001bfe:	68db      	ldr	r3, [r3, #12]
 8001c00:	220c      	movs	r2, #12
 8001c02:	4013      	ands	r3, r2
 8001c04:	d1f0      	bne.n	8001be8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c06:	4b34      	ldr	r3, [pc, #208]	; (8001cd8 <HAL_RCC_ClockConfig+0x270>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2201      	movs	r2, #1
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	683a      	ldr	r2, [r7, #0]
 8001c10:	429a      	cmp	r2, r3
 8001c12:	d21e      	bcs.n	8001c52 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c14:	4b30      	ldr	r3, [pc, #192]	; (8001cd8 <HAL_RCC_ClockConfig+0x270>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2201      	movs	r2, #1
 8001c1a:	4393      	bics	r3, r2
 8001c1c:	0019      	movs	r1, r3
 8001c1e:	4b2e      	ldr	r3, [pc, #184]	; (8001cd8 <HAL_RCC_ClockConfig+0x270>)
 8001c20:	683a      	ldr	r2, [r7, #0]
 8001c22:	430a      	orrs	r2, r1
 8001c24:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c26:	f7ff f947 	bl	8000eb8 <HAL_GetTick>
 8001c2a:	0003      	movs	r3, r0
 8001c2c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c2e:	e009      	b.n	8001c44 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c30:	f7ff f942 	bl	8000eb8 <HAL_GetTick>
 8001c34:	0002      	movs	r2, r0
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	1ad3      	subs	r3, r2, r3
 8001c3a:	4a28      	ldr	r2, [pc, #160]	; (8001cdc <HAL_RCC_ClockConfig+0x274>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d901      	bls.n	8001c44 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e044      	b.n	8001cce <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c44:	4b24      	ldr	r3, [pc, #144]	; (8001cd8 <HAL_RCC_ClockConfig+0x270>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	683a      	ldr	r2, [r7, #0]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d1ee      	bne.n	8001c30 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2204      	movs	r2, #4
 8001c58:	4013      	ands	r3, r2
 8001c5a:	d009      	beq.n	8001c70 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c5c:	4b20      	ldr	r3, [pc, #128]	; (8001ce0 <HAL_RCC_ClockConfig+0x278>)
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	4a20      	ldr	r2, [pc, #128]	; (8001ce4 <HAL_RCC_ClockConfig+0x27c>)
 8001c62:	4013      	ands	r3, r2
 8001c64:	0019      	movs	r1, r3
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	68da      	ldr	r2, [r3, #12]
 8001c6a:	4b1d      	ldr	r3, [pc, #116]	; (8001ce0 <HAL_RCC_ClockConfig+0x278>)
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2208      	movs	r2, #8
 8001c76:	4013      	ands	r3, r2
 8001c78:	d00a      	beq.n	8001c90 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c7a:	4b19      	ldr	r3, [pc, #100]	; (8001ce0 <HAL_RCC_ClockConfig+0x278>)
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	4a1a      	ldr	r2, [pc, #104]	; (8001ce8 <HAL_RCC_ClockConfig+0x280>)
 8001c80:	4013      	ands	r3, r2
 8001c82:	0019      	movs	r1, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	691b      	ldr	r3, [r3, #16]
 8001c88:	00da      	lsls	r2, r3, #3
 8001c8a:	4b15      	ldr	r3, [pc, #84]	; (8001ce0 <HAL_RCC_ClockConfig+0x278>)
 8001c8c:	430a      	orrs	r2, r1
 8001c8e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c90:	f000 f832 	bl	8001cf8 <HAL_RCC_GetSysClockFreq>
 8001c94:	0001      	movs	r1, r0
 8001c96:	4b12      	ldr	r3, [pc, #72]	; (8001ce0 <HAL_RCC_ClockConfig+0x278>)
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	091b      	lsrs	r3, r3, #4
 8001c9c:	220f      	movs	r2, #15
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	4a12      	ldr	r2, [pc, #72]	; (8001cec <HAL_RCC_ClockConfig+0x284>)
 8001ca2:	5cd3      	ldrb	r3, [r2, r3]
 8001ca4:	000a      	movs	r2, r1
 8001ca6:	40da      	lsrs	r2, r3
 8001ca8:	4b11      	ldr	r3, [pc, #68]	; (8001cf0 <HAL_RCC_ClockConfig+0x288>)
 8001caa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001cac:	4b11      	ldr	r3, [pc, #68]	; (8001cf4 <HAL_RCC_ClockConfig+0x28c>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	250b      	movs	r5, #11
 8001cb2:	197c      	adds	r4, r7, r5
 8001cb4:	0018      	movs	r0, r3
 8001cb6:	f7ff f8b9 	bl	8000e2c <HAL_InitTick>
 8001cba:	0003      	movs	r3, r0
 8001cbc:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001cbe:	197b      	adds	r3, r7, r5
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d002      	beq.n	8001ccc <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001cc6:	197b      	adds	r3, r7, r5
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	e000      	b.n	8001cce <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	0018      	movs	r0, r3
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	b004      	add	sp, #16
 8001cd4:	bdb0      	pop	{r4, r5, r7, pc}
 8001cd6:	46c0      	nop			; (mov r8, r8)
 8001cd8:	40022000 	.word	0x40022000
 8001cdc:	00001388 	.word	0x00001388
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	fffff8ff 	.word	0xfffff8ff
 8001ce8:	ffffc7ff 	.word	0xffffc7ff
 8001cec:	08001eb8 	.word	0x08001eb8
 8001cf0:	20000004 	.word	0x20000004
 8001cf4:	20000008 	.word	0x20000008

08001cf8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cf8:	b5b0      	push	{r4, r5, r7, lr}
 8001cfa:	b08e      	sub	sp, #56	; 0x38
 8001cfc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001cfe:	4b4c      	ldr	r3, [pc, #304]	; (8001e30 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d06:	230c      	movs	r3, #12
 8001d08:	4013      	ands	r3, r2
 8001d0a:	2b0c      	cmp	r3, #12
 8001d0c:	d014      	beq.n	8001d38 <HAL_RCC_GetSysClockFreq+0x40>
 8001d0e:	d900      	bls.n	8001d12 <HAL_RCC_GetSysClockFreq+0x1a>
 8001d10:	e07b      	b.n	8001e0a <HAL_RCC_GetSysClockFreq+0x112>
 8001d12:	2b04      	cmp	r3, #4
 8001d14:	d002      	beq.n	8001d1c <HAL_RCC_GetSysClockFreq+0x24>
 8001d16:	2b08      	cmp	r3, #8
 8001d18:	d00b      	beq.n	8001d32 <HAL_RCC_GetSysClockFreq+0x3a>
 8001d1a:	e076      	b.n	8001e0a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001d1c:	4b44      	ldr	r3, [pc, #272]	; (8001e30 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	2210      	movs	r2, #16
 8001d22:	4013      	ands	r3, r2
 8001d24:	d002      	beq.n	8001d2c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001d26:	4b43      	ldr	r3, [pc, #268]	; (8001e34 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001d28:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001d2a:	e07c      	b.n	8001e26 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001d2c:	4b42      	ldr	r3, [pc, #264]	; (8001e38 <HAL_RCC_GetSysClockFreq+0x140>)
 8001d2e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d30:	e079      	b.n	8001e26 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d32:	4b42      	ldr	r3, [pc, #264]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x144>)
 8001d34:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d36:	e076      	b.n	8001e26 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d3a:	0c9a      	lsrs	r2, r3, #18
 8001d3c:	230f      	movs	r3, #15
 8001d3e:	401a      	ands	r2, r3
 8001d40:	4b3f      	ldr	r3, [pc, #252]	; (8001e40 <HAL_RCC_GetSysClockFreq+0x148>)
 8001d42:	5c9b      	ldrb	r3, [r3, r2]
 8001d44:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d48:	0d9a      	lsrs	r2, r3, #22
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	3301      	adds	r3, #1
 8001d50:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d52:	4b37      	ldr	r3, [pc, #220]	; (8001e30 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d54:	68da      	ldr	r2, [r3, #12]
 8001d56:	2380      	movs	r3, #128	; 0x80
 8001d58:	025b      	lsls	r3, r3, #9
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	d01a      	beq.n	8001d94 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001d5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d60:	61bb      	str	r3, [r7, #24]
 8001d62:	2300      	movs	r3, #0
 8001d64:	61fb      	str	r3, [r7, #28]
 8001d66:	4a35      	ldr	r2, [pc, #212]	; (8001e3c <HAL_RCC_GetSysClockFreq+0x144>)
 8001d68:	2300      	movs	r3, #0
 8001d6a:	69b8      	ldr	r0, [r7, #24]
 8001d6c:	69f9      	ldr	r1, [r7, #28]
 8001d6e:	f7fe fa77 	bl	8000260 <__aeabi_lmul>
 8001d72:	0002      	movs	r2, r0
 8001d74:	000b      	movs	r3, r1
 8001d76:	0010      	movs	r0, r2
 8001d78:	0019      	movs	r1, r3
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7c:	613b      	str	r3, [r7, #16]
 8001d7e:	2300      	movs	r3, #0
 8001d80:	617b      	str	r3, [r7, #20]
 8001d82:	693a      	ldr	r2, [r7, #16]
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	f7fe fa4b 	bl	8000220 <__aeabi_uldivmod>
 8001d8a:	0002      	movs	r2, r0
 8001d8c:	000b      	movs	r3, r1
 8001d8e:	0013      	movs	r3, r2
 8001d90:	637b      	str	r3, [r7, #52]	; 0x34
 8001d92:	e037      	b.n	8001e04 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001d94:	4b26      	ldr	r3, [pc, #152]	; (8001e30 <HAL_RCC_GetSysClockFreq+0x138>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	2210      	movs	r2, #16
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	d01a      	beq.n	8001dd4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001d9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001da0:	60bb      	str	r3, [r7, #8]
 8001da2:	2300      	movs	r3, #0
 8001da4:	60fb      	str	r3, [r7, #12]
 8001da6:	4a23      	ldr	r2, [pc, #140]	; (8001e34 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001da8:	2300      	movs	r3, #0
 8001daa:	68b8      	ldr	r0, [r7, #8]
 8001dac:	68f9      	ldr	r1, [r7, #12]
 8001dae:	f7fe fa57 	bl	8000260 <__aeabi_lmul>
 8001db2:	0002      	movs	r2, r0
 8001db4:	000b      	movs	r3, r1
 8001db6:	0010      	movs	r0, r2
 8001db8:	0019      	movs	r1, r3
 8001dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbc:	603b      	str	r3, [r7, #0]
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	607b      	str	r3, [r7, #4]
 8001dc2:	683a      	ldr	r2, [r7, #0]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f7fe fa2b 	bl	8000220 <__aeabi_uldivmod>
 8001dca:	0002      	movs	r2, r0
 8001dcc:	000b      	movs	r3, r1
 8001dce:	0013      	movs	r3, r2
 8001dd0:	637b      	str	r3, [r7, #52]	; 0x34
 8001dd2:	e017      	b.n	8001e04 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dd6:	0018      	movs	r0, r3
 8001dd8:	2300      	movs	r3, #0
 8001dda:	0019      	movs	r1, r3
 8001ddc:	4a16      	ldr	r2, [pc, #88]	; (8001e38 <HAL_RCC_GetSysClockFreq+0x140>)
 8001dde:	2300      	movs	r3, #0
 8001de0:	f7fe fa3e 	bl	8000260 <__aeabi_lmul>
 8001de4:	0002      	movs	r2, r0
 8001de6:	000b      	movs	r3, r1
 8001de8:	0010      	movs	r0, r2
 8001dea:	0019      	movs	r1, r3
 8001dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dee:	001c      	movs	r4, r3
 8001df0:	2300      	movs	r3, #0
 8001df2:	001d      	movs	r5, r3
 8001df4:	0022      	movs	r2, r4
 8001df6:	002b      	movs	r3, r5
 8001df8:	f7fe fa12 	bl	8000220 <__aeabi_uldivmod>
 8001dfc:	0002      	movs	r2, r0
 8001dfe:	000b      	movs	r3, r1
 8001e00:	0013      	movs	r3, r2
 8001e02:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001e04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e06:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e08:	e00d      	b.n	8001e26 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001e0a:	4b09      	ldr	r3, [pc, #36]	; (8001e30 <HAL_RCC_GetSysClockFreq+0x138>)
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	0b5b      	lsrs	r3, r3, #13
 8001e10:	2207      	movs	r2, #7
 8001e12:	4013      	ands	r3, r2
 8001e14:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001e16:	6a3b      	ldr	r3, [r7, #32]
 8001e18:	3301      	adds	r3, #1
 8001e1a:	2280      	movs	r2, #128	; 0x80
 8001e1c:	0212      	lsls	r2, r2, #8
 8001e1e:	409a      	lsls	r2, r3
 8001e20:	0013      	movs	r3, r2
 8001e22:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e24:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001e28:	0018      	movs	r0, r3
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	b00e      	add	sp, #56	; 0x38
 8001e2e:	bdb0      	pop	{r4, r5, r7, pc}
 8001e30:	40021000 	.word	0x40021000
 8001e34:	003d0900 	.word	0x003d0900
 8001e38:	00f42400 	.word	0x00f42400
 8001e3c:	007a1200 	.word	0x007a1200
 8001e40:	08001ec8 	.word	0x08001ec8

08001e44 <__libc_init_array>:
 8001e44:	b570      	push	{r4, r5, r6, lr}
 8001e46:	2600      	movs	r6, #0
 8001e48:	4d0c      	ldr	r5, [pc, #48]	; (8001e7c <__libc_init_array+0x38>)
 8001e4a:	4c0d      	ldr	r4, [pc, #52]	; (8001e80 <__libc_init_array+0x3c>)
 8001e4c:	1b64      	subs	r4, r4, r5
 8001e4e:	10a4      	asrs	r4, r4, #2
 8001e50:	42a6      	cmp	r6, r4
 8001e52:	d109      	bne.n	8001e68 <__libc_init_array+0x24>
 8001e54:	2600      	movs	r6, #0
 8001e56:	f000 f821 	bl	8001e9c <_init>
 8001e5a:	4d0a      	ldr	r5, [pc, #40]	; (8001e84 <__libc_init_array+0x40>)
 8001e5c:	4c0a      	ldr	r4, [pc, #40]	; (8001e88 <__libc_init_array+0x44>)
 8001e5e:	1b64      	subs	r4, r4, r5
 8001e60:	10a4      	asrs	r4, r4, #2
 8001e62:	42a6      	cmp	r6, r4
 8001e64:	d105      	bne.n	8001e72 <__libc_init_array+0x2e>
 8001e66:	bd70      	pop	{r4, r5, r6, pc}
 8001e68:	00b3      	lsls	r3, r6, #2
 8001e6a:	58eb      	ldr	r3, [r5, r3]
 8001e6c:	4798      	blx	r3
 8001e6e:	3601      	adds	r6, #1
 8001e70:	e7ee      	b.n	8001e50 <__libc_init_array+0xc>
 8001e72:	00b3      	lsls	r3, r6, #2
 8001e74:	58eb      	ldr	r3, [r5, r3]
 8001e76:	4798      	blx	r3
 8001e78:	3601      	adds	r6, #1
 8001e7a:	e7f2      	b.n	8001e62 <__libc_init_array+0x1e>
 8001e7c:	08001edc 	.word	0x08001edc
 8001e80:	08001edc 	.word	0x08001edc
 8001e84:	08001edc 	.word	0x08001edc
 8001e88:	08001ee0 	.word	0x08001ee0

08001e8c <memset>:
 8001e8c:	0003      	movs	r3, r0
 8001e8e:	1882      	adds	r2, r0, r2
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d100      	bne.n	8001e96 <memset+0xa>
 8001e94:	4770      	bx	lr
 8001e96:	7019      	strb	r1, [r3, #0]
 8001e98:	3301      	adds	r3, #1
 8001e9a:	e7f9      	b.n	8001e90 <memset+0x4>

08001e9c <_init>:
 8001e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e9e:	46c0      	nop			; (mov r8, r8)
 8001ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ea2:	bc08      	pop	{r3}
 8001ea4:	469e      	mov	lr, r3
 8001ea6:	4770      	bx	lr

08001ea8 <_fini>:
 8001ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eaa:	46c0      	nop			; (mov r8, r8)
 8001eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001eae:	bc08      	pop	{r3}
 8001eb0:	469e      	mov	lr, r3
 8001eb2:	4770      	bx	lr
