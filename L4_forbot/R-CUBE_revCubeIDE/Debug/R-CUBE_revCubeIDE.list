
R-CUBE_revCubeIDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007240  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000434  08007300  08007300  00017300  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007734  08007734  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08007734  08007734  00017734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800773c  0800773c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800773c  0800773c  0001773c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007740  08007740  00017740  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007744  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  20000010  08007754  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ec  08007754  000201ec  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010915  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002630  00000000  00000000  0003094d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b68  00000000  00000000  00032f80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a60  00000000  00000000  00033ae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012efc  00000000  00000000  00034548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000101ef  00000000  00000000  00047444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006ce11  00000000  00000000  00057633  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c4444  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a98  00000000  00000000  000c4498  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080072e8 	.word	0x080072e8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	080072e8 	.word	0x080072e8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_cdrcmple>:
 80003f4:	4684      	mov	ip, r0
 80003f6:	1c10      	adds	r0, r2, #0
 80003f8:	4662      	mov	r2, ip
 80003fa:	468c      	mov	ip, r1
 80003fc:	1c19      	adds	r1, r3, #0
 80003fe:	4663      	mov	r3, ip
 8000400:	e000      	b.n	8000404 <__aeabi_cdcmpeq>
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <__aeabi_cdcmpeq>:
 8000404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000406:	f001 f9b7 	bl	8001778 <__ledf2>
 800040a:	2800      	cmp	r0, #0
 800040c:	d401      	bmi.n	8000412 <__aeabi_cdcmpeq+0xe>
 800040e:	2100      	movs	r1, #0
 8000410:	42c8      	cmn	r0, r1
 8000412:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000414 <__aeabi_dcmpeq>:
 8000414:	b510      	push	{r4, lr}
 8000416:	f001 f901 	bl	800161c <__eqdf2>
 800041a:	4240      	negs	r0, r0
 800041c:	3001      	adds	r0, #1
 800041e:	bd10      	pop	{r4, pc}

08000420 <__aeabi_dcmplt>:
 8000420:	b510      	push	{r4, lr}
 8000422:	f001 f9a9 	bl	8001778 <__ledf2>
 8000426:	2800      	cmp	r0, #0
 8000428:	db01      	blt.n	800042e <__aeabi_dcmplt+0xe>
 800042a:	2000      	movs	r0, #0
 800042c:	bd10      	pop	{r4, pc}
 800042e:	2001      	movs	r0, #1
 8000430:	bd10      	pop	{r4, pc}
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__aeabi_dcmple>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f001 f99f 	bl	8001778 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	dd01      	ble.n	8000442 <__aeabi_dcmple+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_dcmpgt>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f001 f923 	bl	8001694 <__gedf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dc01      	bgt.n	8000456 <__aeabi_dcmpgt+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__aeabi_dcmpge>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f001 f919 	bl	8001694 <__gedf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	da01      	bge.n	800046a <__aeabi_dcmpge+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__aeabi_uldivmod>:
 8000470:	2b00      	cmp	r3, #0
 8000472:	d111      	bne.n	8000498 <__aeabi_uldivmod+0x28>
 8000474:	2a00      	cmp	r2, #0
 8000476:	d10f      	bne.n	8000498 <__aeabi_uldivmod+0x28>
 8000478:	2900      	cmp	r1, #0
 800047a:	d100      	bne.n	800047e <__aeabi_uldivmod+0xe>
 800047c:	2800      	cmp	r0, #0
 800047e:	d002      	beq.n	8000486 <__aeabi_uldivmod+0x16>
 8000480:	2100      	movs	r1, #0
 8000482:	43c9      	mvns	r1, r1
 8000484:	1c08      	adds	r0, r1, #0
 8000486:	b407      	push	{r0, r1, r2}
 8000488:	4802      	ldr	r0, [pc, #8]	; (8000494 <__aeabi_uldivmod+0x24>)
 800048a:	a102      	add	r1, pc, #8	; (adr r1, 8000494 <__aeabi_uldivmod+0x24>)
 800048c:	1840      	adds	r0, r0, r1
 800048e:	9002      	str	r0, [sp, #8]
 8000490:	bd03      	pop	{r0, r1, pc}
 8000492:	46c0      	nop			; (mov r8, r8)
 8000494:	ffffff5d 	.word	0xffffff5d
 8000498:	b403      	push	{r0, r1}
 800049a:	4668      	mov	r0, sp
 800049c:	b501      	push	{r0, lr}
 800049e:	9802      	ldr	r0, [sp, #8]
 80004a0:	f000 f84c 	bl	800053c <__udivmoddi4>
 80004a4:	9b01      	ldr	r3, [sp, #4]
 80004a6:	469e      	mov	lr, r3
 80004a8:	b002      	add	sp, #8
 80004aa:	bc0c      	pop	{r2, r3}
 80004ac:	4770      	bx	lr
 80004ae:	46c0      	nop			; (mov r8, r8)

080004b0 <__aeabi_lmul>:
 80004b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004b2:	0415      	lsls	r5, r2, #16
 80004b4:	0c2d      	lsrs	r5, r5, #16
 80004b6:	000f      	movs	r7, r1
 80004b8:	0001      	movs	r1, r0
 80004ba:	002e      	movs	r6, r5
 80004bc:	46c6      	mov	lr, r8
 80004be:	4684      	mov	ip, r0
 80004c0:	0400      	lsls	r0, r0, #16
 80004c2:	0c14      	lsrs	r4, r2, #16
 80004c4:	0c00      	lsrs	r0, r0, #16
 80004c6:	0c09      	lsrs	r1, r1, #16
 80004c8:	4346      	muls	r6, r0
 80004ca:	434d      	muls	r5, r1
 80004cc:	4360      	muls	r0, r4
 80004ce:	4361      	muls	r1, r4
 80004d0:	1940      	adds	r0, r0, r5
 80004d2:	0c34      	lsrs	r4, r6, #16
 80004d4:	1824      	adds	r4, r4, r0
 80004d6:	b500      	push	{lr}
 80004d8:	42a5      	cmp	r5, r4
 80004da:	d903      	bls.n	80004e4 <__aeabi_lmul+0x34>
 80004dc:	2080      	movs	r0, #128	; 0x80
 80004de:	0240      	lsls	r0, r0, #9
 80004e0:	4680      	mov	r8, r0
 80004e2:	4441      	add	r1, r8
 80004e4:	0c25      	lsrs	r5, r4, #16
 80004e6:	186d      	adds	r5, r5, r1
 80004e8:	4661      	mov	r1, ip
 80004ea:	4359      	muls	r1, r3
 80004ec:	437a      	muls	r2, r7
 80004ee:	0430      	lsls	r0, r6, #16
 80004f0:	1949      	adds	r1, r1, r5
 80004f2:	0424      	lsls	r4, r4, #16
 80004f4:	0c00      	lsrs	r0, r0, #16
 80004f6:	1820      	adds	r0, r4, r0
 80004f8:	1889      	adds	r1, r1, r2
 80004fa:	bc80      	pop	{r7}
 80004fc:	46b8      	mov	r8, r7
 80004fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000500 <__aeabi_d2uiz>:
 8000500:	b570      	push	{r4, r5, r6, lr}
 8000502:	2200      	movs	r2, #0
 8000504:	4b0c      	ldr	r3, [pc, #48]	; (8000538 <__aeabi_d2uiz+0x38>)
 8000506:	0004      	movs	r4, r0
 8000508:	000d      	movs	r5, r1
 800050a:	f7ff ffa7 	bl	800045c <__aeabi_dcmpge>
 800050e:	2800      	cmp	r0, #0
 8000510:	d104      	bne.n	800051c <__aeabi_d2uiz+0x1c>
 8000512:	0020      	movs	r0, r4
 8000514:	0029      	movs	r1, r5
 8000516:	f001 ff9d 	bl	8002454 <__aeabi_d2iz>
 800051a:	bd70      	pop	{r4, r5, r6, pc}
 800051c:	4b06      	ldr	r3, [pc, #24]	; (8000538 <__aeabi_d2uiz+0x38>)
 800051e:	2200      	movs	r2, #0
 8000520:	0020      	movs	r0, r4
 8000522:	0029      	movs	r1, r5
 8000524:	f001 fc04 	bl	8001d30 <__aeabi_dsub>
 8000528:	f001 ff94 	bl	8002454 <__aeabi_d2iz>
 800052c:	2380      	movs	r3, #128	; 0x80
 800052e:	061b      	lsls	r3, r3, #24
 8000530:	469c      	mov	ip, r3
 8000532:	4460      	add	r0, ip
 8000534:	e7f1      	b.n	800051a <__aeabi_d2uiz+0x1a>
 8000536:	46c0      	nop			; (mov r8, r8)
 8000538:	41e00000 	.word	0x41e00000

0800053c <__udivmoddi4>:
 800053c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800053e:	4657      	mov	r7, sl
 8000540:	464e      	mov	r6, r9
 8000542:	4645      	mov	r5, r8
 8000544:	46de      	mov	lr, fp
 8000546:	b5e0      	push	{r5, r6, r7, lr}
 8000548:	0004      	movs	r4, r0
 800054a:	000d      	movs	r5, r1
 800054c:	4692      	mov	sl, r2
 800054e:	4699      	mov	r9, r3
 8000550:	b083      	sub	sp, #12
 8000552:	428b      	cmp	r3, r1
 8000554:	d830      	bhi.n	80005b8 <__udivmoddi4+0x7c>
 8000556:	d02d      	beq.n	80005b4 <__udivmoddi4+0x78>
 8000558:	4649      	mov	r1, r9
 800055a:	4650      	mov	r0, sl
 800055c:	f002 f86c 	bl	8002638 <__clzdi2>
 8000560:	0029      	movs	r1, r5
 8000562:	0006      	movs	r6, r0
 8000564:	0020      	movs	r0, r4
 8000566:	f002 f867 	bl	8002638 <__clzdi2>
 800056a:	1a33      	subs	r3, r6, r0
 800056c:	4698      	mov	r8, r3
 800056e:	3b20      	subs	r3, #32
 8000570:	469b      	mov	fp, r3
 8000572:	d433      	bmi.n	80005dc <__udivmoddi4+0xa0>
 8000574:	465a      	mov	r2, fp
 8000576:	4653      	mov	r3, sl
 8000578:	4093      	lsls	r3, r2
 800057a:	4642      	mov	r2, r8
 800057c:	001f      	movs	r7, r3
 800057e:	4653      	mov	r3, sl
 8000580:	4093      	lsls	r3, r2
 8000582:	001e      	movs	r6, r3
 8000584:	42af      	cmp	r7, r5
 8000586:	d83a      	bhi.n	80005fe <__udivmoddi4+0xc2>
 8000588:	42af      	cmp	r7, r5
 800058a:	d100      	bne.n	800058e <__udivmoddi4+0x52>
 800058c:	e078      	b.n	8000680 <__udivmoddi4+0x144>
 800058e:	465b      	mov	r3, fp
 8000590:	1ba4      	subs	r4, r4, r6
 8000592:	41bd      	sbcs	r5, r7
 8000594:	2b00      	cmp	r3, #0
 8000596:	da00      	bge.n	800059a <__udivmoddi4+0x5e>
 8000598:	e075      	b.n	8000686 <__udivmoddi4+0x14a>
 800059a:	2200      	movs	r2, #0
 800059c:	2300      	movs	r3, #0
 800059e:	9200      	str	r2, [sp, #0]
 80005a0:	9301      	str	r3, [sp, #4]
 80005a2:	2301      	movs	r3, #1
 80005a4:	465a      	mov	r2, fp
 80005a6:	4093      	lsls	r3, r2
 80005a8:	9301      	str	r3, [sp, #4]
 80005aa:	2301      	movs	r3, #1
 80005ac:	4642      	mov	r2, r8
 80005ae:	4093      	lsls	r3, r2
 80005b0:	9300      	str	r3, [sp, #0]
 80005b2:	e028      	b.n	8000606 <__udivmoddi4+0xca>
 80005b4:	4282      	cmp	r2, r0
 80005b6:	d9cf      	bls.n	8000558 <__udivmoddi4+0x1c>
 80005b8:	2200      	movs	r2, #0
 80005ba:	2300      	movs	r3, #0
 80005bc:	9200      	str	r2, [sp, #0]
 80005be:	9301      	str	r3, [sp, #4]
 80005c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <__udivmoddi4+0x8e>
 80005c6:	601c      	str	r4, [r3, #0]
 80005c8:	605d      	str	r5, [r3, #4]
 80005ca:	9800      	ldr	r0, [sp, #0]
 80005cc:	9901      	ldr	r1, [sp, #4]
 80005ce:	b003      	add	sp, #12
 80005d0:	bcf0      	pop	{r4, r5, r6, r7}
 80005d2:	46bb      	mov	fp, r7
 80005d4:	46b2      	mov	sl, r6
 80005d6:	46a9      	mov	r9, r5
 80005d8:	46a0      	mov	r8, r4
 80005da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005dc:	4642      	mov	r2, r8
 80005de:	2320      	movs	r3, #32
 80005e0:	1a9b      	subs	r3, r3, r2
 80005e2:	4652      	mov	r2, sl
 80005e4:	40da      	lsrs	r2, r3
 80005e6:	4641      	mov	r1, r8
 80005e8:	0013      	movs	r3, r2
 80005ea:	464a      	mov	r2, r9
 80005ec:	408a      	lsls	r2, r1
 80005ee:	0017      	movs	r7, r2
 80005f0:	4642      	mov	r2, r8
 80005f2:	431f      	orrs	r7, r3
 80005f4:	4653      	mov	r3, sl
 80005f6:	4093      	lsls	r3, r2
 80005f8:	001e      	movs	r6, r3
 80005fa:	42af      	cmp	r7, r5
 80005fc:	d9c4      	bls.n	8000588 <__udivmoddi4+0x4c>
 80005fe:	2200      	movs	r2, #0
 8000600:	2300      	movs	r3, #0
 8000602:	9200      	str	r2, [sp, #0]
 8000604:	9301      	str	r3, [sp, #4]
 8000606:	4643      	mov	r3, r8
 8000608:	2b00      	cmp	r3, #0
 800060a:	d0d9      	beq.n	80005c0 <__udivmoddi4+0x84>
 800060c:	07fb      	lsls	r3, r7, #31
 800060e:	0872      	lsrs	r2, r6, #1
 8000610:	431a      	orrs	r2, r3
 8000612:	4646      	mov	r6, r8
 8000614:	087b      	lsrs	r3, r7, #1
 8000616:	e00e      	b.n	8000636 <__udivmoddi4+0xfa>
 8000618:	42ab      	cmp	r3, r5
 800061a:	d101      	bne.n	8000620 <__udivmoddi4+0xe4>
 800061c:	42a2      	cmp	r2, r4
 800061e:	d80c      	bhi.n	800063a <__udivmoddi4+0xfe>
 8000620:	1aa4      	subs	r4, r4, r2
 8000622:	419d      	sbcs	r5, r3
 8000624:	2001      	movs	r0, #1
 8000626:	1924      	adds	r4, r4, r4
 8000628:	416d      	adcs	r5, r5
 800062a:	2100      	movs	r1, #0
 800062c:	3e01      	subs	r6, #1
 800062e:	1824      	adds	r4, r4, r0
 8000630:	414d      	adcs	r5, r1
 8000632:	2e00      	cmp	r6, #0
 8000634:	d006      	beq.n	8000644 <__udivmoddi4+0x108>
 8000636:	42ab      	cmp	r3, r5
 8000638:	d9ee      	bls.n	8000618 <__udivmoddi4+0xdc>
 800063a:	3e01      	subs	r6, #1
 800063c:	1924      	adds	r4, r4, r4
 800063e:	416d      	adcs	r5, r5
 8000640:	2e00      	cmp	r6, #0
 8000642:	d1f8      	bne.n	8000636 <__udivmoddi4+0xfa>
 8000644:	9800      	ldr	r0, [sp, #0]
 8000646:	9901      	ldr	r1, [sp, #4]
 8000648:	465b      	mov	r3, fp
 800064a:	1900      	adds	r0, r0, r4
 800064c:	4169      	adcs	r1, r5
 800064e:	2b00      	cmp	r3, #0
 8000650:	db24      	blt.n	800069c <__udivmoddi4+0x160>
 8000652:	002b      	movs	r3, r5
 8000654:	465a      	mov	r2, fp
 8000656:	4644      	mov	r4, r8
 8000658:	40d3      	lsrs	r3, r2
 800065a:	002a      	movs	r2, r5
 800065c:	40e2      	lsrs	r2, r4
 800065e:	001c      	movs	r4, r3
 8000660:	465b      	mov	r3, fp
 8000662:	0015      	movs	r5, r2
 8000664:	2b00      	cmp	r3, #0
 8000666:	db2a      	blt.n	80006be <__udivmoddi4+0x182>
 8000668:	0026      	movs	r6, r4
 800066a:	409e      	lsls	r6, r3
 800066c:	0033      	movs	r3, r6
 800066e:	0026      	movs	r6, r4
 8000670:	4647      	mov	r7, r8
 8000672:	40be      	lsls	r6, r7
 8000674:	0032      	movs	r2, r6
 8000676:	1a80      	subs	r0, r0, r2
 8000678:	4199      	sbcs	r1, r3
 800067a:	9000      	str	r0, [sp, #0]
 800067c:	9101      	str	r1, [sp, #4]
 800067e:	e79f      	b.n	80005c0 <__udivmoddi4+0x84>
 8000680:	42a3      	cmp	r3, r4
 8000682:	d8bc      	bhi.n	80005fe <__udivmoddi4+0xc2>
 8000684:	e783      	b.n	800058e <__udivmoddi4+0x52>
 8000686:	4642      	mov	r2, r8
 8000688:	2320      	movs	r3, #32
 800068a:	2100      	movs	r1, #0
 800068c:	1a9b      	subs	r3, r3, r2
 800068e:	2200      	movs	r2, #0
 8000690:	9100      	str	r1, [sp, #0]
 8000692:	9201      	str	r2, [sp, #4]
 8000694:	2201      	movs	r2, #1
 8000696:	40da      	lsrs	r2, r3
 8000698:	9201      	str	r2, [sp, #4]
 800069a:	e786      	b.n	80005aa <__udivmoddi4+0x6e>
 800069c:	4642      	mov	r2, r8
 800069e:	2320      	movs	r3, #32
 80006a0:	1a9b      	subs	r3, r3, r2
 80006a2:	002a      	movs	r2, r5
 80006a4:	4646      	mov	r6, r8
 80006a6:	409a      	lsls	r2, r3
 80006a8:	0023      	movs	r3, r4
 80006aa:	40f3      	lsrs	r3, r6
 80006ac:	4644      	mov	r4, r8
 80006ae:	4313      	orrs	r3, r2
 80006b0:	002a      	movs	r2, r5
 80006b2:	40e2      	lsrs	r2, r4
 80006b4:	001c      	movs	r4, r3
 80006b6:	465b      	mov	r3, fp
 80006b8:	0015      	movs	r5, r2
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	dad4      	bge.n	8000668 <__udivmoddi4+0x12c>
 80006be:	4642      	mov	r2, r8
 80006c0:	002f      	movs	r7, r5
 80006c2:	2320      	movs	r3, #32
 80006c4:	0026      	movs	r6, r4
 80006c6:	4097      	lsls	r7, r2
 80006c8:	1a9b      	subs	r3, r3, r2
 80006ca:	40de      	lsrs	r6, r3
 80006cc:	003b      	movs	r3, r7
 80006ce:	4333      	orrs	r3, r6
 80006d0:	e7cd      	b.n	800066e <__udivmoddi4+0x132>
 80006d2:	46c0      	nop			; (mov r8, r8)

080006d4 <__aeabi_fdiv>:
 80006d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006d6:	464f      	mov	r7, r9
 80006d8:	4646      	mov	r6, r8
 80006da:	46d6      	mov	lr, sl
 80006dc:	0245      	lsls	r5, r0, #9
 80006de:	b5c0      	push	{r6, r7, lr}
 80006e0:	0047      	lsls	r7, r0, #1
 80006e2:	1c0c      	adds	r4, r1, #0
 80006e4:	0a6d      	lsrs	r5, r5, #9
 80006e6:	0e3f      	lsrs	r7, r7, #24
 80006e8:	0fc6      	lsrs	r6, r0, #31
 80006ea:	2f00      	cmp	r7, #0
 80006ec:	d066      	beq.n	80007bc <__aeabi_fdiv+0xe8>
 80006ee:	2fff      	cmp	r7, #255	; 0xff
 80006f0:	d06c      	beq.n	80007cc <__aeabi_fdiv+0xf8>
 80006f2:	2300      	movs	r3, #0
 80006f4:	00ea      	lsls	r2, r5, #3
 80006f6:	2580      	movs	r5, #128	; 0x80
 80006f8:	4699      	mov	r9, r3
 80006fa:	469a      	mov	sl, r3
 80006fc:	04ed      	lsls	r5, r5, #19
 80006fe:	4315      	orrs	r5, r2
 8000700:	3f7f      	subs	r7, #127	; 0x7f
 8000702:	0260      	lsls	r0, r4, #9
 8000704:	0061      	lsls	r1, r4, #1
 8000706:	0a43      	lsrs	r3, r0, #9
 8000708:	4698      	mov	r8, r3
 800070a:	0e09      	lsrs	r1, r1, #24
 800070c:	0fe4      	lsrs	r4, r4, #31
 800070e:	2900      	cmp	r1, #0
 8000710:	d048      	beq.n	80007a4 <__aeabi_fdiv+0xd0>
 8000712:	29ff      	cmp	r1, #255	; 0xff
 8000714:	d010      	beq.n	8000738 <__aeabi_fdiv+0x64>
 8000716:	2280      	movs	r2, #128	; 0x80
 8000718:	00d8      	lsls	r0, r3, #3
 800071a:	04d2      	lsls	r2, r2, #19
 800071c:	4302      	orrs	r2, r0
 800071e:	4690      	mov	r8, r2
 8000720:	2000      	movs	r0, #0
 8000722:	397f      	subs	r1, #127	; 0x7f
 8000724:	464a      	mov	r2, r9
 8000726:	0033      	movs	r3, r6
 8000728:	1a7f      	subs	r7, r7, r1
 800072a:	4302      	orrs	r2, r0
 800072c:	496c      	ldr	r1, [pc, #432]	; (80008e0 <__aeabi_fdiv+0x20c>)
 800072e:	0092      	lsls	r2, r2, #2
 8000730:	588a      	ldr	r2, [r1, r2]
 8000732:	4063      	eors	r3, r4
 8000734:	b2db      	uxtb	r3, r3
 8000736:	4697      	mov	pc, r2
 8000738:	2b00      	cmp	r3, #0
 800073a:	d16d      	bne.n	8000818 <__aeabi_fdiv+0x144>
 800073c:	2002      	movs	r0, #2
 800073e:	3fff      	subs	r7, #255	; 0xff
 8000740:	e033      	b.n	80007aa <__aeabi_fdiv+0xd6>
 8000742:	2300      	movs	r3, #0
 8000744:	4698      	mov	r8, r3
 8000746:	0026      	movs	r6, r4
 8000748:	4645      	mov	r5, r8
 800074a:	4682      	mov	sl, r0
 800074c:	4653      	mov	r3, sl
 800074e:	2b02      	cmp	r3, #2
 8000750:	d100      	bne.n	8000754 <__aeabi_fdiv+0x80>
 8000752:	e07f      	b.n	8000854 <__aeabi_fdiv+0x180>
 8000754:	2b03      	cmp	r3, #3
 8000756:	d100      	bne.n	800075a <__aeabi_fdiv+0x86>
 8000758:	e094      	b.n	8000884 <__aeabi_fdiv+0x1b0>
 800075a:	2b01      	cmp	r3, #1
 800075c:	d017      	beq.n	800078e <__aeabi_fdiv+0xba>
 800075e:	0038      	movs	r0, r7
 8000760:	307f      	adds	r0, #127	; 0x7f
 8000762:	2800      	cmp	r0, #0
 8000764:	dd5f      	ble.n	8000826 <__aeabi_fdiv+0x152>
 8000766:	076b      	lsls	r3, r5, #29
 8000768:	d004      	beq.n	8000774 <__aeabi_fdiv+0xa0>
 800076a:	230f      	movs	r3, #15
 800076c:	402b      	ands	r3, r5
 800076e:	2b04      	cmp	r3, #4
 8000770:	d000      	beq.n	8000774 <__aeabi_fdiv+0xa0>
 8000772:	3504      	adds	r5, #4
 8000774:	012b      	lsls	r3, r5, #4
 8000776:	d503      	bpl.n	8000780 <__aeabi_fdiv+0xac>
 8000778:	0038      	movs	r0, r7
 800077a:	4b5a      	ldr	r3, [pc, #360]	; (80008e4 <__aeabi_fdiv+0x210>)
 800077c:	3080      	adds	r0, #128	; 0x80
 800077e:	401d      	ands	r5, r3
 8000780:	28fe      	cmp	r0, #254	; 0xfe
 8000782:	dc67      	bgt.n	8000854 <__aeabi_fdiv+0x180>
 8000784:	01ad      	lsls	r5, r5, #6
 8000786:	0a6d      	lsrs	r5, r5, #9
 8000788:	b2c0      	uxtb	r0, r0
 800078a:	e002      	b.n	8000792 <__aeabi_fdiv+0xbe>
 800078c:	001e      	movs	r6, r3
 800078e:	2000      	movs	r0, #0
 8000790:	2500      	movs	r5, #0
 8000792:	05c0      	lsls	r0, r0, #23
 8000794:	4328      	orrs	r0, r5
 8000796:	07f6      	lsls	r6, r6, #31
 8000798:	4330      	orrs	r0, r6
 800079a:	bce0      	pop	{r5, r6, r7}
 800079c:	46ba      	mov	sl, r7
 800079e:	46b1      	mov	r9, r6
 80007a0:	46a8      	mov	r8, r5
 80007a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d12b      	bne.n	8000800 <__aeabi_fdiv+0x12c>
 80007a8:	2001      	movs	r0, #1
 80007aa:	464a      	mov	r2, r9
 80007ac:	0033      	movs	r3, r6
 80007ae:	494e      	ldr	r1, [pc, #312]	; (80008e8 <__aeabi_fdiv+0x214>)
 80007b0:	4302      	orrs	r2, r0
 80007b2:	0092      	lsls	r2, r2, #2
 80007b4:	588a      	ldr	r2, [r1, r2]
 80007b6:	4063      	eors	r3, r4
 80007b8:	b2db      	uxtb	r3, r3
 80007ba:	4697      	mov	pc, r2
 80007bc:	2d00      	cmp	r5, #0
 80007be:	d113      	bne.n	80007e8 <__aeabi_fdiv+0x114>
 80007c0:	2304      	movs	r3, #4
 80007c2:	4699      	mov	r9, r3
 80007c4:	3b03      	subs	r3, #3
 80007c6:	2700      	movs	r7, #0
 80007c8:	469a      	mov	sl, r3
 80007ca:	e79a      	b.n	8000702 <__aeabi_fdiv+0x2e>
 80007cc:	2d00      	cmp	r5, #0
 80007ce:	d105      	bne.n	80007dc <__aeabi_fdiv+0x108>
 80007d0:	2308      	movs	r3, #8
 80007d2:	4699      	mov	r9, r3
 80007d4:	3b06      	subs	r3, #6
 80007d6:	27ff      	movs	r7, #255	; 0xff
 80007d8:	469a      	mov	sl, r3
 80007da:	e792      	b.n	8000702 <__aeabi_fdiv+0x2e>
 80007dc:	230c      	movs	r3, #12
 80007de:	4699      	mov	r9, r3
 80007e0:	3b09      	subs	r3, #9
 80007e2:	27ff      	movs	r7, #255	; 0xff
 80007e4:	469a      	mov	sl, r3
 80007e6:	e78c      	b.n	8000702 <__aeabi_fdiv+0x2e>
 80007e8:	0028      	movs	r0, r5
 80007ea:	f001 ff07 	bl	80025fc <__clzsi2>
 80007ee:	2776      	movs	r7, #118	; 0x76
 80007f0:	1f43      	subs	r3, r0, #5
 80007f2:	409d      	lsls	r5, r3
 80007f4:	2300      	movs	r3, #0
 80007f6:	427f      	negs	r7, r7
 80007f8:	4699      	mov	r9, r3
 80007fa:	469a      	mov	sl, r3
 80007fc:	1a3f      	subs	r7, r7, r0
 80007fe:	e780      	b.n	8000702 <__aeabi_fdiv+0x2e>
 8000800:	0018      	movs	r0, r3
 8000802:	f001 fefb 	bl	80025fc <__clzsi2>
 8000806:	4642      	mov	r2, r8
 8000808:	1f43      	subs	r3, r0, #5
 800080a:	2176      	movs	r1, #118	; 0x76
 800080c:	409a      	lsls	r2, r3
 800080e:	4249      	negs	r1, r1
 8000810:	1a09      	subs	r1, r1, r0
 8000812:	4690      	mov	r8, r2
 8000814:	2000      	movs	r0, #0
 8000816:	e785      	b.n	8000724 <__aeabi_fdiv+0x50>
 8000818:	21ff      	movs	r1, #255	; 0xff
 800081a:	2003      	movs	r0, #3
 800081c:	e782      	b.n	8000724 <__aeabi_fdiv+0x50>
 800081e:	001e      	movs	r6, r3
 8000820:	20ff      	movs	r0, #255	; 0xff
 8000822:	2500      	movs	r5, #0
 8000824:	e7b5      	b.n	8000792 <__aeabi_fdiv+0xbe>
 8000826:	2301      	movs	r3, #1
 8000828:	1a1b      	subs	r3, r3, r0
 800082a:	2b1b      	cmp	r3, #27
 800082c:	dcaf      	bgt.n	800078e <__aeabi_fdiv+0xba>
 800082e:	379e      	adds	r7, #158	; 0x9e
 8000830:	0029      	movs	r1, r5
 8000832:	40bd      	lsls	r5, r7
 8000834:	40d9      	lsrs	r1, r3
 8000836:	1e6a      	subs	r2, r5, #1
 8000838:	4195      	sbcs	r5, r2
 800083a:	430d      	orrs	r5, r1
 800083c:	076b      	lsls	r3, r5, #29
 800083e:	d004      	beq.n	800084a <__aeabi_fdiv+0x176>
 8000840:	230f      	movs	r3, #15
 8000842:	402b      	ands	r3, r5
 8000844:	2b04      	cmp	r3, #4
 8000846:	d000      	beq.n	800084a <__aeabi_fdiv+0x176>
 8000848:	3504      	adds	r5, #4
 800084a:	016b      	lsls	r3, r5, #5
 800084c:	d544      	bpl.n	80008d8 <__aeabi_fdiv+0x204>
 800084e:	2001      	movs	r0, #1
 8000850:	2500      	movs	r5, #0
 8000852:	e79e      	b.n	8000792 <__aeabi_fdiv+0xbe>
 8000854:	20ff      	movs	r0, #255	; 0xff
 8000856:	2500      	movs	r5, #0
 8000858:	e79b      	b.n	8000792 <__aeabi_fdiv+0xbe>
 800085a:	2580      	movs	r5, #128	; 0x80
 800085c:	2600      	movs	r6, #0
 800085e:	20ff      	movs	r0, #255	; 0xff
 8000860:	03ed      	lsls	r5, r5, #15
 8000862:	e796      	b.n	8000792 <__aeabi_fdiv+0xbe>
 8000864:	2300      	movs	r3, #0
 8000866:	4698      	mov	r8, r3
 8000868:	2080      	movs	r0, #128	; 0x80
 800086a:	03c0      	lsls	r0, r0, #15
 800086c:	4205      	tst	r5, r0
 800086e:	d009      	beq.n	8000884 <__aeabi_fdiv+0x1b0>
 8000870:	4643      	mov	r3, r8
 8000872:	4203      	tst	r3, r0
 8000874:	d106      	bne.n	8000884 <__aeabi_fdiv+0x1b0>
 8000876:	4645      	mov	r5, r8
 8000878:	4305      	orrs	r5, r0
 800087a:	026d      	lsls	r5, r5, #9
 800087c:	0026      	movs	r6, r4
 800087e:	20ff      	movs	r0, #255	; 0xff
 8000880:	0a6d      	lsrs	r5, r5, #9
 8000882:	e786      	b.n	8000792 <__aeabi_fdiv+0xbe>
 8000884:	2080      	movs	r0, #128	; 0x80
 8000886:	03c0      	lsls	r0, r0, #15
 8000888:	4305      	orrs	r5, r0
 800088a:	026d      	lsls	r5, r5, #9
 800088c:	20ff      	movs	r0, #255	; 0xff
 800088e:	0a6d      	lsrs	r5, r5, #9
 8000890:	e77f      	b.n	8000792 <__aeabi_fdiv+0xbe>
 8000892:	4641      	mov	r1, r8
 8000894:	016a      	lsls	r2, r5, #5
 8000896:	0148      	lsls	r0, r1, #5
 8000898:	4282      	cmp	r2, r0
 800089a:	d219      	bcs.n	80008d0 <__aeabi_fdiv+0x1fc>
 800089c:	211b      	movs	r1, #27
 800089e:	2500      	movs	r5, #0
 80008a0:	3f01      	subs	r7, #1
 80008a2:	2601      	movs	r6, #1
 80008a4:	0014      	movs	r4, r2
 80008a6:	006d      	lsls	r5, r5, #1
 80008a8:	0052      	lsls	r2, r2, #1
 80008aa:	2c00      	cmp	r4, #0
 80008ac:	db01      	blt.n	80008b2 <__aeabi_fdiv+0x1de>
 80008ae:	4290      	cmp	r0, r2
 80008b0:	d801      	bhi.n	80008b6 <__aeabi_fdiv+0x1e2>
 80008b2:	1a12      	subs	r2, r2, r0
 80008b4:	4335      	orrs	r5, r6
 80008b6:	3901      	subs	r1, #1
 80008b8:	2900      	cmp	r1, #0
 80008ba:	d1f3      	bne.n	80008a4 <__aeabi_fdiv+0x1d0>
 80008bc:	1e50      	subs	r0, r2, #1
 80008be:	4182      	sbcs	r2, r0
 80008c0:	0038      	movs	r0, r7
 80008c2:	307f      	adds	r0, #127	; 0x7f
 80008c4:	001e      	movs	r6, r3
 80008c6:	4315      	orrs	r5, r2
 80008c8:	2800      	cmp	r0, #0
 80008ca:	dd00      	ble.n	80008ce <__aeabi_fdiv+0x1fa>
 80008cc:	e74b      	b.n	8000766 <__aeabi_fdiv+0x92>
 80008ce:	e7aa      	b.n	8000826 <__aeabi_fdiv+0x152>
 80008d0:	211a      	movs	r1, #26
 80008d2:	2501      	movs	r5, #1
 80008d4:	1a12      	subs	r2, r2, r0
 80008d6:	e7e4      	b.n	80008a2 <__aeabi_fdiv+0x1ce>
 80008d8:	01ad      	lsls	r5, r5, #6
 80008da:	2000      	movs	r0, #0
 80008dc:	0a6d      	lsrs	r5, r5, #9
 80008de:	e758      	b.n	8000792 <__aeabi_fdiv+0xbe>
 80008e0:	08007394 	.word	0x08007394
 80008e4:	f7ffffff 	.word	0xf7ffffff
 80008e8:	080073d4 	.word	0x080073d4

080008ec <__aeabi_i2f>:
 80008ec:	b570      	push	{r4, r5, r6, lr}
 80008ee:	2800      	cmp	r0, #0
 80008f0:	d013      	beq.n	800091a <__aeabi_i2f+0x2e>
 80008f2:	17c3      	asrs	r3, r0, #31
 80008f4:	18c5      	adds	r5, r0, r3
 80008f6:	405d      	eors	r5, r3
 80008f8:	0fc4      	lsrs	r4, r0, #31
 80008fa:	0028      	movs	r0, r5
 80008fc:	f001 fe7e 	bl	80025fc <__clzsi2>
 8000900:	239e      	movs	r3, #158	; 0x9e
 8000902:	0001      	movs	r1, r0
 8000904:	1a1b      	subs	r3, r3, r0
 8000906:	2b96      	cmp	r3, #150	; 0x96
 8000908:	dc0f      	bgt.n	800092a <__aeabi_i2f+0x3e>
 800090a:	2808      	cmp	r0, #8
 800090c:	dd01      	ble.n	8000912 <__aeabi_i2f+0x26>
 800090e:	3908      	subs	r1, #8
 8000910:	408d      	lsls	r5, r1
 8000912:	026d      	lsls	r5, r5, #9
 8000914:	0a6d      	lsrs	r5, r5, #9
 8000916:	b2d8      	uxtb	r0, r3
 8000918:	e002      	b.n	8000920 <__aeabi_i2f+0x34>
 800091a:	2400      	movs	r4, #0
 800091c:	2000      	movs	r0, #0
 800091e:	2500      	movs	r5, #0
 8000920:	05c0      	lsls	r0, r0, #23
 8000922:	4328      	orrs	r0, r5
 8000924:	07e4      	lsls	r4, r4, #31
 8000926:	4320      	orrs	r0, r4
 8000928:	bd70      	pop	{r4, r5, r6, pc}
 800092a:	2b99      	cmp	r3, #153	; 0x99
 800092c:	dd0b      	ble.n	8000946 <__aeabi_i2f+0x5a>
 800092e:	2205      	movs	r2, #5
 8000930:	002e      	movs	r6, r5
 8000932:	1a12      	subs	r2, r2, r0
 8000934:	40d6      	lsrs	r6, r2
 8000936:	0002      	movs	r2, r0
 8000938:	321b      	adds	r2, #27
 800093a:	4095      	lsls	r5, r2
 800093c:	0028      	movs	r0, r5
 800093e:	1e45      	subs	r5, r0, #1
 8000940:	41a8      	sbcs	r0, r5
 8000942:	0035      	movs	r5, r6
 8000944:	4305      	orrs	r5, r0
 8000946:	2905      	cmp	r1, #5
 8000948:	dd01      	ble.n	800094e <__aeabi_i2f+0x62>
 800094a:	1f4a      	subs	r2, r1, #5
 800094c:	4095      	lsls	r5, r2
 800094e:	002a      	movs	r2, r5
 8000950:	4e08      	ldr	r6, [pc, #32]	; (8000974 <__aeabi_i2f+0x88>)
 8000952:	4032      	ands	r2, r6
 8000954:	0768      	lsls	r0, r5, #29
 8000956:	d009      	beq.n	800096c <__aeabi_i2f+0x80>
 8000958:	200f      	movs	r0, #15
 800095a:	4028      	ands	r0, r5
 800095c:	2804      	cmp	r0, #4
 800095e:	d005      	beq.n	800096c <__aeabi_i2f+0x80>
 8000960:	3204      	adds	r2, #4
 8000962:	0150      	lsls	r0, r2, #5
 8000964:	d502      	bpl.n	800096c <__aeabi_i2f+0x80>
 8000966:	239f      	movs	r3, #159	; 0x9f
 8000968:	4032      	ands	r2, r6
 800096a:	1a5b      	subs	r3, r3, r1
 800096c:	0192      	lsls	r2, r2, #6
 800096e:	0a55      	lsrs	r5, r2, #9
 8000970:	b2d8      	uxtb	r0, r3
 8000972:	e7d5      	b.n	8000920 <__aeabi_i2f+0x34>
 8000974:	fbffffff 	.word	0xfbffffff

08000978 <__aeabi_dadd>:
 8000978:	b5f0      	push	{r4, r5, r6, r7, lr}
 800097a:	464f      	mov	r7, r9
 800097c:	46d6      	mov	lr, sl
 800097e:	4646      	mov	r6, r8
 8000980:	000d      	movs	r5, r1
 8000982:	0001      	movs	r1, r0
 8000984:	0018      	movs	r0, r3
 8000986:	b5c0      	push	{r6, r7, lr}
 8000988:	0017      	movs	r7, r2
 800098a:	032b      	lsls	r3, r5, #12
 800098c:	0a5a      	lsrs	r2, r3, #9
 800098e:	0f4b      	lsrs	r3, r1, #29
 8000990:	4313      	orrs	r3, r2
 8000992:	00ca      	lsls	r2, r1, #3
 8000994:	4691      	mov	r9, r2
 8000996:	0302      	lsls	r2, r0, #12
 8000998:	006e      	lsls	r6, r5, #1
 800099a:	0041      	lsls	r1, r0, #1
 800099c:	0a52      	lsrs	r2, r2, #9
 800099e:	0fec      	lsrs	r4, r5, #31
 80009a0:	0f7d      	lsrs	r5, r7, #29
 80009a2:	4315      	orrs	r5, r2
 80009a4:	0d76      	lsrs	r6, r6, #21
 80009a6:	0d49      	lsrs	r1, r1, #21
 80009a8:	0fc0      	lsrs	r0, r0, #31
 80009aa:	4682      	mov	sl, r0
 80009ac:	46ac      	mov	ip, r5
 80009ae:	00ff      	lsls	r7, r7, #3
 80009b0:	1a72      	subs	r2, r6, r1
 80009b2:	4284      	cmp	r4, r0
 80009b4:	d100      	bne.n	80009b8 <__aeabi_dadd+0x40>
 80009b6:	e098      	b.n	8000aea <__aeabi_dadd+0x172>
 80009b8:	2a00      	cmp	r2, #0
 80009ba:	dc00      	bgt.n	80009be <__aeabi_dadd+0x46>
 80009bc:	e081      	b.n	8000ac2 <__aeabi_dadd+0x14a>
 80009be:	2900      	cmp	r1, #0
 80009c0:	d100      	bne.n	80009c4 <__aeabi_dadd+0x4c>
 80009c2:	e0b6      	b.n	8000b32 <__aeabi_dadd+0x1ba>
 80009c4:	49c9      	ldr	r1, [pc, #804]	; (8000cec <__aeabi_dadd+0x374>)
 80009c6:	428e      	cmp	r6, r1
 80009c8:	d100      	bne.n	80009cc <__aeabi_dadd+0x54>
 80009ca:	e172      	b.n	8000cb2 <__aeabi_dadd+0x33a>
 80009cc:	2180      	movs	r1, #128	; 0x80
 80009ce:	0028      	movs	r0, r5
 80009d0:	0409      	lsls	r1, r1, #16
 80009d2:	4308      	orrs	r0, r1
 80009d4:	4684      	mov	ip, r0
 80009d6:	2a38      	cmp	r2, #56	; 0x38
 80009d8:	dd00      	ble.n	80009dc <__aeabi_dadd+0x64>
 80009da:	e15e      	b.n	8000c9a <__aeabi_dadd+0x322>
 80009dc:	2a1f      	cmp	r2, #31
 80009de:	dd00      	ble.n	80009e2 <__aeabi_dadd+0x6a>
 80009e0:	e1ee      	b.n	8000dc0 <__aeabi_dadd+0x448>
 80009e2:	2020      	movs	r0, #32
 80009e4:	0039      	movs	r1, r7
 80009e6:	4665      	mov	r5, ip
 80009e8:	1a80      	subs	r0, r0, r2
 80009ea:	4087      	lsls	r7, r0
 80009ec:	40d1      	lsrs	r1, r2
 80009ee:	4085      	lsls	r5, r0
 80009f0:	430d      	orrs	r5, r1
 80009f2:	0039      	movs	r1, r7
 80009f4:	1e4f      	subs	r7, r1, #1
 80009f6:	41b9      	sbcs	r1, r7
 80009f8:	4667      	mov	r7, ip
 80009fa:	40d7      	lsrs	r7, r2
 80009fc:	4329      	orrs	r1, r5
 80009fe:	1bdb      	subs	r3, r3, r7
 8000a00:	464a      	mov	r2, r9
 8000a02:	1a55      	subs	r5, r2, r1
 8000a04:	45a9      	cmp	r9, r5
 8000a06:	4189      	sbcs	r1, r1
 8000a08:	4249      	negs	r1, r1
 8000a0a:	1a5b      	subs	r3, r3, r1
 8000a0c:	4698      	mov	r8, r3
 8000a0e:	4643      	mov	r3, r8
 8000a10:	021b      	lsls	r3, r3, #8
 8000a12:	d400      	bmi.n	8000a16 <__aeabi_dadd+0x9e>
 8000a14:	e0cc      	b.n	8000bb0 <__aeabi_dadd+0x238>
 8000a16:	4643      	mov	r3, r8
 8000a18:	025b      	lsls	r3, r3, #9
 8000a1a:	0a5b      	lsrs	r3, r3, #9
 8000a1c:	4698      	mov	r8, r3
 8000a1e:	4643      	mov	r3, r8
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d100      	bne.n	8000a26 <__aeabi_dadd+0xae>
 8000a24:	e12c      	b.n	8000c80 <__aeabi_dadd+0x308>
 8000a26:	4640      	mov	r0, r8
 8000a28:	f001 fde8 	bl	80025fc <__clzsi2>
 8000a2c:	0001      	movs	r1, r0
 8000a2e:	3908      	subs	r1, #8
 8000a30:	2220      	movs	r2, #32
 8000a32:	0028      	movs	r0, r5
 8000a34:	4643      	mov	r3, r8
 8000a36:	1a52      	subs	r2, r2, r1
 8000a38:	408b      	lsls	r3, r1
 8000a3a:	40d0      	lsrs	r0, r2
 8000a3c:	408d      	lsls	r5, r1
 8000a3e:	4303      	orrs	r3, r0
 8000a40:	428e      	cmp	r6, r1
 8000a42:	dd00      	ble.n	8000a46 <__aeabi_dadd+0xce>
 8000a44:	e117      	b.n	8000c76 <__aeabi_dadd+0x2fe>
 8000a46:	1b8e      	subs	r6, r1, r6
 8000a48:	1c72      	adds	r2, r6, #1
 8000a4a:	2a1f      	cmp	r2, #31
 8000a4c:	dd00      	ble.n	8000a50 <__aeabi_dadd+0xd8>
 8000a4e:	e1a7      	b.n	8000da0 <__aeabi_dadd+0x428>
 8000a50:	2120      	movs	r1, #32
 8000a52:	0018      	movs	r0, r3
 8000a54:	002e      	movs	r6, r5
 8000a56:	1a89      	subs	r1, r1, r2
 8000a58:	408d      	lsls	r5, r1
 8000a5a:	4088      	lsls	r0, r1
 8000a5c:	40d6      	lsrs	r6, r2
 8000a5e:	40d3      	lsrs	r3, r2
 8000a60:	1e69      	subs	r1, r5, #1
 8000a62:	418d      	sbcs	r5, r1
 8000a64:	4330      	orrs	r0, r6
 8000a66:	4698      	mov	r8, r3
 8000a68:	2600      	movs	r6, #0
 8000a6a:	4305      	orrs	r5, r0
 8000a6c:	076b      	lsls	r3, r5, #29
 8000a6e:	d009      	beq.n	8000a84 <__aeabi_dadd+0x10c>
 8000a70:	230f      	movs	r3, #15
 8000a72:	402b      	ands	r3, r5
 8000a74:	2b04      	cmp	r3, #4
 8000a76:	d005      	beq.n	8000a84 <__aeabi_dadd+0x10c>
 8000a78:	1d2b      	adds	r3, r5, #4
 8000a7a:	42ab      	cmp	r3, r5
 8000a7c:	41ad      	sbcs	r5, r5
 8000a7e:	426d      	negs	r5, r5
 8000a80:	44a8      	add	r8, r5
 8000a82:	001d      	movs	r5, r3
 8000a84:	4643      	mov	r3, r8
 8000a86:	021b      	lsls	r3, r3, #8
 8000a88:	d400      	bmi.n	8000a8c <__aeabi_dadd+0x114>
 8000a8a:	e094      	b.n	8000bb6 <__aeabi_dadd+0x23e>
 8000a8c:	4b97      	ldr	r3, [pc, #604]	; (8000cec <__aeabi_dadd+0x374>)
 8000a8e:	1c72      	adds	r2, r6, #1
 8000a90:	429a      	cmp	r2, r3
 8000a92:	d100      	bne.n	8000a96 <__aeabi_dadd+0x11e>
 8000a94:	e09d      	b.n	8000bd2 <__aeabi_dadd+0x25a>
 8000a96:	4641      	mov	r1, r8
 8000a98:	4b95      	ldr	r3, [pc, #596]	; (8000cf0 <__aeabi_dadd+0x378>)
 8000a9a:	08ed      	lsrs	r5, r5, #3
 8000a9c:	4019      	ands	r1, r3
 8000a9e:	000b      	movs	r3, r1
 8000aa0:	0552      	lsls	r2, r2, #21
 8000aa2:	0749      	lsls	r1, r1, #29
 8000aa4:	025b      	lsls	r3, r3, #9
 8000aa6:	4329      	orrs	r1, r5
 8000aa8:	0b1b      	lsrs	r3, r3, #12
 8000aaa:	0d52      	lsrs	r2, r2, #21
 8000aac:	0512      	lsls	r2, r2, #20
 8000aae:	4313      	orrs	r3, r2
 8000ab0:	07e4      	lsls	r4, r4, #31
 8000ab2:	4323      	orrs	r3, r4
 8000ab4:	0008      	movs	r0, r1
 8000ab6:	0019      	movs	r1, r3
 8000ab8:	bce0      	pop	{r5, r6, r7}
 8000aba:	46ba      	mov	sl, r7
 8000abc:	46b1      	mov	r9, r6
 8000abe:	46a8      	mov	r8, r5
 8000ac0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ac2:	2a00      	cmp	r2, #0
 8000ac4:	d043      	beq.n	8000b4e <__aeabi_dadd+0x1d6>
 8000ac6:	1b8a      	subs	r2, r1, r6
 8000ac8:	2e00      	cmp	r6, #0
 8000aca:	d000      	beq.n	8000ace <__aeabi_dadd+0x156>
 8000acc:	e12a      	b.n	8000d24 <__aeabi_dadd+0x3ac>
 8000ace:	464c      	mov	r4, r9
 8000ad0:	431c      	orrs	r4, r3
 8000ad2:	d100      	bne.n	8000ad6 <__aeabi_dadd+0x15e>
 8000ad4:	e1d1      	b.n	8000e7a <__aeabi_dadd+0x502>
 8000ad6:	1e54      	subs	r4, r2, #1
 8000ad8:	2a01      	cmp	r2, #1
 8000ada:	d100      	bne.n	8000ade <__aeabi_dadd+0x166>
 8000adc:	e21f      	b.n	8000f1e <__aeabi_dadd+0x5a6>
 8000ade:	4d83      	ldr	r5, [pc, #524]	; (8000cec <__aeabi_dadd+0x374>)
 8000ae0:	42aa      	cmp	r2, r5
 8000ae2:	d100      	bne.n	8000ae6 <__aeabi_dadd+0x16e>
 8000ae4:	e272      	b.n	8000fcc <__aeabi_dadd+0x654>
 8000ae6:	0022      	movs	r2, r4
 8000ae8:	e123      	b.n	8000d32 <__aeabi_dadd+0x3ba>
 8000aea:	2a00      	cmp	r2, #0
 8000aec:	dc00      	bgt.n	8000af0 <__aeabi_dadd+0x178>
 8000aee:	e098      	b.n	8000c22 <__aeabi_dadd+0x2aa>
 8000af0:	2900      	cmp	r1, #0
 8000af2:	d042      	beq.n	8000b7a <__aeabi_dadd+0x202>
 8000af4:	497d      	ldr	r1, [pc, #500]	; (8000cec <__aeabi_dadd+0x374>)
 8000af6:	428e      	cmp	r6, r1
 8000af8:	d100      	bne.n	8000afc <__aeabi_dadd+0x184>
 8000afa:	e0da      	b.n	8000cb2 <__aeabi_dadd+0x33a>
 8000afc:	2180      	movs	r1, #128	; 0x80
 8000afe:	0028      	movs	r0, r5
 8000b00:	0409      	lsls	r1, r1, #16
 8000b02:	4308      	orrs	r0, r1
 8000b04:	4684      	mov	ip, r0
 8000b06:	2a38      	cmp	r2, #56	; 0x38
 8000b08:	dd00      	ble.n	8000b0c <__aeabi_dadd+0x194>
 8000b0a:	e129      	b.n	8000d60 <__aeabi_dadd+0x3e8>
 8000b0c:	2a1f      	cmp	r2, #31
 8000b0e:	dc00      	bgt.n	8000b12 <__aeabi_dadd+0x19a>
 8000b10:	e187      	b.n	8000e22 <__aeabi_dadd+0x4aa>
 8000b12:	0011      	movs	r1, r2
 8000b14:	4665      	mov	r5, ip
 8000b16:	3920      	subs	r1, #32
 8000b18:	40cd      	lsrs	r5, r1
 8000b1a:	2a20      	cmp	r2, #32
 8000b1c:	d004      	beq.n	8000b28 <__aeabi_dadd+0x1b0>
 8000b1e:	2040      	movs	r0, #64	; 0x40
 8000b20:	4661      	mov	r1, ip
 8000b22:	1a82      	subs	r2, r0, r2
 8000b24:	4091      	lsls	r1, r2
 8000b26:	430f      	orrs	r7, r1
 8000b28:	0039      	movs	r1, r7
 8000b2a:	1e4f      	subs	r7, r1, #1
 8000b2c:	41b9      	sbcs	r1, r7
 8000b2e:	430d      	orrs	r5, r1
 8000b30:	e11b      	b.n	8000d6a <__aeabi_dadd+0x3f2>
 8000b32:	0029      	movs	r1, r5
 8000b34:	4339      	orrs	r1, r7
 8000b36:	d100      	bne.n	8000b3a <__aeabi_dadd+0x1c2>
 8000b38:	e0b5      	b.n	8000ca6 <__aeabi_dadd+0x32e>
 8000b3a:	1e51      	subs	r1, r2, #1
 8000b3c:	2a01      	cmp	r2, #1
 8000b3e:	d100      	bne.n	8000b42 <__aeabi_dadd+0x1ca>
 8000b40:	e1ab      	b.n	8000e9a <__aeabi_dadd+0x522>
 8000b42:	486a      	ldr	r0, [pc, #424]	; (8000cec <__aeabi_dadd+0x374>)
 8000b44:	4282      	cmp	r2, r0
 8000b46:	d100      	bne.n	8000b4a <__aeabi_dadd+0x1d2>
 8000b48:	e1b2      	b.n	8000eb0 <__aeabi_dadd+0x538>
 8000b4a:	000a      	movs	r2, r1
 8000b4c:	e743      	b.n	80009d6 <__aeabi_dadd+0x5e>
 8000b4e:	4969      	ldr	r1, [pc, #420]	; (8000cf4 <__aeabi_dadd+0x37c>)
 8000b50:	1c75      	adds	r5, r6, #1
 8000b52:	420d      	tst	r5, r1
 8000b54:	d000      	beq.n	8000b58 <__aeabi_dadd+0x1e0>
 8000b56:	e0cf      	b.n	8000cf8 <__aeabi_dadd+0x380>
 8000b58:	2e00      	cmp	r6, #0
 8000b5a:	d000      	beq.n	8000b5e <__aeabi_dadd+0x1e6>
 8000b5c:	e193      	b.n	8000e86 <__aeabi_dadd+0x50e>
 8000b5e:	4649      	mov	r1, r9
 8000b60:	4319      	orrs	r1, r3
 8000b62:	d100      	bne.n	8000b66 <__aeabi_dadd+0x1ee>
 8000b64:	e1d1      	b.n	8000f0a <__aeabi_dadd+0x592>
 8000b66:	4661      	mov	r1, ip
 8000b68:	4339      	orrs	r1, r7
 8000b6a:	d000      	beq.n	8000b6e <__aeabi_dadd+0x1f6>
 8000b6c:	e1e3      	b.n	8000f36 <__aeabi_dadd+0x5be>
 8000b6e:	4649      	mov	r1, r9
 8000b70:	0758      	lsls	r0, r3, #29
 8000b72:	08c9      	lsrs	r1, r1, #3
 8000b74:	4301      	orrs	r1, r0
 8000b76:	08db      	lsrs	r3, r3, #3
 8000b78:	e026      	b.n	8000bc8 <__aeabi_dadd+0x250>
 8000b7a:	0029      	movs	r1, r5
 8000b7c:	4339      	orrs	r1, r7
 8000b7e:	d100      	bne.n	8000b82 <__aeabi_dadd+0x20a>
 8000b80:	e091      	b.n	8000ca6 <__aeabi_dadd+0x32e>
 8000b82:	1e51      	subs	r1, r2, #1
 8000b84:	2a01      	cmp	r2, #1
 8000b86:	d005      	beq.n	8000b94 <__aeabi_dadd+0x21c>
 8000b88:	4858      	ldr	r0, [pc, #352]	; (8000cec <__aeabi_dadd+0x374>)
 8000b8a:	4282      	cmp	r2, r0
 8000b8c:	d100      	bne.n	8000b90 <__aeabi_dadd+0x218>
 8000b8e:	e18f      	b.n	8000eb0 <__aeabi_dadd+0x538>
 8000b90:	000a      	movs	r2, r1
 8000b92:	e7b8      	b.n	8000b06 <__aeabi_dadd+0x18e>
 8000b94:	003d      	movs	r5, r7
 8000b96:	444d      	add	r5, r9
 8000b98:	454d      	cmp	r5, r9
 8000b9a:	4189      	sbcs	r1, r1
 8000b9c:	4463      	add	r3, ip
 8000b9e:	4698      	mov	r8, r3
 8000ba0:	4249      	negs	r1, r1
 8000ba2:	4488      	add	r8, r1
 8000ba4:	4643      	mov	r3, r8
 8000ba6:	2602      	movs	r6, #2
 8000ba8:	021b      	lsls	r3, r3, #8
 8000baa:	d500      	bpl.n	8000bae <__aeabi_dadd+0x236>
 8000bac:	e0eb      	b.n	8000d86 <__aeabi_dadd+0x40e>
 8000bae:	3e01      	subs	r6, #1
 8000bb0:	076b      	lsls	r3, r5, #29
 8000bb2:	d000      	beq.n	8000bb6 <__aeabi_dadd+0x23e>
 8000bb4:	e75c      	b.n	8000a70 <__aeabi_dadd+0xf8>
 8000bb6:	4643      	mov	r3, r8
 8000bb8:	08e9      	lsrs	r1, r5, #3
 8000bba:	075a      	lsls	r2, r3, #29
 8000bbc:	4311      	orrs	r1, r2
 8000bbe:	0032      	movs	r2, r6
 8000bc0:	08db      	lsrs	r3, r3, #3
 8000bc2:	484a      	ldr	r0, [pc, #296]	; (8000cec <__aeabi_dadd+0x374>)
 8000bc4:	4282      	cmp	r2, r0
 8000bc6:	d021      	beq.n	8000c0c <__aeabi_dadd+0x294>
 8000bc8:	031b      	lsls	r3, r3, #12
 8000bca:	0552      	lsls	r2, r2, #21
 8000bcc:	0b1b      	lsrs	r3, r3, #12
 8000bce:	0d52      	lsrs	r2, r2, #21
 8000bd0:	e76c      	b.n	8000aac <__aeabi_dadd+0x134>
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	e769      	b.n	8000aac <__aeabi_dadd+0x134>
 8000bd8:	002a      	movs	r2, r5
 8000bda:	433a      	orrs	r2, r7
 8000bdc:	d069      	beq.n	8000cb2 <__aeabi_dadd+0x33a>
 8000bde:	464a      	mov	r2, r9
 8000be0:	0758      	lsls	r0, r3, #29
 8000be2:	08d1      	lsrs	r1, r2, #3
 8000be4:	08da      	lsrs	r2, r3, #3
 8000be6:	2380      	movs	r3, #128	; 0x80
 8000be8:	031b      	lsls	r3, r3, #12
 8000bea:	4308      	orrs	r0, r1
 8000bec:	421a      	tst	r2, r3
 8000bee:	d007      	beq.n	8000c00 <__aeabi_dadd+0x288>
 8000bf0:	0029      	movs	r1, r5
 8000bf2:	08ed      	lsrs	r5, r5, #3
 8000bf4:	421d      	tst	r5, r3
 8000bf6:	d103      	bne.n	8000c00 <__aeabi_dadd+0x288>
 8000bf8:	002a      	movs	r2, r5
 8000bfa:	08ff      	lsrs	r7, r7, #3
 8000bfc:	0748      	lsls	r0, r1, #29
 8000bfe:	4338      	orrs	r0, r7
 8000c00:	0f43      	lsrs	r3, r0, #29
 8000c02:	00c1      	lsls	r1, r0, #3
 8000c04:	075b      	lsls	r3, r3, #29
 8000c06:	08c9      	lsrs	r1, r1, #3
 8000c08:	4319      	orrs	r1, r3
 8000c0a:	0013      	movs	r3, r2
 8000c0c:	000a      	movs	r2, r1
 8000c0e:	431a      	orrs	r2, r3
 8000c10:	d100      	bne.n	8000c14 <__aeabi_dadd+0x29c>
 8000c12:	e213      	b.n	800103c <__aeabi_dadd+0x6c4>
 8000c14:	2280      	movs	r2, #128	; 0x80
 8000c16:	0312      	lsls	r2, r2, #12
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	031b      	lsls	r3, r3, #12
 8000c1c:	4a33      	ldr	r2, [pc, #204]	; (8000cec <__aeabi_dadd+0x374>)
 8000c1e:	0b1b      	lsrs	r3, r3, #12
 8000c20:	e744      	b.n	8000aac <__aeabi_dadd+0x134>
 8000c22:	2a00      	cmp	r2, #0
 8000c24:	d04b      	beq.n	8000cbe <__aeabi_dadd+0x346>
 8000c26:	1b8a      	subs	r2, r1, r6
 8000c28:	2e00      	cmp	r6, #0
 8000c2a:	d100      	bne.n	8000c2e <__aeabi_dadd+0x2b6>
 8000c2c:	e0e7      	b.n	8000dfe <__aeabi_dadd+0x486>
 8000c2e:	482f      	ldr	r0, [pc, #188]	; (8000cec <__aeabi_dadd+0x374>)
 8000c30:	4281      	cmp	r1, r0
 8000c32:	d100      	bne.n	8000c36 <__aeabi_dadd+0x2be>
 8000c34:	e195      	b.n	8000f62 <__aeabi_dadd+0x5ea>
 8000c36:	2080      	movs	r0, #128	; 0x80
 8000c38:	0400      	lsls	r0, r0, #16
 8000c3a:	4303      	orrs	r3, r0
 8000c3c:	2a38      	cmp	r2, #56	; 0x38
 8000c3e:	dd00      	ble.n	8000c42 <__aeabi_dadd+0x2ca>
 8000c40:	e143      	b.n	8000eca <__aeabi_dadd+0x552>
 8000c42:	2a1f      	cmp	r2, #31
 8000c44:	dd00      	ble.n	8000c48 <__aeabi_dadd+0x2d0>
 8000c46:	e1db      	b.n	8001000 <__aeabi_dadd+0x688>
 8000c48:	2020      	movs	r0, #32
 8000c4a:	001d      	movs	r5, r3
 8000c4c:	464e      	mov	r6, r9
 8000c4e:	1a80      	subs	r0, r0, r2
 8000c50:	4085      	lsls	r5, r0
 8000c52:	40d6      	lsrs	r6, r2
 8000c54:	4335      	orrs	r5, r6
 8000c56:	464e      	mov	r6, r9
 8000c58:	4086      	lsls	r6, r0
 8000c5a:	0030      	movs	r0, r6
 8000c5c:	40d3      	lsrs	r3, r2
 8000c5e:	1e46      	subs	r6, r0, #1
 8000c60:	41b0      	sbcs	r0, r6
 8000c62:	449c      	add	ip, r3
 8000c64:	4305      	orrs	r5, r0
 8000c66:	19ed      	adds	r5, r5, r7
 8000c68:	42bd      	cmp	r5, r7
 8000c6a:	419b      	sbcs	r3, r3
 8000c6c:	425b      	negs	r3, r3
 8000c6e:	4463      	add	r3, ip
 8000c70:	4698      	mov	r8, r3
 8000c72:	000e      	movs	r6, r1
 8000c74:	e07f      	b.n	8000d76 <__aeabi_dadd+0x3fe>
 8000c76:	4a1e      	ldr	r2, [pc, #120]	; (8000cf0 <__aeabi_dadd+0x378>)
 8000c78:	1a76      	subs	r6, r6, r1
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	4698      	mov	r8, r3
 8000c7e:	e6f5      	b.n	8000a6c <__aeabi_dadd+0xf4>
 8000c80:	0028      	movs	r0, r5
 8000c82:	f001 fcbb 	bl	80025fc <__clzsi2>
 8000c86:	0001      	movs	r1, r0
 8000c88:	3118      	adds	r1, #24
 8000c8a:	291f      	cmp	r1, #31
 8000c8c:	dc00      	bgt.n	8000c90 <__aeabi_dadd+0x318>
 8000c8e:	e6cf      	b.n	8000a30 <__aeabi_dadd+0xb8>
 8000c90:	002b      	movs	r3, r5
 8000c92:	3808      	subs	r0, #8
 8000c94:	4083      	lsls	r3, r0
 8000c96:	2500      	movs	r5, #0
 8000c98:	e6d2      	b.n	8000a40 <__aeabi_dadd+0xc8>
 8000c9a:	4662      	mov	r2, ip
 8000c9c:	433a      	orrs	r2, r7
 8000c9e:	0011      	movs	r1, r2
 8000ca0:	1e4f      	subs	r7, r1, #1
 8000ca2:	41b9      	sbcs	r1, r7
 8000ca4:	e6ac      	b.n	8000a00 <__aeabi_dadd+0x88>
 8000ca6:	4649      	mov	r1, r9
 8000ca8:	0758      	lsls	r0, r3, #29
 8000caa:	08c9      	lsrs	r1, r1, #3
 8000cac:	4301      	orrs	r1, r0
 8000cae:	08db      	lsrs	r3, r3, #3
 8000cb0:	e787      	b.n	8000bc2 <__aeabi_dadd+0x24a>
 8000cb2:	4649      	mov	r1, r9
 8000cb4:	075a      	lsls	r2, r3, #29
 8000cb6:	08c9      	lsrs	r1, r1, #3
 8000cb8:	4311      	orrs	r1, r2
 8000cba:	08db      	lsrs	r3, r3, #3
 8000cbc:	e7a6      	b.n	8000c0c <__aeabi_dadd+0x294>
 8000cbe:	490d      	ldr	r1, [pc, #52]	; (8000cf4 <__aeabi_dadd+0x37c>)
 8000cc0:	1c70      	adds	r0, r6, #1
 8000cc2:	4208      	tst	r0, r1
 8000cc4:	d000      	beq.n	8000cc8 <__aeabi_dadd+0x350>
 8000cc6:	e0bb      	b.n	8000e40 <__aeabi_dadd+0x4c8>
 8000cc8:	2e00      	cmp	r6, #0
 8000cca:	d000      	beq.n	8000cce <__aeabi_dadd+0x356>
 8000ccc:	e114      	b.n	8000ef8 <__aeabi_dadd+0x580>
 8000cce:	4649      	mov	r1, r9
 8000cd0:	4319      	orrs	r1, r3
 8000cd2:	d100      	bne.n	8000cd6 <__aeabi_dadd+0x35e>
 8000cd4:	e175      	b.n	8000fc2 <__aeabi_dadd+0x64a>
 8000cd6:	0029      	movs	r1, r5
 8000cd8:	4339      	orrs	r1, r7
 8000cda:	d000      	beq.n	8000cde <__aeabi_dadd+0x366>
 8000cdc:	e17e      	b.n	8000fdc <__aeabi_dadd+0x664>
 8000cde:	4649      	mov	r1, r9
 8000ce0:	0758      	lsls	r0, r3, #29
 8000ce2:	08c9      	lsrs	r1, r1, #3
 8000ce4:	4301      	orrs	r1, r0
 8000ce6:	08db      	lsrs	r3, r3, #3
 8000ce8:	e76e      	b.n	8000bc8 <__aeabi_dadd+0x250>
 8000cea:	46c0      	nop			; (mov r8, r8)
 8000cec:	000007ff 	.word	0x000007ff
 8000cf0:	ff7fffff 	.word	0xff7fffff
 8000cf4:	000007fe 	.word	0x000007fe
 8000cf8:	4649      	mov	r1, r9
 8000cfa:	1bcd      	subs	r5, r1, r7
 8000cfc:	4661      	mov	r1, ip
 8000cfe:	1a58      	subs	r0, r3, r1
 8000d00:	45a9      	cmp	r9, r5
 8000d02:	4189      	sbcs	r1, r1
 8000d04:	4249      	negs	r1, r1
 8000d06:	4688      	mov	r8, r1
 8000d08:	0001      	movs	r1, r0
 8000d0a:	4640      	mov	r0, r8
 8000d0c:	1a09      	subs	r1, r1, r0
 8000d0e:	4688      	mov	r8, r1
 8000d10:	0209      	lsls	r1, r1, #8
 8000d12:	d500      	bpl.n	8000d16 <__aeabi_dadd+0x39e>
 8000d14:	e0a6      	b.n	8000e64 <__aeabi_dadd+0x4ec>
 8000d16:	4641      	mov	r1, r8
 8000d18:	4329      	orrs	r1, r5
 8000d1a:	d000      	beq.n	8000d1e <__aeabi_dadd+0x3a6>
 8000d1c:	e67f      	b.n	8000a1e <__aeabi_dadd+0xa6>
 8000d1e:	2300      	movs	r3, #0
 8000d20:	2400      	movs	r4, #0
 8000d22:	e751      	b.n	8000bc8 <__aeabi_dadd+0x250>
 8000d24:	4cc7      	ldr	r4, [pc, #796]	; (8001044 <__aeabi_dadd+0x6cc>)
 8000d26:	42a1      	cmp	r1, r4
 8000d28:	d100      	bne.n	8000d2c <__aeabi_dadd+0x3b4>
 8000d2a:	e0c7      	b.n	8000ebc <__aeabi_dadd+0x544>
 8000d2c:	2480      	movs	r4, #128	; 0x80
 8000d2e:	0424      	lsls	r4, r4, #16
 8000d30:	4323      	orrs	r3, r4
 8000d32:	2a38      	cmp	r2, #56	; 0x38
 8000d34:	dc54      	bgt.n	8000de0 <__aeabi_dadd+0x468>
 8000d36:	2a1f      	cmp	r2, #31
 8000d38:	dd00      	ble.n	8000d3c <__aeabi_dadd+0x3c4>
 8000d3a:	e0cc      	b.n	8000ed6 <__aeabi_dadd+0x55e>
 8000d3c:	2420      	movs	r4, #32
 8000d3e:	4648      	mov	r0, r9
 8000d40:	1aa4      	subs	r4, r4, r2
 8000d42:	001d      	movs	r5, r3
 8000d44:	464e      	mov	r6, r9
 8000d46:	40a0      	lsls	r0, r4
 8000d48:	40d6      	lsrs	r6, r2
 8000d4a:	40a5      	lsls	r5, r4
 8000d4c:	0004      	movs	r4, r0
 8000d4e:	40d3      	lsrs	r3, r2
 8000d50:	4662      	mov	r2, ip
 8000d52:	4335      	orrs	r5, r6
 8000d54:	1e66      	subs	r6, r4, #1
 8000d56:	41b4      	sbcs	r4, r6
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	469c      	mov	ip, r3
 8000d5c:	4325      	orrs	r5, r4
 8000d5e:	e044      	b.n	8000dea <__aeabi_dadd+0x472>
 8000d60:	4662      	mov	r2, ip
 8000d62:	433a      	orrs	r2, r7
 8000d64:	0015      	movs	r5, r2
 8000d66:	1e6f      	subs	r7, r5, #1
 8000d68:	41bd      	sbcs	r5, r7
 8000d6a:	444d      	add	r5, r9
 8000d6c:	454d      	cmp	r5, r9
 8000d6e:	4189      	sbcs	r1, r1
 8000d70:	4249      	negs	r1, r1
 8000d72:	4688      	mov	r8, r1
 8000d74:	4498      	add	r8, r3
 8000d76:	4643      	mov	r3, r8
 8000d78:	021b      	lsls	r3, r3, #8
 8000d7a:	d400      	bmi.n	8000d7e <__aeabi_dadd+0x406>
 8000d7c:	e718      	b.n	8000bb0 <__aeabi_dadd+0x238>
 8000d7e:	4bb1      	ldr	r3, [pc, #708]	; (8001044 <__aeabi_dadd+0x6cc>)
 8000d80:	3601      	adds	r6, #1
 8000d82:	429e      	cmp	r6, r3
 8000d84:	d049      	beq.n	8000e1a <__aeabi_dadd+0x4a2>
 8000d86:	4642      	mov	r2, r8
 8000d88:	4baf      	ldr	r3, [pc, #700]	; (8001048 <__aeabi_dadd+0x6d0>)
 8000d8a:	2101      	movs	r1, #1
 8000d8c:	401a      	ands	r2, r3
 8000d8e:	0013      	movs	r3, r2
 8000d90:	086a      	lsrs	r2, r5, #1
 8000d92:	400d      	ands	r5, r1
 8000d94:	4315      	orrs	r5, r2
 8000d96:	07d9      	lsls	r1, r3, #31
 8000d98:	085b      	lsrs	r3, r3, #1
 8000d9a:	4698      	mov	r8, r3
 8000d9c:	430d      	orrs	r5, r1
 8000d9e:	e665      	b.n	8000a6c <__aeabi_dadd+0xf4>
 8000da0:	0018      	movs	r0, r3
 8000da2:	3e1f      	subs	r6, #31
 8000da4:	40f0      	lsrs	r0, r6
 8000da6:	2a20      	cmp	r2, #32
 8000da8:	d003      	beq.n	8000db2 <__aeabi_dadd+0x43a>
 8000daa:	2140      	movs	r1, #64	; 0x40
 8000dac:	1a8a      	subs	r2, r1, r2
 8000dae:	4093      	lsls	r3, r2
 8000db0:	431d      	orrs	r5, r3
 8000db2:	1e69      	subs	r1, r5, #1
 8000db4:	418d      	sbcs	r5, r1
 8000db6:	2300      	movs	r3, #0
 8000db8:	2600      	movs	r6, #0
 8000dba:	4698      	mov	r8, r3
 8000dbc:	4305      	orrs	r5, r0
 8000dbe:	e6f7      	b.n	8000bb0 <__aeabi_dadd+0x238>
 8000dc0:	0011      	movs	r1, r2
 8000dc2:	4665      	mov	r5, ip
 8000dc4:	3920      	subs	r1, #32
 8000dc6:	40cd      	lsrs	r5, r1
 8000dc8:	2a20      	cmp	r2, #32
 8000dca:	d004      	beq.n	8000dd6 <__aeabi_dadd+0x45e>
 8000dcc:	2040      	movs	r0, #64	; 0x40
 8000dce:	4661      	mov	r1, ip
 8000dd0:	1a82      	subs	r2, r0, r2
 8000dd2:	4091      	lsls	r1, r2
 8000dd4:	430f      	orrs	r7, r1
 8000dd6:	0039      	movs	r1, r7
 8000dd8:	1e4f      	subs	r7, r1, #1
 8000dda:	41b9      	sbcs	r1, r7
 8000ddc:	4329      	orrs	r1, r5
 8000dde:	e60f      	b.n	8000a00 <__aeabi_dadd+0x88>
 8000de0:	464a      	mov	r2, r9
 8000de2:	4313      	orrs	r3, r2
 8000de4:	001d      	movs	r5, r3
 8000de6:	1e6b      	subs	r3, r5, #1
 8000de8:	419d      	sbcs	r5, r3
 8000dea:	1b7d      	subs	r5, r7, r5
 8000dec:	42af      	cmp	r7, r5
 8000dee:	419b      	sbcs	r3, r3
 8000df0:	4662      	mov	r2, ip
 8000df2:	425b      	negs	r3, r3
 8000df4:	1ad3      	subs	r3, r2, r3
 8000df6:	4698      	mov	r8, r3
 8000df8:	4654      	mov	r4, sl
 8000dfa:	000e      	movs	r6, r1
 8000dfc:	e607      	b.n	8000a0e <__aeabi_dadd+0x96>
 8000dfe:	4648      	mov	r0, r9
 8000e00:	4318      	orrs	r0, r3
 8000e02:	d100      	bne.n	8000e06 <__aeabi_dadd+0x48e>
 8000e04:	e0b3      	b.n	8000f6e <__aeabi_dadd+0x5f6>
 8000e06:	1e50      	subs	r0, r2, #1
 8000e08:	2a01      	cmp	r2, #1
 8000e0a:	d100      	bne.n	8000e0e <__aeabi_dadd+0x496>
 8000e0c:	e10d      	b.n	800102a <__aeabi_dadd+0x6b2>
 8000e0e:	4d8d      	ldr	r5, [pc, #564]	; (8001044 <__aeabi_dadd+0x6cc>)
 8000e10:	42aa      	cmp	r2, r5
 8000e12:	d100      	bne.n	8000e16 <__aeabi_dadd+0x49e>
 8000e14:	e0a5      	b.n	8000f62 <__aeabi_dadd+0x5ea>
 8000e16:	0002      	movs	r2, r0
 8000e18:	e710      	b.n	8000c3c <__aeabi_dadd+0x2c4>
 8000e1a:	0032      	movs	r2, r6
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	2100      	movs	r1, #0
 8000e20:	e644      	b.n	8000aac <__aeabi_dadd+0x134>
 8000e22:	2120      	movs	r1, #32
 8000e24:	0038      	movs	r0, r7
 8000e26:	1a89      	subs	r1, r1, r2
 8000e28:	4665      	mov	r5, ip
 8000e2a:	408f      	lsls	r7, r1
 8000e2c:	408d      	lsls	r5, r1
 8000e2e:	40d0      	lsrs	r0, r2
 8000e30:	1e79      	subs	r1, r7, #1
 8000e32:	418f      	sbcs	r7, r1
 8000e34:	4305      	orrs	r5, r0
 8000e36:	433d      	orrs	r5, r7
 8000e38:	4667      	mov	r7, ip
 8000e3a:	40d7      	lsrs	r7, r2
 8000e3c:	19db      	adds	r3, r3, r7
 8000e3e:	e794      	b.n	8000d6a <__aeabi_dadd+0x3f2>
 8000e40:	4a80      	ldr	r2, [pc, #512]	; (8001044 <__aeabi_dadd+0x6cc>)
 8000e42:	4290      	cmp	r0, r2
 8000e44:	d100      	bne.n	8000e48 <__aeabi_dadd+0x4d0>
 8000e46:	e0ec      	b.n	8001022 <__aeabi_dadd+0x6aa>
 8000e48:	0039      	movs	r1, r7
 8000e4a:	4449      	add	r1, r9
 8000e4c:	4549      	cmp	r1, r9
 8000e4e:	4192      	sbcs	r2, r2
 8000e50:	4463      	add	r3, ip
 8000e52:	4252      	negs	r2, r2
 8000e54:	189b      	adds	r3, r3, r2
 8000e56:	07dd      	lsls	r5, r3, #31
 8000e58:	0849      	lsrs	r1, r1, #1
 8000e5a:	085b      	lsrs	r3, r3, #1
 8000e5c:	4698      	mov	r8, r3
 8000e5e:	0006      	movs	r6, r0
 8000e60:	430d      	orrs	r5, r1
 8000e62:	e6a5      	b.n	8000bb0 <__aeabi_dadd+0x238>
 8000e64:	464a      	mov	r2, r9
 8000e66:	1abd      	subs	r5, r7, r2
 8000e68:	42af      	cmp	r7, r5
 8000e6a:	4189      	sbcs	r1, r1
 8000e6c:	4662      	mov	r2, ip
 8000e6e:	4249      	negs	r1, r1
 8000e70:	1ad3      	subs	r3, r2, r3
 8000e72:	1a5b      	subs	r3, r3, r1
 8000e74:	4698      	mov	r8, r3
 8000e76:	4654      	mov	r4, sl
 8000e78:	e5d1      	b.n	8000a1e <__aeabi_dadd+0xa6>
 8000e7a:	076c      	lsls	r4, r5, #29
 8000e7c:	08f9      	lsrs	r1, r7, #3
 8000e7e:	4321      	orrs	r1, r4
 8000e80:	08eb      	lsrs	r3, r5, #3
 8000e82:	0004      	movs	r4, r0
 8000e84:	e69d      	b.n	8000bc2 <__aeabi_dadd+0x24a>
 8000e86:	464a      	mov	r2, r9
 8000e88:	431a      	orrs	r2, r3
 8000e8a:	d175      	bne.n	8000f78 <__aeabi_dadd+0x600>
 8000e8c:	4661      	mov	r1, ip
 8000e8e:	4339      	orrs	r1, r7
 8000e90:	d114      	bne.n	8000ebc <__aeabi_dadd+0x544>
 8000e92:	2380      	movs	r3, #128	; 0x80
 8000e94:	2400      	movs	r4, #0
 8000e96:	031b      	lsls	r3, r3, #12
 8000e98:	e6bc      	b.n	8000c14 <__aeabi_dadd+0x29c>
 8000e9a:	464a      	mov	r2, r9
 8000e9c:	1bd5      	subs	r5, r2, r7
 8000e9e:	45a9      	cmp	r9, r5
 8000ea0:	4189      	sbcs	r1, r1
 8000ea2:	4662      	mov	r2, ip
 8000ea4:	4249      	negs	r1, r1
 8000ea6:	1a9b      	subs	r3, r3, r2
 8000ea8:	1a5b      	subs	r3, r3, r1
 8000eaa:	4698      	mov	r8, r3
 8000eac:	2601      	movs	r6, #1
 8000eae:	e5ae      	b.n	8000a0e <__aeabi_dadd+0x96>
 8000eb0:	464a      	mov	r2, r9
 8000eb2:	08d1      	lsrs	r1, r2, #3
 8000eb4:	075a      	lsls	r2, r3, #29
 8000eb6:	4311      	orrs	r1, r2
 8000eb8:	08db      	lsrs	r3, r3, #3
 8000eba:	e6a7      	b.n	8000c0c <__aeabi_dadd+0x294>
 8000ebc:	4663      	mov	r3, ip
 8000ebe:	08f9      	lsrs	r1, r7, #3
 8000ec0:	075a      	lsls	r2, r3, #29
 8000ec2:	4654      	mov	r4, sl
 8000ec4:	4311      	orrs	r1, r2
 8000ec6:	08db      	lsrs	r3, r3, #3
 8000ec8:	e6a0      	b.n	8000c0c <__aeabi_dadd+0x294>
 8000eca:	464a      	mov	r2, r9
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	001d      	movs	r5, r3
 8000ed0:	1e6b      	subs	r3, r5, #1
 8000ed2:	419d      	sbcs	r5, r3
 8000ed4:	e6c7      	b.n	8000c66 <__aeabi_dadd+0x2ee>
 8000ed6:	0014      	movs	r4, r2
 8000ed8:	001e      	movs	r6, r3
 8000eda:	3c20      	subs	r4, #32
 8000edc:	40e6      	lsrs	r6, r4
 8000ede:	2a20      	cmp	r2, #32
 8000ee0:	d005      	beq.n	8000eee <__aeabi_dadd+0x576>
 8000ee2:	2440      	movs	r4, #64	; 0x40
 8000ee4:	1aa2      	subs	r2, r4, r2
 8000ee6:	4093      	lsls	r3, r2
 8000ee8:	464a      	mov	r2, r9
 8000eea:	431a      	orrs	r2, r3
 8000eec:	4691      	mov	r9, r2
 8000eee:	464d      	mov	r5, r9
 8000ef0:	1e6b      	subs	r3, r5, #1
 8000ef2:	419d      	sbcs	r5, r3
 8000ef4:	4335      	orrs	r5, r6
 8000ef6:	e778      	b.n	8000dea <__aeabi_dadd+0x472>
 8000ef8:	464a      	mov	r2, r9
 8000efa:	431a      	orrs	r2, r3
 8000efc:	d000      	beq.n	8000f00 <__aeabi_dadd+0x588>
 8000efe:	e66b      	b.n	8000bd8 <__aeabi_dadd+0x260>
 8000f00:	076b      	lsls	r3, r5, #29
 8000f02:	08f9      	lsrs	r1, r7, #3
 8000f04:	4319      	orrs	r1, r3
 8000f06:	08eb      	lsrs	r3, r5, #3
 8000f08:	e680      	b.n	8000c0c <__aeabi_dadd+0x294>
 8000f0a:	4661      	mov	r1, ip
 8000f0c:	4339      	orrs	r1, r7
 8000f0e:	d054      	beq.n	8000fba <__aeabi_dadd+0x642>
 8000f10:	4663      	mov	r3, ip
 8000f12:	08f9      	lsrs	r1, r7, #3
 8000f14:	075c      	lsls	r4, r3, #29
 8000f16:	4321      	orrs	r1, r4
 8000f18:	08db      	lsrs	r3, r3, #3
 8000f1a:	0004      	movs	r4, r0
 8000f1c:	e654      	b.n	8000bc8 <__aeabi_dadd+0x250>
 8000f1e:	464a      	mov	r2, r9
 8000f20:	1abd      	subs	r5, r7, r2
 8000f22:	42af      	cmp	r7, r5
 8000f24:	4189      	sbcs	r1, r1
 8000f26:	4662      	mov	r2, ip
 8000f28:	4249      	negs	r1, r1
 8000f2a:	1ad3      	subs	r3, r2, r3
 8000f2c:	1a5b      	subs	r3, r3, r1
 8000f2e:	4698      	mov	r8, r3
 8000f30:	0004      	movs	r4, r0
 8000f32:	2601      	movs	r6, #1
 8000f34:	e56b      	b.n	8000a0e <__aeabi_dadd+0x96>
 8000f36:	464a      	mov	r2, r9
 8000f38:	1bd5      	subs	r5, r2, r7
 8000f3a:	45a9      	cmp	r9, r5
 8000f3c:	4189      	sbcs	r1, r1
 8000f3e:	4662      	mov	r2, ip
 8000f40:	4249      	negs	r1, r1
 8000f42:	1a9a      	subs	r2, r3, r2
 8000f44:	1a52      	subs	r2, r2, r1
 8000f46:	4690      	mov	r8, r2
 8000f48:	0212      	lsls	r2, r2, #8
 8000f4a:	d532      	bpl.n	8000fb2 <__aeabi_dadd+0x63a>
 8000f4c:	464a      	mov	r2, r9
 8000f4e:	1abd      	subs	r5, r7, r2
 8000f50:	42af      	cmp	r7, r5
 8000f52:	4189      	sbcs	r1, r1
 8000f54:	4662      	mov	r2, ip
 8000f56:	4249      	negs	r1, r1
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	1a5b      	subs	r3, r3, r1
 8000f5c:	4698      	mov	r8, r3
 8000f5e:	0004      	movs	r4, r0
 8000f60:	e584      	b.n	8000a6c <__aeabi_dadd+0xf4>
 8000f62:	4663      	mov	r3, ip
 8000f64:	08f9      	lsrs	r1, r7, #3
 8000f66:	075a      	lsls	r2, r3, #29
 8000f68:	4311      	orrs	r1, r2
 8000f6a:	08db      	lsrs	r3, r3, #3
 8000f6c:	e64e      	b.n	8000c0c <__aeabi_dadd+0x294>
 8000f6e:	08f9      	lsrs	r1, r7, #3
 8000f70:	0768      	lsls	r0, r5, #29
 8000f72:	4301      	orrs	r1, r0
 8000f74:	08eb      	lsrs	r3, r5, #3
 8000f76:	e624      	b.n	8000bc2 <__aeabi_dadd+0x24a>
 8000f78:	4662      	mov	r2, ip
 8000f7a:	433a      	orrs	r2, r7
 8000f7c:	d100      	bne.n	8000f80 <__aeabi_dadd+0x608>
 8000f7e:	e698      	b.n	8000cb2 <__aeabi_dadd+0x33a>
 8000f80:	464a      	mov	r2, r9
 8000f82:	08d1      	lsrs	r1, r2, #3
 8000f84:	075a      	lsls	r2, r3, #29
 8000f86:	4311      	orrs	r1, r2
 8000f88:	08da      	lsrs	r2, r3, #3
 8000f8a:	2380      	movs	r3, #128	; 0x80
 8000f8c:	031b      	lsls	r3, r3, #12
 8000f8e:	421a      	tst	r2, r3
 8000f90:	d008      	beq.n	8000fa4 <__aeabi_dadd+0x62c>
 8000f92:	4660      	mov	r0, ip
 8000f94:	08c5      	lsrs	r5, r0, #3
 8000f96:	421d      	tst	r5, r3
 8000f98:	d104      	bne.n	8000fa4 <__aeabi_dadd+0x62c>
 8000f9a:	4654      	mov	r4, sl
 8000f9c:	002a      	movs	r2, r5
 8000f9e:	08f9      	lsrs	r1, r7, #3
 8000fa0:	0743      	lsls	r3, r0, #29
 8000fa2:	4319      	orrs	r1, r3
 8000fa4:	0f4b      	lsrs	r3, r1, #29
 8000fa6:	00c9      	lsls	r1, r1, #3
 8000fa8:	075b      	lsls	r3, r3, #29
 8000faa:	08c9      	lsrs	r1, r1, #3
 8000fac:	4319      	orrs	r1, r3
 8000fae:	0013      	movs	r3, r2
 8000fb0:	e62c      	b.n	8000c0c <__aeabi_dadd+0x294>
 8000fb2:	4641      	mov	r1, r8
 8000fb4:	4329      	orrs	r1, r5
 8000fb6:	d000      	beq.n	8000fba <__aeabi_dadd+0x642>
 8000fb8:	e5fa      	b.n	8000bb0 <__aeabi_dadd+0x238>
 8000fba:	2300      	movs	r3, #0
 8000fbc:	000a      	movs	r2, r1
 8000fbe:	2400      	movs	r4, #0
 8000fc0:	e602      	b.n	8000bc8 <__aeabi_dadd+0x250>
 8000fc2:	076b      	lsls	r3, r5, #29
 8000fc4:	08f9      	lsrs	r1, r7, #3
 8000fc6:	4319      	orrs	r1, r3
 8000fc8:	08eb      	lsrs	r3, r5, #3
 8000fca:	e5fd      	b.n	8000bc8 <__aeabi_dadd+0x250>
 8000fcc:	4663      	mov	r3, ip
 8000fce:	08f9      	lsrs	r1, r7, #3
 8000fd0:	075b      	lsls	r3, r3, #29
 8000fd2:	4319      	orrs	r1, r3
 8000fd4:	4663      	mov	r3, ip
 8000fd6:	0004      	movs	r4, r0
 8000fd8:	08db      	lsrs	r3, r3, #3
 8000fda:	e617      	b.n	8000c0c <__aeabi_dadd+0x294>
 8000fdc:	003d      	movs	r5, r7
 8000fde:	444d      	add	r5, r9
 8000fe0:	4463      	add	r3, ip
 8000fe2:	454d      	cmp	r5, r9
 8000fe4:	4189      	sbcs	r1, r1
 8000fe6:	4698      	mov	r8, r3
 8000fe8:	4249      	negs	r1, r1
 8000fea:	4488      	add	r8, r1
 8000fec:	4643      	mov	r3, r8
 8000fee:	021b      	lsls	r3, r3, #8
 8000ff0:	d400      	bmi.n	8000ff4 <__aeabi_dadd+0x67c>
 8000ff2:	e5dd      	b.n	8000bb0 <__aeabi_dadd+0x238>
 8000ff4:	4642      	mov	r2, r8
 8000ff6:	4b14      	ldr	r3, [pc, #80]	; (8001048 <__aeabi_dadd+0x6d0>)
 8000ff8:	2601      	movs	r6, #1
 8000ffa:	401a      	ands	r2, r3
 8000ffc:	4690      	mov	r8, r2
 8000ffe:	e5d7      	b.n	8000bb0 <__aeabi_dadd+0x238>
 8001000:	0010      	movs	r0, r2
 8001002:	001e      	movs	r6, r3
 8001004:	3820      	subs	r0, #32
 8001006:	40c6      	lsrs	r6, r0
 8001008:	2a20      	cmp	r2, #32
 800100a:	d005      	beq.n	8001018 <__aeabi_dadd+0x6a0>
 800100c:	2040      	movs	r0, #64	; 0x40
 800100e:	1a82      	subs	r2, r0, r2
 8001010:	4093      	lsls	r3, r2
 8001012:	464a      	mov	r2, r9
 8001014:	431a      	orrs	r2, r3
 8001016:	4691      	mov	r9, r2
 8001018:	464d      	mov	r5, r9
 800101a:	1e6b      	subs	r3, r5, #1
 800101c:	419d      	sbcs	r5, r3
 800101e:	4335      	orrs	r5, r6
 8001020:	e621      	b.n	8000c66 <__aeabi_dadd+0x2ee>
 8001022:	0002      	movs	r2, r0
 8001024:	2300      	movs	r3, #0
 8001026:	2100      	movs	r1, #0
 8001028:	e540      	b.n	8000aac <__aeabi_dadd+0x134>
 800102a:	464a      	mov	r2, r9
 800102c:	19d5      	adds	r5, r2, r7
 800102e:	42bd      	cmp	r5, r7
 8001030:	4189      	sbcs	r1, r1
 8001032:	4463      	add	r3, ip
 8001034:	4698      	mov	r8, r3
 8001036:	4249      	negs	r1, r1
 8001038:	4488      	add	r8, r1
 800103a:	e5b3      	b.n	8000ba4 <__aeabi_dadd+0x22c>
 800103c:	2100      	movs	r1, #0
 800103e:	4a01      	ldr	r2, [pc, #4]	; (8001044 <__aeabi_dadd+0x6cc>)
 8001040:	000b      	movs	r3, r1
 8001042:	e533      	b.n	8000aac <__aeabi_dadd+0x134>
 8001044:	000007ff 	.word	0x000007ff
 8001048:	ff7fffff 	.word	0xff7fffff

0800104c <__aeabi_ddiv>:
 800104c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800104e:	4657      	mov	r7, sl
 8001050:	464e      	mov	r6, r9
 8001052:	4645      	mov	r5, r8
 8001054:	46de      	mov	lr, fp
 8001056:	b5e0      	push	{r5, r6, r7, lr}
 8001058:	4681      	mov	r9, r0
 800105a:	0005      	movs	r5, r0
 800105c:	030c      	lsls	r4, r1, #12
 800105e:	0048      	lsls	r0, r1, #1
 8001060:	4692      	mov	sl, r2
 8001062:	001f      	movs	r7, r3
 8001064:	b085      	sub	sp, #20
 8001066:	0b24      	lsrs	r4, r4, #12
 8001068:	0d40      	lsrs	r0, r0, #21
 800106a:	0fce      	lsrs	r6, r1, #31
 800106c:	2800      	cmp	r0, #0
 800106e:	d059      	beq.n	8001124 <__aeabi_ddiv+0xd8>
 8001070:	4b87      	ldr	r3, [pc, #540]	; (8001290 <__aeabi_ddiv+0x244>)
 8001072:	4298      	cmp	r0, r3
 8001074:	d100      	bne.n	8001078 <__aeabi_ddiv+0x2c>
 8001076:	e098      	b.n	80011aa <__aeabi_ddiv+0x15e>
 8001078:	0f6b      	lsrs	r3, r5, #29
 800107a:	00e4      	lsls	r4, r4, #3
 800107c:	431c      	orrs	r4, r3
 800107e:	2380      	movs	r3, #128	; 0x80
 8001080:	041b      	lsls	r3, r3, #16
 8001082:	4323      	orrs	r3, r4
 8001084:	4698      	mov	r8, r3
 8001086:	4b83      	ldr	r3, [pc, #524]	; (8001294 <__aeabi_ddiv+0x248>)
 8001088:	00ed      	lsls	r5, r5, #3
 800108a:	469b      	mov	fp, r3
 800108c:	2300      	movs	r3, #0
 800108e:	4699      	mov	r9, r3
 8001090:	4483      	add	fp, r0
 8001092:	9300      	str	r3, [sp, #0]
 8001094:	033c      	lsls	r4, r7, #12
 8001096:	007b      	lsls	r3, r7, #1
 8001098:	4650      	mov	r0, sl
 800109a:	0b24      	lsrs	r4, r4, #12
 800109c:	0d5b      	lsrs	r3, r3, #21
 800109e:	0fff      	lsrs	r7, r7, #31
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d067      	beq.n	8001174 <__aeabi_ddiv+0x128>
 80010a4:	4a7a      	ldr	r2, [pc, #488]	; (8001290 <__aeabi_ddiv+0x244>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d018      	beq.n	80010dc <__aeabi_ddiv+0x90>
 80010aa:	497a      	ldr	r1, [pc, #488]	; (8001294 <__aeabi_ddiv+0x248>)
 80010ac:	0f42      	lsrs	r2, r0, #29
 80010ae:	468c      	mov	ip, r1
 80010b0:	00e4      	lsls	r4, r4, #3
 80010b2:	4659      	mov	r1, fp
 80010b4:	4314      	orrs	r4, r2
 80010b6:	2280      	movs	r2, #128	; 0x80
 80010b8:	4463      	add	r3, ip
 80010ba:	0412      	lsls	r2, r2, #16
 80010bc:	1acb      	subs	r3, r1, r3
 80010be:	4314      	orrs	r4, r2
 80010c0:	469b      	mov	fp, r3
 80010c2:	00c2      	lsls	r2, r0, #3
 80010c4:	2000      	movs	r0, #0
 80010c6:	0033      	movs	r3, r6
 80010c8:	407b      	eors	r3, r7
 80010ca:	469a      	mov	sl, r3
 80010cc:	464b      	mov	r3, r9
 80010ce:	2b0f      	cmp	r3, #15
 80010d0:	d900      	bls.n	80010d4 <__aeabi_ddiv+0x88>
 80010d2:	e0ef      	b.n	80012b4 <__aeabi_ddiv+0x268>
 80010d4:	4970      	ldr	r1, [pc, #448]	; (8001298 <__aeabi_ddiv+0x24c>)
 80010d6:	009b      	lsls	r3, r3, #2
 80010d8:	58cb      	ldr	r3, [r1, r3]
 80010da:	469f      	mov	pc, r3
 80010dc:	4b6f      	ldr	r3, [pc, #444]	; (800129c <__aeabi_ddiv+0x250>)
 80010de:	4652      	mov	r2, sl
 80010e0:	469c      	mov	ip, r3
 80010e2:	4322      	orrs	r2, r4
 80010e4:	44e3      	add	fp, ip
 80010e6:	2a00      	cmp	r2, #0
 80010e8:	d000      	beq.n	80010ec <__aeabi_ddiv+0xa0>
 80010ea:	e095      	b.n	8001218 <__aeabi_ddiv+0x1cc>
 80010ec:	4649      	mov	r1, r9
 80010ee:	2302      	movs	r3, #2
 80010f0:	4319      	orrs	r1, r3
 80010f2:	4689      	mov	r9, r1
 80010f4:	2400      	movs	r4, #0
 80010f6:	2002      	movs	r0, #2
 80010f8:	e7e5      	b.n	80010c6 <__aeabi_ddiv+0x7a>
 80010fa:	2300      	movs	r3, #0
 80010fc:	2400      	movs	r4, #0
 80010fe:	2500      	movs	r5, #0
 8001100:	4652      	mov	r2, sl
 8001102:	051b      	lsls	r3, r3, #20
 8001104:	4323      	orrs	r3, r4
 8001106:	07d2      	lsls	r2, r2, #31
 8001108:	4313      	orrs	r3, r2
 800110a:	0028      	movs	r0, r5
 800110c:	0019      	movs	r1, r3
 800110e:	b005      	add	sp, #20
 8001110:	bcf0      	pop	{r4, r5, r6, r7}
 8001112:	46bb      	mov	fp, r7
 8001114:	46b2      	mov	sl, r6
 8001116:	46a9      	mov	r9, r5
 8001118:	46a0      	mov	r8, r4
 800111a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800111c:	2400      	movs	r4, #0
 800111e:	2500      	movs	r5, #0
 8001120:	4b5b      	ldr	r3, [pc, #364]	; (8001290 <__aeabi_ddiv+0x244>)
 8001122:	e7ed      	b.n	8001100 <__aeabi_ddiv+0xb4>
 8001124:	464b      	mov	r3, r9
 8001126:	4323      	orrs	r3, r4
 8001128:	4698      	mov	r8, r3
 800112a:	d100      	bne.n	800112e <__aeabi_ddiv+0xe2>
 800112c:	e089      	b.n	8001242 <__aeabi_ddiv+0x1f6>
 800112e:	2c00      	cmp	r4, #0
 8001130:	d100      	bne.n	8001134 <__aeabi_ddiv+0xe8>
 8001132:	e1e0      	b.n	80014f6 <__aeabi_ddiv+0x4aa>
 8001134:	0020      	movs	r0, r4
 8001136:	f001 fa61 	bl	80025fc <__clzsi2>
 800113a:	0001      	movs	r1, r0
 800113c:	0002      	movs	r2, r0
 800113e:	390b      	subs	r1, #11
 8001140:	231d      	movs	r3, #29
 8001142:	1a5b      	subs	r3, r3, r1
 8001144:	4649      	mov	r1, r9
 8001146:	0010      	movs	r0, r2
 8001148:	40d9      	lsrs	r1, r3
 800114a:	3808      	subs	r0, #8
 800114c:	4084      	lsls	r4, r0
 800114e:	000b      	movs	r3, r1
 8001150:	464d      	mov	r5, r9
 8001152:	4323      	orrs	r3, r4
 8001154:	4698      	mov	r8, r3
 8001156:	4085      	lsls	r5, r0
 8001158:	4851      	ldr	r0, [pc, #324]	; (80012a0 <__aeabi_ddiv+0x254>)
 800115a:	033c      	lsls	r4, r7, #12
 800115c:	1a83      	subs	r3, r0, r2
 800115e:	469b      	mov	fp, r3
 8001160:	2300      	movs	r3, #0
 8001162:	4699      	mov	r9, r3
 8001164:	9300      	str	r3, [sp, #0]
 8001166:	007b      	lsls	r3, r7, #1
 8001168:	4650      	mov	r0, sl
 800116a:	0b24      	lsrs	r4, r4, #12
 800116c:	0d5b      	lsrs	r3, r3, #21
 800116e:	0fff      	lsrs	r7, r7, #31
 8001170:	2b00      	cmp	r3, #0
 8001172:	d197      	bne.n	80010a4 <__aeabi_ddiv+0x58>
 8001174:	4652      	mov	r2, sl
 8001176:	4322      	orrs	r2, r4
 8001178:	d055      	beq.n	8001226 <__aeabi_ddiv+0x1da>
 800117a:	2c00      	cmp	r4, #0
 800117c:	d100      	bne.n	8001180 <__aeabi_ddiv+0x134>
 800117e:	e1ca      	b.n	8001516 <__aeabi_ddiv+0x4ca>
 8001180:	0020      	movs	r0, r4
 8001182:	f001 fa3b 	bl	80025fc <__clzsi2>
 8001186:	0002      	movs	r2, r0
 8001188:	3a0b      	subs	r2, #11
 800118a:	231d      	movs	r3, #29
 800118c:	0001      	movs	r1, r0
 800118e:	1a9b      	subs	r3, r3, r2
 8001190:	4652      	mov	r2, sl
 8001192:	3908      	subs	r1, #8
 8001194:	40da      	lsrs	r2, r3
 8001196:	408c      	lsls	r4, r1
 8001198:	4314      	orrs	r4, r2
 800119a:	4652      	mov	r2, sl
 800119c:	408a      	lsls	r2, r1
 800119e:	4b41      	ldr	r3, [pc, #260]	; (80012a4 <__aeabi_ddiv+0x258>)
 80011a0:	4458      	add	r0, fp
 80011a2:	469b      	mov	fp, r3
 80011a4:	4483      	add	fp, r0
 80011a6:	2000      	movs	r0, #0
 80011a8:	e78d      	b.n	80010c6 <__aeabi_ddiv+0x7a>
 80011aa:	464b      	mov	r3, r9
 80011ac:	4323      	orrs	r3, r4
 80011ae:	4698      	mov	r8, r3
 80011b0:	d140      	bne.n	8001234 <__aeabi_ddiv+0x1e8>
 80011b2:	2308      	movs	r3, #8
 80011b4:	4699      	mov	r9, r3
 80011b6:	3b06      	subs	r3, #6
 80011b8:	2500      	movs	r5, #0
 80011ba:	4683      	mov	fp, r0
 80011bc:	9300      	str	r3, [sp, #0]
 80011be:	e769      	b.n	8001094 <__aeabi_ddiv+0x48>
 80011c0:	46b2      	mov	sl, r6
 80011c2:	9b00      	ldr	r3, [sp, #0]
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	d0a9      	beq.n	800111c <__aeabi_ddiv+0xd0>
 80011c8:	2b03      	cmp	r3, #3
 80011ca:	d100      	bne.n	80011ce <__aeabi_ddiv+0x182>
 80011cc:	e211      	b.n	80015f2 <__aeabi_ddiv+0x5a6>
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d093      	beq.n	80010fa <__aeabi_ddiv+0xae>
 80011d2:	4a35      	ldr	r2, [pc, #212]	; (80012a8 <__aeabi_ddiv+0x25c>)
 80011d4:	445a      	add	r2, fp
 80011d6:	2a00      	cmp	r2, #0
 80011d8:	dc00      	bgt.n	80011dc <__aeabi_ddiv+0x190>
 80011da:	e13c      	b.n	8001456 <__aeabi_ddiv+0x40a>
 80011dc:	076b      	lsls	r3, r5, #29
 80011de:	d000      	beq.n	80011e2 <__aeabi_ddiv+0x196>
 80011e0:	e1a7      	b.n	8001532 <__aeabi_ddiv+0x4e6>
 80011e2:	08ed      	lsrs	r5, r5, #3
 80011e4:	4643      	mov	r3, r8
 80011e6:	01db      	lsls	r3, r3, #7
 80011e8:	d506      	bpl.n	80011f8 <__aeabi_ddiv+0x1ac>
 80011ea:	4642      	mov	r2, r8
 80011ec:	4b2f      	ldr	r3, [pc, #188]	; (80012ac <__aeabi_ddiv+0x260>)
 80011ee:	401a      	ands	r2, r3
 80011f0:	4690      	mov	r8, r2
 80011f2:	2280      	movs	r2, #128	; 0x80
 80011f4:	00d2      	lsls	r2, r2, #3
 80011f6:	445a      	add	r2, fp
 80011f8:	4b2d      	ldr	r3, [pc, #180]	; (80012b0 <__aeabi_ddiv+0x264>)
 80011fa:	429a      	cmp	r2, r3
 80011fc:	dc8e      	bgt.n	800111c <__aeabi_ddiv+0xd0>
 80011fe:	4643      	mov	r3, r8
 8001200:	0552      	lsls	r2, r2, #21
 8001202:	0758      	lsls	r0, r3, #29
 8001204:	025c      	lsls	r4, r3, #9
 8001206:	4305      	orrs	r5, r0
 8001208:	0b24      	lsrs	r4, r4, #12
 800120a:	0d53      	lsrs	r3, r2, #21
 800120c:	e778      	b.n	8001100 <__aeabi_ddiv+0xb4>
 800120e:	46ba      	mov	sl, r7
 8001210:	46a0      	mov	r8, r4
 8001212:	0015      	movs	r5, r2
 8001214:	9000      	str	r0, [sp, #0]
 8001216:	e7d4      	b.n	80011c2 <__aeabi_ddiv+0x176>
 8001218:	464a      	mov	r2, r9
 800121a:	2303      	movs	r3, #3
 800121c:	431a      	orrs	r2, r3
 800121e:	4691      	mov	r9, r2
 8001220:	2003      	movs	r0, #3
 8001222:	4652      	mov	r2, sl
 8001224:	e74f      	b.n	80010c6 <__aeabi_ddiv+0x7a>
 8001226:	4649      	mov	r1, r9
 8001228:	2301      	movs	r3, #1
 800122a:	4319      	orrs	r1, r3
 800122c:	4689      	mov	r9, r1
 800122e:	2400      	movs	r4, #0
 8001230:	2001      	movs	r0, #1
 8001232:	e748      	b.n	80010c6 <__aeabi_ddiv+0x7a>
 8001234:	230c      	movs	r3, #12
 8001236:	4699      	mov	r9, r3
 8001238:	3b09      	subs	r3, #9
 800123a:	46a0      	mov	r8, r4
 800123c:	4683      	mov	fp, r0
 800123e:	9300      	str	r3, [sp, #0]
 8001240:	e728      	b.n	8001094 <__aeabi_ddiv+0x48>
 8001242:	2304      	movs	r3, #4
 8001244:	4699      	mov	r9, r3
 8001246:	2300      	movs	r3, #0
 8001248:	469b      	mov	fp, r3
 800124a:	3301      	adds	r3, #1
 800124c:	2500      	movs	r5, #0
 800124e:	9300      	str	r3, [sp, #0]
 8001250:	e720      	b.n	8001094 <__aeabi_ddiv+0x48>
 8001252:	2300      	movs	r3, #0
 8001254:	2480      	movs	r4, #128	; 0x80
 8001256:	469a      	mov	sl, r3
 8001258:	2500      	movs	r5, #0
 800125a:	4b0d      	ldr	r3, [pc, #52]	; (8001290 <__aeabi_ddiv+0x244>)
 800125c:	0324      	lsls	r4, r4, #12
 800125e:	e74f      	b.n	8001100 <__aeabi_ddiv+0xb4>
 8001260:	2380      	movs	r3, #128	; 0x80
 8001262:	4641      	mov	r1, r8
 8001264:	031b      	lsls	r3, r3, #12
 8001266:	4219      	tst	r1, r3
 8001268:	d008      	beq.n	800127c <__aeabi_ddiv+0x230>
 800126a:	421c      	tst	r4, r3
 800126c:	d106      	bne.n	800127c <__aeabi_ddiv+0x230>
 800126e:	431c      	orrs	r4, r3
 8001270:	0324      	lsls	r4, r4, #12
 8001272:	46ba      	mov	sl, r7
 8001274:	0015      	movs	r5, r2
 8001276:	4b06      	ldr	r3, [pc, #24]	; (8001290 <__aeabi_ddiv+0x244>)
 8001278:	0b24      	lsrs	r4, r4, #12
 800127a:	e741      	b.n	8001100 <__aeabi_ddiv+0xb4>
 800127c:	2480      	movs	r4, #128	; 0x80
 800127e:	4643      	mov	r3, r8
 8001280:	0324      	lsls	r4, r4, #12
 8001282:	431c      	orrs	r4, r3
 8001284:	0324      	lsls	r4, r4, #12
 8001286:	46b2      	mov	sl, r6
 8001288:	4b01      	ldr	r3, [pc, #4]	; (8001290 <__aeabi_ddiv+0x244>)
 800128a:	0b24      	lsrs	r4, r4, #12
 800128c:	e738      	b.n	8001100 <__aeabi_ddiv+0xb4>
 800128e:	46c0      	nop			; (mov r8, r8)
 8001290:	000007ff 	.word	0x000007ff
 8001294:	fffffc01 	.word	0xfffffc01
 8001298:	08007414 	.word	0x08007414
 800129c:	fffff801 	.word	0xfffff801
 80012a0:	fffffc0d 	.word	0xfffffc0d
 80012a4:	000003f3 	.word	0x000003f3
 80012a8:	000003ff 	.word	0x000003ff
 80012ac:	feffffff 	.word	0xfeffffff
 80012b0:	000007fe 	.word	0x000007fe
 80012b4:	4544      	cmp	r4, r8
 80012b6:	d200      	bcs.n	80012ba <__aeabi_ddiv+0x26e>
 80012b8:	e116      	b.n	80014e8 <__aeabi_ddiv+0x49c>
 80012ba:	d100      	bne.n	80012be <__aeabi_ddiv+0x272>
 80012bc:	e111      	b.n	80014e2 <__aeabi_ddiv+0x496>
 80012be:	2301      	movs	r3, #1
 80012c0:	425b      	negs	r3, r3
 80012c2:	469c      	mov	ip, r3
 80012c4:	002e      	movs	r6, r5
 80012c6:	4640      	mov	r0, r8
 80012c8:	2500      	movs	r5, #0
 80012ca:	44e3      	add	fp, ip
 80012cc:	0223      	lsls	r3, r4, #8
 80012ce:	0e14      	lsrs	r4, r2, #24
 80012d0:	431c      	orrs	r4, r3
 80012d2:	0c1b      	lsrs	r3, r3, #16
 80012d4:	4699      	mov	r9, r3
 80012d6:	0423      	lsls	r3, r4, #16
 80012d8:	0c1f      	lsrs	r7, r3, #16
 80012da:	0212      	lsls	r2, r2, #8
 80012dc:	4649      	mov	r1, r9
 80012de:	9200      	str	r2, [sp, #0]
 80012e0:	9701      	str	r7, [sp, #4]
 80012e2:	f7fe ff97 	bl	8000214 <__aeabi_uidivmod>
 80012e6:	0002      	movs	r2, r0
 80012e8:	437a      	muls	r2, r7
 80012ea:	040b      	lsls	r3, r1, #16
 80012ec:	0c31      	lsrs	r1, r6, #16
 80012ee:	4680      	mov	r8, r0
 80012f0:	4319      	orrs	r1, r3
 80012f2:	428a      	cmp	r2, r1
 80012f4:	d90b      	bls.n	800130e <__aeabi_ddiv+0x2c2>
 80012f6:	2301      	movs	r3, #1
 80012f8:	425b      	negs	r3, r3
 80012fa:	469c      	mov	ip, r3
 80012fc:	1909      	adds	r1, r1, r4
 80012fe:	44e0      	add	r8, ip
 8001300:	428c      	cmp	r4, r1
 8001302:	d804      	bhi.n	800130e <__aeabi_ddiv+0x2c2>
 8001304:	428a      	cmp	r2, r1
 8001306:	d902      	bls.n	800130e <__aeabi_ddiv+0x2c2>
 8001308:	1e83      	subs	r3, r0, #2
 800130a:	4698      	mov	r8, r3
 800130c:	1909      	adds	r1, r1, r4
 800130e:	1a88      	subs	r0, r1, r2
 8001310:	4649      	mov	r1, r9
 8001312:	f7fe ff7f 	bl	8000214 <__aeabi_uidivmod>
 8001316:	0409      	lsls	r1, r1, #16
 8001318:	468c      	mov	ip, r1
 800131a:	0431      	lsls	r1, r6, #16
 800131c:	4666      	mov	r6, ip
 800131e:	9a01      	ldr	r2, [sp, #4]
 8001320:	0c09      	lsrs	r1, r1, #16
 8001322:	4342      	muls	r2, r0
 8001324:	0003      	movs	r3, r0
 8001326:	4331      	orrs	r1, r6
 8001328:	428a      	cmp	r2, r1
 800132a:	d904      	bls.n	8001336 <__aeabi_ddiv+0x2ea>
 800132c:	1909      	adds	r1, r1, r4
 800132e:	3b01      	subs	r3, #1
 8001330:	428c      	cmp	r4, r1
 8001332:	d800      	bhi.n	8001336 <__aeabi_ddiv+0x2ea>
 8001334:	e111      	b.n	800155a <__aeabi_ddiv+0x50e>
 8001336:	1a89      	subs	r1, r1, r2
 8001338:	4642      	mov	r2, r8
 800133a:	9e00      	ldr	r6, [sp, #0]
 800133c:	0412      	lsls	r2, r2, #16
 800133e:	431a      	orrs	r2, r3
 8001340:	0c33      	lsrs	r3, r6, #16
 8001342:	001f      	movs	r7, r3
 8001344:	0c10      	lsrs	r0, r2, #16
 8001346:	4690      	mov	r8, r2
 8001348:	9302      	str	r3, [sp, #8]
 800134a:	0413      	lsls	r3, r2, #16
 800134c:	0432      	lsls	r2, r6, #16
 800134e:	0c16      	lsrs	r6, r2, #16
 8001350:	0032      	movs	r2, r6
 8001352:	0c1b      	lsrs	r3, r3, #16
 8001354:	435a      	muls	r2, r3
 8001356:	9603      	str	r6, [sp, #12]
 8001358:	437b      	muls	r3, r7
 800135a:	4346      	muls	r6, r0
 800135c:	4378      	muls	r0, r7
 800135e:	0c17      	lsrs	r7, r2, #16
 8001360:	46bc      	mov	ip, r7
 8001362:	199b      	adds	r3, r3, r6
 8001364:	4463      	add	r3, ip
 8001366:	429e      	cmp	r6, r3
 8001368:	d903      	bls.n	8001372 <__aeabi_ddiv+0x326>
 800136a:	2680      	movs	r6, #128	; 0x80
 800136c:	0276      	lsls	r6, r6, #9
 800136e:	46b4      	mov	ip, r6
 8001370:	4460      	add	r0, ip
 8001372:	0c1e      	lsrs	r6, r3, #16
 8001374:	1830      	adds	r0, r6, r0
 8001376:	0416      	lsls	r6, r2, #16
 8001378:	041b      	lsls	r3, r3, #16
 800137a:	0c36      	lsrs	r6, r6, #16
 800137c:	199e      	adds	r6, r3, r6
 800137e:	4281      	cmp	r1, r0
 8001380:	d200      	bcs.n	8001384 <__aeabi_ddiv+0x338>
 8001382:	e09c      	b.n	80014be <__aeabi_ddiv+0x472>
 8001384:	d100      	bne.n	8001388 <__aeabi_ddiv+0x33c>
 8001386:	e097      	b.n	80014b8 <__aeabi_ddiv+0x46c>
 8001388:	1bae      	subs	r6, r5, r6
 800138a:	1a09      	subs	r1, r1, r0
 800138c:	42b5      	cmp	r5, r6
 800138e:	4180      	sbcs	r0, r0
 8001390:	4240      	negs	r0, r0
 8001392:	1a08      	subs	r0, r1, r0
 8001394:	4284      	cmp	r4, r0
 8001396:	d100      	bne.n	800139a <__aeabi_ddiv+0x34e>
 8001398:	e111      	b.n	80015be <__aeabi_ddiv+0x572>
 800139a:	4649      	mov	r1, r9
 800139c:	f7fe ff3a 	bl	8000214 <__aeabi_uidivmod>
 80013a0:	9a01      	ldr	r2, [sp, #4]
 80013a2:	040b      	lsls	r3, r1, #16
 80013a4:	4342      	muls	r2, r0
 80013a6:	0c31      	lsrs	r1, r6, #16
 80013a8:	0005      	movs	r5, r0
 80013aa:	4319      	orrs	r1, r3
 80013ac:	428a      	cmp	r2, r1
 80013ae:	d907      	bls.n	80013c0 <__aeabi_ddiv+0x374>
 80013b0:	1909      	adds	r1, r1, r4
 80013b2:	3d01      	subs	r5, #1
 80013b4:	428c      	cmp	r4, r1
 80013b6:	d803      	bhi.n	80013c0 <__aeabi_ddiv+0x374>
 80013b8:	428a      	cmp	r2, r1
 80013ba:	d901      	bls.n	80013c0 <__aeabi_ddiv+0x374>
 80013bc:	1e85      	subs	r5, r0, #2
 80013be:	1909      	adds	r1, r1, r4
 80013c0:	1a88      	subs	r0, r1, r2
 80013c2:	4649      	mov	r1, r9
 80013c4:	f7fe ff26 	bl	8000214 <__aeabi_uidivmod>
 80013c8:	0409      	lsls	r1, r1, #16
 80013ca:	468c      	mov	ip, r1
 80013cc:	0431      	lsls	r1, r6, #16
 80013ce:	4666      	mov	r6, ip
 80013d0:	9a01      	ldr	r2, [sp, #4]
 80013d2:	0c09      	lsrs	r1, r1, #16
 80013d4:	4342      	muls	r2, r0
 80013d6:	0003      	movs	r3, r0
 80013d8:	4331      	orrs	r1, r6
 80013da:	428a      	cmp	r2, r1
 80013dc:	d907      	bls.n	80013ee <__aeabi_ddiv+0x3a2>
 80013de:	1909      	adds	r1, r1, r4
 80013e0:	3b01      	subs	r3, #1
 80013e2:	428c      	cmp	r4, r1
 80013e4:	d803      	bhi.n	80013ee <__aeabi_ddiv+0x3a2>
 80013e6:	428a      	cmp	r2, r1
 80013e8:	d901      	bls.n	80013ee <__aeabi_ddiv+0x3a2>
 80013ea:	1e83      	subs	r3, r0, #2
 80013ec:	1909      	adds	r1, r1, r4
 80013ee:	9e03      	ldr	r6, [sp, #12]
 80013f0:	1a89      	subs	r1, r1, r2
 80013f2:	0032      	movs	r2, r6
 80013f4:	042d      	lsls	r5, r5, #16
 80013f6:	431d      	orrs	r5, r3
 80013f8:	9f02      	ldr	r7, [sp, #8]
 80013fa:	042b      	lsls	r3, r5, #16
 80013fc:	0c1b      	lsrs	r3, r3, #16
 80013fe:	435a      	muls	r2, r3
 8001400:	437b      	muls	r3, r7
 8001402:	469c      	mov	ip, r3
 8001404:	0c28      	lsrs	r0, r5, #16
 8001406:	4346      	muls	r6, r0
 8001408:	0c13      	lsrs	r3, r2, #16
 800140a:	44b4      	add	ip, r6
 800140c:	4463      	add	r3, ip
 800140e:	4378      	muls	r0, r7
 8001410:	429e      	cmp	r6, r3
 8001412:	d903      	bls.n	800141c <__aeabi_ddiv+0x3d0>
 8001414:	2680      	movs	r6, #128	; 0x80
 8001416:	0276      	lsls	r6, r6, #9
 8001418:	46b4      	mov	ip, r6
 800141a:	4460      	add	r0, ip
 800141c:	0c1e      	lsrs	r6, r3, #16
 800141e:	0412      	lsls	r2, r2, #16
 8001420:	041b      	lsls	r3, r3, #16
 8001422:	0c12      	lsrs	r2, r2, #16
 8001424:	1830      	adds	r0, r6, r0
 8001426:	189b      	adds	r3, r3, r2
 8001428:	4281      	cmp	r1, r0
 800142a:	d306      	bcc.n	800143a <__aeabi_ddiv+0x3ee>
 800142c:	d002      	beq.n	8001434 <__aeabi_ddiv+0x3e8>
 800142e:	2301      	movs	r3, #1
 8001430:	431d      	orrs	r5, r3
 8001432:	e6ce      	b.n	80011d2 <__aeabi_ddiv+0x186>
 8001434:	2b00      	cmp	r3, #0
 8001436:	d100      	bne.n	800143a <__aeabi_ddiv+0x3ee>
 8001438:	e6cb      	b.n	80011d2 <__aeabi_ddiv+0x186>
 800143a:	1861      	adds	r1, r4, r1
 800143c:	1e6e      	subs	r6, r5, #1
 800143e:	42a1      	cmp	r1, r4
 8001440:	d200      	bcs.n	8001444 <__aeabi_ddiv+0x3f8>
 8001442:	e0a4      	b.n	800158e <__aeabi_ddiv+0x542>
 8001444:	4281      	cmp	r1, r0
 8001446:	d200      	bcs.n	800144a <__aeabi_ddiv+0x3fe>
 8001448:	e0c9      	b.n	80015de <__aeabi_ddiv+0x592>
 800144a:	d100      	bne.n	800144e <__aeabi_ddiv+0x402>
 800144c:	e0d9      	b.n	8001602 <__aeabi_ddiv+0x5b6>
 800144e:	0035      	movs	r5, r6
 8001450:	e7ed      	b.n	800142e <__aeabi_ddiv+0x3e2>
 8001452:	2501      	movs	r5, #1
 8001454:	426d      	negs	r5, r5
 8001456:	2101      	movs	r1, #1
 8001458:	1a89      	subs	r1, r1, r2
 800145a:	2938      	cmp	r1, #56	; 0x38
 800145c:	dd00      	ble.n	8001460 <__aeabi_ddiv+0x414>
 800145e:	e64c      	b.n	80010fa <__aeabi_ddiv+0xae>
 8001460:	291f      	cmp	r1, #31
 8001462:	dc00      	bgt.n	8001466 <__aeabi_ddiv+0x41a>
 8001464:	e07f      	b.n	8001566 <__aeabi_ddiv+0x51a>
 8001466:	231f      	movs	r3, #31
 8001468:	425b      	negs	r3, r3
 800146a:	1a9a      	subs	r2, r3, r2
 800146c:	4643      	mov	r3, r8
 800146e:	40d3      	lsrs	r3, r2
 8001470:	2920      	cmp	r1, #32
 8001472:	d004      	beq.n	800147e <__aeabi_ddiv+0x432>
 8001474:	4644      	mov	r4, r8
 8001476:	4a65      	ldr	r2, [pc, #404]	; (800160c <__aeabi_ddiv+0x5c0>)
 8001478:	445a      	add	r2, fp
 800147a:	4094      	lsls	r4, r2
 800147c:	4325      	orrs	r5, r4
 800147e:	1e6a      	subs	r2, r5, #1
 8001480:	4195      	sbcs	r5, r2
 8001482:	2207      	movs	r2, #7
 8001484:	432b      	orrs	r3, r5
 8001486:	0015      	movs	r5, r2
 8001488:	2400      	movs	r4, #0
 800148a:	401d      	ands	r5, r3
 800148c:	421a      	tst	r2, r3
 800148e:	d100      	bne.n	8001492 <__aeabi_ddiv+0x446>
 8001490:	e0a1      	b.n	80015d6 <__aeabi_ddiv+0x58a>
 8001492:	220f      	movs	r2, #15
 8001494:	2400      	movs	r4, #0
 8001496:	401a      	ands	r2, r3
 8001498:	2a04      	cmp	r2, #4
 800149a:	d100      	bne.n	800149e <__aeabi_ddiv+0x452>
 800149c:	e098      	b.n	80015d0 <__aeabi_ddiv+0x584>
 800149e:	1d1a      	adds	r2, r3, #4
 80014a0:	429a      	cmp	r2, r3
 80014a2:	419b      	sbcs	r3, r3
 80014a4:	425b      	negs	r3, r3
 80014a6:	18e4      	adds	r4, r4, r3
 80014a8:	0013      	movs	r3, r2
 80014aa:	0222      	lsls	r2, r4, #8
 80014ac:	d400      	bmi.n	80014b0 <__aeabi_ddiv+0x464>
 80014ae:	e08f      	b.n	80015d0 <__aeabi_ddiv+0x584>
 80014b0:	2301      	movs	r3, #1
 80014b2:	2400      	movs	r4, #0
 80014b4:	2500      	movs	r5, #0
 80014b6:	e623      	b.n	8001100 <__aeabi_ddiv+0xb4>
 80014b8:	42b5      	cmp	r5, r6
 80014ba:	d300      	bcc.n	80014be <__aeabi_ddiv+0x472>
 80014bc:	e764      	b.n	8001388 <__aeabi_ddiv+0x33c>
 80014be:	4643      	mov	r3, r8
 80014c0:	1e5a      	subs	r2, r3, #1
 80014c2:	9b00      	ldr	r3, [sp, #0]
 80014c4:	469c      	mov	ip, r3
 80014c6:	4465      	add	r5, ip
 80014c8:	001f      	movs	r7, r3
 80014ca:	429d      	cmp	r5, r3
 80014cc:	419b      	sbcs	r3, r3
 80014ce:	425b      	negs	r3, r3
 80014d0:	191b      	adds	r3, r3, r4
 80014d2:	18c9      	adds	r1, r1, r3
 80014d4:	428c      	cmp	r4, r1
 80014d6:	d23a      	bcs.n	800154e <__aeabi_ddiv+0x502>
 80014d8:	4288      	cmp	r0, r1
 80014da:	d863      	bhi.n	80015a4 <__aeabi_ddiv+0x558>
 80014dc:	d060      	beq.n	80015a0 <__aeabi_ddiv+0x554>
 80014de:	4690      	mov	r8, r2
 80014e0:	e752      	b.n	8001388 <__aeabi_ddiv+0x33c>
 80014e2:	42aa      	cmp	r2, r5
 80014e4:	d900      	bls.n	80014e8 <__aeabi_ddiv+0x49c>
 80014e6:	e6ea      	b.n	80012be <__aeabi_ddiv+0x272>
 80014e8:	4643      	mov	r3, r8
 80014ea:	07de      	lsls	r6, r3, #31
 80014ec:	0858      	lsrs	r0, r3, #1
 80014ee:	086b      	lsrs	r3, r5, #1
 80014f0:	431e      	orrs	r6, r3
 80014f2:	07ed      	lsls	r5, r5, #31
 80014f4:	e6ea      	b.n	80012cc <__aeabi_ddiv+0x280>
 80014f6:	4648      	mov	r0, r9
 80014f8:	f001 f880 	bl	80025fc <__clzsi2>
 80014fc:	0001      	movs	r1, r0
 80014fe:	0002      	movs	r2, r0
 8001500:	3115      	adds	r1, #21
 8001502:	3220      	adds	r2, #32
 8001504:	291c      	cmp	r1, #28
 8001506:	dc00      	bgt.n	800150a <__aeabi_ddiv+0x4be>
 8001508:	e61a      	b.n	8001140 <__aeabi_ddiv+0xf4>
 800150a:	464b      	mov	r3, r9
 800150c:	3808      	subs	r0, #8
 800150e:	4083      	lsls	r3, r0
 8001510:	2500      	movs	r5, #0
 8001512:	4698      	mov	r8, r3
 8001514:	e620      	b.n	8001158 <__aeabi_ddiv+0x10c>
 8001516:	f001 f871 	bl	80025fc <__clzsi2>
 800151a:	0003      	movs	r3, r0
 800151c:	001a      	movs	r2, r3
 800151e:	3215      	adds	r2, #21
 8001520:	3020      	adds	r0, #32
 8001522:	2a1c      	cmp	r2, #28
 8001524:	dc00      	bgt.n	8001528 <__aeabi_ddiv+0x4dc>
 8001526:	e630      	b.n	800118a <__aeabi_ddiv+0x13e>
 8001528:	4654      	mov	r4, sl
 800152a:	3b08      	subs	r3, #8
 800152c:	2200      	movs	r2, #0
 800152e:	409c      	lsls	r4, r3
 8001530:	e635      	b.n	800119e <__aeabi_ddiv+0x152>
 8001532:	230f      	movs	r3, #15
 8001534:	402b      	ands	r3, r5
 8001536:	2b04      	cmp	r3, #4
 8001538:	d100      	bne.n	800153c <__aeabi_ddiv+0x4f0>
 800153a:	e652      	b.n	80011e2 <__aeabi_ddiv+0x196>
 800153c:	2305      	movs	r3, #5
 800153e:	425b      	negs	r3, r3
 8001540:	42ab      	cmp	r3, r5
 8001542:	419b      	sbcs	r3, r3
 8001544:	3504      	adds	r5, #4
 8001546:	425b      	negs	r3, r3
 8001548:	08ed      	lsrs	r5, r5, #3
 800154a:	4498      	add	r8, r3
 800154c:	e64a      	b.n	80011e4 <__aeabi_ddiv+0x198>
 800154e:	428c      	cmp	r4, r1
 8001550:	d1c5      	bne.n	80014de <__aeabi_ddiv+0x492>
 8001552:	42af      	cmp	r7, r5
 8001554:	d9c0      	bls.n	80014d8 <__aeabi_ddiv+0x48c>
 8001556:	4690      	mov	r8, r2
 8001558:	e716      	b.n	8001388 <__aeabi_ddiv+0x33c>
 800155a:	428a      	cmp	r2, r1
 800155c:	d800      	bhi.n	8001560 <__aeabi_ddiv+0x514>
 800155e:	e6ea      	b.n	8001336 <__aeabi_ddiv+0x2ea>
 8001560:	1e83      	subs	r3, r0, #2
 8001562:	1909      	adds	r1, r1, r4
 8001564:	e6e7      	b.n	8001336 <__aeabi_ddiv+0x2ea>
 8001566:	4a2a      	ldr	r2, [pc, #168]	; (8001610 <__aeabi_ddiv+0x5c4>)
 8001568:	0028      	movs	r0, r5
 800156a:	445a      	add	r2, fp
 800156c:	4643      	mov	r3, r8
 800156e:	4095      	lsls	r5, r2
 8001570:	4093      	lsls	r3, r2
 8001572:	40c8      	lsrs	r0, r1
 8001574:	1e6a      	subs	r2, r5, #1
 8001576:	4195      	sbcs	r5, r2
 8001578:	4644      	mov	r4, r8
 800157a:	4303      	orrs	r3, r0
 800157c:	432b      	orrs	r3, r5
 800157e:	40cc      	lsrs	r4, r1
 8001580:	075a      	lsls	r2, r3, #29
 8001582:	d092      	beq.n	80014aa <__aeabi_ddiv+0x45e>
 8001584:	220f      	movs	r2, #15
 8001586:	401a      	ands	r2, r3
 8001588:	2a04      	cmp	r2, #4
 800158a:	d188      	bne.n	800149e <__aeabi_ddiv+0x452>
 800158c:	e78d      	b.n	80014aa <__aeabi_ddiv+0x45e>
 800158e:	0035      	movs	r5, r6
 8001590:	4281      	cmp	r1, r0
 8001592:	d000      	beq.n	8001596 <__aeabi_ddiv+0x54a>
 8001594:	e74b      	b.n	800142e <__aeabi_ddiv+0x3e2>
 8001596:	9a00      	ldr	r2, [sp, #0]
 8001598:	4293      	cmp	r3, r2
 800159a:	d000      	beq.n	800159e <__aeabi_ddiv+0x552>
 800159c:	e747      	b.n	800142e <__aeabi_ddiv+0x3e2>
 800159e:	e618      	b.n	80011d2 <__aeabi_ddiv+0x186>
 80015a0:	42ae      	cmp	r6, r5
 80015a2:	d99c      	bls.n	80014de <__aeabi_ddiv+0x492>
 80015a4:	2302      	movs	r3, #2
 80015a6:	425b      	negs	r3, r3
 80015a8:	469c      	mov	ip, r3
 80015aa:	9b00      	ldr	r3, [sp, #0]
 80015ac:	44e0      	add	r8, ip
 80015ae:	469c      	mov	ip, r3
 80015b0:	4465      	add	r5, ip
 80015b2:	429d      	cmp	r5, r3
 80015b4:	419b      	sbcs	r3, r3
 80015b6:	425b      	negs	r3, r3
 80015b8:	191b      	adds	r3, r3, r4
 80015ba:	18c9      	adds	r1, r1, r3
 80015bc:	e6e4      	b.n	8001388 <__aeabi_ddiv+0x33c>
 80015be:	4a15      	ldr	r2, [pc, #84]	; (8001614 <__aeabi_ddiv+0x5c8>)
 80015c0:	445a      	add	r2, fp
 80015c2:	2a00      	cmp	r2, #0
 80015c4:	dc00      	bgt.n	80015c8 <__aeabi_ddiv+0x57c>
 80015c6:	e744      	b.n	8001452 <__aeabi_ddiv+0x406>
 80015c8:	2301      	movs	r3, #1
 80015ca:	2500      	movs	r5, #0
 80015cc:	4498      	add	r8, r3
 80015ce:	e609      	b.n	80011e4 <__aeabi_ddiv+0x198>
 80015d0:	0765      	lsls	r5, r4, #29
 80015d2:	0264      	lsls	r4, r4, #9
 80015d4:	0b24      	lsrs	r4, r4, #12
 80015d6:	08db      	lsrs	r3, r3, #3
 80015d8:	431d      	orrs	r5, r3
 80015da:	2300      	movs	r3, #0
 80015dc:	e590      	b.n	8001100 <__aeabi_ddiv+0xb4>
 80015de:	9e00      	ldr	r6, [sp, #0]
 80015e0:	3d02      	subs	r5, #2
 80015e2:	0072      	lsls	r2, r6, #1
 80015e4:	42b2      	cmp	r2, r6
 80015e6:	41bf      	sbcs	r7, r7
 80015e8:	427f      	negs	r7, r7
 80015ea:	193c      	adds	r4, r7, r4
 80015ec:	1909      	adds	r1, r1, r4
 80015ee:	9200      	str	r2, [sp, #0]
 80015f0:	e7ce      	b.n	8001590 <__aeabi_ddiv+0x544>
 80015f2:	2480      	movs	r4, #128	; 0x80
 80015f4:	4643      	mov	r3, r8
 80015f6:	0324      	lsls	r4, r4, #12
 80015f8:	431c      	orrs	r4, r3
 80015fa:	0324      	lsls	r4, r4, #12
 80015fc:	4b06      	ldr	r3, [pc, #24]	; (8001618 <__aeabi_ddiv+0x5cc>)
 80015fe:	0b24      	lsrs	r4, r4, #12
 8001600:	e57e      	b.n	8001100 <__aeabi_ddiv+0xb4>
 8001602:	9a00      	ldr	r2, [sp, #0]
 8001604:	429a      	cmp	r2, r3
 8001606:	d3ea      	bcc.n	80015de <__aeabi_ddiv+0x592>
 8001608:	0035      	movs	r5, r6
 800160a:	e7c4      	b.n	8001596 <__aeabi_ddiv+0x54a>
 800160c:	0000043e 	.word	0x0000043e
 8001610:	0000041e 	.word	0x0000041e
 8001614:	000003ff 	.word	0x000003ff
 8001618:	000007ff 	.word	0x000007ff

0800161c <__eqdf2>:
 800161c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800161e:	464f      	mov	r7, r9
 8001620:	4646      	mov	r6, r8
 8001622:	46d6      	mov	lr, sl
 8001624:	4694      	mov	ip, r2
 8001626:	4691      	mov	r9, r2
 8001628:	031a      	lsls	r2, r3, #12
 800162a:	0b12      	lsrs	r2, r2, #12
 800162c:	4d18      	ldr	r5, [pc, #96]	; (8001690 <__eqdf2+0x74>)
 800162e:	b5c0      	push	{r6, r7, lr}
 8001630:	004c      	lsls	r4, r1, #1
 8001632:	030f      	lsls	r7, r1, #12
 8001634:	4692      	mov	sl, r2
 8001636:	005a      	lsls	r2, r3, #1
 8001638:	0006      	movs	r6, r0
 800163a:	4680      	mov	r8, r0
 800163c:	0b3f      	lsrs	r7, r7, #12
 800163e:	2001      	movs	r0, #1
 8001640:	0d64      	lsrs	r4, r4, #21
 8001642:	0fc9      	lsrs	r1, r1, #31
 8001644:	0d52      	lsrs	r2, r2, #21
 8001646:	0fdb      	lsrs	r3, r3, #31
 8001648:	42ac      	cmp	r4, r5
 800164a:	d00a      	beq.n	8001662 <__eqdf2+0x46>
 800164c:	42aa      	cmp	r2, r5
 800164e:	d003      	beq.n	8001658 <__eqdf2+0x3c>
 8001650:	4294      	cmp	r4, r2
 8001652:	d101      	bne.n	8001658 <__eqdf2+0x3c>
 8001654:	4557      	cmp	r7, sl
 8001656:	d00d      	beq.n	8001674 <__eqdf2+0x58>
 8001658:	bce0      	pop	{r5, r6, r7}
 800165a:	46ba      	mov	sl, r7
 800165c:	46b1      	mov	r9, r6
 800165e:	46a8      	mov	r8, r5
 8001660:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001662:	003d      	movs	r5, r7
 8001664:	4335      	orrs	r5, r6
 8001666:	d1f7      	bne.n	8001658 <__eqdf2+0x3c>
 8001668:	42a2      	cmp	r2, r4
 800166a:	d1f5      	bne.n	8001658 <__eqdf2+0x3c>
 800166c:	4652      	mov	r2, sl
 800166e:	4665      	mov	r5, ip
 8001670:	432a      	orrs	r2, r5
 8001672:	d1f1      	bne.n	8001658 <__eqdf2+0x3c>
 8001674:	2001      	movs	r0, #1
 8001676:	45c8      	cmp	r8, r9
 8001678:	d1ee      	bne.n	8001658 <__eqdf2+0x3c>
 800167a:	4299      	cmp	r1, r3
 800167c:	d006      	beq.n	800168c <__eqdf2+0x70>
 800167e:	2c00      	cmp	r4, #0
 8001680:	d1ea      	bne.n	8001658 <__eqdf2+0x3c>
 8001682:	433e      	orrs	r6, r7
 8001684:	0030      	movs	r0, r6
 8001686:	1e46      	subs	r6, r0, #1
 8001688:	41b0      	sbcs	r0, r6
 800168a:	e7e5      	b.n	8001658 <__eqdf2+0x3c>
 800168c:	2000      	movs	r0, #0
 800168e:	e7e3      	b.n	8001658 <__eqdf2+0x3c>
 8001690:	000007ff 	.word	0x000007ff

08001694 <__gedf2>:
 8001694:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001696:	464e      	mov	r6, r9
 8001698:	4645      	mov	r5, r8
 800169a:	4657      	mov	r7, sl
 800169c:	46de      	mov	lr, fp
 800169e:	0004      	movs	r4, r0
 80016a0:	0018      	movs	r0, r3
 80016a2:	b5e0      	push	{r5, r6, r7, lr}
 80016a4:	0016      	movs	r6, r2
 80016a6:	031b      	lsls	r3, r3, #12
 80016a8:	0b1b      	lsrs	r3, r3, #12
 80016aa:	4d32      	ldr	r5, [pc, #200]	; (8001774 <__gedf2+0xe0>)
 80016ac:	030f      	lsls	r7, r1, #12
 80016ae:	004a      	lsls	r2, r1, #1
 80016b0:	4699      	mov	r9, r3
 80016b2:	0043      	lsls	r3, r0, #1
 80016b4:	46a4      	mov	ip, r4
 80016b6:	46b0      	mov	r8, r6
 80016b8:	0b3f      	lsrs	r7, r7, #12
 80016ba:	0d52      	lsrs	r2, r2, #21
 80016bc:	0fc9      	lsrs	r1, r1, #31
 80016be:	0d5b      	lsrs	r3, r3, #21
 80016c0:	0fc0      	lsrs	r0, r0, #31
 80016c2:	42aa      	cmp	r2, r5
 80016c4:	d029      	beq.n	800171a <__gedf2+0x86>
 80016c6:	42ab      	cmp	r3, r5
 80016c8:	d018      	beq.n	80016fc <__gedf2+0x68>
 80016ca:	2a00      	cmp	r2, #0
 80016cc:	d12a      	bne.n	8001724 <__gedf2+0x90>
 80016ce:	433c      	orrs	r4, r7
 80016d0:	46a3      	mov	fp, r4
 80016d2:	4265      	negs	r5, r4
 80016d4:	4165      	adcs	r5, r4
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d102      	bne.n	80016e0 <__gedf2+0x4c>
 80016da:	464c      	mov	r4, r9
 80016dc:	4326      	orrs	r6, r4
 80016de:	d027      	beq.n	8001730 <__gedf2+0x9c>
 80016e0:	2d00      	cmp	r5, #0
 80016e2:	d115      	bne.n	8001710 <__gedf2+0x7c>
 80016e4:	4281      	cmp	r1, r0
 80016e6:	d028      	beq.n	800173a <__gedf2+0xa6>
 80016e8:	2002      	movs	r0, #2
 80016ea:	3901      	subs	r1, #1
 80016ec:	4008      	ands	r0, r1
 80016ee:	3801      	subs	r0, #1
 80016f0:	bcf0      	pop	{r4, r5, r6, r7}
 80016f2:	46bb      	mov	fp, r7
 80016f4:	46b2      	mov	sl, r6
 80016f6:	46a9      	mov	r9, r5
 80016f8:	46a0      	mov	r8, r4
 80016fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016fc:	464d      	mov	r5, r9
 80016fe:	432e      	orrs	r6, r5
 8001700:	d12f      	bne.n	8001762 <__gedf2+0xce>
 8001702:	2a00      	cmp	r2, #0
 8001704:	d1ee      	bne.n	80016e4 <__gedf2+0x50>
 8001706:	433c      	orrs	r4, r7
 8001708:	4265      	negs	r5, r4
 800170a:	4165      	adcs	r5, r4
 800170c:	2d00      	cmp	r5, #0
 800170e:	d0e9      	beq.n	80016e4 <__gedf2+0x50>
 8001710:	2800      	cmp	r0, #0
 8001712:	d1ed      	bne.n	80016f0 <__gedf2+0x5c>
 8001714:	2001      	movs	r0, #1
 8001716:	4240      	negs	r0, r0
 8001718:	e7ea      	b.n	80016f0 <__gedf2+0x5c>
 800171a:	003d      	movs	r5, r7
 800171c:	4325      	orrs	r5, r4
 800171e:	d120      	bne.n	8001762 <__gedf2+0xce>
 8001720:	4293      	cmp	r3, r2
 8001722:	d0eb      	beq.n	80016fc <__gedf2+0x68>
 8001724:	2b00      	cmp	r3, #0
 8001726:	d1dd      	bne.n	80016e4 <__gedf2+0x50>
 8001728:	464c      	mov	r4, r9
 800172a:	4326      	orrs	r6, r4
 800172c:	d1da      	bne.n	80016e4 <__gedf2+0x50>
 800172e:	e7db      	b.n	80016e8 <__gedf2+0x54>
 8001730:	465b      	mov	r3, fp
 8001732:	2000      	movs	r0, #0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d0db      	beq.n	80016f0 <__gedf2+0x5c>
 8001738:	e7d6      	b.n	80016e8 <__gedf2+0x54>
 800173a:	429a      	cmp	r2, r3
 800173c:	dc0a      	bgt.n	8001754 <__gedf2+0xc0>
 800173e:	dbe7      	blt.n	8001710 <__gedf2+0x7c>
 8001740:	454f      	cmp	r7, r9
 8001742:	d8d1      	bhi.n	80016e8 <__gedf2+0x54>
 8001744:	d010      	beq.n	8001768 <__gedf2+0xd4>
 8001746:	2000      	movs	r0, #0
 8001748:	454f      	cmp	r7, r9
 800174a:	d2d1      	bcs.n	80016f0 <__gedf2+0x5c>
 800174c:	2900      	cmp	r1, #0
 800174e:	d0e1      	beq.n	8001714 <__gedf2+0x80>
 8001750:	0008      	movs	r0, r1
 8001752:	e7cd      	b.n	80016f0 <__gedf2+0x5c>
 8001754:	4243      	negs	r3, r0
 8001756:	4158      	adcs	r0, r3
 8001758:	2302      	movs	r3, #2
 800175a:	4240      	negs	r0, r0
 800175c:	4018      	ands	r0, r3
 800175e:	3801      	subs	r0, #1
 8001760:	e7c6      	b.n	80016f0 <__gedf2+0x5c>
 8001762:	2002      	movs	r0, #2
 8001764:	4240      	negs	r0, r0
 8001766:	e7c3      	b.n	80016f0 <__gedf2+0x5c>
 8001768:	45c4      	cmp	ip, r8
 800176a:	d8bd      	bhi.n	80016e8 <__gedf2+0x54>
 800176c:	2000      	movs	r0, #0
 800176e:	45c4      	cmp	ip, r8
 8001770:	d2be      	bcs.n	80016f0 <__gedf2+0x5c>
 8001772:	e7eb      	b.n	800174c <__gedf2+0xb8>
 8001774:	000007ff 	.word	0x000007ff

08001778 <__ledf2>:
 8001778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800177a:	464e      	mov	r6, r9
 800177c:	4645      	mov	r5, r8
 800177e:	4657      	mov	r7, sl
 8001780:	46de      	mov	lr, fp
 8001782:	0004      	movs	r4, r0
 8001784:	0018      	movs	r0, r3
 8001786:	b5e0      	push	{r5, r6, r7, lr}
 8001788:	0016      	movs	r6, r2
 800178a:	031b      	lsls	r3, r3, #12
 800178c:	0b1b      	lsrs	r3, r3, #12
 800178e:	4d31      	ldr	r5, [pc, #196]	; (8001854 <__ledf2+0xdc>)
 8001790:	030f      	lsls	r7, r1, #12
 8001792:	004a      	lsls	r2, r1, #1
 8001794:	4699      	mov	r9, r3
 8001796:	0043      	lsls	r3, r0, #1
 8001798:	46a4      	mov	ip, r4
 800179a:	46b0      	mov	r8, r6
 800179c:	0b3f      	lsrs	r7, r7, #12
 800179e:	0d52      	lsrs	r2, r2, #21
 80017a0:	0fc9      	lsrs	r1, r1, #31
 80017a2:	0d5b      	lsrs	r3, r3, #21
 80017a4:	0fc0      	lsrs	r0, r0, #31
 80017a6:	42aa      	cmp	r2, r5
 80017a8:	d011      	beq.n	80017ce <__ledf2+0x56>
 80017aa:	42ab      	cmp	r3, r5
 80017ac:	d014      	beq.n	80017d8 <__ledf2+0x60>
 80017ae:	2a00      	cmp	r2, #0
 80017b0:	d12f      	bne.n	8001812 <__ledf2+0x9a>
 80017b2:	433c      	orrs	r4, r7
 80017b4:	46a3      	mov	fp, r4
 80017b6:	4265      	negs	r5, r4
 80017b8:	4165      	adcs	r5, r4
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d114      	bne.n	80017e8 <__ledf2+0x70>
 80017be:	464c      	mov	r4, r9
 80017c0:	4326      	orrs	r6, r4
 80017c2:	d111      	bne.n	80017e8 <__ledf2+0x70>
 80017c4:	465b      	mov	r3, fp
 80017c6:	2000      	movs	r0, #0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d017      	beq.n	80017fc <__ledf2+0x84>
 80017cc:	e010      	b.n	80017f0 <__ledf2+0x78>
 80017ce:	003d      	movs	r5, r7
 80017d0:	4325      	orrs	r5, r4
 80017d2:	d112      	bne.n	80017fa <__ledf2+0x82>
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d11c      	bne.n	8001812 <__ledf2+0x9a>
 80017d8:	464d      	mov	r5, r9
 80017da:	432e      	orrs	r6, r5
 80017dc:	d10d      	bne.n	80017fa <__ledf2+0x82>
 80017de:	2a00      	cmp	r2, #0
 80017e0:	d104      	bne.n	80017ec <__ledf2+0x74>
 80017e2:	433c      	orrs	r4, r7
 80017e4:	4265      	negs	r5, r4
 80017e6:	4165      	adcs	r5, r4
 80017e8:	2d00      	cmp	r5, #0
 80017ea:	d10d      	bne.n	8001808 <__ledf2+0x90>
 80017ec:	4281      	cmp	r1, r0
 80017ee:	d016      	beq.n	800181e <__ledf2+0xa6>
 80017f0:	2002      	movs	r0, #2
 80017f2:	3901      	subs	r1, #1
 80017f4:	4008      	ands	r0, r1
 80017f6:	3801      	subs	r0, #1
 80017f8:	e000      	b.n	80017fc <__ledf2+0x84>
 80017fa:	2002      	movs	r0, #2
 80017fc:	bcf0      	pop	{r4, r5, r6, r7}
 80017fe:	46bb      	mov	fp, r7
 8001800:	46b2      	mov	sl, r6
 8001802:	46a9      	mov	r9, r5
 8001804:	46a0      	mov	r8, r4
 8001806:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001808:	2800      	cmp	r0, #0
 800180a:	d1f7      	bne.n	80017fc <__ledf2+0x84>
 800180c:	2001      	movs	r0, #1
 800180e:	4240      	negs	r0, r0
 8001810:	e7f4      	b.n	80017fc <__ledf2+0x84>
 8001812:	2b00      	cmp	r3, #0
 8001814:	d1ea      	bne.n	80017ec <__ledf2+0x74>
 8001816:	464c      	mov	r4, r9
 8001818:	4326      	orrs	r6, r4
 800181a:	d1e7      	bne.n	80017ec <__ledf2+0x74>
 800181c:	e7e8      	b.n	80017f0 <__ledf2+0x78>
 800181e:	429a      	cmp	r2, r3
 8001820:	dd06      	ble.n	8001830 <__ledf2+0xb8>
 8001822:	4243      	negs	r3, r0
 8001824:	4158      	adcs	r0, r3
 8001826:	2302      	movs	r3, #2
 8001828:	4240      	negs	r0, r0
 800182a:	4018      	ands	r0, r3
 800182c:	3801      	subs	r0, #1
 800182e:	e7e5      	b.n	80017fc <__ledf2+0x84>
 8001830:	429a      	cmp	r2, r3
 8001832:	dbe9      	blt.n	8001808 <__ledf2+0x90>
 8001834:	454f      	cmp	r7, r9
 8001836:	d8db      	bhi.n	80017f0 <__ledf2+0x78>
 8001838:	d006      	beq.n	8001848 <__ledf2+0xd0>
 800183a:	2000      	movs	r0, #0
 800183c:	454f      	cmp	r7, r9
 800183e:	d2dd      	bcs.n	80017fc <__ledf2+0x84>
 8001840:	2900      	cmp	r1, #0
 8001842:	d0e3      	beq.n	800180c <__ledf2+0x94>
 8001844:	0008      	movs	r0, r1
 8001846:	e7d9      	b.n	80017fc <__ledf2+0x84>
 8001848:	45c4      	cmp	ip, r8
 800184a:	d8d1      	bhi.n	80017f0 <__ledf2+0x78>
 800184c:	2000      	movs	r0, #0
 800184e:	45c4      	cmp	ip, r8
 8001850:	d2d4      	bcs.n	80017fc <__ledf2+0x84>
 8001852:	e7f5      	b.n	8001840 <__ledf2+0xc8>
 8001854:	000007ff 	.word	0x000007ff

08001858 <__aeabi_dmul>:
 8001858:	b5f0      	push	{r4, r5, r6, r7, lr}
 800185a:	4657      	mov	r7, sl
 800185c:	464e      	mov	r6, r9
 800185e:	4645      	mov	r5, r8
 8001860:	46de      	mov	lr, fp
 8001862:	b5e0      	push	{r5, r6, r7, lr}
 8001864:	4698      	mov	r8, r3
 8001866:	030c      	lsls	r4, r1, #12
 8001868:	004b      	lsls	r3, r1, #1
 800186a:	0006      	movs	r6, r0
 800186c:	4692      	mov	sl, r2
 800186e:	b087      	sub	sp, #28
 8001870:	0b24      	lsrs	r4, r4, #12
 8001872:	0d5b      	lsrs	r3, r3, #21
 8001874:	0fcf      	lsrs	r7, r1, #31
 8001876:	2b00      	cmp	r3, #0
 8001878:	d06c      	beq.n	8001954 <__aeabi_dmul+0xfc>
 800187a:	4add      	ldr	r2, [pc, #884]	; (8001bf0 <__aeabi_dmul+0x398>)
 800187c:	4293      	cmp	r3, r2
 800187e:	d100      	bne.n	8001882 <__aeabi_dmul+0x2a>
 8001880:	e086      	b.n	8001990 <__aeabi_dmul+0x138>
 8001882:	0f42      	lsrs	r2, r0, #29
 8001884:	00e4      	lsls	r4, r4, #3
 8001886:	4314      	orrs	r4, r2
 8001888:	2280      	movs	r2, #128	; 0x80
 800188a:	0412      	lsls	r2, r2, #16
 800188c:	4314      	orrs	r4, r2
 800188e:	4ad9      	ldr	r2, [pc, #868]	; (8001bf4 <__aeabi_dmul+0x39c>)
 8001890:	00c5      	lsls	r5, r0, #3
 8001892:	4694      	mov	ip, r2
 8001894:	4463      	add	r3, ip
 8001896:	9300      	str	r3, [sp, #0]
 8001898:	2300      	movs	r3, #0
 800189a:	4699      	mov	r9, r3
 800189c:	469b      	mov	fp, r3
 800189e:	4643      	mov	r3, r8
 80018a0:	4642      	mov	r2, r8
 80018a2:	031e      	lsls	r6, r3, #12
 80018a4:	0fd2      	lsrs	r2, r2, #31
 80018a6:	005b      	lsls	r3, r3, #1
 80018a8:	4650      	mov	r0, sl
 80018aa:	4690      	mov	r8, r2
 80018ac:	0b36      	lsrs	r6, r6, #12
 80018ae:	0d5b      	lsrs	r3, r3, #21
 80018b0:	d100      	bne.n	80018b4 <__aeabi_dmul+0x5c>
 80018b2:	e078      	b.n	80019a6 <__aeabi_dmul+0x14e>
 80018b4:	4ace      	ldr	r2, [pc, #824]	; (8001bf0 <__aeabi_dmul+0x398>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d01d      	beq.n	80018f6 <__aeabi_dmul+0x9e>
 80018ba:	49ce      	ldr	r1, [pc, #824]	; (8001bf4 <__aeabi_dmul+0x39c>)
 80018bc:	0f42      	lsrs	r2, r0, #29
 80018be:	468c      	mov	ip, r1
 80018c0:	9900      	ldr	r1, [sp, #0]
 80018c2:	4463      	add	r3, ip
 80018c4:	00f6      	lsls	r6, r6, #3
 80018c6:	468c      	mov	ip, r1
 80018c8:	4316      	orrs	r6, r2
 80018ca:	2280      	movs	r2, #128	; 0x80
 80018cc:	449c      	add	ip, r3
 80018ce:	0412      	lsls	r2, r2, #16
 80018d0:	4663      	mov	r3, ip
 80018d2:	4316      	orrs	r6, r2
 80018d4:	00c2      	lsls	r2, r0, #3
 80018d6:	2000      	movs	r0, #0
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	9900      	ldr	r1, [sp, #0]
 80018dc:	4643      	mov	r3, r8
 80018de:	3101      	adds	r1, #1
 80018e0:	468c      	mov	ip, r1
 80018e2:	4649      	mov	r1, r9
 80018e4:	407b      	eors	r3, r7
 80018e6:	9301      	str	r3, [sp, #4]
 80018e8:	290f      	cmp	r1, #15
 80018ea:	d900      	bls.n	80018ee <__aeabi_dmul+0x96>
 80018ec:	e07e      	b.n	80019ec <__aeabi_dmul+0x194>
 80018ee:	4bc2      	ldr	r3, [pc, #776]	; (8001bf8 <__aeabi_dmul+0x3a0>)
 80018f0:	0089      	lsls	r1, r1, #2
 80018f2:	5859      	ldr	r1, [r3, r1]
 80018f4:	468f      	mov	pc, r1
 80018f6:	4652      	mov	r2, sl
 80018f8:	9b00      	ldr	r3, [sp, #0]
 80018fa:	4332      	orrs	r2, r6
 80018fc:	d000      	beq.n	8001900 <__aeabi_dmul+0xa8>
 80018fe:	e156      	b.n	8001bae <__aeabi_dmul+0x356>
 8001900:	49bb      	ldr	r1, [pc, #748]	; (8001bf0 <__aeabi_dmul+0x398>)
 8001902:	2600      	movs	r6, #0
 8001904:	468c      	mov	ip, r1
 8001906:	4463      	add	r3, ip
 8001908:	4649      	mov	r1, r9
 800190a:	9300      	str	r3, [sp, #0]
 800190c:	2302      	movs	r3, #2
 800190e:	4319      	orrs	r1, r3
 8001910:	4689      	mov	r9, r1
 8001912:	2002      	movs	r0, #2
 8001914:	e7e1      	b.n	80018da <__aeabi_dmul+0x82>
 8001916:	4643      	mov	r3, r8
 8001918:	9301      	str	r3, [sp, #4]
 800191a:	0034      	movs	r4, r6
 800191c:	0015      	movs	r5, r2
 800191e:	4683      	mov	fp, r0
 8001920:	465b      	mov	r3, fp
 8001922:	2b02      	cmp	r3, #2
 8001924:	d05e      	beq.n	80019e4 <__aeabi_dmul+0x18c>
 8001926:	2b03      	cmp	r3, #3
 8001928:	d100      	bne.n	800192c <__aeabi_dmul+0xd4>
 800192a:	e1f3      	b.n	8001d14 <__aeabi_dmul+0x4bc>
 800192c:	2b01      	cmp	r3, #1
 800192e:	d000      	beq.n	8001932 <__aeabi_dmul+0xda>
 8001930:	e118      	b.n	8001b64 <__aeabi_dmul+0x30c>
 8001932:	2200      	movs	r2, #0
 8001934:	2400      	movs	r4, #0
 8001936:	2500      	movs	r5, #0
 8001938:	9b01      	ldr	r3, [sp, #4]
 800193a:	0512      	lsls	r2, r2, #20
 800193c:	4322      	orrs	r2, r4
 800193e:	07db      	lsls	r3, r3, #31
 8001940:	431a      	orrs	r2, r3
 8001942:	0028      	movs	r0, r5
 8001944:	0011      	movs	r1, r2
 8001946:	b007      	add	sp, #28
 8001948:	bcf0      	pop	{r4, r5, r6, r7}
 800194a:	46bb      	mov	fp, r7
 800194c:	46b2      	mov	sl, r6
 800194e:	46a9      	mov	r9, r5
 8001950:	46a0      	mov	r8, r4
 8001952:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001954:	0025      	movs	r5, r4
 8001956:	4305      	orrs	r5, r0
 8001958:	d100      	bne.n	800195c <__aeabi_dmul+0x104>
 800195a:	e141      	b.n	8001be0 <__aeabi_dmul+0x388>
 800195c:	2c00      	cmp	r4, #0
 800195e:	d100      	bne.n	8001962 <__aeabi_dmul+0x10a>
 8001960:	e1ad      	b.n	8001cbe <__aeabi_dmul+0x466>
 8001962:	0020      	movs	r0, r4
 8001964:	f000 fe4a 	bl	80025fc <__clzsi2>
 8001968:	0001      	movs	r1, r0
 800196a:	0002      	movs	r2, r0
 800196c:	390b      	subs	r1, #11
 800196e:	231d      	movs	r3, #29
 8001970:	0010      	movs	r0, r2
 8001972:	1a5b      	subs	r3, r3, r1
 8001974:	0031      	movs	r1, r6
 8001976:	0035      	movs	r5, r6
 8001978:	3808      	subs	r0, #8
 800197a:	4084      	lsls	r4, r0
 800197c:	40d9      	lsrs	r1, r3
 800197e:	4085      	lsls	r5, r0
 8001980:	430c      	orrs	r4, r1
 8001982:	489e      	ldr	r0, [pc, #632]	; (8001bfc <__aeabi_dmul+0x3a4>)
 8001984:	1a83      	subs	r3, r0, r2
 8001986:	9300      	str	r3, [sp, #0]
 8001988:	2300      	movs	r3, #0
 800198a:	4699      	mov	r9, r3
 800198c:	469b      	mov	fp, r3
 800198e:	e786      	b.n	800189e <__aeabi_dmul+0x46>
 8001990:	0005      	movs	r5, r0
 8001992:	4325      	orrs	r5, r4
 8001994:	d000      	beq.n	8001998 <__aeabi_dmul+0x140>
 8001996:	e11c      	b.n	8001bd2 <__aeabi_dmul+0x37a>
 8001998:	2208      	movs	r2, #8
 800199a:	9300      	str	r3, [sp, #0]
 800199c:	2302      	movs	r3, #2
 800199e:	2400      	movs	r4, #0
 80019a0:	4691      	mov	r9, r2
 80019a2:	469b      	mov	fp, r3
 80019a4:	e77b      	b.n	800189e <__aeabi_dmul+0x46>
 80019a6:	4652      	mov	r2, sl
 80019a8:	4332      	orrs	r2, r6
 80019aa:	d100      	bne.n	80019ae <__aeabi_dmul+0x156>
 80019ac:	e10a      	b.n	8001bc4 <__aeabi_dmul+0x36c>
 80019ae:	2e00      	cmp	r6, #0
 80019b0:	d100      	bne.n	80019b4 <__aeabi_dmul+0x15c>
 80019b2:	e176      	b.n	8001ca2 <__aeabi_dmul+0x44a>
 80019b4:	0030      	movs	r0, r6
 80019b6:	f000 fe21 	bl	80025fc <__clzsi2>
 80019ba:	0002      	movs	r2, r0
 80019bc:	3a0b      	subs	r2, #11
 80019be:	231d      	movs	r3, #29
 80019c0:	0001      	movs	r1, r0
 80019c2:	1a9b      	subs	r3, r3, r2
 80019c4:	4652      	mov	r2, sl
 80019c6:	3908      	subs	r1, #8
 80019c8:	40da      	lsrs	r2, r3
 80019ca:	408e      	lsls	r6, r1
 80019cc:	4316      	orrs	r6, r2
 80019ce:	4652      	mov	r2, sl
 80019d0:	408a      	lsls	r2, r1
 80019d2:	9b00      	ldr	r3, [sp, #0]
 80019d4:	4989      	ldr	r1, [pc, #548]	; (8001bfc <__aeabi_dmul+0x3a4>)
 80019d6:	1a18      	subs	r0, r3, r0
 80019d8:	0003      	movs	r3, r0
 80019da:	468c      	mov	ip, r1
 80019dc:	4463      	add	r3, ip
 80019de:	2000      	movs	r0, #0
 80019e0:	9300      	str	r3, [sp, #0]
 80019e2:	e77a      	b.n	80018da <__aeabi_dmul+0x82>
 80019e4:	2400      	movs	r4, #0
 80019e6:	2500      	movs	r5, #0
 80019e8:	4a81      	ldr	r2, [pc, #516]	; (8001bf0 <__aeabi_dmul+0x398>)
 80019ea:	e7a5      	b.n	8001938 <__aeabi_dmul+0xe0>
 80019ec:	0c2f      	lsrs	r7, r5, #16
 80019ee:	042d      	lsls	r5, r5, #16
 80019f0:	0c2d      	lsrs	r5, r5, #16
 80019f2:	002b      	movs	r3, r5
 80019f4:	0c11      	lsrs	r1, r2, #16
 80019f6:	0412      	lsls	r2, r2, #16
 80019f8:	0c12      	lsrs	r2, r2, #16
 80019fa:	4353      	muls	r3, r2
 80019fc:	4698      	mov	r8, r3
 80019fe:	0013      	movs	r3, r2
 8001a00:	0028      	movs	r0, r5
 8001a02:	437b      	muls	r3, r7
 8001a04:	4699      	mov	r9, r3
 8001a06:	4348      	muls	r0, r1
 8001a08:	4448      	add	r0, r9
 8001a0a:	4683      	mov	fp, r0
 8001a0c:	4640      	mov	r0, r8
 8001a0e:	000b      	movs	r3, r1
 8001a10:	0c00      	lsrs	r0, r0, #16
 8001a12:	4682      	mov	sl, r0
 8001a14:	4658      	mov	r0, fp
 8001a16:	437b      	muls	r3, r7
 8001a18:	4450      	add	r0, sl
 8001a1a:	9302      	str	r3, [sp, #8]
 8001a1c:	4581      	cmp	r9, r0
 8001a1e:	d906      	bls.n	8001a2e <__aeabi_dmul+0x1d6>
 8001a20:	469a      	mov	sl, r3
 8001a22:	2380      	movs	r3, #128	; 0x80
 8001a24:	025b      	lsls	r3, r3, #9
 8001a26:	4699      	mov	r9, r3
 8001a28:	44ca      	add	sl, r9
 8001a2a:	4653      	mov	r3, sl
 8001a2c:	9302      	str	r3, [sp, #8]
 8001a2e:	0c03      	lsrs	r3, r0, #16
 8001a30:	469b      	mov	fp, r3
 8001a32:	4643      	mov	r3, r8
 8001a34:	041b      	lsls	r3, r3, #16
 8001a36:	0400      	lsls	r0, r0, #16
 8001a38:	0c1b      	lsrs	r3, r3, #16
 8001a3a:	4698      	mov	r8, r3
 8001a3c:	0003      	movs	r3, r0
 8001a3e:	4443      	add	r3, r8
 8001a40:	9304      	str	r3, [sp, #16]
 8001a42:	0c33      	lsrs	r3, r6, #16
 8001a44:	4699      	mov	r9, r3
 8001a46:	002b      	movs	r3, r5
 8001a48:	0436      	lsls	r6, r6, #16
 8001a4a:	0c36      	lsrs	r6, r6, #16
 8001a4c:	4373      	muls	r3, r6
 8001a4e:	4698      	mov	r8, r3
 8001a50:	0033      	movs	r3, r6
 8001a52:	437b      	muls	r3, r7
 8001a54:	469a      	mov	sl, r3
 8001a56:	464b      	mov	r3, r9
 8001a58:	435d      	muls	r5, r3
 8001a5a:	435f      	muls	r7, r3
 8001a5c:	4643      	mov	r3, r8
 8001a5e:	4455      	add	r5, sl
 8001a60:	0c18      	lsrs	r0, r3, #16
 8001a62:	1940      	adds	r0, r0, r5
 8001a64:	4582      	cmp	sl, r0
 8001a66:	d903      	bls.n	8001a70 <__aeabi_dmul+0x218>
 8001a68:	2380      	movs	r3, #128	; 0x80
 8001a6a:	025b      	lsls	r3, r3, #9
 8001a6c:	469a      	mov	sl, r3
 8001a6e:	4457      	add	r7, sl
 8001a70:	0c05      	lsrs	r5, r0, #16
 8001a72:	19eb      	adds	r3, r5, r7
 8001a74:	9305      	str	r3, [sp, #20]
 8001a76:	4643      	mov	r3, r8
 8001a78:	041d      	lsls	r5, r3, #16
 8001a7a:	0c2d      	lsrs	r5, r5, #16
 8001a7c:	0400      	lsls	r0, r0, #16
 8001a7e:	1940      	adds	r0, r0, r5
 8001a80:	0c25      	lsrs	r5, r4, #16
 8001a82:	0424      	lsls	r4, r4, #16
 8001a84:	0c24      	lsrs	r4, r4, #16
 8001a86:	0027      	movs	r7, r4
 8001a88:	4357      	muls	r7, r2
 8001a8a:	436a      	muls	r2, r5
 8001a8c:	4690      	mov	r8, r2
 8001a8e:	002a      	movs	r2, r5
 8001a90:	0c3b      	lsrs	r3, r7, #16
 8001a92:	469a      	mov	sl, r3
 8001a94:	434a      	muls	r2, r1
 8001a96:	4361      	muls	r1, r4
 8001a98:	4441      	add	r1, r8
 8001a9a:	4451      	add	r1, sl
 8001a9c:	4483      	add	fp, r0
 8001a9e:	4588      	cmp	r8, r1
 8001aa0:	d903      	bls.n	8001aaa <__aeabi_dmul+0x252>
 8001aa2:	2380      	movs	r3, #128	; 0x80
 8001aa4:	025b      	lsls	r3, r3, #9
 8001aa6:	4698      	mov	r8, r3
 8001aa8:	4442      	add	r2, r8
 8001aaa:	043f      	lsls	r7, r7, #16
 8001aac:	0c0b      	lsrs	r3, r1, #16
 8001aae:	0c3f      	lsrs	r7, r7, #16
 8001ab0:	0409      	lsls	r1, r1, #16
 8001ab2:	19c9      	adds	r1, r1, r7
 8001ab4:	0027      	movs	r7, r4
 8001ab6:	4698      	mov	r8, r3
 8001ab8:	464b      	mov	r3, r9
 8001aba:	4377      	muls	r7, r6
 8001abc:	435c      	muls	r4, r3
 8001abe:	436e      	muls	r6, r5
 8001ac0:	435d      	muls	r5, r3
 8001ac2:	0c3b      	lsrs	r3, r7, #16
 8001ac4:	4699      	mov	r9, r3
 8001ac6:	19a4      	adds	r4, r4, r6
 8001ac8:	444c      	add	r4, r9
 8001aca:	4442      	add	r2, r8
 8001acc:	9503      	str	r5, [sp, #12]
 8001ace:	42a6      	cmp	r6, r4
 8001ad0:	d904      	bls.n	8001adc <__aeabi_dmul+0x284>
 8001ad2:	2380      	movs	r3, #128	; 0x80
 8001ad4:	025b      	lsls	r3, r3, #9
 8001ad6:	4698      	mov	r8, r3
 8001ad8:	4445      	add	r5, r8
 8001ada:	9503      	str	r5, [sp, #12]
 8001adc:	9b02      	ldr	r3, [sp, #8]
 8001ade:	043f      	lsls	r7, r7, #16
 8001ae0:	445b      	add	r3, fp
 8001ae2:	001e      	movs	r6, r3
 8001ae4:	4283      	cmp	r3, r0
 8001ae6:	4180      	sbcs	r0, r0
 8001ae8:	0423      	lsls	r3, r4, #16
 8001aea:	4698      	mov	r8, r3
 8001aec:	9b05      	ldr	r3, [sp, #20]
 8001aee:	0c3f      	lsrs	r7, r7, #16
 8001af0:	4447      	add	r7, r8
 8001af2:	4698      	mov	r8, r3
 8001af4:	1876      	adds	r6, r6, r1
 8001af6:	428e      	cmp	r6, r1
 8001af8:	4189      	sbcs	r1, r1
 8001afa:	4447      	add	r7, r8
 8001afc:	4240      	negs	r0, r0
 8001afe:	183d      	adds	r5, r7, r0
 8001b00:	46a8      	mov	r8, r5
 8001b02:	4693      	mov	fp, r2
 8001b04:	4249      	negs	r1, r1
 8001b06:	468a      	mov	sl, r1
 8001b08:	44c3      	add	fp, r8
 8001b0a:	429f      	cmp	r7, r3
 8001b0c:	41bf      	sbcs	r7, r7
 8001b0e:	4580      	cmp	r8, r0
 8001b10:	4180      	sbcs	r0, r0
 8001b12:	9b03      	ldr	r3, [sp, #12]
 8001b14:	44da      	add	sl, fp
 8001b16:	4698      	mov	r8, r3
 8001b18:	4653      	mov	r3, sl
 8001b1a:	4240      	negs	r0, r0
 8001b1c:	427f      	negs	r7, r7
 8001b1e:	4307      	orrs	r7, r0
 8001b20:	0c24      	lsrs	r4, r4, #16
 8001b22:	4593      	cmp	fp, r2
 8001b24:	4192      	sbcs	r2, r2
 8001b26:	458a      	cmp	sl, r1
 8001b28:	4189      	sbcs	r1, r1
 8001b2a:	193f      	adds	r7, r7, r4
 8001b2c:	0ddc      	lsrs	r4, r3, #23
 8001b2e:	9b04      	ldr	r3, [sp, #16]
 8001b30:	0275      	lsls	r5, r6, #9
 8001b32:	431d      	orrs	r5, r3
 8001b34:	1e68      	subs	r0, r5, #1
 8001b36:	4185      	sbcs	r5, r0
 8001b38:	4653      	mov	r3, sl
 8001b3a:	4252      	negs	r2, r2
 8001b3c:	4249      	negs	r1, r1
 8001b3e:	430a      	orrs	r2, r1
 8001b40:	18bf      	adds	r7, r7, r2
 8001b42:	4447      	add	r7, r8
 8001b44:	0df6      	lsrs	r6, r6, #23
 8001b46:	027f      	lsls	r7, r7, #9
 8001b48:	4335      	orrs	r5, r6
 8001b4a:	025a      	lsls	r2, r3, #9
 8001b4c:	433c      	orrs	r4, r7
 8001b4e:	4315      	orrs	r5, r2
 8001b50:	01fb      	lsls	r3, r7, #7
 8001b52:	d400      	bmi.n	8001b56 <__aeabi_dmul+0x2fe>
 8001b54:	e0c1      	b.n	8001cda <__aeabi_dmul+0x482>
 8001b56:	2101      	movs	r1, #1
 8001b58:	086a      	lsrs	r2, r5, #1
 8001b5a:	400d      	ands	r5, r1
 8001b5c:	4315      	orrs	r5, r2
 8001b5e:	07e2      	lsls	r2, r4, #31
 8001b60:	4315      	orrs	r5, r2
 8001b62:	0864      	lsrs	r4, r4, #1
 8001b64:	4926      	ldr	r1, [pc, #152]	; (8001c00 <__aeabi_dmul+0x3a8>)
 8001b66:	4461      	add	r1, ip
 8001b68:	2900      	cmp	r1, #0
 8001b6a:	dd56      	ble.n	8001c1a <__aeabi_dmul+0x3c2>
 8001b6c:	076b      	lsls	r3, r5, #29
 8001b6e:	d009      	beq.n	8001b84 <__aeabi_dmul+0x32c>
 8001b70:	220f      	movs	r2, #15
 8001b72:	402a      	ands	r2, r5
 8001b74:	2a04      	cmp	r2, #4
 8001b76:	d005      	beq.n	8001b84 <__aeabi_dmul+0x32c>
 8001b78:	1d2a      	adds	r2, r5, #4
 8001b7a:	42aa      	cmp	r2, r5
 8001b7c:	41ad      	sbcs	r5, r5
 8001b7e:	426d      	negs	r5, r5
 8001b80:	1964      	adds	r4, r4, r5
 8001b82:	0015      	movs	r5, r2
 8001b84:	01e3      	lsls	r3, r4, #7
 8001b86:	d504      	bpl.n	8001b92 <__aeabi_dmul+0x33a>
 8001b88:	2180      	movs	r1, #128	; 0x80
 8001b8a:	4a1e      	ldr	r2, [pc, #120]	; (8001c04 <__aeabi_dmul+0x3ac>)
 8001b8c:	00c9      	lsls	r1, r1, #3
 8001b8e:	4014      	ands	r4, r2
 8001b90:	4461      	add	r1, ip
 8001b92:	4a1d      	ldr	r2, [pc, #116]	; (8001c08 <__aeabi_dmul+0x3b0>)
 8001b94:	4291      	cmp	r1, r2
 8001b96:	dd00      	ble.n	8001b9a <__aeabi_dmul+0x342>
 8001b98:	e724      	b.n	80019e4 <__aeabi_dmul+0x18c>
 8001b9a:	0762      	lsls	r2, r4, #29
 8001b9c:	08ed      	lsrs	r5, r5, #3
 8001b9e:	0264      	lsls	r4, r4, #9
 8001ba0:	0549      	lsls	r1, r1, #21
 8001ba2:	4315      	orrs	r5, r2
 8001ba4:	0b24      	lsrs	r4, r4, #12
 8001ba6:	0d4a      	lsrs	r2, r1, #21
 8001ba8:	e6c6      	b.n	8001938 <__aeabi_dmul+0xe0>
 8001baa:	9701      	str	r7, [sp, #4]
 8001bac:	e6b8      	b.n	8001920 <__aeabi_dmul+0xc8>
 8001bae:	4a10      	ldr	r2, [pc, #64]	; (8001bf0 <__aeabi_dmul+0x398>)
 8001bb0:	2003      	movs	r0, #3
 8001bb2:	4694      	mov	ip, r2
 8001bb4:	4463      	add	r3, ip
 8001bb6:	464a      	mov	r2, r9
 8001bb8:	9300      	str	r3, [sp, #0]
 8001bba:	2303      	movs	r3, #3
 8001bbc:	431a      	orrs	r2, r3
 8001bbe:	4691      	mov	r9, r2
 8001bc0:	4652      	mov	r2, sl
 8001bc2:	e68a      	b.n	80018da <__aeabi_dmul+0x82>
 8001bc4:	4649      	mov	r1, r9
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	4319      	orrs	r1, r3
 8001bca:	4689      	mov	r9, r1
 8001bcc:	2600      	movs	r6, #0
 8001bce:	2001      	movs	r0, #1
 8001bd0:	e683      	b.n	80018da <__aeabi_dmul+0x82>
 8001bd2:	220c      	movs	r2, #12
 8001bd4:	9300      	str	r3, [sp, #0]
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	0005      	movs	r5, r0
 8001bda:	4691      	mov	r9, r2
 8001bdc:	469b      	mov	fp, r3
 8001bde:	e65e      	b.n	800189e <__aeabi_dmul+0x46>
 8001be0:	2304      	movs	r3, #4
 8001be2:	4699      	mov	r9, r3
 8001be4:	2300      	movs	r3, #0
 8001be6:	9300      	str	r3, [sp, #0]
 8001be8:	3301      	adds	r3, #1
 8001bea:	2400      	movs	r4, #0
 8001bec:	469b      	mov	fp, r3
 8001bee:	e656      	b.n	800189e <__aeabi_dmul+0x46>
 8001bf0:	000007ff 	.word	0x000007ff
 8001bf4:	fffffc01 	.word	0xfffffc01
 8001bf8:	08007454 	.word	0x08007454
 8001bfc:	fffffc0d 	.word	0xfffffc0d
 8001c00:	000003ff 	.word	0x000003ff
 8001c04:	feffffff 	.word	0xfeffffff
 8001c08:	000007fe 	.word	0x000007fe
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	2480      	movs	r4, #128	; 0x80
 8001c10:	2500      	movs	r5, #0
 8001c12:	4a44      	ldr	r2, [pc, #272]	; (8001d24 <__aeabi_dmul+0x4cc>)
 8001c14:	9301      	str	r3, [sp, #4]
 8001c16:	0324      	lsls	r4, r4, #12
 8001c18:	e68e      	b.n	8001938 <__aeabi_dmul+0xe0>
 8001c1a:	2001      	movs	r0, #1
 8001c1c:	1a40      	subs	r0, r0, r1
 8001c1e:	2838      	cmp	r0, #56	; 0x38
 8001c20:	dd00      	ble.n	8001c24 <__aeabi_dmul+0x3cc>
 8001c22:	e686      	b.n	8001932 <__aeabi_dmul+0xda>
 8001c24:	281f      	cmp	r0, #31
 8001c26:	dd5b      	ble.n	8001ce0 <__aeabi_dmul+0x488>
 8001c28:	221f      	movs	r2, #31
 8001c2a:	0023      	movs	r3, r4
 8001c2c:	4252      	negs	r2, r2
 8001c2e:	1a51      	subs	r1, r2, r1
 8001c30:	40cb      	lsrs	r3, r1
 8001c32:	0019      	movs	r1, r3
 8001c34:	2820      	cmp	r0, #32
 8001c36:	d003      	beq.n	8001c40 <__aeabi_dmul+0x3e8>
 8001c38:	4a3b      	ldr	r2, [pc, #236]	; (8001d28 <__aeabi_dmul+0x4d0>)
 8001c3a:	4462      	add	r2, ip
 8001c3c:	4094      	lsls	r4, r2
 8001c3e:	4325      	orrs	r5, r4
 8001c40:	1e6a      	subs	r2, r5, #1
 8001c42:	4195      	sbcs	r5, r2
 8001c44:	002a      	movs	r2, r5
 8001c46:	430a      	orrs	r2, r1
 8001c48:	2107      	movs	r1, #7
 8001c4a:	000d      	movs	r5, r1
 8001c4c:	2400      	movs	r4, #0
 8001c4e:	4015      	ands	r5, r2
 8001c50:	4211      	tst	r1, r2
 8001c52:	d05b      	beq.n	8001d0c <__aeabi_dmul+0x4b4>
 8001c54:	210f      	movs	r1, #15
 8001c56:	2400      	movs	r4, #0
 8001c58:	4011      	ands	r1, r2
 8001c5a:	2904      	cmp	r1, #4
 8001c5c:	d053      	beq.n	8001d06 <__aeabi_dmul+0x4ae>
 8001c5e:	1d11      	adds	r1, r2, #4
 8001c60:	4291      	cmp	r1, r2
 8001c62:	4192      	sbcs	r2, r2
 8001c64:	4252      	negs	r2, r2
 8001c66:	18a4      	adds	r4, r4, r2
 8001c68:	000a      	movs	r2, r1
 8001c6a:	0223      	lsls	r3, r4, #8
 8001c6c:	d54b      	bpl.n	8001d06 <__aeabi_dmul+0x4ae>
 8001c6e:	2201      	movs	r2, #1
 8001c70:	2400      	movs	r4, #0
 8001c72:	2500      	movs	r5, #0
 8001c74:	e660      	b.n	8001938 <__aeabi_dmul+0xe0>
 8001c76:	2380      	movs	r3, #128	; 0x80
 8001c78:	031b      	lsls	r3, r3, #12
 8001c7a:	421c      	tst	r4, r3
 8001c7c:	d009      	beq.n	8001c92 <__aeabi_dmul+0x43a>
 8001c7e:	421e      	tst	r6, r3
 8001c80:	d107      	bne.n	8001c92 <__aeabi_dmul+0x43a>
 8001c82:	4333      	orrs	r3, r6
 8001c84:	031c      	lsls	r4, r3, #12
 8001c86:	4643      	mov	r3, r8
 8001c88:	0015      	movs	r5, r2
 8001c8a:	0b24      	lsrs	r4, r4, #12
 8001c8c:	4a25      	ldr	r2, [pc, #148]	; (8001d24 <__aeabi_dmul+0x4cc>)
 8001c8e:	9301      	str	r3, [sp, #4]
 8001c90:	e652      	b.n	8001938 <__aeabi_dmul+0xe0>
 8001c92:	2280      	movs	r2, #128	; 0x80
 8001c94:	0312      	lsls	r2, r2, #12
 8001c96:	4314      	orrs	r4, r2
 8001c98:	0324      	lsls	r4, r4, #12
 8001c9a:	4a22      	ldr	r2, [pc, #136]	; (8001d24 <__aeabi_dmul+0x4cc>)
 8001c9c:	0b24      	lsrs	r4, r4, #12
 8001c9e:	9701      	str	r7, [sp, #4]
 8001ca0:	e64a      	b.n	8001938 <__aeabi_dmul+0xe0>
 8001ca2:	f000 fcab 	bl	80025fc <__clzsi2>
 8001ca6:	0003      	movs	r3, r0
 8001ca8:	001a      	movs	r2, r3
 8001caa:	3215      	adds	r2, #21
 8001cac:	3020      	adds	r0, #32
 8001cae:	2a1c      	cmp	r2, #28
 8001cb0:	dc00      	bgt.n	8001cb4 <__aeabi_dmul+0x45c>
 8001cb2:	e684      	b.n	80019be <__aeabi_dmul+0x166>
 8001cb4:	4656      	mov	r6, sl
 8001cb6:	3b08      	subs	r3, #8
 8001cb8:	2200      	movs	r2, #0
 8001cba:	409e      	lsls	r6, r3
 8001cbc:	e689      	b.n	80019d2 <__aeabi_dmul+0x17a>
 8001cbe:	f000 fc9d 	bl	80025fc <__clzsi2>
 8001cc2:	0001      	movs	r1, r0
 8001cc4:	0002      	movs	r2, r0
 8001cc6:	3115      	adds	r1, #21
 8001cc8:	3220      	adds	r2, #32
 8001cca:	291c      	cmp	r1, #28
 8001ccc:	dc00      	bgt.n	8001cd0 <__aeabi_dmul+0x478>
 8001cce:	e64e      	b.n	800196e <__aeabi_dmul+0x116>
 8001cd0:	0034      	movs	r4, r6
 8001cd2:	3808      	subs	r0, #8
 8001cd4:	2500      	movs	r5, #0
 8001cd6:	4084      	lsls	r4, r0
 8001cd8:	e653      	b.n	8001982 <__aeabi_dmul+0x12a>
 8001cda:	9b00      	ldr	r3, [sp, #0]
 8001cdc:	469c      	mov	ip, r3
 8001cde:	e741      	b.n	8001b64 <__aeabi_dmul+0x30c>
 8001ce0:	4912      	ldr	r1, [pc, #72]	; (8001d2c <__aeabi_dmul+0x4d4>)
 8001ce2:	0022      	movs	r2, r4
 8001ce4:	4461      	add	r1, ip
 8001ce6:	002e      	movs	r6, r5
 8001ce8:	408d      	lsls	r5, r1
 8001cea:	408a      	lsls	r2, r1
 8001cec:	40c6      	lsrs	r6, r0
 8001cee:	1e69      	subs	r1, r5, #1
 8001cf0:	418d      	sbcs	r5, r1
 8001cf2:	4332      	orrs	r2, r6
 8001cf4:	432a      	orrs	r2, r5
 8001cf6:	40c4      	lsrs	r4, r0
 8001cf8:	0753      	lsls	r3, r2, #29
 8001cfa:	d0b6      	beq.n	8001c6a <__aeabi_dmul+0x412>
 8001cfc:	210f      	movs	r1, #15
 8001cfe:	4011      	ands	r1, r2
 8001d00:	2904      	cmp	r1, #4
 8001d02:	d1ac      	bne.n	8001c5e <__aeabi_dmul+0x406>
 8001d04:	e7b1      	b.n	8001c6a <__aeabi_dmul+0x412>
 8001d06:	0765      	lsls	r5, r4, #29
 8001d08:	0264      	lsls	r4, r4, #9
 8001d0a:	0b24      	lsrs	r4, r4, #12
 8001d0c:	08d2      	lsrs	r2, r2, #3
 8001d0e:	4315      	orrs	r5, r2
 8001d10:	2200      	movs	r2, #0
 8001d12:	e611      	b.n	8001938 <__aeabi_dmul+0xe0>
 8001d14:	2280      	movs	r2, #128	; 0x80
 8001d16:	0312      	lsls	r2, r2, #12
 8001d18:	4314      	orrs	r4, r2
 8001d1a:	0324      	lsls	r4, r4, #12
 8001d1c:	4a01      	ldr	r2, [pc, #4]	; (8001d24 <__aeabi_dmul+0x4cc>)
 8001d1e:	0b24      	lsrs	r4, r4, #12
 8001d20:	e60a      	b.n	8001938 <__aeabi_dmul+0xe0>
 8001d22:	46c0      	nop			; (mov r8, r8)
 8001d24:	000007ff 	.word	0x000007ff
 8001d28:	0000043e 	.word	0x0000043e
 8001d2c:	0000041e 	.word	0x0000041e

08001d30 <__aeabi_dsub>:
 8001d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d32:	4657      	mov	r7, sl
 8001d34:	464e      	mov	r6, r9
 8001d36:	4645      	mov	r5, r8
 8001d38:	46de      	mov	lr, fp
 8001d3a:	0004      	movs	r4, r0
 8001d3c:	b5e0      	push	{r5, r6, r7, lr}
 8001d3e:	001f      	movs	r7, r3
 8001d40:	0010      	movs	r0, r2
 8001d42:	030b      	lsls	r3, r1, #12
 8001d44:	0f62      	lsrs	r2, r4, #29
 8001d46:	004e      	lsls	r6, r1, #1
 8001d48:	0fcd      	lsrs	r5, r1, #31
 8001d4a:	0a5b      	lsrs	r3, r3, #9
 8001d4c:	0339      	lsls	r1, r7, #12
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	0a49      	lsrs	r1, r1, #9
 8001d52:	00e2      	lsls	r2, r4, #3
 8001d54:	0f44      	lsrs	r4, r0, #29
 8001d56:	4321      	orrs	r1, r4
 8001d58:	4cc2      	ldr	r4, [pc, #776]	; (8002064 <__aeabi_dsub+0x334>)
 8001d5a:	4691      	mov	r9, r2
 8001d5c:	4692      	mov	sl, r2
 8001d5e:	00c0      	lsls	r0, r0, #3
 8001d60:	007a      	lsls	r2, r7, #1
 8001d62:	4680      	mov	r8, r0
 8001d64:	0d76      	lsrs	r6, r6, #21
 8001d66:	0d52      	lsrs	r2, r2, #21
 8001d68:	0fff      	lsrs	r7, r7, #31
 8001d6a:	42a2      	cmp	r2, r4
 8001d6c:	d100      	bne.n	8001d70 <__aeabi_dsub+0x40>
 8001d6e:	e0b4      	b.n	8001eda <__aeabi_dsub+0x1aa>
 8001d70:	2401      	movs	r4, #1
 8001d72:	4067      	eors	r7, r4
 8001d74:	46bb      	mov	fp, r7
 8001d76:	42bd      	cmp	r5, r7
 8001d78:	d100      	bne.n	8001d7c <__aeabi_dsub+0x4c>
 8001d7a:	e088      	b.n	8001e8e <__aeabi_dsub+0x15e>
 8001d7c:	1ab4      	subs	r4, r6, r2
 8001d7e:	46a4      	mov	ip, r4
 8001d80:	2c00      	cmp	r4, #0
 8001d82:	dc00      	bgt.n	8001d86 <__aeabi_dsub+0x56>
 8001d84:	e0b2      	b.n	8001eec <__aeabi_dsub+0x1bc>
 8001d86:	2a00      	cmp	r2, #0
 8001d88:	d100      	bne.n	8001d8c <__aeabi_dsub+0x5c>
 8001d8a:	e0c5      	b.n	8001f18 <__aeabi_dsub+0x1e8>
 8001d8c:	4ab5      	ldr	r2, [pc, #724]	; (8002064 <__aeabi_dsub+0x334>)
 8001d8e:	4296      	cmp	r6, r2
 8001d90:	d100      	bne.n	8001d94 <__aeabi_dsub+0x64>
 8001d92:	e28b      	b.n	80022ac <__aeabi_dsub+0x57c>
 8001d94:	2280      	movs	r2, #128	; 0x80
 8001d96:	0412      	lsls	r2, r2, #16
 8001d98:	4311      	orrs	r1, r2
 8001d9a:	4662      	mov	r2, ip
 8001d9c:	2a38      	cmp	r2, #56	; 0x38
 8001d9e:	dd00      	ble.n	8001da2 <__aeabi_dsub+0x72>
 8001da0:	e1a1      	b.n	80020e6 <__aeabi_dsub+0x3b6>
 8001da2:	2a1f      	cmp	r2, #31
 8001da4:	dd00      	ble.n	8001da8 <__aeabi_dsub+0x78>
 8001da6:	e216      	b.n	80021d6 <__aeabi_dsub+0x4a6>
 8001da8:	2720      	movs	r7, #32
 8001daa:	000c      	movs	r4, r1
 8001dac:	1abf      	subs	r7, r7, r2
 8001dae:	40bc      	lsls	r4, r7
 8001db0:	0002      	movs	r2, r0
 8001db2:	46a0      	mov	r8, r4
 8001db4:	4664      	mov	r4, ip
 8001db6:	40b8      	lsls	r0, r7
 8001db8:	40e2      	lsrs	r2, r4
 8001dba:	4644      	mov	r4, r8
 8001dbc:	4314      	orrs	r4, r2
 8001dbe:	0002      	movs	r2, r0
 8001dc0:	1e50      	subs	r0, r2, #1
 8001dc2:	4182      	sbcs	r2, r0
 8001dc4:	4660      	mov	r0, ip
 8001dc6:	40c1      	lsrs	r1, r0
 8001dc8:	4322      	orrs	r2, r4
 8001dca:	1a5b      	subs	r3, r3, r1
 8001dcc:	4649      	mov	r1, r9
 8001dce:	1a8c      	subs	r4, r1, r2
 8001dd0:	45a1      	cmp	r9, r4
 8001dd2:	4192      	sbcs	r2, r2
 8001dd4:	4252      	negs	r2, r2
 8001dd6:	1a9b      	subs	r3, r3, r2
 8001dd8:	4698      	mov	r8, r3
 8001dda:	4643      	mov	r3, r8
 8001ddc:	021b      	lsls	r3, r3, #8
 8001dde:	d400      	bmi.n	8001de2 <__aeabi_dsub+0xb2>
 8001de0:	e117      	b.n	8002012 <__aeabi_dsub+0x2e2>
 8001de2:	4643      	mov	r3, r8
 8001de4:	025b      	lsls	r3, r3, #9
 8001de6:	0a5b      	lsrs	r3, r3, #9
 8001de8:	4698      	mov	r8, r3
 8001dea:	4643      	mov	r3, r8
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d100      	bne.n	8001df2 <__aeabi_dsub+0xc2>
 8001df0:	e16c      	b.n	80020cc <__aeabi_dsub+0x39c>
 8001df2:	4640      	mov	r0, r8
 8001df4:	f000 fc02 	bl	80025fc <__clzsi2>
 8001df8:	0002      	movs	r2, r0
 8001dfa:	3a08      	subs	r2, #8
 8001dfc:	2120      	movs	r1, #32
 8001dfe:	0020      	movs	r0, r4
 8001e00:	4643      	mov	r3, r8
 8001e02:	1a89      	subs	r1, r1, r2
 8001e04:	4093      	lsls	r3, r2
 8001e06:	40c8      	lsrs	r0, r1
 8001e08:	4094      	lsls	r4, r2
 8001e0a:	4303      	orrs	r3, r0
 8001e0c:	4296      	cmp	r6, r2
 8001e0e:	dd00      	ble.n	8001e12 <__aeabi_dsub+0xe2>
 8001e10:	e157      	b.n	80020c2 <__aeabi_dsub+0x392>
 8001e12:	1b96      	subs	r6, r2, r6
 8001e14:	1c71      	adds	r1, r6, #1
 8001e16:	291f      	cmp	r1, #31
 8001e18:	dd00      	ble.n	8001e1c <__aeabi_dsub+0xec>
 8001e1a:	e1cb      	b.n	80021b4 <__aeabi_dsub+0x484>
 8001e1c:	2220      	movs	r2, #32
 8001e1e:	0018      	movs	r0, r3
 8001e20:	0026      	movs	r6, r4
 8001e22:	1a52      	subs	r2, r2, r1
 8001e24:	4094      	lsls	r4, r2
 8001e26:	4090      	lsls	r0, r2
 8001e28:	40ce      	lsrs	r6, r1
 8001e2a:	40cb      	lsrs	r3, r1
 8001e2c:	1e62      	subs	r2, r4, #1
 8001e2e:	4194      	sbcs	r4, r2
 8001e30:	4330      	orrs	r0, r6
 8001e32:	4698      	mov	r8, r3
 8001e34:	2600      	movs	r6, #0
 8001e36:	4304      	orrs	r4, r0
 8001e38:	0763      	lsls	r3, r4, #29
 8001e3a:	d009      	beq.n	8001e50 <__aeabi_dsub+0x120>
 8001e3c:	230f      	movs	r3, #15
 8001e3e:	4023      	ands	r3, r4
 8001e40:	2b04      	cmp	r3, #4
 8001e42:	d005      	beq.n	8001e50 <__aeabi_dsub+0x120>
 8001e44:	1d23      	adds	r3, r4, #4
 8001e46:	42a3      	cmp	r3, r4
 8001e48:	41a4      	sbcs	r4, r4
 8001e4a:	4264      	negs	r4, r4
 8001e4c:	44a0      	add	r8, r4
 8001e4e:	001c      	movs	r4, r3
 8001e50:	4643      	mov	r3, r8
 8001e52:	021b      	lsls	r3, r3, #8
 8001e54:	d400      	bmi.n	8001e58 <__aeabi_dsub+0x128>
 8001e56:	e0df      	b.n	8002018 <__aeabi_dsub+0x2e8>
 8001e58:	4b82      	ldr	r3, [pc, #520]	; (8002064 <__aeabi_dsub+0x334>)
 8001e5a:	3601      	adds	r6, #1
 8001e5c:	429e      	cmp	r6, r3
 8001e5e:	d100      	bne.n	8001e62 <__aeabi_dsub+0x132>
 8001e60:	e0fb      	b.n	800205a <__aeabi_dsub+0x32a>
 8001e62:	4642      	mov	r2, r8
 8001e64:	4b80      	ldr	r3, [pc, #512]	; (8002068 <__aeabi_dsub+0x338>)
 8001e66:	08e4      	lsrs	r4, r4, #3
 8001e68:	401a      	ands	r2, r3
 8001e6a:	0013      	movs	r3, r2
 8001e6c:	0571      	lsls	r1, r6, #21
 8001e6e:	0752      	lsls	r2, r2, #29
 8001e70:	025b      	lsls	r3, r3, #9
 8001e72:	4322      	orrs	r2, r4
 8001e74:	0b1b      	lsrs	r3, r3, #12
 8001e76:	0d49      	lsrs	r1, r1, #21
 8001e78:	0509      	lsls	r1, r1, #20
 8001e7a:	07ed      	lsls	r5, r5, #31
 8001e7c:	4319      	orrs	r1, r3
 8001e7e:	4329      	orrs	r1, r5
 8001e80:	0010      	movs	r0, r2
 8001e82:	bcf0      	pop	{r4, r5, r6, r7}
 8001e84:	46bb      	mov	fp, r7
 8001e86:	46b2      	mov	sl, r6
 8001e88:	46a9      	mov	r9, r5
 8001e8a:	46a0      	mov	r8, r4
 8001e8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001e8e:	1ab4      	subs	r4, r6, r2
 8001e90:	46a4      	mov	ip, r4
 8001e92:	2c00      	cmp	r4, #0
 8001e94:	dd58      	ble.n	8001f48 <__aeabi_dsub+0x218>
 8001e96:	2a00      	cmp	r2, #0
 8001e98:	d100      	bne.n	8001e9c <__aeabi_dsub+0x16c>
 8001e9a:	e09e      	b.n	8001fda <__aeabi_dsub+0x2aa>
 8001e9c:	4a71      	ldr	r2, [pc, #452]	; (8002064 <__aeabi_dsub+0x334>)
 8001e9e:	4296      	cmp	r6, r2
 8001ea0:	d100      	bne.n	8001ea4 <__aeabi_dsub+0x174>
 8001ea2:	e13b      	b.n	800211c <__aeabi_dsub+0x3ec>
 8001ea4:	2280      	movs	r2, #128	; 0x80
 8001ea6:	0412      	lsls	r2, r2, #16
 8001ea8:	4311      	orrs	r1, r2
 8001eaa:	4662      	mov	r2, ip
 8001eac:	2a38      	cmp	r2, #56	; 0x38
 8001eae:	dd00      	ble.n	8001eb2 <__aeabi_dsub+0x182>
 8001eb0:	e0c1      	b.n	8002036 <__aeabi_dsub+0x306>
 8001eb2:	2a1f      	cmp	r2, #31
 8001eb4:	dc00      	bgt.n	8001eb8 <__aeabi_dsub+0x188>
 8001eb6:	e1bb      	b.n	8002230 <__aeabi_dsub+0x500>
 8001eb8:	000c      	movs	r4, r1
 8001eba:	3a20      	subs	r2, #32
 8001ebc:	40d4      	lsrs	r4, r2
 8001ebe:	0022      	movs	r2, r4
 8001ec0:	4664      	mov	r4, ip
 8001ec2:	2c20      	cmp	r4, #32
 8001ec4:	d004      	beq.n	8001ed0 <__aeabi_dsub+0x1a0>
 8001ec6:	2740      	movs	r7, #64	; 0x40
 8001ec8:	1b3f      	subs	r7, r7, r4
 8001eca:	40b9      	lsls	r1, r7
 8001ecc:	4308      	orrs	r0, r1
 8001ece:	4680      	mov	r8, r0
 8001ed0:	4644      	mov	r4, r8
 8001ed2:	1e61      	subs	r1, r4, #1
 8001ed4:	418c      	sbcs	r4, r1
 8001ed6:	4314      	orrs	r4, r2
 8001ed8:	e0b1      	b.n	800203e <__aeabi_dsub+0x30e>
 8001eda:	000c      	movs	r4, r1
 8001edc:	4304      	orrs	r4, r0
 8001ede:	d02a      	beq.n	8001f36 <__aeabi_dsub+0x206>
 8001ee0:	46bb      	mov	fp, r7
 8001ee2:	42bd      	cmp	r5, r7
 8001ee4:	d02d      	beq.n	8001f42 <__aeabi_dsub+0x212>
 8001ee6:	4c61      	ldr	r4, [pc, #388]	; (800206c <__aeabi_dsub+0x33c>)
 8001ee8:	46a4      	mov	ip, r4
 8001eea:	44b4      	add	ip, r6
 8001eec:	4664      	mov	r4, ip
 8001eee:	2c00      	cmp	r4, #0
 8001ef0:	d05c      	beq.n	8001fac <__aeabi_dsub+0x27c>
 8001ef2:	1b94      	subs	r4, r2, r6
 8001ef4:	46a4      	mov	ip, r4
 8001ef6:	2e00      	cmp	r6, #0
 8001ef8:	d000      	beq.n	8001efc <__aeabi_dsub+0x1cc>
 8001efa:	e115      	b.n	8002128 <__aeabi_dsub+0x3f8>
 8001efc:	464d      	mov	r5, r9
 8001efe:	431d      	orrs	r5, r3
 8001f00:	d100      	bne.n	8001f04 <__aeabi_dsub+0x1d4>
 8001f02:	e1c3      	b.n	800228c <__aeabi_dsub+0x55c>
 8001f04:	1e65      	subs	r5, r4, #1
 8001f06:	2c01      	cmp	r4, #1
 8001f08:	d100      	bne.n	8001f0c <__aeabi_dsub+0x1dc>
 8001f0a:	e20c      	b.n	8002326 <__aeabi_dsub+0x5f6>
 8001f0c:	4e55      	ldr	r6, [pc, #340]	; (8002064 <__aeabi_dsub+0x334>)
 8001f0e:	42b4      	cmp	r4, r6
 8001f10:	d100      	bne.n	8001f14 <__aeabi_dsub+0x1e4>
 8001f12:	e1f8      	b.n	8002306 <__aeabi_dsub+0x5d6>
 8001f14:	46ac      	mov	ip, r5
 8001f16:	e10e      	b.n	8002136 <__aeabi_dsub+0x406>
 8001f18:	000a      	movs	r2, r1
 8001f1a:	4302      	orrs	r2, r0
 8001f1c:	d100      	bne.n	8001f20 <__aeabi_dsub+0x1f0>
 8001f1e:	e136      	b.n	800218e <__aeabi_dsub+0x45e>
 8001f20:	0022      	movs	r2, r4
 8001f22:	3a01      	subs	r2, #1
 8001f24:	2c01      	cmp	r4, #1
 8001f26:	d100      	bne.n	8001f2a <__aeabi_dsub+0x1fa>
 8001f28:	e1c6      	b.n	80022b8 <__aeabi_dsub+0x588>
 8001f2a:	4c4e      	ldr	r4, [pc, #312]	; (8002064 <__aeabi_dsub+0x334>)
 8001f2c:	45a4      	cmp	ip, r4
 8001f2e:	d100      	bne.n	8001f32 <__aeabi_dsub+0x202>
 8001f30:	e0f4      	b.n	800211c <__aeabi_dsub+0x3ec>
 8001f32:	4694      	mov	ip, r2
 8001f34:	e731      	b.n	8001d9a <__aeabi_dsub+0x6a>
 8001f36:	2401      	movs	r4, #1
 8001f38:	4067      	eors	r7, r4
 8001f3a:	46bb      	mov	fp, r7
 8001f3c:	42bd      	cmp	r5, r7
 8001f3e:	d000      	beq.n	8001f42 <__aeabi_dsub+0x212>
 8001f40:	e71c      	b.n	8001d7c <__aeabi_dsub+0x4c>
 8001f42:	4c4a      	ldr	r4, [pc, #296]	; (800206c <__aeabi_dsub+0x33c>)
 8001f44:	46a4      	mov	ip, r4
 8001f46:	44b4      	add	ip, r6
 8001f48:	4664      	mov	r4, ip
 8001f4a:	2c00      	cmp	r4, #0
 8001f4c:	d100      	bne.n	8001f50 <__aeabi_dsub+0x220>
 8001f4e:	e0cf      	b.n	80020f0 <__aeabi_dsub+0x3c0>
 8001f50:	1b94      	subs	r4, r2, r6
 8001f52:	46a4      	mov	ip, r4
 8001f54:	2e00      	cmp	r6, #0
 8001f56:	d100      	bne.n	8001f5a <__aeabi_dsub+0x22a>
 8001f58:	e15c      	b.n	8002214 <__aeabi_dsub+0x4e4>
 8001f5a:	4e42      	ldr	r6, [pc, #264]	; (8002064 <__aeabi_dsub+0x334>)
 8001f5c:	42b2      	cmp	r2, r6
 8001f5e:	d100      	bne.n	8001f62 <__aeabi_dsub+0x232>
 8001f60:	e1ec      	b.n	800233c <__aeabi_dsub+0x60c>
 8001f62:	2680      	movs	r6, #128	; 0x80
 8001f64:	0436      	lsls	r6, r6, #16
 8001f66:	4333      	orrs	r3, r6
 8001f68:	4664      	mov	r4, ip
 8001f6a:	2c38      	cmp	r4, #56	; 0x38
 8001f6c:	dd00      	ble.n	8001f70 <__aeabi_dsub+0x240>
 8001f6e:	e1b3      	b.n	80022d8 <__aeabi_dsub+0x5a8>
 8001f70:	2c1f      	cmp	r4, #31
 8001f72:	dd00      	ble.n	8001f76 <__aeabi_dsub+0x246>
 8001f74:	e238      	b.n	80023e8 <__aeabi_dsub+0x6b8>
 8001f76:	2620      	movs	r6, #32
 8001f78:	1b36      	subs	r6, r6, r4
 8001f7a:	001c      	movs	r4, r3
 8001f7c:	40b4      	lsls	r4, r6
 8001f7e:	464f      	mov	r7, r9
 8001f80:	46a0      	mov	r8, r4
 8001f82:	4664      	mov	r4, ip
 8001f84:	40e7      	lsrs	r7, r4
 8001f86:	4644      	mov	r4, r8
 8001f88:	433c      	orrs	r4, r7
 8001f8a:	464f      	mov	r7, r9
 8001f8c:	40b7      	lsls	r7, r6
 8001f8e:	003e      	movs	r6, r7
 8001f90:	1e77      	subs	r7, r6, #1
 8001f92:	41be      	sbcs	r6, r7
 8001f94:	4334      	orrs	r4, r6
 8001f96:	4666      	mov	r6, ip
 8001f98:	40f3      	lsrs	r3, r6
 8001f9a:	18c9      	adds	r1, r1, r3
 8001f9c:	1824      	adds	r4, r4, r0
 8001f9e:	4284      	cmp	r4, r0
 8001fa0:	419b      	sbcs	r3, r3
 8001fa2:	425b      	negs	r3, r3
 8001fa4:	4698      	mov	r8, r3
 8001fa6:	0016      	movs	r6, r2
 8001fa8:	4488      	add	r8, r1
 8001faa:	e04e      	b.n	800204a <__aeabi_dsub+0x31a>
 8001fac:	4a30      	ldr	r2, [pc, #192]	; (8002070 <__aeabi_dsub+0x340>)
 8001fae:	1c74      	adds	r4, r6, #1
 8001fb0:	4214      	tst	r4, r2
 8001fb2:	d000      	beq.n	8001fb6 <__aeabi_dsub+0x286>
 8001fb4:	e0d6      	b.n	8002164 <__aeabi_dsub+0x434>
 8001fb6:	464a      	mov	r2, r9
 8001fb8:	431a      	orrs	r2, r3
 8001fba:	2e00      	cmp	r6, #0
 8001fbc:	d000      	beq.n	8001fc0 <__aeabi_dsub+0x290>
 8001fbe:	e15b      	b.n	8002278 <__aeabi_dsub+0x548>
 8001fc0:	2a00      	cmp	r2, #0
 8001fc2:	d100      	bne.n	8001fc6 <__aeabi_dsub+0x296>
 8001fc4:	e1a5      	b.n	8002312 <__aeabi_dsub+0x5e2>
 8001fc6:	000a      	movs	r2, r1
 8001fc8:	4302      	orrs	r2, r0
 8001fca:	d000      	beq.n	8001fce <__aeabi_dsub+0x29e>
 8001fcc:	e1bb      	b.n	8002346 <__aeabi_dsub+0x616>
 8001fce:	464a      	mov	r2, r9
 8001fd0:	0759      	lsls	r1, r3, #29
 8001fd2:	08d2      	lsrs	r2, r2, #3
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	08db      	lsrs	r3, r3, #3
 8001fd8:	e027      	b.n	800202a <__aeabi_dsub+0x2fa>
 8001fda:	000a      	movs	r2, r1
 8001fdc:	4302      	orrs	r2, r0
 8001fde:	d100      	bne.n	8001fe2 <__aeabi_dsub+0x2b2>
 8001fe0:	e174      	b.n	80022cc <__aeabi_dsub+0x59c>
 8001fe2:	0022      	movs	r2, r4
 8001fe4:	3a01      	subs	r2, #1
 8001fe6:	2c01      	cmp	r4, #1
 8001fe8:	d005      	beq.n	8001ff6 <__aeabi_dsub+0x2c6>
 8001fea:	4c1e      	ldr	r4, [pc, #120]	; (8002064 <__aeabi_dsub+0x334>)
 8001fec:	45a4      	cmp	ip, r4
 8001fee:	d100      	bne.n	8001ff2 <__aeabi_dsub+0x2c2>
 8001ff0:	e094      	b.n	800211c <__aeabi_dsub+0x3ec>
 8001ff2:	4694      	mov	ip, r2
 8001ff4:	e759      	b.n	8001eaa <__aeabi_dsub+0x17a>
 8001ff6:	4448      	add	r0, r9
 8001ff8:	4548      	cmp	r0, r9
 8001ffa:	4192      	sbcs	r2, r2
 8001ffc:	185b      	adds	r3, r3, r1
 8001ffe:	4698      	mov	r8, r3
 8002000:	0004      	movs	r4, r0
 8002002:	4252      	negs	r2, r2
 8002004:	4490      	add	r8, r2
 8002006:	4643      	mov	r3, r8
 8002008:	2602      	movs	r6, #2
 800200a:	021b      	lsls	r3, r3, #8
 800200c:	d500      	bpl.n	8002010 <__aeabi_dsub+0x2e0>
 800200e:	e0c4      	b.n	800219a <__aeabi_dsub+0x46a>
 8002010:	3e01      	subs	r6, #1
 8002012:	0763      	lsls	r3, r4, #29
 8002014:	d000      	beq.n	8002018 <__aeabi_dsub+0x2e8>
 8002016:	e711      	b.n	8001e3c <__aeabi_dsub+0x10c>
 8002018:	4643      	mov	r3, r8
 800201a:	46b4      	mov	ip, r6
 800201c:	0759      	lsls	r1, r3, #29
 800201e:	08e2      	lsrs	r2, r4, #3
 8002020:	430a      	orrs	r2, r1
 8002022:	08db      	lsrs	r3, r3, #3
 8002024:	490f      	ldr	r1, [pc, #60]	; (8002064 <__aeabi_dsub+0x334>)
 8002026:	458c      	cmp	ip, r1
 8002028:	d040      	beq.n	80020ac <__aeabi_dsub+0x37c>
 800202a:	4661      	mov	r1, ip
 800202c:	031b      	lsls	r3, r3, #12
 800202e:	0549      	lsls	r1, r1, #21
 8002030:	0b1b      	lsrs	r3, r3, #12
 8002032:	0d49      	lsrs	r1, r1, #21
 8002034:	e720      	b.n	8001e78 <__aeabi_dsub+0x148>
 8002036:	4301      	orrs	r1, r0
 8002038:	000c      	movs	r4, r1
 800203a:	1e61      	subs	r1, r4, #1
 800203c:	418c      	sbcs	r4, r1
 800203e:	444c      	add	r4, r9
 8002040:	454c      	cmp	r4, r9
 8002042:	4192      	sbcs	r2, r2
 8002044:	4252      	negs	r2, r2
 8002046:	4690      	mov	r8, r2
 8002048:	4498      	add	r8, r3
 800204a:	4643      	mov	r3, r8
 800204c:	021b      	lsls	r3, r3, #8
 800204e:	d5e0      	bpl.n	8002012 <__aeabi_dsub+0x2e2>
 8002050:	4b04      	ldr	r3, [pc, #16]	; (8002064 <__aeabi_dsub+0x334>)
 8002052:	3601      	adds	r6, #1
 8002054:	429e      	cmp	r6, r3
 8002056:	d000      	beq.n	800205a <__aeabi_dsub+0x32a>
 8002058:	e09f      	b.n	800219a <__aeabi_dsub+0x46a>
 800205a:	0031      	movs	r1, r6
 800205c:	2300      	movs	r3, #0
 800205e:	2200      	movs	r2, #0
 8002060:	e70a      	b.n	8001e78 <__aeabi_dsub+0x148>
 8002062:	46c0      	nop			; (mov r8, r8)
 8002064:	000007ff 	.word	0x000007ff
 8002068:	ff7fffff 	.word	0xff7fffff
 800206c:	fffff801 	.word	0xfffff801
 8002070:	000007fe 	.word	0x000007fe
 8002074:	2a00      	cmp	r2, #0
 8002076:	d100      	bne.n	800207a <__aeabi_dsub+0x34a>
 8002078:	e160      	b.n	800233c <__aeabi_dsub+0x60c>
 800207a:	000a      	movs	r2, r1
 800207c:	4302      	orrs	r2, r0
 800207e:	d04d      	beq.n	800211c <__aeabi_dsub+0x3ec>
 8002080:	464a      	mov	r2, r9
 8002082:	075c      	lsls	r4, r3, #29
 8002084:	08d2      	lsrs	r2, r2, #3
 8002086:	4322      	orrs	r2, r4
 8002088:	2480      	movs	r4, #128	; 0x80
 800208a:	08db      	lsrs	r3, r3, #3
 800208c:	0324      	lsls	r4, r4, #12
 800208e:	4223      	tst	r3, r4
 8002090:	d007      	beq.n	80020a2 <__aeabi_dsub+0x372>
 8002092:	08ce      	lsrs	r6, r1, #3
 8002094:	4226      	tst	r6, r4
 8002096:	d104      	bne.n	80020a2 <__aeabi_dsub+0x372>
 8002098:	465d      	mov	r5, fp
 800209a:	0033      	movs	r3, r6
 800209c:	08c2      	lsrs	r2, r0, #3
 800209e:	0749      	lsls	r1, r1, #29
 80020a0:	430a      	orrs	r2, r1
 80020a2:	0f51      	lsrs	r1, r2, #29
 80020a4:	00d2      	lsls	r2, r2, #3
 80020a6:	08d2      	lsrs	r2, r2, #3
 80020a8:	0749      	lsls	r1, r1, #29
 80020aa:	430a      	orrs	r2, r1
 80020ac:	0011      	movs	r1, r2
 80020ae:	4319      	orrs	r1, r3
 80020b0:	d100      	bne.n	80020b4 <__aeabi_dsub+0x384>
 80020b2:	e1c8      	b.n	8002446 <__aeabi_dsub+0x716>
 80020b4:	2180      	movs	r1, #128	; 0x80
 80020b6:	0309      	lsls	r1, r1, #12
 80020b8:	430b      	orrs	r3, r1
 80020ba:	031b      	lsls	r3, r3, #12
 80020bc:	49d5      	ldr	r1, [pc, #852]	; (8002414 <__aeabi_dsub+0x6e4>)
 80020be:	0b1b      	lsrs	r3, r3, #12
 80020c0:	e6da      	b.n	8001e78 <__aeabi_dsub+0x148>
 80020c2:	49d5      	ldr	r1, [pc, #852]	; (8002418 <__aeabi_dsub+0x6e8>)
 80020c4:	1ab6      	subs	r6, r6, r2
 80020c6:	400b      	ands	r3, r1
 80020c8:	4698      	mov	r8, r3
 80020ca:	e6b5      	b.n	8001e38 <__aeabi_dsub+0x108>
 80020cc:	0020      	movs	r0, r4
 80020ce:	f000 fa95 	bl	80025fc <__clzsi2>
 80020d2:	0002      	movs	r2, r0
 80020d4:	3218      	adds	r2, #24
 80020d6:	2a1f      	cmp	r2, #31
 80020d8:	dc00      	bgt.n	80020dc <__aeabi_dsub+0x3ac>
 80020da:	e68f      	b.n	8001dfc <__aeabi_dsub+0xcc>
 80020dc:	0023      	movs	r3, r4
 80020de:	3808      	subs	r0, #8
 80020e0:	4083      	lsls	r3, r0
 80020e2:	2400      	movs	r4, #0
 80020e4:	e692      	b.n	8001e0c <__aeabi_dsub+0xdc>
 80020e6:	4308      	orrs	r0, r1
 80020e8:	0002      	movs	r2, r0
 80020ea:	1e50      	subs	r0, r2, #1
 80020ec:	4182      	sbcs	r2, r0
 80020ee:	e66d      	b.n	8001dcc <__aeabi_dsub+0x9c>
 80020f0:	4cca      	ldr	r4, [pc, #808]	; (800241c <__aeabi_dsub+0x6ec>)
 80020f2:	1c72      	adds	r2, r6, #1
 80020f4:	4222      	tst	r2, r4
 80020f6:	d000      	beq.n	80020fa <__aeabi_dsub+0x3ca>
 80020f8:	e0ad      	b.n	8002256 <__aeabi_dsub+0x526>
 80020fa:	464a      	mov	r2, r9
 80020fc:	431a      	orrs	r2, r3
 80020fe:	2e00      	cmp	r6, #0
 8002100:	d1b8      	bne.n	8002074 <__aeabi_dsub+0x344>
 8002102:	2a00      	cmp	r2, #0
 8002104:	d100      	bne.n	8002108 <__aeabi_dsub+0x3d8>
 8002106:	e158      	b.n	80023ba <__aeabi_dsub+0x68a>
 8002108:	000a      	movs	r2, r1
 800210a:	4302      	orrs	r2, r0
 800210c:	d000      	beq.n	8002110 <__aeabi_dsub+0x3e0>
 800210e:	e159      	b.n	80023c4 <__aeabi_dsub+0x694>
 8002110:	464a      	mov	r2, r9
 8002112:	0759      	lsls	r1, r3, #29
 8002114:	08d2      	lsrs	r2, r2, #3
 8002116:	430a      	orrs	r2, r1
 8002118:	08db      	lsrs	r3, r3, #3
 800211a:	e786      	b.n	800202a <__aeabi_dsub+0x2fa>
 800211c:	464a      	mov	r2, r9
 800211e:	0759      	lsls	r1, r3, #29
 8002120:	08d2      	lsrs	r2, r2, #3
 8002122:	430a      	orrs	r2, r1
 8002124:	08db      	lsrs	r3, r3, #3
 8002126:	e7c1      	b.n	80020ac <__aeabi_dsub+0x37c>
 8002128:	4dba      	ldr	r5, [pc, #744]	; (8002414 <__aeabi_dsub+0x6e4>)
 800212a:	42aa      	cmp	r2, r5
 800212c:	d100      	bne.n	8002130 <__aeabi_dsub+0x400>
 800212e:	e11e      	b.n	800236e <__aeabi_dsub+0x63e>
 8002130:	2580      	movs	r5, #128	; 0x80
 8002132:	042d      	lsls	r5, r5, #16
 8002134:	432b      	orrs	r3, r5
 8002136:	4664      	mov	r4, ip
 8002138:	2c38      	cmp	r4, #56	; 0x38
 800213a:	dc5d      	bgt.n	80021f8 <__aeabi_dsub+0x4c8>
 800213c:	2c1f      	cmp	r4, #31
 800213e:	dd00      	ble.n	8002142 <__aeabi_dsub+0x412>
 8002140:	e0d0      	b.n	80022e4 <__aeabi_dsub+0x5b4>
 8002142:	2520      	movs	r5, #32
 8002144:	4667      	mov	r7, ip
 8002146:	1b2d      	subs	r5, r5, r4
 8002148:	464e      	mov	r6, r9
 800214a:	001c      	movs	r4, r3
 800214c:	40fe      	lsrs	r6, r7
 800214e:	40ac      	lsls	r4, r5
 8002150:	4334      	orrs	r4, r6
 8002152:	464e      	mov	r6, r9
 8002154:	40ae      	lsls	r6, r5
 8002156:	0035      	movs	r5, r6
 8002158:	40fb      	lsrs	r3, r7
 800215a:	1e6e      	subs	r6, r5, #1
 800215c:	41b5      	sbcs	r5, r6
 800215e:	1ac9      	subs	r1, r1, r3
 8002160:	432c      	orrs	r4, r5
 8002162:	e04e      	b.n	8002202 <__aeabi_dsub+0x4d2>
 8002164:	464a      	mov	r2, r9
 8002166:	1a14      	subs	r4, r2, r0
 8002168:	45a1      	cmp	r9, r4
 800216a:	4192      	sbcs	r2, r2
 800216c:	4252      	negs	r2, r2
 800216e:	4690      	mov	r8, r2
 8002170:	1a5f      	subs	r7, r3, r1
 8002172:	003a      	movs	r2, r7
 8002174:	4647      	mov	r7, r8
 8002176:	1bd2      	subs	r2, r2, r7
 8002178:	4690      	mov	r8, r2
 800217a:	0212      	lsls	r2, r2, #8
 800217c:	d500      	bpl.n	8002180 <__aeabi_dsub+0x450>
 800217e:	e08b      	b.n	8002298 <__aeabi_dsub+0x568>
 8002180:	4642      	mov	r2, r8
 8002182:	4322      	orrs	r2, r4
 8002184:	d000      	beq.n	8002188 <__aeabi_dsub+0x458>
 8002186:	e630      	b.n	8001dea <__aeabi_dsub+0xba>
 8002188:	2300      	movs	r3, #0
 800218a:	2500      	movs	r5, #0
 800218c:	e74d      	b.n	800202a <__aeabi_dsub+0x2fa>
 800218e:	464a      	mov	r2, r9
 8002190:	0759      	lsls	r1, r3, #29
 8002192:	08d2      	lsrs	r2, r2, #3
 8002194:	430a      	orrs	r2, r1
 8002196:	08db      	lsrs	r3, r3, #3
 8002198:	e744      	b.n	8002024 <__aeabi_dsub+0x2f4>
 800219a:	4642      	mov	r2, r8
 800219c:	4b9e      	ldr	r3, [pc, #632]	; (8002418 <__aeabi_dsub+0x6e8>)
 800219e:	0861      	lsrs	r1, r4, #1
 80021a0:	401a      	ands	r2, r3
 80021a2:	0013      	movs	r3, r2
 80021a4:	2201      	movs	r2, #1
 80021a6:	4014      	ands	r4, r2
 80021a8:	430c      	orrs	r4, r1
 80021aa:	07da      	lsls	r2, r3, #31
 80021ac:	085b      	lsrs	r3, r3, #1
 80021ae:	4698      	mov	r8, r3
 80021b0:	4314      	orrs	r4, r2
 80021b2:	e641      	b.n	8001e38 <__aeabi_dsub+0x108>
 80021b4:	001a      	movs	r2, r3
 80021b6:	3e1f      	subs	r6, #31
 80021b8:	40f2      	lsrs	r2, r6
 80021ba:	0016      	movs	r6, r2
 80021bc:	2920      	cmp	r1, #32
 80021be:	d003      	beq.n	80021c8 <__aeabi_dsub+0x498>
 80021c0:	2240      	movs	r2, #64	; 0x40
 80021c2:	1a51      	subs	r1, r2, r1
 80021c4:	408b      	lsls	r3, r1
 80021c6:	431c      	orrs	r4, r3
 80021c8:	1e62      	subs	r2, r4, #1
 80021ca:	4194      	sbcs	r4, r2
 80021cc:	2300      	movs	r3, #0
 80021ce:	4334      	orrs	r4, r6
 80021d0:	4698      	mov	r8, r3
 80021d2:	2600      	movs	r6, #0
 80021d4:	e71d      	b.n	8002012 <__aeabi_dsub+0x2e2>
 80021d6:	000c      	movs	r4, r1
 80021d8:	3a20      	subs	r2, #32
 80021da:	40d4      	lsrs	r4, r2
 80021dc:	0022      	movs	r2, r4
 80021de:	4664      	mov	r4, ip
 80021e0:	2c20      	cmp	r4, #32
 80021e2:	d004      	beq.n	80021ee <__aeabi_dsub+0x4be>
 80021e4:	2740      	movs	r7, #64	; 0x40
 80021e6:	1b3f      	subs	r7, r7, r4
 80021e8:	40b9      	lsls	r1, r7
 80021ea:	4308      	orrs	r0, r1
 80021ec:	4680      	mov	r8, r0
 80021ee:	4644      	mov	r4, r8
 80021f0:	1e61      	subs	r1, r4, #1
 80021f2:	418c      	sbcs	r4, r1
 80021f4:	4322      	orrs	r2, r4
 80021f6:	e5e9      	b.n	8001dcc <__aeabi_dsub+0x9c>
 80021f8:	464c      	mov	r4, r9
 80021fa:	4323      	orrs	r3, r4
 80021fc:	001c      	movs	r4, r3
 80021fe:	1e63      	subs	r3, r4, #1
 8002200:	419c      	sbcs	r4, r3
 8002202:	1b04      	subs	r4, r0, r4
 8002204:	42a0      	cmp	r0, r4
 8002206:	419b      	sbcs	r3, r3
 8002208:	425b      	negs	r3, r3
 800220a:	1acb      	subs	r3, r1, r3
 800220c:	4698      	mov	r8, r3
 800220e:	465d      	mov	r5, fp
 8002210:	0016      	movs	r6, r2
 8002212:	e5e2      	b.n	8001dda <__aeabi_dsub+0xaa>
 8002214:	464e      	mov	r6, r9
 8002216:	431e      	orrs	r6, r3
 8002218:	d100      	bne.n	800221c <__aeabi_dsub+0x4ec>
 800221a:	e0ae      	b.n	800237a <__aeabi_dsub+0x64a>
 800221c:	1e66      	subs	r6, r4, #1
 800221e:	2c01      	cmp	r4, #1
 8002220:	d100      	bne.n	8002224 <__aeabi_dsub+0x4f4>
 8002222:	e0fd      	b.n	8002420 <__aeabi_dsub+0x6f0>
 8002224:	4f7b      	ldr	r7, [pc, #492]	; (8002414 <__aeabi_dsub+0x6e4>)
 8002226:	42bc      	cmp	r4, r7
 8002228:	d100      	bne.n	800222c <__aeabi_dsub+0x4fc>
 800222a:	e107      	b.n	800243c <__aeabi_dsub+0x70c>
 800222c:	46b4      	mov	ip, r6
 800222e:	e69b      	b.n	8001f68 <__aeabi_dsub+0x238>
 8002230:	4664      	mov	r4, ip
 8002232:	2220      	movs	r2, #32
 8002234:	1b12      	subs	r2, r2, r4
 8002236:	000c      	movs	r4, r1
 8002238:	4094      	lsls	r4, r2
 800223a:	0007      	movs	r7, r0
 800223c:	4090      	lsls	r0, r2
 800223e:	46a0      	mov	r8, r4
 8002240:	4664      	mov	r4, ip
 8002242:	1e42      	subs	r2, r0, #1
 8002244:	4190      	sbcs	r0, r2
 8002246:	4662      	mov	r2, ip
 8002248:	40e7      	lsrs	r7, r4
 800224a:	4644      	mov	r4, r8
 800224c:	40d1      	lsrs	r1, r2
 800224e:	433c      	orrs	r4, r7
 8002250:	4304      	orrs	r4, r0
 8002252:	185b      	adds	r3, r3, r1
 8002254:	e6f3      	b.n	800203e <__aeabi_dsub+0x30e>
 8002256:	4c6f      	ldr	r4, [pc, #444]	; (8002414 <__aeabi_dsub+0x6e4>)
 8002258:	42a2      	cmp	r2, r4
 800225a:	d100      	bne.n	800225e <__aeabi_dsub+0x52e>
 800225c:	e0d5      	b.n	800240a <__aeabi_dsub+0x6da>
 800225e:	4448      	add	r0, r9
 8002260:	185b      	adds	r3, r3, r1
 8002262:	4548      	cmp	r0, r9
 8002264:	4189      	sbcs	r1, r1
 8002266:	4249      	negs	r1, r1
 8002268:	185b      	adds	r3, r3, r1
 800226a:	07dc      	lsls	r4, r3, #31
 800226c:	0840      	lsrs	r0, r0, #1
 800226e:	085b      	lsrs	r3, r3, #1
 8002270:	4698      	mov	r8, r3
 8002272:	0016      	movs	r6, r2
 8002274:	4304      	orrs	r4, r0
 8002276:	e6cc      	b.n	8002012 <__aeabi_dsub+0x2e2>
 8002278:	2a00      	cmp	r2, #0
 800227a:	d000      	beq.n	800227e <__aeabi_dsub+0x54e>
 800227c:	e082      	b.n	8002384 <__aeabi_dsub+0x654>
 800227e:	000a      	movs	r2, r1
 8002280:	4302      	orrs	r2, r0
 8002282:	d140      	bne.n	8002306 <__aeabi_dsub+0x5d6>
 8002284:	2380      	movs	r3, #128	; 0x80
 8002286:	2500      	movs	r5, #0
 8002288:	031b      	lsls	r3, r3, #12
 800228a:	e713      	b.n	80020b4 <__aeabi_dsub+0x384>
 800228c:	074b      	lsls	r3, r1, #29
 800228e:	08c2      	lsrs	r2, r0, #3
 8002290:	431a      	orrs	r2, r3
 8002292:	465d      	mov	r5, fp
 8002294:	08cb      	lsrs	r3, r1, #3
 8002296:	e6c5      	b.n	8002024 <__aeabi_dsub+0x2f4>
 8002298:	464a      	mov	r2, r9
 800229a:	1a84      	subs	r4, r0, r2
 800229c:	42a0      	cmp	r0, r4
 800229e:	4192      	sbcs	r2, r2
 80022a0:	1acb      	subs	r3, r1, r3
 80022a2:	4252      	negs	r2, r2
 80022a4:	1a9b      	subs	r3, r3, r2
 80022a6:	4698      	mov	r8, r3
 80022a8:	465d      	mov	r5, fp
 80022aa:	e59e      	b.n	8001dea <__aeabi_dsub+0xba>
 80022ac:	464a      	mov	r2, r9
 80022ae:	0759      	lsls	r1, r3, #29
 80022b0:	08d2      	lsrs	r2, r2, #3
 80022b2:	430a      	orrs	r2, r1
 80022b4:	08db      	lsrs	r3, r3, #3
 80022b6:	e6f9      	b.n	80020ac <__aeabi_dsub+0x37c>
 80022b8:	464a      	mov	r2, r9
 80022ba:	1a14      	subs	r4, r2, r0
 80022bc:	45a1      	cmp	r9, r4
 80022be:	4192      	sbcs	r2, r2
 80022c0:	1a5b      	subs	r3, r3, r1
 80022c2:	4252      	negs	r2, r2
 80022c4:	1a9b      	subs	r3, r3, r2
 80022c6:	4698      	mov	r8, r3
 80022c8:	2601      	movs	r6, #1
 80022ca:	e586      	b.n	8001dda <__aeabi_dsub+0xaa>
 80022cc:	464a      	mov	r2, r9
 80022ce:	0759      	lsls	r1, r3, #29
 80022d0:	08d2      	lsrs	r2, r2, #3
 80022d2:	430a      	orrs	r2, r1
 80022d4:	08db      	lsrs	r3, r3, #3
 80022d6:	e6a5      	b.n	8002024 <__aeabi_dsub+0x2f4>
 80022d8:	464c      	mov	r4, r9
 80022da:	4323      	orrs	r3, r4
 80022dc:	001c      	movs	r4, r3
 80022de:	1e63      	subs	r3, r4, #1
 80022e0:	419c      	sbcs	r4, r3
 80022e2:	e65b      	b.n	8001f9c <__aeabi_dsub+0x26c>
 80022e4:	4665      	mov	r5, ip
 80022e6:	001e      	movs	r6, r3
 80022e8:	3d20      	subs	r5, #32
 80022ea:	40ee      	lsrs	r6, r5
 80022ec:	2c20      	cmp	r4, #32
 80022ee:	d005      	beq.n	80022fc <__aeabi_dsub+0x5cc>
 80022f0:	2540      	movs	r5, #64	; 0x40
 80022f2:	1b2d      	subs	r5, r5, r4
 80022f4:	40ab      	lsls	r3, r5
 80022f6:	464c      	mov	r4, r9
 80022f8:	431c      	orrs	r4, r3
 80022fa:	46a2      	mov	sl, r4
 80022fc:	4654      	mov	r4, sl
 80022fe:	1e63      	subs	r3, r4, #1
 8002300:	419c      	sbcs	r4, r3
 8002302:	4334      	orrs	r4, r6
 8002304:	e77d      	b.n	8002202 <__aeabi_dsub+0x4d2>
 8002306:	074b      	lsls	r3, r1, #29
 8002308:	08c2      	lsrs	r2, r0, #3
 800230a:	431a      	orrs	r2, r3
 800230c:	465d      	mov	r5, fp
 800230e:	08cb      	lsrs	r3, r1, #3
 8002310:	e6cc      	b.n	80020ac <__aeabi_dsub+0x37c>
 8002312:	000a      	movs	r2, r1
 8002314:	4302      	orrs	r2, r0
 8002316:	d100      	bne.n	800231a <__aeabi_dsub+0x5ea>
 8002318:	e736      	b.n	8002188 <__aeabi_dsub+0x458>
 800231a:	074b      	lsls	r3, r1, #29
 800231c:	08c2      	lsrs	r2, r0, #3
 800231e:	431a      	orrs	r2, r3
 8002320:	465d      	mov	r5, fp
 8002322:	08cb      	lsrs	r3, r1, #3
 8002324:	e681      	b.n	800202a <__aeabi_dsub+0x2fa>
 8002326:	464a      	mov	r2, r9
 8002328:	1a84      	subs	r4, r0, r2
 800232a:	42a0      	cmp	r0, r4
 800232c:	4192      	sbcs	r2, r2
 800232e:	1acb      	subs	r3, r1, r3
 8002330:	4252      	negs	r2, r2
 8002332:	1a9b      	subs	r3, r3, r2
 8002334:	4698      	mov	r8, r3
 8002336:	465d      	mov	r5, fp
 8002338:	2601      	movs	r6, #1
 800233a:	e54e      	b.n	8001dda <__aeabi_dsub+0xaa>
 800233c:	074b      	lsls	r3, r1, #29
 800233e:	08c2      	lsrs	r2, r0, #3
 8002340:	431a      	orrs	r2, r3
 8002342:	08cb      	lsrs	r3, r1, #3
 8002344:	e6b2      	b.n	80020ac <__aeabi_dsub+0x37c>
 8002346:	464a      	mov	r2, r9
 8002348:	1a14      	subs	r4, r2, r0
 800234a:	45a1      	cmp	r9, r4
 800234c:	4192      	sbcs	r2, r2
 800234e:	1a5f      	subs	r7, r3, r1
 8002350:	4252      	negs	r2, r2
 8002352:	1aba      	subs	r2, r7, r2
 8002354:	4690      	mov	r8, r2
 8002356:	0212      	lsls	r2, r2, #8
 8002358:	d56b      	bpl.n	8002432 <__aeabi_dsub+0x702>
 800235a:	464a      	mov	r2, r9
 800235c:	1a84      	subs	r4, r0, r2
 800235e:	42a0      	cmp	r0, r4
 8002360:	4192      	sbcs	r2, r2
 8002362:	1acb      	subs	r3, r1, r3
 8002364:	4252      	negs	r2, r2
 8002366:	1a9b      	subs	r3, r3, r2
 8002368:	4698      	mov	r8, r3
 800236a:	465d      	mov	r5, fp
 800236c:	e564      	b.n	8001e38 <__aeabi_dsub+0x108>
 800236e:	074b      	lsls	r3, r1, #29
 8002370:	08c2      	lsrs	r2, r0, #3
 8002372:	431a      	orrs	r2, r3
 8002374:	465d      	mov	r5, fp
 8002376:	08cb      	lsrs	r3, r1, #3
 8002378:	e698      	b.n	80020ac <__aeabi_dsub+0x37c>
 800237a:	074b      	lsls	r3, r1, #29
 800237c:	08c2      	lsrs	r2, r0, #3
 800237e:	431a      	orrs	r2, r3
 8002380:	08cb      	lsrs	r3, r1, #3
 8002382:	e64f      	b.n	8002024 <__aeabi_dsub+0x2f4>
 8002384:	000a      	movs	r2, r1
 8002386:	4302      	orrs	r2, r0
 8002388:	d090      	beq.n	80022ac <__aeabi_dsub+0x57c>
 800238a:	464a      	mov	r2, r9
 800238c:	075c      	lsls	r4, r3, #29
 800238e:	08d2      	lsrs	r2, r2, #3
 8002390:	4314      	orrs	r4, r2
 8002392:	2280      	movs	r2, #128	; 0x80
 8002394:	08db      	lsrs	r3, r3, #3
 8002396:	0312      	lsls	r2, r2, #12
 8002398:	4213      	tst	r3, r2
 800239a:	d008      	beq.n	80023ae <__aeabi_dsub+0x67e>
 800239c:	08ce      	lsrs	r6, r1, #3
 800239e:	4216      	tst	r6, r2
 80023a0:	d105      	bne.n	80023ae <__aeabi_dsub+0x67e>
 80023a2:	08c0      	lsrs	r0, r0, #3
 80023a4:	0749      	lsls	r1, r1, #29
 80023a6:	4308      	orrs	r0, r1
 80023a8:	0004      	movs	r4, r0
 80023aa:	465d      	mov	r5, fp
 80023ac:	0033      	movs	r3, r6
 80023ae:	0f61      	lsrs	r1, r4, #29
 80023b0:	00e2      	lsls	r2, r4, #3
 80023b2:	0749      	lsls	r1, r1, #29
 80023b4:	08d2      	lsrs	r2, r2, #3
 80023b6:	430a      	orrs	r2, r1
 80023b8:	e678      	b.n	80020ac <__aeabi_dsub+0x37c>
 80023ba:	074b      	lsls	r3, r1, #29
 80023bc:	08c2      	lsrs	r2, r0, #3
 80023be:	431a      	orrs	r2, r3
 80023c0:	08cb      	lsrs	r3, r1, #3
 80023c2:	e632      	b.n	800202a <__aeabi_dsub+0x2fa>
 80023c4:	4448      	add	r0, r9
 80023c6:	185b      	adds	r3, r3, r1
 80023c8:	4548      	cmp	r0, r9
 80023ca:	4192      	sbcs	r2, r2
 80023cc:	4698      	mov	r8, r3
 80023ce:	4252      	negs	r2, r2
 80023d0:	4490      	add	r8, r2
 80023d2:	4643      	mov	r3, r8
 80023d4:	0004      	movs	r4, r0
 80023d6:	021b      	lsls	r3, r3, #8
 80023d8:	d400      	bmi.n	80023dc <__aeabi_dsub+0x6ac>
 80023da:	e61a      	b.n	8002012 <__aeabi_dsub+0x2e2>
 80023dc:	4642      	mov	r2, r8
 80023de:	4b0e      	ldr	r3, [pc, #56]	; (8002418 <__aeabi_dsub+0x6e8>)
 80023e0:	2601      	movs	r6, #1
 80023e2:	401a      	ands	r2, r3
 80023e4:	4690      	mov	r8, r2
 80023e6:	e614      	b.n	8002012 <__aeabi_dsub+0x2e2>
 80023e8:	4666      	mov	r6, ip
 80023ea:	001f      	movs	r7, r3
 80023ec:	3e20      	subs	r6, #32
 80023ee:	40f7      	lsrs	r7, r6
 80023f0:	2c20      	cmp	r4, #32
 80023f2:	d005      	beq.n	8002400 <__aeabi_dsub+0x6d0>
 80023f4:	2640      	movs	r6, #64	; 0x40
 80023f6:	1b36      	subs	r6, r6, r4
 80023f8:	40b3      	lsls	r3, r6
 80023fa:	464c      	mov	r4, r9
 80023fc:	431c      	orrs	r4, r3
 80023fe:	46a2      	mov	sl, r4
 8002400:	4654      	mov	r4, sl
 8002402:	1e63      	subs	r3, r4, #1
 8002404:	419c      	sbcs	r4, r3
 8002406:	433c      	orrs	r4, r7
 8002408:	e5c8      	b.n	8001f9c <__aeabi_dsub+0x26c>
 800240a:	0011      	movs	r1, r2
 800240c:	2300      	movs	r3, #0
 800240e:	2200      	movs	r2, #0
 8002410:	e532      	b.n	8001e78 <__aeabi_dsub+0x148>
 8002412:	46c0      	nop			; (mov r8, r8)
 8002414:	000007ff 	.word	0x000007ff
 8002418:	ff7fffff 	.word	0xff7fffff
 800241c:	000007fe 	.word	0x000007fe
 8002420:	464a      	mov	r2, r9
 8002422:	1814      	adds	r4, r2, r0
 8002424:	4284      	cmp	r4, r0
 8002426:	4192      	sbcs	r2, r2
 8002428:	185b      	adds	r3, r3, r1
 800242a:	4698      	mov	r8, r3
 800242c:	4252      	negs	r2, r2
 800242e:	4490      	add	r8, r2
 8002430:	e5e9      	b.n	8002006 <__aeabi_dsub+0x2d6>
 8002432:	4642      	mov	r2, r8
 8002434:	4322      	orrs	r2, r4
 8002436:	d100      	bne.n	800243a <__aeabi_dsub+0x70a>
 8002438:	e6a6      	b.n	8002188 <__aeabi_dsub+0x458>
 800243a:	e5ea      	b.n	8002012 <__aeabi_dsub+0x2e2>
 800243c:	074b      	lsls	r3, r1, #29
 800243e:	08c2      	lsrs	r2, r0, #3
 8002440:	431a      	orrs	r2, r3
 8002442:	08cb      	lsrs	r3, r1, #3
 8002444:	e632      	b.n	80020ac <__aeabi_dsub+0x37c>
 8002446:	2200      	movs	r2, #0
 8002448:	4901      	ldr	r1, [pc, #4]	; (8002450 <__aeabi_dsub+0x720>)
 800244a:	0013      	movs	r3, r2
 800244c:	e514      	b.n	8001e78 <__aeabi_dsub+0x148>
 800244e:	46c0      	nop			; (mov r8, r8)
 8002450:	000007ff 	.word	0x000007ff

08002454 <__aeabi_d2iz>:
 8002454:	000a      	movs	r2, r1
 8002456:	b530      	push	{r4, r5, lr}
 8002458:	4c13      	ldr	r4, [pc, #76]	; (80024a8 <__aeabi_d2iz+0x54>)
 800245a:	0053      	lsls	r3, r2, #1
 800245c:	0309      	lsls	r1, r1, #12
 800245e:	0005      	movs	r5, r0
 8002460:	0b09      	lsrs	r1, r1, #12
 8002462:	2000      	movs	r0, #0
 8002464:	0d5b      	lsrs	r3, r3, #21
 8002466:	0fd2      	lsrs	r2, r2, #31
 8002468:	42a3      	cmp	r3, r4
 800246a:	dd04      	ble.n	8002476 <__aeabi_d2iz+0x22>
 800246c:	480f      	ldr	r0, [pc, #60]	; (80024ac <__aeabi_d2iz+0x58>)
 800246e:	4283      	cmp	r3, r0
 8002470:	dd02      	ble.n	8002478 <__aeabi_d2iz+0x24>
 8002472:	4b0f      	ldr	r3, [pc, #60]	; (80024b0 <__aeabi_d2iz+0x5c>)
 8002474:	18d0      	adds	r0, r2, r3
 8002476:	bd30      	pop	{r4, r5, pc}
 8002478:	2080      	movs	r0, #128	; 0x80
 800247a:	0340      	lsls	r0, r0, #13
 800247c:	4301      	orrs	r1, r0
 800247e:	480d      	ldr	r0, [pc, #52]	; (80024b4 <__aeabi_d2iz+0x60>)
 8002480:	1ac0      	subs	r0, r0, r3
 8002482:	281f      	cmp	r0, #31
 8002484:	dd08      	ble.n	8002498 <__aeabi_d2iz+0x44>
 8002486:	480c      	ldr	r0, [pc, #48]	; (80024b8 <__aeabi_d2iz+0x64>)
 8002488:	1ac3      	subs	r3, r0, r3
 800248a:	40d9      	lsrs	r1, r3
 800248c:	000b      	movs	r3, r1
 800248e:	4258      	negs	r0, r3
 8002490:	2a00      	cmp	r2, #0
 8002492:	d1f0      	bne.n	8002476 <__aeabi_d2iz+0x22>
 8002494:	0018      	movs	r0, r3
 8002496:	e7ee      	b.n	8002476 <__aeabi_d2iz+0x22>
 8002498:	4c08      	ldr	r4, [pc, #32]	; (80024bc <__aeabi_d2iz+0x68>)
 800249a:	40c5      	lsrs	r5, r0
 800249c:	46a4      	mov	ip, r4
 800249e:	4463      	add	r3, ip
 80024a0:	4099      	lsls	r1, r3
 80024a2:	000b      	movs	r3, r1
 80024a4:	432b      	orrs	r3, r5
 80024a6:	e7f2      	b.n	800248e <__aeabi_d2iz+0x3a>
 80024a8:	000003fe 	.word	0x000003fe
 80024ac:	0000041d 	.word	0x0000041d
 80024b0:	7fffffff 	.word	0x7fffffff
 80024b4:	00000433 	.word	0x00000433
 80024b8:	00000413 	.word	0x00000413
 80024bc:	fffffbed 	.word	0xfffffbed

080024c0 <__aeabi_i2d>:
 80024c0:	b570      	push	{r4, r5, r6, lr}
 80024c2:	2800      	cmp	r0, #0
 80024c4:	d016      	beq.n	80024f4 <__aeabi_i2d+0x34>
 80024c6:	17c3      	asrs	r3, r0, #31
 80024c8:	18c5      	adds	r5, r0, r3
 80024ca:	405d      	eors	r5, r3
 80024cc:	0fc4      	lsrs	r4, r0, #31
 80024ce:	0028      	movs	r0, r5
 80024d0:	f000 f894 	bl	80025fc <__clzsi2>
 80024d4:	4a11      	ldr	r2, [pc, #68]	; (800251c <__aeabi_i2d+0x5c>)
 80024d6:	1a12      	subs	r2, r2, r0
 80024d8:	280a      	cmp	r0, #10
 80024da:	dc16      	bgt.n	800250a <__aeabi_i2d+0x4a>
 80024dc:	0003      	movs	r3, r0
 80024de:	002e      	movs	r6, r5
 80024e0:	3315      	adds	r3, #21
 80024e2:	409e      	lsls	r6, r3
 80024e4:	230b      	movs	r3, #11
 80024e6:	1a18      	subs	r0, r3, r0
 80024e8:	40c5      	lsrs	r5, r0
 80024ea:	0553      	lsls	r3, r2, #21
 80024ec:	032d      	lsls	r5, r5, #12
 80024ee:	0b2d      	lsrs	r5, r5, #12
 80024f0:	0d5b      	lsrs	r3, r3, #21
 80024f2:	e003      	b.n	80024fc <__aeabi_i2d+0x3c>
 80024f4:	2400      	movs	r4, #0
 80024f6:	2300      	movs	r3, #0
 80024f8:	2500      	movs	r5, #0
 80024fa:	2600      	movs	r6, #0
 80024fc:	051b      	lsls	r3, r3, #20
 80024fe:	432b      	orrs	r3, r5
 8002500:	07e4      	lsls	r4, r4, #31
 8002502:	4323      	orrs	r3, r4
 8002504:	0030      	movs	r0, r6
 8002506:	0019      	movs	r1, r3
 8002508:	bd70      	pop	{r4, r5, r6, pc}
 800250a:	380b      	subs	r0, #11
 800250c:	4085      	lsls	r5, r0
 800250e:	0553      	lsls	r3, r2, #21
 8002510:	032d      	lsls	r5, r5, #12
 8002512:	2600      	movs	r6, #0
 8002514:	0b2d      	lsrs	r5, r5, #12
 8002516:	0d5b      	lsrs	r3, r3, #21
 8002518:	e7f0      	b.n	80024fc <__aeabi_i2d+0x3c>
 800251a:	46c0      	nop			; (mov r8, r8)
 800251c:	0000041e 	.word	0x0000041e

08002520 <__aeabi_ui2d>:
 8002520:	b510      	push	{r4, lr}
 8002522:	1e04      	subs	r4, r0, #0
 8002524:	d010      	beq.n	8002548 <__aeabi_ui2d+0x28>
 8002526:	f000 f869 	bl	80025fc <__clzsi2>
 800252a:	4b0f      	ldr	r3, [pc, #60]	; (8002568 <__aeabi_ui2d+0x48>)
 800252c:	1a1b      	subs	r3, r3, r0
 800252e:	280a      	cmp	r0, #10
 8002530:	dc11      	bgt.n	8002556 <__aeabi_ui2d+0x36>
 8002532:	220b      	movs	r2, #11
 8002534:	0021      	movs	r1, r4
 8002536:	1a12      	subs	r2, r2, r0
 8002538:	40d1      	lsrs	r1, r2
 800253a:	3015      	adds	r0, #21
 800253c:	030a      	lsls	r2, r1, #12
 800253e:	055b      	lsls	r3, r3, #21
 8002540:	4084      	lsls	r4, r0
 8002542:	0b12      	lsrs	r2, r2, #12
 8002544:	0d5b      	lsrs	r3, r3, #21
 8002546:	e001      	b.n	800254c <__aeabi_ui2d+0x2c>
 8002548:	2300      	movs	r3, #0
 800254a:	2200      	movs	r2, #0
 800254c:	051b      	lsls	r3, r3, #20
 800254e:	4313      	orrs	r3, r2
 8002550:	0020      	movs	r0, r4
 8002552:	0019      	movs	r1, r3
 8002554:	bd10      	pop	{r4, pc}
 8002556:	0022      	movs	r2, r4
 8002558:	380b      	subs	r0, #11
 800255a:	4082      	lsls	r2, r0
 800255c:	055b      	lsls	r3, r3, #21
 800255e:	0312      	lsls	r2, r2, #12
 8002560:	2400      	movs	r4, #0
 8002562:	0b12      	lsrs	r2, r2, #12
 8002564:	0d5b      	lsrs	r3, r3, #21
 8002566:	e7f1      	b.n	800254c <__aeabi_ui2d+0x2c>
 8002568:	0000041e 	.word	0x0000041e

0800256c <__aeabi_f2d>:
 800256c:	b570      	push	{r4, r5, r6, lr}
 800256e:	0043      	lsls	r3, r0, #1
 8002570:	0246      	lsls	r6, r0, #9
 8002572:	0fc4      	lsrs	r4, r0, #31
 8002574:	20fe      	movs	r0, #254	; 0xfe
 8002576:	0e1b      	lsrs	r3, r3, #24
 8002578:	1c59      	adds	r1, r3, #1
 800257a:	0a75      	lsrs	r5, r6, #9
 800257c:	4208      	tst	r0, r1
 800257e:	d00c      	beq.n	800259a <__aeabi_f2d+0x2e>
 8002580:	22e0      	movs	r2, #224	; 0xe0
 8002582:	0092      	lsls	r2, r2, #2
 8002584:	4694      	mov	ip, r2
 8002586:	076d      	lsls	r5, r5, #29
 8002588:	0b36      	lsrs	r6, r6, #12
 800258a:	4463      	add	r3, ip
 800258c:	051b      	lsls	r3, r3, #20
 800258e:	4333      	orrs	r3, r6
 8002590:	07e4      	lsls	r4, r4, #31
 8002592:	4323      	orrs	r3, r4
 8002594:	0028      	movs	r0, r5
 8002596:	0019      	movs	r1, r3
 8002598:	bd70      	pop	{r4, r5, r6, pc}
 800259a:	2b00      	cmp	r3, #0
 800259c:	d114      	bne.n	80025c8 <__aeabi_f2d+0x5c>
 800259e:	2d00      	cmp	r5, #0
 80025a0:	d01b      	beq.n	80025da <__aeabi_f2d+0x6e>
 80025a2:	0028      	movs	r0, r5
 80025a4:	f000 f82a 	bl	80025fc <__clzsi2>
 80025a8:	280a      	cmp	r0, #10
 80025aa:	dc1c      	bgt.n	80025e6 <__aeabi_f2d+0x7a>
 80025ac:	230b      	movs	r3, #11
 80025ae:	002a      	movs	r2, r5
 80025b0:	1a1b      	subs	r3, r3, r0
 80025b2:	40da      	lsrs	r2, r3
 80025b4:	0003      	movs	r3, r0
 80025b6:	3315      	adds	r3, #21
 80025b8:	409d      	lsls	r5, r3
 80025ba:	4b0e      	ldr	r3, [pc, #56]	; (80025f4 <__aeabi_f2d+0x88>)
 80025bc:	0312      	lsls	r2, r2, #12
 80025be:	1a1b      	subs	r3, r3, r0
 80025c0:	055b      	lsls	r3, r3, #21
 80025c2:	0b16      	lsrs	r6, r2, #12
 80025c4:	0d5b      	lsrs	r3, r3, #21
 80025c6:	e7e1      	b.n	800258c <__aeabi_f2d+0x20>
 80025c8:	2d00      	cmp	r5, #0
 80025ca:	d009      	beq.n	80025e0 <__aeabi_f2d+0x74>
 80025cc:	0b32      	lsrs	r2, r6, #12
 80025ce:	2680      	movs	r6, #128	; 0x80
 80025d0:	0336      	lsls	r6, r6, #12
 80025d2:	4b09      	ldr	r3, [pc, #36]	; (80025f8 <__aeabi_f2d+0x8c>)
 80025d4:	076d      	lsls	r5, r5, #29
 80025d6:	4316      	orrs	r6, r2
 80025d8:	e7d8      	b.n	800258c <__aeabi_f2d+0x20>
 80025da:	2300      	movs	r3, #0
 80025dc:	2600      	movs	r6, #0
 80025de:	e7d5      	b.n	800258c <__aeabi_f2d+0x20>
 80025e0:	2600      	movs	r6, #0
 80025e2:	4b05      	ldr	r3, [pc, #20]	; (80025f8 <__aeabi_f2d+0x8c>)
 80025e4:	e7d2      	b.n	800258c <__aeabi_f2d+0x20>
 80025e6:	0003      	movs	r3, r0
 80025e8:	002a      	movs	r2, r5
 80025ea:	3b0b      	subs	r3, #11
 80025ec:	409a      	lsls	r2, r3
 80025ee:	2500      	movs	r5, #0
 80025f0:	e7e3      	b.n	80025ba <__aeabi_f2d+0x4e>
 80025f2:	46c0      	nop			; (mov r8, r8)
 80025f4:	00000389 	.word	0x00000389
 80025f8:	000007ff 	.word	0x000007ff

080025fc <__clzsi2>:
 80025fc:	211c      	movs	r1, #28
 80025fe:	2301      	movs	r3, #1
 8002600:	041b      	lsls	r3, r3, #16
 8002602:	4298      	cmp	r0, r3
 8002604:	d301      	bcc.n	800260a <__clzsi2+0xe>
 8002606:	0c00      	lsrs	r0, r0, #16
 8002608:	3910      	subs	r1, #16
 800260a:	0a1b      	lsrs	r3, r3, #8
 800260c:	4298      	cmp	r0, r3
 800260e:	d301      	bcc.n	8002614 <__clzsi2+0x18>
 8002610:	0a00      	lsrs	r0, r0, #8
 8002612:	3908      	subs	r1, #8
 8002614:	091b      	lsrs	r3, r3, #4
 8002616:	4298      	cmp	r0, r3
 8002618:	d301      	bcc.n	800261e <__clzsi2+0x22>
 800261a:	0900      	lsrs	r0, r0, #4
 800261c:	3904      	subs	r1, #4
 800261e:	a202      	add	r2, pc, #8	; (adr r2, 8002628 <__clzsi2+0x2c>)
 8002620:	5c10      	ldrb	r0, [r2, r0]
 8002622:	1840      	adds	r0, r0, r1
 8002624:	4770      	bx	lr
 8002626:	46c0      	nop			; (mov r8, r8)
 8002628:	02020304 	.word	0x02020304
 800262c:	01010101 	.word	0x01010101
	...

08002638 <__clzdi2>:
 8002638:	b510      	push	{r4, lr}
 800263a:	2900      	cmp	r1, #0
 800263c:	d103      	bne.n	8002646 <__clzdi2+0xe>
 800263e:	f7ff ffdd 	bl	80025fc <__clzsi2>
 8002642:	3020      	adds	r0, #32
 8002644:	e002      	b.n	800264c <__clzdi2+0x14>
 8002646:	1c08      	adds	r0, r1, #0
 8002648:	f7ff ffd8 	bl	80025fc <__clzsi2>
 800264c:	bd10      	pop	{r4, pc}
 800264e:	46c0      	nop			; (mov r8, r8)

08002650 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002650:	b590      	push	{r4, r7, lr}
 8002652:	b089      	sub	sp, #36	; 0x24
 8002654:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002656:	240c      	movs	r4, #12
 8002658:	193b      	adds	r3, r7, r4
 800265a:	0018      	movs	r0, r3
 800265c:	2314      	movs	r3, #20
 800265e:	001a      	movs	r2, r3
 8002660:	2100      	movs	r1, #0
 8002662:	f004 fe39 	bl	80072d8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002666:	4b1b      	ldr	r3, [pc, #108]	; (80026d4 <MX_GPIO_Init+0x84>)
 8002668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800266a:	4b1a      	ldr	r3, [pc, #104]	; (80026d4 <MX_GPIO_Init+0x84>)
 800266c:	2101      	movs	r1, #1
 800266e:	430a      	orrs	r2, r1
 8002670:	62da      	str	r2, [r3, #44]	; 0x2c
 8002672:	4b18      	ldr	r3, [pc, #96]	; (80026d4 <MX_GPIO_Init+0x84>)
 8002674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002676:	2201      	movs	r2, #1
 8002678:	4013      	ands	r3, r2
 800267a:	60bb      	str	r3, [r7, #8]
 800267c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800267e:	4b15      	ldr	r3, [pc, #84]	; (80026d4 <MX_GPIO_Init+0x84>)
 8002680:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002682:	4b14      	ldr	r3, [pc, #80]	; (80026d4 <MX_GPIO_Init+0x84>)
 8002684:	2102      	movs	r1, #2
 8002686:	430a      	orrs	r2, r1
 8002688:	62da      	str	r2, [r3, #44]	; 0x2c
 800268a:	4b12      	ldr	r3, [pc, #72]	; (80026d4 <MX_GPIO_Init+0x84>)
 800268c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800268e:	2202      	movs	r2, #2
 8002690:	4013      	ands	r3, r2
 8002692:	607b      	str	r3, [r7, #4]
 8002694:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_R_Pin|LED_G_Pin|EN_1V8_Pin, GPIO_PIN_RESET);
 8002696:	4910      	ldr	r1, [pc, #64]	; (80026d8 <MX_GPIO_Init+0x88>)
 8002698:	23a0      	movs	r3, #160	; 0xa0
 800269a:	05db      	lsls	r3, r3, #23
 800269c:	2200      	movs	r2, #0
 800269e:	0018      	movs	r0, r3
 80026a0:	f002 fc82 	bl	8004fa8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin|EN_1V8_Pin;
 80026a4:	0021      	movs	r1, r4
 80026a6:	187b      	adds	r3, r7, r1
 80026a8:	4a0b      	ldr	r2, [pc, #44]	; (80026d8 <MX_GPIO_Init+0x88>)
 80026aa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026ac:	187b      	adds	r3, r7, r1
 80026ae:	2201      	movs	r2, #1
 80026b0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b2:	187b      	adds	r3, r7, r1
 80026b4:	2200      	movs	r2, #0
 80026b6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b8:	187b      	adds	r3, r7, r1
 80026ba:	2200      	movs	r2, #0
 80026bc:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026be:	187a      	adds	r2, r7, r1
 80026c0:	23a0      	movs	r3, #160	; 0xa0
 80026c2:	05db      	lsls	r3, r3, #23
 80026c4:	0011      	movs	r1, r2
 80026c6:	0018      	movs	r0, r3
 80026c8:	f002 faf8 	bl	8004cbc <HAL_GPIO_Init>

}
 80026cc:	46c0      	nop			; (mov r8, r8)
 80026ce:	46bd      	mov	sp, r7
 80026d0:	b009      	add	sp, #36	; 0x24
 80026d2:	bd90      	pop	{r4, r7, pc}
 80026d4:	40021000 	.word	0x40021000
 80026d8:	00000803 	.word	0x00000803

080026dc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80026e0:	4b1c      	ldr	r3, [pc, #112]	; (8002754 <MX_I2C1_Init+0x78>)
 80026e2:	4a1d      	ldr	r2, [pc, #116]	; (8002758 <MX_I2C1_Init+0x7c>)
 80026e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000708;
 80026e6:	4b1b      	ldr	r3, [pc, #108]	; (8002754 <MX_I2C1_Init+0x78>)
 80026e8:	22e1      	movs	r2, #225	; 0xe1
 80026ea:	00d2      	lsls	r2, r2, #3
 80026ec:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80026ee:	4b19      	ldr	r3, [pc, #100]	; (8002754 <MX_I2C1_Init+0x78>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80026f4:	4b17      	ldr	r3, [pc, #92]	; (8002754 <MX_I2C1_Init+0x78>)
 80026f6:	2201      	movs	r2, #1
 80026f8:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80026fa:	4b16      	ldr	r3, [pc, #88]	; (8002754 <MX_I2C1_Init+0x78>)
 80026fc:	2200      	movs	r2, #0
 80026fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002700:	4b14      	ldr	r3, [pc, #80]	; (8002754 <MX_I2C1_Init+0x78>)
 8002702:	2200      	movs	r2, #0
 8002704:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002706:	4b13      	ldr	r3, [pc, #76]	; (8002754 <MX_I2C1_Init+0x78>)
 8002708:	2200      	movs	r2, #0
 800270a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800270c:	4b11      	ldr	r3, [pc, #68]	; (8002754 <MX_I2C1_Init+0x78>)
 800270e:	2200      	movs	r2, #0
 8002710:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002712:	4b10      	ldr	r3, [pc, #64]	; (8002754 <MX_I2C1_Init+0x78>)
 8002714:	2200      	movs	r2, #0
 8002716:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002718:	4b0e      	ldr	r3, [pc, #56]	; (8002754 <MX_I2C1_Init+0x78>)
 800271a:	0018      	movs	r0, r3
 800271c:	f002 fc62 	bl	8004fe4 <HAL_I2C_Init>
 8002720:	1e03      	subs	r3, r0, #0
 8002722:	d001      	beq.n	8002728 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002724:	f000 f942 	bl	80029ac <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002728:	4b0a      	ldr	r3, [pc, #40]	; (8002754 <MX_I2C1_Init+0x78>)
 800272a:	2100      	movs	r1, #0
 800272c:	0018      	movs	r0, r3
 800272e:	f003 f8f7 	bl	8005920 <HAL_I2CEx_ConfigAnalogFilter>
 8002732:	1e03      	subs	r3, r0, #0
 8002734:	d001      	beq.n	800273a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8002736:	f000 f939 	bl	80029ac <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800273a:	4b06      	ldr	r3, [pc, #24]	; (8002754 <MX_I2C1_Init+0x78>)
 800273c:	2100      	movs	r1, #0
 800273e:	0018      	movs	r0, r3
 8002740:	f003 f93a 	bl	80059b8 <HAL_I2CEx_ConfigDigitalFilter>
 8002744:	1e03      	subs	r3, r0, #0
 8002746:	d001      	beq.n	800274c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8002748:	f000 f930 	bl	80029ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800274c:	46c0      	nop			; (mov r8, r8)
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	46c0      	nop			; (mov r8, r8)
 8002754:	20000078 	.word	0x20000078
 8002758:	40005400 	.word	0x40005400

0800275c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800275c:	b590      	push	{r4, r7, lr}
 800275e:	b089      	sub	sp, #36	; 0x24
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002764:	240c      	movs	r4, #12
 8002766:	193b      	adds	r3, r7, r4
 8002768:	0018      	movs	r0, r3
 800276a:	2314      	movs	r3, #20
 800276c:	001a      	movs	r2, r3
 800276e:	2100      	movs	r1, #0
 8002770:	f004 fdb2 	bl	80072d8 <memset>
  if(i2cHandle->Instance==I2C1)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a17      	ldr	r2, [pc, #92]	; (80027d8 <HAL_I2C_MspInit+0x7c>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d128      	bne.n	80027d0 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800277e:	4b17      	ldr	r3, [pc, #92]	; (80027dc <HAL_I2C_MspInit+0x80>)
 8002780:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002782:	4b16      	ldr	r3, [pc, #88]	; (80027dc <HAL_I2C_MspInit+0x80>)
 8002784:	2102      	movs	r1, #2
 8002786:	430a      	orrs	r2, r1
 8002788:	62da      	str	r2, [r3, #44]	; 0x2c
 800278a:	4b14      	ldr	r3, [pc, #80]	; (80027dc <HAL_I2C_MspInit+0x80>)
 800278c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800278e:	2202      	movs	r2, #2
 8002790:	4013      	ands	r3, r2
 8002792:	60bb      	str	r3, [r7, #8]
 8002794:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002796:	0021      	movs	r1, r4
 8002798:	187b      	adds	r3, r7, r1
 800279a:	22c0      	movs	r2, #192	; 0xc0
 800279c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800279e:	187b      	adds	r3, r7, r1
 80027a0:	2212      	movs	r2, #18
 80027a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027a4:	187b      	adds	r3, r7, r1
 80027a6:	2200      	movs	r2, #0
 80027a8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027aa:	187b      	adds	r3, r7, r1
 80027ac:	2203      	movs	r2, #3
 80027ae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80027b0:	187b      	adds	r3, r7, r1
 80027b2:	2201      	movs	r2, #1
 80027b4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027b6:	187b      	adds	r3, r7, r1
 80027b8:	4a09      	ldr	r2, [pc, #36]	; (80027e0 <HAL_I2C_MspInit+0x84>)
 80027ba:	0019      	movs	r1, r3
 80027bc:	0010      	movs	r0, r2
 80027be:	f002 fa7d 	bl	8004cbc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027c2:	4b06      	ldr	r3, [pc, #24]	; (80027dc <HAL_I2C_MspInit+0x80>)
 80027c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027c6:	4b05      	ldr	r3, [pc, #20]	; (80027dc <HAL_I2C_MspInit+0x80>)
 80027c8:	2180      	movs	r1, #128	; 0x80
 80027ca:	0389      	lsls	r1, r1, #14
 80027cc:	430a      	orrs	r2, r1
 80027ce:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80027d0:	46c0      	nop			; (mov r8, r8)
 80027d2:	46bd      	mov	sp, r7
 80027d4:	b009      	add	sp, #36	; 0x24
 80027d6:	bd90      	pop	{r4, r7, pc}
 80027d8:	40005400 	.word	0x40005400
 80027dc:	40021000 	.word	0x40021000
 80027e0:	50000400 	.word	0x50000400

080027e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80027e4:	b5b0      	push	{r4, r5, r7, lr}
 80027e6:	b086      	sub	sp, #24
 80027e8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80027ea:	f002 f917 	bl	8004a1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80027ee:	f000 f86b 	bl	80028c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80027f2:	f7ff ff2d 	bl	8002650 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80027f6:	f002 f811 	bl	800481c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80027fa:	f002 f83f 	bl	800487c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80027fe:	f7ff ff6d 	bl	80026dc <MX_I2C1_Init>
  /*hpmSetup();
  tm1637Init();
  tm1637SetBrightness(3);
  tm1637DisplayDecimal(1234,1);
  */
  HAL_GPIO_WritePin(GPIOA,EN_1V8_Pin,GPIO_PIN_SET);
 8002802:	2380      	movs	r3, #128	; 0x80
 8002804:	0119      	lsls	r1, r3, #4
 8002806:	23a0      	movs	r3, #160	; 0xa0
 8002808:	05db      	lsls	r3, r3, #23
 800280a:	2201      	movs	r2, #1
 800280c:	0018      	movs	r0, r3
 800280e:	f002 fbcb 	bl	8004fa8 <HAL_GPIO_WritePin>

  /* Initialize the i2c bus for the current platform */
  sensirion_i2c_init();
 8002812:	f001 fec3 	bl	800459c <sensirion_i2c_init>
	  printf_("PM2.5: %d PM10: %d\n",pm2,pm10);
	  //HAL_Delay(1000);
	  time_is_runing++;*/

	  //HAL_Delay(1000);
	  time_is_runing++;
 8002816:	4b26      	ldr	r3, [pc, #152]	; (80028b0 <main+0xcc>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	1c5a      	adds	r2, r3, #1
 800281c:	4b24      	ldr	r3, [pc, #144]	; (80028b0 <main+0xcc>)
 800281e:	601a      	str	r2, [r3, #0]
	  printf_("UART dziala %d\n",time_is_runing);
 8002820:	4b23      	ldr	r3, [pc, #140]	; (80028b0 <main+0xcc>)
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	4b23      	ldr	r3, [pc, #140]	; (80028b4 <main+0xd0>)
 8002826:	0011      	movs	r1, r2
 8002828:	0018      	movs	r0, r3
 800282a:	f001 fc89 	bl	8004140 <printf_>

	  int32_t temperature, humidity;
	          /* Measure temperature and relative humidity and store into variables
	           * temperature, humidity (each output multiplied by 1000).
	           */
	          int8_t ret = shtc1_measure_blocking_read(&temperature, &humidity);
 800282e:	1d3a      	adds	r2, r7, #4
 8002830:	2308      	movs	r3, #8
 8002832:	18fb      	adds	r3, r7, r3
 8002834:	0011      	movs	r1, r2
 8002836:	0018      	movs	r0, r3
 8002838:	f001 ff5a 	bl	80046f0 <shtc1_measure_blocking_read>
 800283c:	0003      	movs	r3, r0
 800283e:	001a      	movs	r2, r3
 8002840:	210f      	movs	r1, #15
 8002842:	187b      	adds	r3, r7, r1
 8002844:	701a      	strb	r2, [r3, #0]
	          if (ret == STATUS_OK) {
 8002846:	187b      	adds	r3, r7, r1
 8002848:	781b      	ldrb	r3, [r3, #0]
 800284a:	b25b      	sxtb	r3, r3
 800284c:	2b00      	cmp	r3, #0
 800284e:	d126      	bne.n	800289e <main+0xba>
	              printf_("measured temperature: %0.1f degreeCelsius, "
	                     "measured humidity: %0.1f percentRH\n",
	                     temperature / 1000.0f, humidity / 1000.0f);
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	0018      	movs	r0, r3
 8002854:	f7fe f84a 	bl	80008ec <__aeabi_i2f>
 8002858:	1c03      	adds	r3, r0, #0
 800285a:	4917      	ldr	r1, [pc, #92]	; (80028b8 <main+0xd4>)
 800285c:	1c18      	adds	r0, r3, #0
 800285e:	f7fd ff39 	bl	80006d4 <__aeabi_fdiv>
 8002862:	1c03      	adds	r3, r0, #0
	              printf_("measured temperature: %0.1f degreeCelsius, "
 8002864:	1c18      	adds	r0, r3, #0
 8002866:	f7ff fe81 	bl	800256c <__aeabi_f2d>
 800286a:	0004      	movs	r4, r0
 800286c:	000d      	movs	r5, r1
	                     temperature / 1000.0f, humidity / 1000.0f);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	0018      	movs	r0, r3
 8002872:	f7fe f83b 	bl	80008ec <__aeabi_i2f>
 8002876:	1c03      	adds	r3, r0, #0
 8002878:	490f      	ldr	r1, [pc, #60]	; (80028b8 <main+0xd4>)
 800287a:	1c18      	adds	r0, r3, #0
 800287c:	f7fd ff2a 	bl	80006d4 <__aeabi_fdiv>
 8002880:	1c03      	adds	r3, r0, #0
	              printf_("measured temperature: %0.1f degreeCelsius, "
 8002882:	1c18      	adds	r0, r3, #0
 8002884:	f7ff fe72 	bl	800256c <__aeabi_f2d>
 8002888:	0002      	movs	r2, r0
 800288a:	000b      	movs	r3, r1
 800288c:	490b      	ldr	r1, [pc, #44]	; (80028bc <main+0xd8>)
 800288e:	9200      	str	r2, [sp, #0]
 8002890:	9301      	str	r3, [sp, #4]
 8002892:	0022      	movs	r2, r4
 8002894:	002b      	movs	r3, r5
 8002896:	0008      	movs	r0, r1
 8002898:	f001 fc52 	bl	8004140 <printf_>
 800289c:	e003      	b.n	80028a6 <main+0xc2>
	          } else {
	              printf_("error reading measurement\n");
 800289e:	4b08      	ldr	r3, [pc, #32]	; (80028c0 <main+0xdc>)
 80028a0:	0018      	movs	r0, r3
 80028a2:	f001 fc4d 	bl	8004140 <printf_>
	          }

	          sensirion_sleep_usec(1000000);
 80028a6:	4b07      	ldr	r3, [pc, #28]	; (80028c4 <main+0xe0>)
 80028a8:	0018      	movs	r0, r3
 80028aa:	f001 fef7 	bl	800469c <sensirion_sleep_usec>
  {
 80028ae:	e7b2      	b.n	8002816 <main+0x32>
 80028b0:	200000cc 	.word	0x200000cc
 80028b4:	08007300 	.word	0x08007300
 80028b8:	447a0000 	.word	0x447a0000
 80028bc:	08007310 	.word	0x08007310
 80028c0:	08007360 	.word	0x08007360
 80028c4:	000f4240 	.word	0x000f4240

080028c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80028c8:	b590      	push	{r4, r7, lr}
 80028ca:	b09b      	sub	sp, #108	; 0x6c
 80028cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80028ce:	2434      	movs	r4, #52	; 0x34
 80028d0:	193b      	adds	r3, r7, r4
 80028d2:	0018      	movs	r0, r3
 80028d4:	2334      	movs	r3, #52	; 0x34
 80028d6:	001a      	movs	r2, r3
 80028d8:	2100      	movs	r1, #0
 80028da:	f004 fcfd 	bl	80072d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80028de:	2320      	movs	r3, #32
 80028e0:	18fb      	adds	r3, r7, r3
 80028e2:	0018      	movs	r0, r3
 80028e4:	2314      	movs	r3, #20
 80028e6:	001a      	movs	r2, r3
 80028e8:	2100      	movs	r1, #0
 80028ea:	f004 fcf5 	bl	80072d8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80028ee:	1d3b      	adds	r3, r7, #4
 80028f0:	0018      	movs	r0, r3
 80028f2:	231c      	movs	r3, #28
 80028f4:	001a      	movs	r2, r3
 80028f6:	2100      	movs	r1, #0
 80028f8:	f004 fcee 	bl	80072d8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80028fc:	4b29      	ldr	r3, [pc, #164]	; (80029a4 <SystemClock_Config+0xdc>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a29      	ldr	r2, [pc, #164]	; (80029a8 <SystemClock_Config+0xe0>)
 8002902:	401a      	ands	r2, r3
 8002904:	4b27      	ldr	r3, [pc, #156]	; (80029a4 <SystemClock_Config+0xdc>)
 8002906:	2180      	movs	r1, #128	; 0x80
 8002908:	0109      	lsls	r1, r1, #4
 800290a:	430a      	orrs	r2, r1
 800290c:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800290e:	0021      	movs	r1, r4
 8002910:	187b      	adds	r3, r7, r1
 8002912:	2210      	movs	r2, #16
 8002914:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002916:	187b      	adds	r3, r7, r1
 8002918:	2201      	movs	r2, #1
 800291a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800291c:	187b      	adds	r3, r7, r1
 800291e:	2200      	movs	r2, #0
 8002920:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8002922:	187b      	adds	r3, r7, r1
 8002924:	22a0      	movs	r2, #160	; 0xa0
 8002926:	0212      	lsls	r2, r2, #8
 8002928:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800292a:	187b      	adds	r3, r7, r1
 800292c:	2200      	movs	r2, #0
 800292e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002930:	187b      	adds	r3, r7, r1
 8002932:	0018      	movs	r0, r3
 8002934:	f003 f88c 	bl	8005a50 <HAL_RCC_OscConfig>
 8002938:	1e03      	subs	r3, r0, #0
 800293a:	d001      	beq.n	8002940 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800293c:	f000 f836 	bl	80029ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002940:	2120      	movs	r1, #32
 8002942:	187b      	adds	r3, r7, r1
 8002944:	220f      	movs	r2, #15
 8002946:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8002948:	187b      	adds	r3, r7, r1
 800294a:	2200      	movs	r2, #0
 800294c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800294e:	187b      	adds	r3, r7, r1
 8002950:	2200      	movs	r2, #0
 8002952:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002954:	187b      	adds	r3, r7, r1
 8002956:	2200      	movs	r2, #0
 8002958:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800295a:	187b      	adds	r3, r7, r1
 800295c:	2200      	movs	r2, #0
 800295e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002960:	187b      	adds	r3, r7, r1
 8002962:	2100      	movs	r1, #0
 8002964:	0018      	movs	r0, r3
 8002966:	f003 fbdd 	bl	8006124 <HAL_RCC_ClockConfig>
 800296a:	1e03      	subs	r3, r0, #0
 800296c:	d001      	beq.n	8002972 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800296e:	f000 f81d 	bl	80029ac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8002972:	1d3b      	adds	r3, r7, #4
 8002974:	220b      	movs	r2, #11
 8002976:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002978:	1d3b      	adds	r3, r7, #4
 800297a:	2200      	movs	r2, #0
 800297c:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800297e:	1d3b      	adds	r3, r7, #4
 8002980:	2200      	movs	r2, #0
 8002982:	60da      	str	r2, [r3, #12]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002984:	1d3b      	adds	r3, r7, #4
 8002986:	2200      	movs	r2, #0
 8002988:	615a      	str	r2, [r3, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800298a:	1d3b      	adds	r3, r7, #4
 800298c:	0018      	movs	r0, r3
 800298e:	f003 fded 	bl	800656c <HAL_RCCEx_PeriphCLKConfig>
 8002992:	1e03      	subs	r3, r0, #0
 8002994:	d001      	beq.n	800299a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8002996:	f000 f809 	bl	80029ac <Error_Handler>
  }
}
 800299a:	46c0      	nop			; (mov r8, r8)
 800299c:	46bd      	mov	sp, r7
 800299e:	b01b      	add	sp, #108	; 0x6c
 80029a0:	bd90      	pop	{r4, r7, pc}
 80029a2:	46c0      	nop			; (mov r8, r8)
 80029a4:	40007000 	.word	0x40007000
 80029a8:	ffffe7ff 	.word	0xffffe7ff

080029ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80029b0:	b672      	cpsid	i
}
 80029b2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80029b4:	e7fe      	b.n	80029b4 <Error_Handler+0x8>

080029b6 <_out_null>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 80029b6:	b580      	push	{r7, lr}
 80029b8:	b084      	sub	sp, #16
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	607a      	str	r2, [r7, #4]
 80029c0:	603b      	str	r3, [r7, #0]
 80029c2:	230f      	movs	r3, #15
 80029c4:	18fb      	adds	r3, r7, r3
 80029c6:	1c02      	adds	r2, r0, #0
 80029c8:	701a      	strb	r2, [r3, #0]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 80029ca:	46c0      	nop			; (mov r8, r8)
 80029cc:	46bd      	mov	sp, r7
 80029ce:	b004      	add	sp, #16
 80029d0:	bd80      	pop	{r7, pc}

080029d2 <_out_char>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
 80029d2:	b580      	push	{r7, lr}
 80029d4:	b084      	sub	sp, #16
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]
 80029dc:	603b      	str	r3, [r7, #0]
 80029de:	210f      	movs	r1, #15
 80029e0:	187b      	adds	r3, r7, r1
 80029e2:	1c02      	adds	r2, r0, #0
 80029e4:	701a      	strb	r2, [r3, #0]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
 80029e6:	000a      	movs	r2, r1
 80029e8:	18bb      	adds	r3, r7, r2
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d004      	beq.n	80029fa <_out_char+0x28>
    _putchar(character);
 80029f0:	18bb      	adds	r3, r7, r2
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	0018      	movs	r0, r3
 80029f6:	f001 fbc1 	bl	800417c <_putchar>
  }
}
 80029fa:	46c0      	nop			; (mov r8, r8)
 80029fc:	46bd      	mov	sp, r7
 80029fe:	b004      	add	sp, #16
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b084      	sub	sp, #16
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
 8002a0a:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	60fb      	str	r3, [r7, #12]
 8002a10:	e002      	b.n	8002a18 <_strnlen_s+0x16>
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	3301      	adds	r3, #1
 8002a16:	60fb      	str	r3, [r7, #12]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d004      	beq.n	8002a2a <_strnlen_s+0x28>
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	1e5a      	subs	r2, r3, #1
 8002a24:	603a      	str	r2, [r7, #0]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d1f3      	bne.n	8002a12 <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 8002a2a:	68fa      	ldr	r2, [r7, #12]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	1ad3      	subs	r3, r2, r3
}
 8002a30:	0018      	movs	r0, r3
 8002a32:	46bd      	mov	sp, r7
 8002a34:	b004      	add	sp, #16
 8002a36:	bd80      	pop	{r7, pc}

08002a38 <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	0002      	movs	r2, r0
 8002a40:	1dfb      	adds	r3, r7, #7
 8002a42:	701a      	strb	r2, [r3, #0]
  return (ch >= '0') && (ch <= '9');
 8002a44:	1dfb      	adds	r3, r7, #7
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	2b2f      	cmp	r3, #47	; 0x2f
 8002a4a:	d905      	bls.n	8002a58 <_is_digit+0x20>
 8002a4c:	1dfb      	adds	r3, r7, #7
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	2b39      	cmp	r3, #57	; 0x39
 8002a52:	d801      	bhi.n	8002a58 <_is_digit+0x20>
 8002a54:	2301      	movs	r3, #1
 8002a56:	e000      	b.n	8002a5a <_is_digit+0x22>
 8002a58:	2300      	movs	r3, #0
 8002a5a:	1c1a      	adds	r2, r3, #0
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	4013      	ands	r3, r2
 8002a60:	b2db      	uxtb	r3, r3
}
 8002a62:	0018      	movs	r0, r3
 8002a64:	46bd      	mov	sp, r7
 8002a66:	b002      	add	sp, #8
 8002a68:	bd80      	pop	{r7, pc}

08002a6a <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 8002a6a:	b580      	push	{r7, lr}
 8002a6c:	b084      	sub	sp, #16
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 8002a72:	2300      	movs	r3, #0
 8002a74:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8002a76:	e00e      	b.n	8002a96 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	0013      	movs	r3, r2
 8002a7c:	009b      	lsls	r3, r3, #2
 8002a7e:	189b      	adds	r3, r3, r2
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	0018      	movs	r0, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	1c59      	adds	r1, r3, #1
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	6011      	str	r1, [r2, #0]
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	18c3      	adds	r3, r0, r3
 8002a92:	3b30      	subs	r3, #48	; 0x30
 8002a94:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	0018      	movs	r0, r3
 8002a9e:	f7ff ffcb 	bl	8002a38 <_is_digit>
 8002aa2:	1e03      	subs	r3, r0, #0
 8002aa4:	d1e8      	bne.n	8002a78 <_atoi+0xe>
  }
  return i;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
}
 8002aa8:	0018      	movs	r0, r3
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	b004      	add	sp, #16
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8002ab0:	b590      	push	{r4, r7, lr}
 8002ab2:	b087      	sub	sp, #28
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	60f8      	str	r0, [r7, #12]
 8002ab8:	60b9      	str	r1, [r7, #8]
 8002aba:	607a      	str	r2, [r7, #4]
 8002abc:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8002ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ac4:	2202      	movs	r2, #2
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	d124      	bne.n	8002b14 <_out_rev+0x64>
 8002aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002acc:	2201      	movs	r2, #1
 8002ace:	4013      	ands	r3, r2
 8002ad0:	d120      	bne.n	8002b14 <_out_rev+0x64>
    for (size_t i = len; i < width; i++) {
 8002ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ad4:	617b      	str	r3, [r7, #20]
 8002ad6:	e00a      	b.n	8002aee <_out_rev+0x3e>
      out(' ', buffer, idx++, maxlen);
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	1c53      	adds	r3, r2, #1
 8002adc:	607b      	str	r3, [r7, #4]
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	68b9      	ldr	r1, [r7, #8]
 8002ae2:	68fc      	ldr	r4, [r7, #12]
 8002ae4:	2020      	movs	r0, #32
 8002ae6:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	3301      	adds	r3, #1
 8002aec:	617b      	str	r3, [r7, #20]
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d3f0      	bcc.n	8002ad8 <_out_rev+0x28>
    }
  }

  // reverse string
  while (len) {
 8002af6:	e00d      	b.n	8002b14 <_out_rev+0x64>
    out(buf[--len], buffer, idx++, maxlen);
 8002af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002afa:	3b01      	subs	r3, #1
 8002afc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002afe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b02:	18d3      	adds	r3, r2, r3
 8002b04:	7818      	ldrb	r0, [r3, #0]
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	1c53      	adds	r3, r2, #1
 8002b0a:	607b      	str	r3, [r7, #4]
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	68b9      	ldr	r1, [r7, #8]
 8002b10:	68fc      	ldr	r4, [r7, #12]
 8002b12:	47a0      	blx	r4
  while (len) {
 8002b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d1ee      	bne.n	8002af8 <_out_rev+0x48>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8002b1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b1c:	2202      	movs	r2, #2
 8002b1e:	4013      	ands	r3, r2
 8002b20:	d00e      	beq.n	8002b40 <_out_rev+0x90>
    while (idx - start_idx < width) {
 8002b22:	e007      	b.n	8002b34 <_out_rev+0x84>
      out(' ', buffer, idx++, maxlen);
 8002b24:	687a      	ldr	r2, [r7, #4]
 8002b26:	1c53      	adds	r3, r2, #1
 8002b28:	607b      	str	r3, [r7, #4]
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	68b9      	ldr	r1, [r7, #8]
 8002b2e:	68fc      	ldr	r4, [r7, #12]
 8002b30:	2020      	movs	r0, #32
 8002b32:	47a0      	blx	r4
    while (idx - start_idx < width) {
 8002b34:	687a      	ldr	r2, [r7, #4]
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b3c:	429a      	cmp	r2, r3
 8002b3e:	d8f1      	bhi.n	8002b24 <_out_rev+0x74>
    }
  }

  return idx;
 8002b40:	687b      	ldr	r3, [r7, #4]
}
 8002b42:	0018      	movs	r0, r3
 8002b44:	46bd      	mov	sp, r7
 8002b46:	b007      	add	sp, #28
 8002b48:	bd90      	pop	{r4, r7, pc}

08002b4a <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002b4a:	b590      	push	{r4, r7, lr}
 8002b4c:	b089      	sub	sp, #36	; 0x24
 8002b4e:	af04      	add	r7, sp, #16
 8002b50:	60f8      	str	r0, [r7, #12]
 8002b52:	60b9      	str	r1, [r7, #8]
 8002b54:	607a      	str	r2, [r7, #4]
 8002b56:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8002b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b5a:	2202      	movs	r2, #2
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	d134      	bne.n	8002bca <_ntoa_format+0x80>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8002b60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d017      	beq.n	8002b96 <_ntoa_format+0x4c>
 8002b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b68:	2201      	movs	r2, #1
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	d013      	beq.n	8002b96 <_ntoa_format+0x4c>
 8002b6e:	2328      	movs	r3, #40	; 0x28
 8002b70:	18fb      	adds	r3, r7, r3
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d103      	bne.n	8002b80 <_ntoa_format+0x36>
 8002b78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b7a:	220c      	movs	r2, #12
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	d00a      	beq.n	8002b96 <_ntoa_format+0x4c>
      width--;
 8002b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b82:	3b01      	subs	r3, #1
 8002b84:	637b      	str	r3, [r7, #52]	; 0x34
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002b86:	e006      	b.n	8002b96 <_ntoa_format+0x4c>
      buf[len++] = '0';
 8002b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8a:	1c5a      	adds	r2, r3, #1
 8002b8c:	627a      	str	r2, [r7, #36]	; 0x24
 8002b8e:	6a3a      	ldr	r2, [r7, #32]
 8002b90:	18d3      	adds	r3, r2, r3
 8002b92:	2230      	movs	r2, #48	; 0x30
 8002b94:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002b96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d20a      	bcs.n	8002bb4 <_ntoa_format+0x6a>
 8002b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba0:	2b1f      	cmp	r3, #31
 8002ba2:	d9f1      	bls.n	8002b88 <_ntoa_format+0x3e>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002ba4:	e006      	b.n	8002bb4 <_ntoa_format+0x6a>
      buf[len++] = '0';
 8002ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba8:	1c5a      	adds	r2, r3, #1
 8002baa:	627a      	str	r2, [r7, #36]	; 0x24
 8002bac:	6a3a      	ldr	r2, [r7, #32]
 8002bae:	18d3      	adds	r3, r2, r3
 8002bb0:	2230      	movs	r2, #48	; 0x30
 8002bb2:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	4013      	ands	r3, r2
 8002bba:	d006      	beq.n	8002bca <_ntoa_format+0x80>
 8002bbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d202      	bcs.n	8002bca <_ntoa_format+0x80>
 8002bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc6:	2b1f      	cmp	r3, #31
 8002bc8:	d9ed      	bls.n	8002ba6 <_ntoa_format+0x5c>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8002bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002bcc:	2210      	movs	r2, #16
 8002bce:	4013      	ands	r3, r2
 8002bd0:	d056      	beq.n	8002c80 <_ntoa_format+0x136>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8002bd2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002bd4:	2380      	movs	r3, #128	; 0x80
 8002bd6:	00db      	lsls	r3, r3, #3
 8002bd8:	4013      	ands	r3, r2
 8002bda:	d116      	bne.n	8002c0a <_ntoa_format+0xc0>
 8002bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d013      	beq.n	8002c0a <_ntoa_format+0xc0>
 8002be2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be6:	429a      	cmp	r2, r3
 8002be8:	d003      	beq.n	8002bf2 <_ntoa_format+0xa8>
 8002bea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d10b      	bne.n	8002c0a <_ntoa_format+0xc0>
      len--;
 8002bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf4:	3b01      	subs	r3, #1
 8002bf6:	627b      	str	r3, [r7, #36]	; 0x24
      if (len && (base == 16U)) {
 8002bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d005      	beq.n	8002c0a <_ntoa_format+0xc0>
 8002bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c00:	2b10      	cmp	r3, #16
 8002c02:	d102      	bne.n	8002c0a <_ntoa_format+0xc0>
        len--;
 8002c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c06:	3b01      	subs	r3, #1
 8002c08:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c0c:	2b10      	cmp	r3, #16
 8002c0e:	d10e      	bne.n	8002c2e <_ntoa_format+0xe4>
 8002c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c12:	2220      	movs	r2, #32
 8002c14:	4013      	ands	r3, r2
 8002c16:	d10a      	bne.n	8002c2e <_ntoa_format+0xe4>
 8002c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1a:	2b1f      	cmp	r3, #31
 8002c1c:	d807      	bhi.n	8002c2e <_ntoa_format+0xe4>
      buf[len++] = 'x';
 8002c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c20:	1c5a      	adds	r2, r3, #1
 8002c22:	627a      	str	r2, [r7, #36]	; 0x24
 8002c24:	6a3a      	ldr	r2, [r7, #32]
 8002c26:	18d3      	adds	r3, r2, r3
 8002c28:	2278      	movs	r2, #120	; 0x78
 8002c2a:	701a      	strb	r2, [r3, #0]
 8002c2c:	e01e      	b.n	8002c6c <_ntoa_format+0x122>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c30:	2b10      	cmp	r3, #16
 8002c32:	d10e      	bne.n	8002c52 <_ntoa_format+0x108>
 8002c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c36:	2220      	movs	r2, #32
 8002c38:	4013      	ands	r3, r2
 8002c3a:	d00a      	beq.n	8002c52 <_ntoa_format+0x108>
 8002c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c3e:	2b1f      	cmp	r3, #31
 8002c40:	d807      	bhi.n	8002c52 <_ntoa_format+0x108>
      buf[len++] = 'X';
 8002c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c44:	1c5a      	adds	r2, r3, #1
 8002c46:	627a      	str	r2, [r7, #36]	; 0x24
 8002c48:	6a3a      	ldr	r2, [r7, #32]
 8002c4a:	18d3      	adds	r3, r2, r3
 8002c4c:	2258      	movs	r2, #88	; 0x58
 8002c4e:	701a      	strb	r2, [r3, #0]
 8002c50:	e00c      	b.n	8002c6c <_ntoa_format+0x122>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8002c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d109      	bne.n	8002c6c <_ntoa_format+0x122>
 8002c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5a:	2b1f      	cmp	r3, #31
 8002c5c:	d806      	bhi.n	8002c6c <_ntoa_format+0x122>
      buf[len++] = 'b';
 8002c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c60:	1c5a      	adds	r2, r3, #1
 8002c62:	627a      	str	r2, [r7, #36]	; 0x24
 8002c64:	6a3a      	ldr	r2, [r7, #32]
 8002c66:	18d3      	adds	r3, r2, r3
 8002c68:	2262      	movs	r2, #98	; 0x62
 8002c6a:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8002c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c6e:	2b1f      	cmp	r3, #31
 8002c70:	d806      	bhi.n	8002c80 <_ntoa_format+0x136>
      buf[len++] = '0';
 8002c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c74:	1c5a      	adds	r2, r3, #1
 8002c76:	627a      	str	r2, [r7, #36]	; 0x24
 8002c78:	6a3a      	ldr	r2, [r7, #32]
 8002c7a:	18d3      	adds	r3, r2, r3
 8002c7c:	2230      	movs	r2, #48	; 0x30
 8002c7e:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8002c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c82:	2b1f      	cmp	r3, #31
 8002c84:	d823      	bhi.n	8002cce <_ntoa_format+0x184>
    if (negative) {
 8002c86:	2328      	movs	r3, #40	; 0x28
 8002c88:	18fb      	adds	r3, r7, r3
 8002c8a:	781b      	ldrb	r3, [r3, #0]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d007      	beq.n	8002ca0 <_ntoa_format+0x156>
      buf[len++] = '-';
 8002c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c92:	1c5a      	adds	r2, r3, #1
 8002c94:	627a      	str	r2, [r7, #36]	; 0x24
 8002c96:	6a3a      	ldr	r2, [r7, #32]
 8002c98:	18d3      	adds	r3, r2, r3
 8002c9a:	222d      	movs	r2, #45	; 0x2d
 8002c9c:	701a      	strb	r2, [r3, #0]
 8002c9e:	e016      	b.n	8002cce <_ntoa_format+0x184>
    }
    else if (flags & FLAGS_PLUS) {
 8002ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ca2:	2204      	movs	r2, #4
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	d007      	beq.n	8002cb8 <_ntoa_format+0x16e>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8002ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002caa:	1c5a      	adds	r2, r3, #1
 8002cac:	627a      	str	r2, [r7, #36]	; 0x24
 8002cae:	6a3a      	ldr	r2, [r7, #32]
 8002cb0:	18d3      	adds	r3, r2, r3
 8002cb2:	222b      	movs	r2, #43	; 0x2b
 8002cb4:	701a      	strb	r2, [r3, #0]
 8002cb6:	e00a      	b.n	8002cce <_ntoa_format+0x184>
    }
    else if (flags & FLAGS_SPACE) {
 8002cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cba:	2208      	movs	r2, #8
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	d006      	beq.n	8002cce <_ntoa_format+0x184>
      buf[len++] = ' ';
 8002cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc2:	1c5a      	adds	r2, r3, #1
 8002cc4:	627a      	str	r2, [r7, #36]	; 0x24
 8002cc6:	6a3a      	ldr	r2, [r7, #32]
 8002cc8:	18d3      	adds	r3, r2, r3
 8002cca:	2220      	movs	r2, #32
 8002ccc:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8002cce:	683c      	ldr	r4, [r7, #0]
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	68b9      	ldr	r1, [r7, #8]
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cd8:	9303      	str	r3, [sp, #12]
 8002cda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cdc:	9302      	str	r3, [sp, #8]
 8002cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce0:	9301      	str	r3, [sp, #4]
 8002ce2:	6a3b      	ldr	r3, [r7, #32]
 8002ce4:	9300      	str	r3, [sp, #0]
 8002ce6:	0023      	movs	r3, r4
 8002ce8:	f7ff fee2 	bl	8002ab0 <_out_rev>
 8002cec:	0003      	movs	r3, r0
}
 8002cee:	0018      	movs	r0, r3
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	b005      	add	sp, #20
 8002cf4:	bd90      	pop	{r4, r7, pc}

08002cf6 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002cf6:	b590      	push	{r4, r7, lr}
 8002cf8:	b097      	sub	sp, #92	; 0x5c
 8002cfa:	af08      	add	r7, sp, #32
 8002cfc:	60f8      	str	r0, [r7, #12]
 8002cfe:	60b9      	str	r1, [r7, #8]
 8002d00:	607a      	str	r2, [r7, #4]
 8002d02:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8002d04:	2300      	movs	r3, #0
 8002d06:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8002d08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d103      	bne.n	8002d16 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 8002d0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d10:	2210      	movs	r2, #16
 8002d12:	4393      	bics	r3, r2
 8002d14:	65fb      	str	r3, [r7, #92]	; 0x5c
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8002d16:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002d18:	2380      	movs	r3, #128	; 0x80
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	d002      	beq.n	8002d26 <_ntoa_long+0x30>
 8002d20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d033      	beq.n	8002d8e <_ntoa_long+0x98>
    do {
      const char digit = (char)(value % base);
 8002d26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d28:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002d2a:	0018      	movs	r0, r3
 8002d2c:	f7fd fa72 	bl	8000214 <__aeabi_uidivmod>
 8002d30:	000b      	movs	r3, r1
 8002d32:	001a      	movs	r2, r3
 8002d34:	2133      	movs	r1, #51	; 0x33
 8002d36:	187b      	adds	r3, r7, r1
 8002d38:	701a      	strb	r2, [r3, #0]
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8002d3a:	000a      	movs	r2, r1
 8002d3c:	18bb      	adds	r3, r7, r2
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	2b09      	cmp	r3, #9
 8002d42:	d804      	bhi.n	8002d4e <_ntoa_long+0x58>
 8002d44:	18bb      	adds	r3, r7, r2
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	3330      	adds	r3, #48	; 0x30
 8002d4a:	b2da      	uxtb	r2, r3
 8002d4c:	e00d      	b.n	8002d6a <_ntoa_long+0x74>
 8002d4e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d50:	2220      	movs	r2, #32
 8002d52:	4013      	ands	r3, r2
 8002d54:	d001      	beq.n	8002d5a <_ntoa_long+0x64>
 8002d56:	2341      	movs	r3, #65	; 0x41
 8002d58:	e000      	b.n	8002d5c <_ntoa_long+0x66>
 8002d5a:	2361      	movs	r3, #97	; 0x61
 8002d5c:	2233      	movs	r2, #51	; 0x33
 8002d5e:	18ba      	adds	r2, r7, r2
 8002d60:	7812      	ldrb	r2, [r2, #0]
 8002d62:	189b      	adds	r3, r3, r2
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	3b0a      	subs	r3, #10
 8002d68:	b2da      	uxtb	r2, r3
 8002d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d6c:	1c59      	adds	r1, r3, #1
 8002d6e:	6379      	str	r1, [r7, #52]	; 0x34
 8002d70:	2110      	movs	r1, #16
 8002d72:	1879      	adds	r1, r7, r1
 8002d74:	54ca      	strb	r2, [r1, r3]
      value /= base;
 8002d76:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8002d78:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002d7a:	f7fd f9c5 	bl	8000108 <__udivsi3>
 8002d7e:	0003      	movs	r3, r0
 8002d80:	64bb      	str	r3, [r7, #72]	; 0x48
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8002d82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d002      	beq.n	8002d8e <_ntoa_long+0x98>
 8002d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d8a:	2b1f      	cmp	r3, #31
 8002d8c:	d9cb      	bls.n	8002d26 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8002d8e:	683c      	ldr	r4, [r7, #0]
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	68b9      	ldr	r1, [r7, #8]
 8002d94:	68f8      	ldr	r0, [r7, #12]
 8002d96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d98:	9306      	str	r3, [sp, #24]
 8002d9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d9c:	9305      	str	r3, [sp, #20]
 8002d9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002da0:	9304      	str	r3, [sp, #16]
 8002da2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002da4:	9303      	str	r3, [sp, #12]
 8002da6:	234c      	movs	r3, #76	; 0x4c
 8002da8:	18fb      	adds	r3, r7, r3
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	9302      	str	r3, [sp, #8]
 8002dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002db0:	9301      	str	r3, [sp, #4]
 8002db2:	2310      	movs	r3, #16
 8002db4:	18fb      	adds	r3, r7, r3
 8002db6:	9300      	str	r3, [sp, #0]
 8002db8:	0023      	movs	r3, r4
 8002dba:	f7ff fec6 	bl	8002b4a <_ntoa_format>
 8002dbe:	0003      	movs	r3, r0
}
 8002dc0:	0018      	movs	r0, r3
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	b00f      	add	sp, #60	; 0x3c
 8002dc6:	bd90      	pop	{r4, r7, pc}

08002dc8 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002dc8:	b5b0      	push	{r4, r5, r7, lr}
 8002dca:	b096      	sub	sp, #88	; 0x58
 8002dcc:	af08      	add	r7, sp, #32
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	60b9      	str	r1, [r7, #8]
 8002dd2:	607a      	str	r2, [r7, #4]
 8002dd4:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8002dda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ddc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002dde:	4313      	orrs	r3, r2
 8002de0:	d103      	bne.n	8002dea <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 8002de2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002de4:	2210      	movs	r2, #16
 8002de6:	4393      	bics	r3, r2
 8002de8:	66bb      	str	r3, [r7, #104]	; 0x68
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8002dea:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002dec:	2380      	movs	r3, #128	; 0x80
 8002dee:	00db      	lsls	r3, r3, #3
 8002df0:	4013      	ands	r3, r2
 8002df2:	d003      	beq.n	8002dfc <_ntoa_long_long+0x34>
 8002df4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002df6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	d03a      	beq.n	8002e72 <_ntoa_long_long+0xaa>
    do {
      const char digit = (char)(value % base);
 8002dfc:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002dfe:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002e00:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e04:	f7fd fb34 	bl	8000470 <__aeabi_uldivmod>
 8002e08:	0010      	movs	r0, r2
 8002e0a:	0019      	movs	r1, r3
 8002e0c:	2433      	movs	r4, #51	; 0x33
 8002e0e:	193b      	adds	r3, r7, r4
 8002e10:	1c02      	adds	r2, r0, #0
 8002e12:	701a      	strb	r2, [r3, #0]
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8002e14:	0022      	movs	r2, r4
 8002e16:	18bb      	adds	r3, r7, r2
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	2b09      	cmp	r3, #9
 8002e1c:	d804      	bhi.n	8002e28 <_ntoa_long_long+0x60>
 8002e1e:	18bb      	adds	r3, r7, r2
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	3330      	adds	r3, #48	; 0x30
 8002e24:	b2da      	uxtb	r2, r3
 8002e26:	e00d      	b.n	8002e44 <_ntoa_long_long+0x7c>
 8002e28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e2a:	2220      	movs	r2, #32
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	d001      	beq.n	8002e34 <_ntoa_long_long+0x6c>
 8002e30:	2341      	movs	r3, #65	; 0x41
 8002e32:	e000      	b.n	8002e36 <_ntoa_long_long+0x6e>
 8002e34:	2361      	movs	r3, #97	; 0x61
 8002e36:	2233      	movs	r2, #51	; 0x33
 8002e38:	18ba      	adds	r2, r7, r2
 8002e3a:	7812      	ldrb	r2, [r2, #0]
 8002e3c:	189b      	adds	r3, r3, r2
 8002e3e:	b2db      	uxtb	r3, r3
 8002e40:	3b0a      	subs	r3, #10
 8002e42:	b2da      	uxtb	r2, r3
 8002e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e46:	1c59      	adds	r1, r3, #1
 8002e48:	6379      	str	r1, [r7, #52]	; 0x34
 8002e4a:	2110      	movs	r1, #16
 8002e4c:	1879      	adds	r1, r7, r1
 8002e4e:	54ca      	strb	r2, [r1, r3]
      value /= base;
 8002e50:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e54:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002e56:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002e58:	f7fd fb0a 	bl	8000470 <__aeabi_uldivmod>
 8002e5c:	0002      	movs	r2, r0
 8002e5e:	000b      	movs	r3, r1
 8002e60:	64ba      	str	r2, [r7, #72]	; 0x48
 8002e62:	64fb      	str	r3, [r7, #76]	; 0x4c
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8002e64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e66:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	d002      	beq.n	8002e72 <_ntoa_long_long+0xaa>
 8002e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e6e:	2b1f      	cmp	r3, #31
 8002e70:	d9c4      	bls.n	8002dfc <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8002e72:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e74:	683d      	ldr	r5, [r7, #0]
 8002e76:	687c      	ldr	r4, [r7, #4]
 8002e78:	68b9      	ldr	r1, [r7, #8]
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002e7e:	9206      	str	r2, [sp, #24]
 8002e80:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8002e82:	9205      	str	r2, [sp, #20]
 8002e84:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002e86:	9204      	str	r2, [sp, #16]
 8002e88:	9303      	str	r3, [sp, #12]
 8002e8a:	2350      	movs	r3, #80	; 0x50
 8002e8c:	18fb      	adds	r3, r7, r3
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	9302      	str	r3, [sp, #8]
 8002e92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e94:	9301      	str	r3, [sp, #4]
 8002e96:	2310      	movs	r3, #16
 8002e98:	18fb      	adds	r3, r7, r3
 8002e9a:	9300      	str	r3, [sp, #0]
 8002e9c:	002b      	movs	r3, r5
 8002e9e:	0022      	movs	r2, r4
 8002ea0:	f7ff fe53 	bl	8002b4a <_ntoa_format>
 8002ea4:	0003      	movs	r3, r0
}
 8002ea6:	0018      	movs	r0, r3
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	b00e      	add	sp, #56	; 0x38
 8002eac:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002eb0 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8002eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002eb2:	b09d      	sub	sp, #116	; 0x74
 8002eb4:	af06      	add	r7, sp, #24
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	607a      	str	r2, [r7, #4]
 8002ebc:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	657b      	str	r3, [r7, #84]	; 0x54
  double diff = 0.0;
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	63ba      	str	r2, [r7, #56]	; 0x38
 8002ec8:	63fb      	str	r3, [r7, #60]	; 0x3c

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 8002eca:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002ecc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ece:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002ed0:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002ed2:	f7fd fa9f 	bl	8000414 <__aeabi_dcmpeq>
 8002ed6:	1e03      	subs	r3, r0, #0
 8002ed8:	d112      	bne.n	8002f00 <_ftoa+0x50>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8002eda:	683c      	ldr	r4, [r7, #0]
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	68b9      	ldr	r1, [r7, #8]
 8002ee0:	68f8      	ldr	r0, [r7, #12]
 8002ee2:	2380      	movs	r3, #128	; 0x80
 8002ee4:	18fb      	adds	r3, r7, r3
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	9303      	str	r3, [sp, #12]
 8002eea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002eec:	9302      	str	r3, [sp, #8]
 8002eee:	2303      	movs	r3, #3
 8002ef0:	9301      	str	r3, [sp, #4]
 8002ef2:	4bbf      	ldr	r3, [pc, #764]	; (80031f0 <_ftoa+0x340>)
 8002ef4:	9300      	str	r3, [sp, #0]
 8002ef6:	0023      	movs	r3, r4
 8002ef8:	f7ff fdda 	bl	8002ab0 <_out_rev>
 8002efc:	0003      	movs	r3, r0
 8002efe:	e211      	b.n	8003324 <_ftoa+0x474>
  if (value < -DBL_MAX)
 8002f00:	2201      	movs	r2, #1
 8002f02:	4252      	negs	r2, r2
 8002f04:	4bbb      	ldr	r3, [pc, #748]	; (80031f4 <_ftoa+0x344>)
 8002f06:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002f08:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002f0a:	f7fd fa89 	bl	8000420 <__aeabi_dcmplt>
 8002f0e:	1e03      	subs	r3, r0, #0
 8002f10:	d012      	beq.n	8002f38 <_ftoa+0x88>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8002f12:	683c      	ldr	r4, [r7, #0]
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	68b9      	ldr	r1, [r7, #8]
 8002f18:	68f8      	ldr	r0, [r7, #12]
 8002f1a:	2380      	movs	r3, #128	; 0x80
 8002f1c:	18fb      	adds	r3, r7, r3
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	9303      	str	r3, [sp, #12]
 8002f22:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002f24:	9302      	str	r3, [sp, #8]
 8002f26:	2304      	movs	r3, #4
 8002f28:	9301      	str	r3, [sp, #4]
 8002f2a:	4bb3      	ldr	r3, [pc, #716]	; (80031f8 <_ftoa+0x348>)
 8002f2c:	9300      	str	r3, [sp, #0]
 8002f2e:	0023      	movs	r3, r4
 8002f30:	f7ff fdbe 	bl	8002ab0 <_out_rev>
 8002f34:	0003      	movs	r3, r0
 8002f36:	e1f5      	b.n	8003324 <_ftoa+0x474>
  if (value > DBL_MAX)
 8002f38:	2201      	movs	r2, #1
 8002f3a:	4252      	negs	r2, r2
 8002f3c:	4baf      	ldr	r3, [pc, #700]	; (80031fc <_ftoa+0x34c>)
 8002f3e:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002f40:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002f42:	f7fd fa81 	bl	8000448 <__aeabi_dcmpgt>
 8002f46:	1e03      	subs	r3, r0, #0
 8002f48:	d024      	beq.n	8002f94 <_ftoa+0xe4>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8002f4a:	2380      	movs	r3, #128	; 0x80
 8002f4c:	18fb      	adds	r3, r7, r3
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2204      	movs	r2, #4
 8002f52:	4013      	ands	r3, r2
 8002f54:	d001      	beq.n	8002f5a <_ftoa+0xaa>
 8002f56:	4baa      	ldr	r3, [pc, #680]	; (8003200 <_ftoa+0x350>)
 8002f58:	e000      	b.n	8002f5c <_ftoa+0xac>
 8002f5a:	4baa      	ldr	r3, [pc, #680]	; (8003204 <_ftoa+0x354>)
 8002f5c:	2280      	movs	r2, #128	; 0x80
 8002f5e:	18ba      	adds	r2, r7, r2
 8002f60:	6812      	ldr	r2, [r2, #0]
 8002f62:	2104      	movs	r1, #4
 8002f64:	400a      	ands	r2, r1
 8002f66:	d001      	beq.n	8002f6c <_ftoa+0xbc>
 8002f68:	2204      	movs	r2, #4
 8002f6a:	e000      	b.n	8002f6e <_ftoa+0xbe>
 8002f6c:	2203      	movs	r2, #3
 8002f6e:	683e      	ldr	r6, [r7, #0]
 8002f70:	687d      	ldr	r5, [r7, #4]
 8002f72:	68bc      	ldr	r4, [r7, #8]
 8002f74:	68f8      	ldr	r0, [r7, #12]
 8002f76:	2180      	movs	r1, #128	; 0x80
 8002f78:	1879      	adds	r1, r7, r1
 8002f7a:	6809      	ldr	r1, [r1, #0]
 8002f7c:	9103      	str	r1, [sp, #12]
 8002f7e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002f80:	9102      	str	r1, [sp, #8]
 8002f82:	9201      	str	r2, [sp, #4]
 8002f84:	9300      	str	r3, [sp, #0]
 8002f86:	0033      	movs	r3, r6
 8002f88:	002a      	movs	r2, r5
 8002f8a:	0021      	movs	r1, r4
 8002f8c:	f7ff fd90 	bl	8002ab0 <_out_rev>
 8002f90:	0003      	movs	r3, r0
 8002f92:	e1c7      	b.n	8003324 <_ftoa+0x474>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 8002f94:	2200      	movs	r2, #0
 8002f96:	4b9c      	ldr	r3, [pc, #624]	; (8003208 <_ftoa+0x358>)
 8002f98:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002f9a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002f9c:	f7fd fa54 	bl	8000448 <__aeabi_dcmpgt>
 8002fa0:	1e03      	subs	r3, r0, #0
 8002fa2:	d107      	bne.n	8002fb4 <_ftoa+0x104>
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	4b99      	ldr	r3, [pc, #612]	; (800320c <_ftoa+0x35c>)
 8002fa8:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002faa:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002fac:	f7fd fa38 	bl	8000420 <__aeabi_dcmplt>
 8002fb0:	1e03      	subs	r3, r0, #0
 8002fb2:	d015      	beq.n	8002fe0 <_ftoa+0x130>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8002fb4:	683d      	ldr	r5, [r7, #0]
 8002fb6:	687c      	ldr	r4, [r7, #4]
 8002fb8:	68b9      	ldr	r1, [r7, #8]
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	2380      	movs	r3, #128	; 0x80
 8002fbe:	18fb      	adds	r3, r7, r3
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	9304      	str	r3, [sp, #16]
 8002fc4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002fc6:	9303      	str	r3, [sp, #12]
 8002fc8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002fca:	9302      	str	r3, [sp, #8]
 8002fcc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002fce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fd0:	9200      	str	r2, [sp, #0]
 8002fd2:	9301      	str	r3, [sp, #4]
 8002fd4:	002b      	movs	r3, r5
 8002fd6:	0022      	movs	r2, r4
 8002fd8:	f000 f9a8 	bl	800332c <_etoa>
 8002fdc:	0003      	movs	r3, r0
 8002fde:	e1a1      	b.n	8003324 <_ftoa+0x474>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 8002fe0:	2453      	movs	r4, #83	; 0x53
 8002fe2:	193b      	adds	r3, r7, r4
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	701a      	strb	r2, [r3, #0]
  if (value < 0) {
 8002fe8:	2200      	movs	r2, #0
 8002fea:	2300      	movs	r3, #0
 8002fec:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8002fee:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8002ff0:	f7fd fa16 	bl	8000420 <__aeabi_dcmplt>
 8002ff4:	1e03      	subs	r3, r0, #0
 8002ff6:	d00c      	beq.n	8003012 <_ftoa+0x162>
    negative = true;
 8002ff8:	193b      	adds	r3, r7, r4
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	701a      	strb	r2, [r3, #0]
    value = 0 - value;
 8002ffe:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003000:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003002:	2000      	movs	r0, #0
 8003004:	2100      	movs	r1, #0
 8003006:	f7fe fe93 	bl	8001d30 <__aeabi_dsub>
 800300a:	0002      	movs	r2, r0
 800300c:	000b      	movs	r3, r1
 800300e:	673a      	str	r2, [r7, #112]	; 0x70
 8003010:	677b      	str	r3, [r7, #116]	; 0x74
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 8003012:	2380      	movs	r3, #128	; 0x80
 8003014:	18fb      	adds	r3, r7, r3
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	2380      	movs	r3, #128	; 0x80
 800301a:	00db      	lsls	r3, r3, #3
 800301c:	4013      	ands	r3, r2
 800301e:	d10c      	bne.n	800303a <_ftoa+0x18a>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8003020:	2306      	movs	r3, #6
 8003022:	67bb      	str	r3, [r7, #120]	; 0x78
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8003024:	e009      	b.n	800303a <_ftoa+0x18a>
    buf[len++] = '0';
 8003026:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003028:	1c5a      	adds	r2, r3, #1
 800302a:	657a      	str	r2, [r7, #84]	; 0x54
 800302c:	2210      	movs	r2, #16
 800302e:	18ba      	adds	r2, r7, r2
 8003030:	2130      	movs	r1, #48	; 0x30
 8003032:	54d1      	strb	r1, [r2, r3]
    prec--;
 8003034:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003036:	3b01      	subs	r3, #1
 8003038:	67bb      	str	r3, [r7, #120]	; 0x78
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 800303a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800303c:	2b1f      	cmp	r3, #31
 800303e:	d802      	bhi.n	8003046 <_ftoa+0x196>
 8003040:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003042:	2b09      	cmp	r3, #9
 8003044:	d8ef      	bhi.n	8003026 <_ftoa+0x176>
  }

  int whole = (int)value;
 8003046:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8003048:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800304a:	f7ff fa03 	bl	8002454 <__aeabi_d2iz>
 800304e:	0003      	movs	r3, r0
 8003050:	64fb      	str	r3, [r7, #76]	; 0x4c
  double tmp = (value - whole) * pow10[prec];
 8003052:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003054:	f7ff fa34 	bl	80024c0 <__aeabi_i2d>
 8003058:	0002      	movs	r2, r0
 800305a:	000b      	movs	r3, r1
 800305c:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800305e:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8003060:	f7fe fe66 	bl	8001d30 <__aeabi_dsub>
 8003064:	0002      	movs	r2, r0
 8003066:	000b      	movs	r3, r1
 8003068:	0010      	movs	r0, r2
 800306a:	0019      	movs	r1, r3
 800306c:	4a68      	ldr	r2, [pc, #416]	; (8003210 <_ftoa+0x360>)
 800306e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003070:	00db      	lsls	r3, r3, #3
 8003072:	18d3      	adds	r3, r2, r3
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f7fe fbee 	bl	8001858 <__aeabi_dmul>
 800307c:	0002      	movs	r2, r0
 800307e:	000b      	movs	r3, r1
 8003080:	633a      	str	r2, [r7, #48]	; 0x30
 8003082:	637b      	str	r3, [r7, #52]	; 0x34
  unsigned long frac = (unsigned long)tmp;
 8003084:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003086:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003088:	f7fd fa3a 	bl	8000500 <__aeabi_d2uiz>
 800308c:	0003      	movs	r3, r0
 800308e:	64bb      	str	r3, [r7, #72]	; 0x48
  diff = tmp - frac;
 8003090:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003092:	f7ff fa45 	bl	8002520 <__aeabi_ui2d>
 8003096:	0002      	movs	r2, r0
 8003098:	000b      	movs	r3, r1
 800309a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800309c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800309e:	f7fe fe47 	bl	8001d30 <__aeabi_dsub>
 80030a2:	0002      	movs	r2, r0
 80030a4:	000b      	movs	r3, r1
 80030a6:	63ba      	str	r2, [r7, #56]	; 0x38
 80030a8:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (diff > 0.5) {
 80030aa:	2200      	movs	r2, #0
 80030ac:	4b59      	ldr	r3, [pc, #356]	; (8003214 <_ftoa+0x364>)
 80030ae:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80030b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80030b2:	f7fd f9c9 	bl	8000448 <__aeabi_dcmpgt>
 80030b6:	1e03      	subs	r3, r0, #0
 80030b8:	d015      	beq.n	80030e6 <_ftoa+0x236>
    ++frac;
 80030ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030bc:	3301      	adds	r3, #1
 80030be:	64bb      	str	r3, [r7, #72]	; 0x48
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 80030c0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80030c2:	f7ff fa2d 	bl	8002520 <__aeabi_ui2d>
 80030c6:	4a52      	ldr	r2, [pc, #328]	; (8003210 <_ftoa+0x360>)
 80030c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030ca:	00db      	lsls	r3, r3, #3
 80030cc:	18d3      	adds	r3, r2, r3
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f7fd f9c3 	bl	800045c <__aeabi_dcmpge>
 80030d6:	1e03      	subs	r3, r0, #0
 80030d8:	d017      	beq.n	800310a <_ftoa+0x25a>
      frac = 0;
 80030da:	2300      	movs	r3, #0
 80030dc:	64bb      	str	r3, [r7, #72]	; 0x48
      ++whole;
 80030de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80030e0:	3301      	adds	r3, #1
 80030e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030e4:	e011      	b.n	800310a <_ftoa+0x25a>
    }
  }
  else if (diff < 0.5) {
 80030e6:	2200      	movs	r2, #0
 80030e8:	4b4a      	ldr	r3, [pc, #296]	; (8003214 <_ftoa+0x364>)
 80030ea:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80030ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80030ee:	f7fd f997 	bl	8000420 <__aeabi_dcmplt>
 80030f2:	1e03      	subs	r3, r0, #0
 80030f4:	d109      	bne.n	800310a <_ftoa+0x25a>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 80030f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d003      	beq.n	8003104 <_ftoa+0x254>
 80030fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030fe:	2201      	movs	r2, #1
 8003100:	4013      	ands	r3, r2
 8003102:	d002      	beq.n	800310a <_ftoa+0x25a>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8003104:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003106:	3301      	adds	r3, #1
 8003108:	64bb      	str	r3, [r7, #72]	; 0x48
  }

  if (prec == 0U) {
 800310a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800310c:	2b00      	cmp	r3, #0
 800310e:	d12f      	bne.n	8003170 <_ftoa+0x2c0>
    diff = value - (double)whole;
 8003110:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8003112:	f7ff f9d5 	bl	80024c0 <__aeabi_i2d>
 8003116:	0002      	movs	r2, r0
 8003118:	000b      	movs	r3, r1
 800311a:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800311c:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800311e:	f7fe fe07 	bl	8001d30 <__aeabi_dsub>
 8003122:	0002      	movs	r2, r0
 8003124:	000b      	movs	r3, r1
 8003126:	63ba      	str	r2, [r7, #56]	; 0x38
 8003128:	63fb      	str	r3, [r7, #60]	; 0x3c
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 800312a:	2301      	movs	r3, #1
 800312c:	1c1c      	adds	r4, r3, #0
 800312e:	2200      	movs	r2, #0
 8003130:	4b38      	ldr	r3, [pc, #224]	; (8003214 <_ftoa+0x364>)
 8003132:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003134:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003136:	f7fd f973 	bl	8000420 <__aeabi_dcmplt>
 800313a:	1e03      	subs	r3, r0, #0
 800313c:	d101      	bne.n	8003142 <_ftoa+0x292>
 800313e:	2300      	movs	r3, #0
 8003140:	1c1c      	adds	r4, r3, #0
 8003142:	b2e3      	uxtb	r3, r4
 8003144:	2201      	movs	r2, #1
 8003146:	4053      	eors	r3, r2
 8003148:	b2db      	uxtb	r3, r3
 800314a:	2b00      	cmp	r3, #0
 800314c:	d107      	bne.n	800315e <_ftoa+0x2ae>
 800314e:	2200      	movs	r2, #0
 8003150:	4b30      	ldr	r3, [pc, #192]	; (8003214 <_ftoa+0x364>)
 8003152:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003154:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003156:	f7fd f977 	bl	8000448 <__aeabi_dcmpgt>
 800315a:	1e03      	subs	r3, r0, #0
 800315c:	d046      	beq.n	80031ec <_ftoa+0x33c>
 800315e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003160:	2201      	movs	r2, #1
 8003162:	4013      	ands	r3, r2
 8003164:	d100      	bne.n	8003168 <_ftoa+0x2b8>
 8003166:	e070      	b.n	800324a <_ftoa+0x39a>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 8003168:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800316a:	3301      	adds	r3, #1
 800316c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800316e:	e06c      	b.n	800324a <_ftoa+0x39a>
    }
  }
  else {
    unsigned int count = prec;
 8003170:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003172:	647b      	str	r3, [r7, #68]	; 0x44
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8003174:	e01b      	b.n	80031ae <_ftoa+0x2fe>
      --count;
 8003176:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003178:	3b01      	subs	r3, #1
 800317a:	647b      	str	r3, [r7, #68]	; 0x44
      buf[len++] = (char)(48U + (frac % 10U));
 800317c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800317e:	210a      	movs	r1, #10
 8003180:	0018      	movs	r0, r3
 8003182:	f7fd f847 	bl	8000214 <__aeabi_uidivmod>
 8003186:	000b      	movs	r3, r1
 8003188:	b2da      	uxtb	r2, r3
 800318a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800318c:	1c59      	adds	r1, r3, #1
 800318e:	6579      	str	r1, [r7, #84]	; 0x54
 8003190:	3230      	adds	r2, #48	; 0x30
 8003192:	b2d1      	uxtb	r1, r2
 8003194:	2210      	movs	r2, #16
 8003196:	18ba      	adds	r2, r7, r2
 8003198:	54d1      	strb	r1, [r2, r3]
      if (!(frac /= 10U)) {
 800319a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800319c:	210a      	movs	r1, #10
 800319e:	0018      	movs	r0, r3
 80031a0:	f7fc ffb2 	bl	8000108 <__udivsi3>
 80031a4:	0003      	movs	r3, r0
 80031a6:	64bb      	str	r3, [r7, #72]	; 0x48
 80031a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d003      	beq.n	80031b6 <_ftoa+0x306>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80031ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031b0:	2b1f      	cmp	r3, #31
 80031b2:	d9e0      	bls.n	8003176 <_ftoa+0x2c6>
 80031b4:	e008      	b.n	80031c8 <_ftoa+0x318>
        break;
 80031b6:	46c0      	nop			; (mov r8, r8)
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 80031b8:	e006      	b.n	80031c8 <_ftoa+0x318>
      buf[len++] = '0';
 80031ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031bc:	1c5a      	adds	r2, r3, #1
 80031be:	657a      	str	r2, [r7, #84]	; 0x54
 80031c0:	2210      	movs	r2, #16
 80031c2:	18ba      	adds	r2, r7, r2
 80031c4:	2130      	movs	r1, #48	; 0x30
 80031c6:	54d1      	strb	r1, [r2, r3]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 80031c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031ca:	2b1f      	cmp	r3, #31
 80031cc:	d804      	bhi.n	80031d8 <_ftoa+0x328>
 80031ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031d0:	1e5a      	subs	r2, r3, #1
 80031d2:	647a      	str	r2, [r7, #68]	; 0x44
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1f0      	bne.n	80031ba <_ftoa+0x30a>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 80031d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031da:	2b1f      	cmp	r3, #31
 80031dc:	d835      	bhi.n	800324a <_ftoa+0x39a>
      // add decimal
      buf[len++] = '.';
 80031de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031e0:	1c5a      	adds	r2, r3, #1
 80031e2:	657a      	str	r2, [r7, #84]	; 0x54
 80031e4:	2210      	movs	r2, #16
 80031e6:	18ba      	adds	r2, r7, r2
 80031e8:	212e      	movs	r1, #46	; 0x2e
 80031ea:	54d1      	strb	r1, [r2, r3]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80031ec:	e02d      	b.n	800324a <_ftoa+0x39a>
 80031ee:	46c0      	nop			; (mov r8, r8)
 80031f0:	0800737c 	.word	0x0800737c
 80031f4:	ffefffff 	.word	0xffefffff
 80031f8:	08007380 	.word	0x08007380
 80031fc:	7fefffff 	.word	0x7fefffff
 8003200:	08007388 	.word	0x08007388
 8003204:	08007390 	.word	0x08007390
 8003208:	41cdcd65 	.word	0x41cdcd65
 800320c:	c1cdcd65 	.word	0xc1cdcd65
 8003210:	08007678 	.word	0x08007678
 8003214:	3fe00000 	.word	0x3fe00000
    buf[len++] = (char)(48 + (whole % 10));
 8003218:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800321a:	210a      	movs	r1, #10
 800321c:	0018      	movs	r0, r3
 800321e:	f7fd f8e3 	bl	80003e8 <__aeabi_idivmod>
 8003222:	000b      	movs	r3, r1
 8003224:	b2da      	uxtb	r2, r3
 8003226:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003228:	1c59      	adds	r1, r3, #1
 800322a:	6579      	str	r1, [r7, #84]	; 0x54
 800322c:	3230      	adds	r2, #48	; 0x30
 800322e:	b2d1      	uxtb	r1, r2
 8003230:	2210      	movs	r2, #16
 8003232:	18ba      	adds	r2, r7, r2
 8003234:	54d1      	strb	r1, [r2, r3]
    if (!(whole /= 10)) {
 8003236:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003238:	210a      	movs	r1, #10
 800323a:	0018      	movs	r0, r3
 800323c:	f7fc ffee 	bl	800021c <__divsi3>
 8003240:	0003      	movs	r3, r0
 8003242:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003244:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003246:	2b00      	cmp	r3, #0
 8003248:	d003      	beq.n	8003252 <_ftoa+0x3a2>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800324a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800324c:	2b1f      	cmp	r3, #31
 800324e:	d9e3      	bls.n	8003218 <_ftoa+0x368>
 8003250:	e000      	b.n	8003254 <_ftoa+0x3a4>
      break;
 8003252:	46c0      	nop			; (mov r8, r8)
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8003254:	2180      	movs	r1, #128	; 0x80
 8003256:	187b      	adds	r3, r7, r1
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	2202      	movs	r2, #2
 800325c:	4013      	ands	r3, r2
 800325e:	d123      	bne.n	80032a8 <_ftoa+0x3f8>
 8003260:	187b      	adds	r3, r7, r1
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2201      	movs	r2, #1
 8003266:	4013      	ands	r3, r2
 8003268:	d01e      	beq.n	80032a8 <_ftoa+0x3f8>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 800326a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800326c:	2b00      	cmp	r3, #0
 800326e:	d014      	beq.n	800329a <_ftoa+0x3ea>
 8003270:	2353      	movs	r3, #83	; 0x53
 8003272:	18fb      	adds	r3, r7, r3
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d104      	bne.n	8003284 <_ftoa+0x3d4>
 800327a:	187b      	adds	r3, r7, r1
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	220c      	movs	r2, #12
 8003280:	4013      	ands	r3, r2
 8003282:	d00a      	beq.n	800329a <_ftoa+0x3ea>
      width--;
 8003284:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003286:	3b01      	subs	r3, #1
 8003288:	67fb      	str	r3, [r7, #124]	; 0x7c
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800328a:	e006      	b.n	800329a <_ftoa+0x3ea>
      buf[len++] = '0';
 800328c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800328e:	1c5a      	adds	r2, r3, #1
 8003290:	657a      	str	r2, [r7, #84]	; 0x54
 8003292:	2210      	movs	r2, #16
 8003294:	18ba      	adds	r2, r7, r2
 8003296:	2130      	movs	r1, #48	; 0x30
 8003298:	54d1      	strb	r1, [r2, r3]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800329a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800329c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800329e:	429a      	cmp	r2, r3
 80032a0:	d202      	bcs.n	80032a8 <_ftoa+0x3f8>
 80032a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032a4:	2b1f      	cmp	r3, #31
 80032a6:	d9f1      	bls.n	800328c <_ftoa+0x3dc>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 80032a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032aa:	2b1f      	cmp	r3, #31
 80032ac:	d827      	bhi.n	80032fe <_ftoa+0x44e>
    if (negative) {
 80032ae:	2353      	movs	r3, #83	; 0x53
 80032b0:	18fb      	adds	r3, r7, r3
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d007      	beq.n	80032c8 <_ftoa+0x418>
      buf[len++] = '-';
 80032b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032ba:	1c5a      	adds	r2, r3, #1
 80032bc:	657a      	str	r2, [r7, #84]	; 0x54
 80032be:	2210      	movs	r2, #16
 80032c0:	18ba      	adds	r2, r7, r2
 80032c2:	212d      	movs	r1, #45	; 0x2d
 80032c4:	54d1      	strb	r1, [r2, r3]
 80032c6:	e01a      	b.n	80032fe <_ftoa+0x44e>
    }
    else if (flags & FLAGS_PLUS) {
 80032c8:	2380      	movs	r3, #128	; 0x80
 80032ca:	18fb      	adds	r3, r7, r3
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2204      	movs	r2, #4
 80032d0:	4013      	ands	r3, r2
 80032d2:	d007      	beq.n	80032e4 <_ftoa+0x434>
      buf[len++] = '+';  // ignore the space if the '+' exists
 80032d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032d6:	1c5a      	adds	r2, r3, #1
 80032d8:	657a      	str	r2, [r7, #84]	; 0x54
 80032da:	2210      	movs	r2, #16
 80032dc:	18ba      	adds	r2, r7, r2
 80032de:	212b      	movs	r1, #43	; 0x2b
 80032e0:	54d1      	strb	r1, [r2, r3]
 80032e2:	e00c      	b.n	80032fe <_ftoa+0x44e>
    }
    else if (flags & FLAGS_SPACE) {
 80032e4:	2380      	movs	r3, #128	; 0x80
 80032e6:	18fb      	adds	r3, r7, r3
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2208      	movs	r2, #8
 80032ec:	4013      	ands	r3, r2
 80032ee:	d006      	beq.n	80032fe <_ftoa+0x44e>
      buf[len++] = ' ';
 80032f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032f2:	1c5a      	adds	r2, r3, #1
 80032f4:	657a      	str	r2, [r7, #84]	; 0x54
 80032f6:	2210      	movs	r2, #16
 80032f8:	18ba      	adds	r2, r7, r2
 80032fa:	2120      	movs	r1, #32
 80032fc:	54d1      	strb	r1, [r2, r3]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 80032fe:	683c      	ldr	r4, [r7, #0]
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	68b9      	ldr	r1, [r7, #8]
 8003304:	68f8      	ldr	r0, [r7, #12]
 8003306:	2380      	movs	r3, #128	; 0x80
 8003308:	18fb      	adds	r3, r7, r3
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	9303      	str	r3, [sp, #12]
 800330e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003310:	9302      	str	r3, [sp, #8]
 8003312:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003314:	9301      	str	r3, [sp, #4]
 8003316:	2310      	movs	r3, #16
 8003318:	18fb      	adds	r3, r7, r3
 800331a:	9300      	str	r3, [sp, #0]
 800331c:	0023      	movs	r3, r4
 800331e:	f7ff fbc7 	bl	8002ab0 <_out_rev>
 8003322:	0003      	movs	r3, r0
}
 8003324:	0018      	movs	r0, r3
 8003326:	46bd      	mov	sp, r7
 8003328:	b017      	add	sp, #92	; 0x5c
 800332a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800332c <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 800332c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800332e:	b0a5      	sub	sp, #148	; 0x94
 8003330:	af06      	add	r7, sp, #24
 8003332:	63f8      	str	r0, [r7, #60]	; 0x3c
 8003334:	63b9      	str	r1, [r7, #56]	; 0x38
 8003336:	637a      	str	r2, [r7, #52]	; 0x34
 8003338:	633b      	str	r3, [r7, #48]	; 0x30
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 800333a:	2690      	movs	r6, #144	; 0x90
 800333c:	19bb      	adds	r3, r7, r6
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	19b9      	adds	r1, r7, r6
 8003344:	6808      	ldr	r0, [r1, #0]
 8003346:	6849      	ldr	r1, [r1, #4]
 8003348:	f7fd f864 	bl	8000414 <__aeabi_dcmpeq>
 800334c:	1e03      	subs	r3, r0, #0
 800334e:	d013      	beq.n	8003378 <_etoa+0x4c>
 8003350:	2201      	movs	r2, #1
 8003352:	4252      	negs	r2, r2
 8003354:	4bd9      	ldr	r3, [pc, #868]	; (80036bc <_etoa+0x390>)
 8003356:	19b9      	adds	r1, r7, r6
 8003358:	6808      	ldr	r0, [r1, #0]
 800335a:	6849      	ldr	r1, [r1, #4]
 800335c:	f7fd f874 	bl	8000448 <__aeabi_dcmpgt>
 8003360:	1e03      	subs	r3, r0, #0
 8003362:	d109      	bne.n	8003378 <_etoa+0x4c>
 8003364:	2201      	movs	r2, #1
 8003366:	4252      	negs	r2, r2
 8003368:	4bd5      	ldr	r3, [pc, #852]	; (80036c0 <_etoa+0x394>)
 800336a:	19b9      	adds	r1, r7, r6
 800336c:	6808      	ldr	r0, [r1, #0]
 800336e:	6849      	ldr	r1, [r1, #4]
 8003370:	f7fd f856 	bl	8000420 <__aeabi_dcmplt>
 8003374:	1e03      	subs	r3, r0, #0
 8003376:	d01b      	beq.n	80033b0 <_etoa+0x84>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8003378:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 800337a:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 800337c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800337e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003380:	23a0      	movs	r3, #160	; 0xa0
 8003382:	18fb      	adds	r3, r7, r3
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	9304      	str	r3, [sp, #16]
 8003388:	239c      	movs	r3, #156	; 0x9c
 800338a:	18fb      	adds	r3, r7, r3
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	9303      	str	r3, [sp, #12]
 8003390:	2398      	movs	r3, #152	; 0x98
 8003392:	18fb      	adds	r3, r7, r3
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	9302      	str	r3, [sp, #8]
 8003398:	2390      	movs	r3, #144	; 0x90
 800339a:	18fb      	adds	r3, r7, r3
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	9200      	str	r2, [sp, #0]
 80033a2:	9301      	str	r3, [sp, #4]
 80033a4:	002b      	movs	r3, r5
 80033a6:	0022      	movs	r2, r4
 80033a8:	f7ff fd82 	bl	8002eb0 <_ftoa>
 80033ac:	0003      	movs	r3, r0
 80033ae:	e271      	b.n	8003894 <_etoa+0x568>
  }

  // determine the sign
  const bool negative = value < 0;
 80033b0:	233b      	movs	r3, #59	; 0x3b
 80033b2:	2230      	movs	r2, #48	; 0x30
 80033b4:	18ba      	adds	r2, r7, r2
 80033b6:	18d6      	adds	r6, r2, r3
 80033b8:	2301      	movs	r3, #1
 80033ba:	71fb      	strb	r3, [r7, #7]
 80033bc:	2200      	movs	r2, #0
 80033be:	2300      	movs	r3, #0
 80033c0:	2190      	movs	r1, #144	; 0x90
 80033c2:	1879      	adds	r1, r7, r1
 80033c4:	6808      	ldr	r0, [r1, #0]
 80033c6:	6849      	ldr	r1, [r1, #4]
 80033c8:	f7fd f82a 	bl	8000420 <__aeabi_dcmplt>
 80033cc:	1e03      	subs	r3, r0, #0
 80033ce:	d101      	bne.n	80033d4 <_etoa+0xa8>
 80033d0:	2300      	movs	r3, #0
 80033d2:	71fb      	strb	r3, [r7, #7]
 80033d4:	79fb      	ldrb	r3, [r7, #7]
 80033d6:	7033      	strb	r3, [r6, #0]
  if (negative) {
 80033d8:	233b      	movs	r3, #59	; 0x3b
 80033da:	2230      	movs	r2, #48	; 0x30
 80033dc:	4694      	mov	ip, r2
 80033de:	44bc      	add	ip, r7
 80033e0:	4463      	add	r3, ip
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d00c      	beq.n	8003402 <_etoa+0xd6>
    value = -value;
 80033e8:	2290      	movs	r2, #144	; 0x90
 80033ea:	18bb      	adds	r3, r7, r2
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	18ba      	adds	r2, r7, r2
 80033f0:	6013      	str	r3, [r2, #0]
 80033f2:	2194      	movs	r1, #148	; 0x94
 80033f4:	187b      	adds	r3, r7, r1
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	2380      	movs	r3, #128	; 0x80
 80033fa:	061b      	lsls	r3, r3, #24
 80033fc:	4053      	eors	r3, r2
 80033fe:	187a      	adds	r2, r7, r1
 8003400:	6013      	str	r3, [r2, #0]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 8003402:	23a0      	movs	r3, #160	; 0xa0
 8003404:	18fb      	adds	r3, r7, r3
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	2380      	movs	r3, #128	; 0x80
 800340a:	00db      	lsls	r3, r3, #3
 800340c:	4013      	ands	r3, r2
 800340e:	d103      	bne.n	8003418 <_etoa+0xec>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8003410:	2306      	movs	r3, #6
 8003412:	2298      	movs	r2, #152	; 0x98
 8003414:	18ba      	adds	r2, r7, r2
 8003416:	6013      	str	r3, [r2, #0]
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 8003418:	2690      	movs	r6, #144	; 0x90
 800341a:	19bb      	adds	r3, r7, r6
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	643a      	str	r2, [r7, #64]	; 0x40
 8003422:	647b      	str	r3, [r7, #68]	; 0x44
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 8003424:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003426:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003428:	0d1b      	lsrs	r3, r3, #20
 800342a:	623b      	str	r3, [r7, #32]
 800342c:	2300      	movs	r3, #0
 800342e:	627b      	str	r3, [r7, #36]	; 0x24
 8003430:	6a3b      	ldr	r3, [r7, #32]
 8003432:	055b      	lsls	r3, r3, #21
 8003434:	0d5b      	lsrs	r3, r3, #21
 8003436:	4aa3      	ldr	r2, [pc, #652]	; (80036c4 <_etoa+0x398>)
 8003438:	4694      	mov	ip, r2
 800343a:	4463      	add	r3, ip
 800343c:	667b      	str	r3, [r7, #100]	; 0x64
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 800343e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003440:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003442:	2100      	movs	r1, #0
 8003444:	0010      	movs	r0, r2
 8003446:	4388      	bics	r0, r1
 8003448:	0004      	movs	r4, r0
 800344a:	031b      	lsls	r3, r3, #12
 800344c:	0b1d      	lsrs	r5, r3, #12
 800344e:	2300      	movs	r3, #0
 8003450:	4323      	orrs	r3, r4
 8003452:	61bb      	str	r3, [r7, #24]
 8003454:	4b9c      	ldr	r3, [pc, #624]	; (80036c8 <_etoa+0x39c>)
 8003456:	432b      	orrs	r3, r5
 8003458:	61fb      	str	r3, [r7, #28]
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	69fc      	ldr	r4, [r7, #28]
 800345e:	643b      	str	r3, [r7, #64]	; 0x40
 8003460:	647c      	str	r4, [r7, #68]	; 0x44
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8003462:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8003464:	f7ff f82c 	bl	80024c0 <__aeabi_i2d>
 8003468:	4a98      	ldr	r2, [pc, #608]	; (80036cc <_etoa+0x3a0>)
 800346a:	4b99      	ldr	r3, [pc, #612]	; (80036d0 <_etoa+0x3a4>)
 800346c:	f7fe f9f4 	bl	8001858 <__aeabi_dmul>
 8003470:	0002      	movs	r2, r0
 8003472:	000b      	movs	r3, r1
 8003474:	0010      	movs	r0, r2
 8003476:	0019      	movs	r1, r3
 8003478:	4a96      	ldr	r2, [pc, #600]	; (80036d4 <_etoa+0x3a8>)
 800347a:	4b97      	ldr	r3, [pc, #604]	; (80036d8 <_etoa+0x3ac>)
 800347c:	f7fd fa7c 	bl	8000978 <__aeabi_dadd>
 8003480:	0002      	movs	r2, r0
 8003482:	000b      	movs	r3, r1
 8003484:	0014      	movs	r4, r2
 8003486:	001d      	movs	r5, r3
 8003488:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800348a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800348c:	2200      	movs	r2, #0
 800348e:	4b93      	ldr	r3, [pc, #588]	; (80036dc <_etoa+0x3b0>)
 8003490:	f7fe fc4e 	bl	8001d30 <__aeabi_dsub>
 8003494:	0002      	movs	r2, r0
 8003496:	000b      	movs	r3, r1
 8003498:	0010      	movs	r0, r2
 800349a:	0019      	movs	r1, r3
 800349c:	4a90      	ldr	r2, [pc, #576]	; (80036e0 <_etoa+0x3b4>)
 800349e:	4b91      	ldr	r3, [pc, #580]	; (80036e4 <_etoa+0x3b8>)
 80034a0:	f7fe f9da 	bl	8001858 <__aeabi_dmul>
 80034a4:	0002      	movs	r2, r0
 80034a6:	000b      	movs	r3, r1
 80034a8:	0020      	movs	r0, r4
 80034aa:	0029      	movs	r1, r5
 80034ac:	f7fd fa64 	bl	8000978 <__aeabi_dadd>
 80034b0:	0002      	movs	r2, r0
 80034b2:	000b      	movs	r3, r1
 80034b4:	0010      	movs	r0, r2
 80034b6:	0019      	movs	r1, r3
 80034b8:	f7fe ffcc 	bl	8002454 <__aeabi_d2iz>
 80034bc:	0003      	movs	r3, r0
 80034be:	677b      	str	r3, [r7, #116]	; 0x74
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 80034c0:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80034c2:	f7fe fffd 	bl	80024c0 <__aeabi_i2d>
 80034c6:	4a88      	ldr	r2, [pc, #544]	; (80036e8 <_etoa+0x3bc>)
 80034c8:	4b88      	ldr	r3, [pc, #544]	; (80036ec <_etoa+0x3c0>)
 80034ca:	f7fe f9c5 	bl	8001858 <__aeabi_dmul>
 80034ce:	0002      	movs	r2, r0
 80034d0:	000b      	movs	r3, r1
 80034d2:	0010      	movs	r0, r2
 80034d4:	0019      	movs	r1, r3
 80034d6:	2200      	movs	r2, #0
 80034d8:	4b85      	ldr	r3, [pc, #532]	; (80036f0 <_etoa+0x3c4>)
 80034da:	f7fd fa4d 	bl	8000978 <__aeabi_dadd>
 80034de:	0002      	movs	r2, r0
 80034e0:	000b      	movs	r3, r1
 80034e2:	0010      	movs	r0, r2
 80034e4:	0019      	movs	r1, r3
 80034e6:	f7fe ffb5 	bl	8002454 <__aeabi_d2iz>
 80034ea:	0003      	movs	r3, r0
 80034ec:	667b      	str	r3, [r7, #100]	; 0x64
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 80034ee:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80034f0:	f7fe ffe6 	bl	80024c0 <__aeabi_i2d>
 80034f4:	4a7f      	ldr	r2, [pc, #508]	; (80036f4 <_etoa+0x3c8>)
 80034f6:	4b80      	ldr	r3, [pc, #512]	; (80036f8 <_etoa+0x3cc>)
 80034f8:	f7fe f9ae 	bl	8001858 <__aeabi_dmul>
 80034fc:	0002      	movs	r2, r0
 80034fe:	000b      	movs	r3, r1
 8003500:	0014      	movs	r4, r2
 8003502:	001d      	movs	r5, r3
 8003504:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8003506:	f7fe ffdb 	bl	80024c0 <__aeabi_i2d>
 800350a:	4a7c      	ldr	r2, [pc, #496]	; (80036fc <_etoa+0x3d0>)
 800350c:	4b7c      	ldr	r3, [pc, #496]	; (8003700 <_etoa+0x3d4>)
 800350e:	f7fe f9a3 	bl	8001858 <__aeabi_dmul>
 8003512:	0002      	movs	r2, r0
 8003514:	000b      	movs	r3, r1
 8003516:	0020      	movs	r0, r4
 8003518:	0029      	movs	r1, r5
 800351a:	f7fe fc09 	bl	8001d30 <__aeabi_dsub>
 800351e:	0002      	movs	r2, r0
 8003520:	000b      	movs	r3, r1
 8003522:	65ba      	str	r2, [r7, #88]	; 0x58
 8003524:	65fb      	str	r3, [r7, #92]	; 0x5c
  const double z2 = z * z;
 8003526:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003528:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800352a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800352c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800352e:	f7fe f993 	bl	8001858 <__aeabi_dmul>
 8003532:	0002      	movs	r2, r0
 8003534:	000b      	movs	r3, r1
 8003536:	653a      	str	r2, [r7, #80]	; 0x50
 8003538:	657b      	str	r3, [r7, #84]	; 0x54
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 800353a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800353c:	4a71      	ldr	r2, [pc, #452]	; (8003704 <_etoa+0x3d8>)
 800353e:	4694      	mov	ip, r2
 8003540:	4463      	add	r3, ip
 8003542:	613b      	str	r3, [r7, #16]
 8003544:	17db      	asrs	r3, r3, #31
 8003546:	617b      	str	r3, [r7, #20]
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	051b      	lsls	r3, r3, #20
 800354c:	60fb      	str	r3, [r7, #12]
 800354e:	2300      	movs	r3, #0
 8003550:	60bb      	str	r3, [r7, #8]
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	68fc      	ldr	r4, [r7, #12]
 8003556:	643b      	str	r3, [r7, #64]	; 0x40
 8003558:	647c      	str	r4, [r7, #68]	; 0x44
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 800355a:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 800355c:	6c7d      	ldr	r5, [r7, #68]	; 0x44
 800355e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8003560:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8003562:	0002      	movs	r2, r0
 8003564:	000b      	movs	r3, r1
 8003566:	f7fd fa07 	bl	8000978 <__aeabi_dadd>
 800356a:	0002      	movs	r2, r0
 800356c:	000b      	movs	r3, r1
 800356e:	623a      	str	r2, [r7, #32]
 8003570:	627b      	str	r3, [r7, #36]	; 0x24
 8003572:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003574:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003576:	2000      	movs	r0, #0
 8003578:	2180      	movs	r1, #128	; 0x80
 800357a:	05c9      	lsls	r1, r1, #23
 800357c:	f7fe fbd8 	bl	8001d30 <__aeabi_dsub>
 8003580:	0002      	movs	r2, r0
 8003582:	000b      	movs	r3, r1
 8003584:	61ba      	str	r2, [r7, #24]
 8003586:	61fb      	str	r3, [r7, #28]
 8003588:	2200      	movs	r2, #0
 800358a:	4b5f      	ldr	r3, [pc, #380]	; (8003708 <_etoa+0x3dc>)
 800358c:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800358e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003590:	f7fd fd5c 	bl	800104c <__aeabi_ddiv>
 8003594:	0002      	movs	r2, r0
 8003596:	000b      	movs	r3, r1
 8003598:	0010      	movs	r0, r2
 800359a:	0019      	movs	r1, r3
 800359c:	2200      	movs	r2, #0
 800359e:	4b5b      	ldr	r3, [pc, #364]	; (800370c <_etoa+0x3e0>)
 80035a0:	f7fd f9ea 	bl	8000978 <__aeabi_dadd>
 80035a4:	0002      	movs	r2, r0
 80035a6:	000b      	movs	r3, r1
 80035a8:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80035aa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80035ac:	f7fd fd4e 	bl	800104c <__aeabi_ddiv>
 80035b0:	0002      	movs	r2, r0
 80035b2:	000b      	movs	r3, r1
 80035b4:	0010      	movs	r0, r2
 80035b6:	0019      	movs	r1, r3
 80035b8:	2200      	movs	r2, #0
 80035ba:	4b55      	ldr	r3, [pc, #340]	; (8003710 <_etoa+0x3e4>)
 80035bc:	f7fd f9dc 	bl	8000978 <__aeabi_dadd>
 80035c0:	0002      	movs	r2, r0
 80035c2:	000b      	movs	r3, r1
 80035c4:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80035c6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80035c8:	f7fd fd40 	bl	800104c <__aeabi_ddiv>
 80035cc:	0002      	movs	r2, r0
 80035ce:	000b      	movs	r3, r1
 80035d0:	69b8      	ldr	r0, [r7, #24]
 80035d2:	69f9      	ldr	r1, [r7, #28]
 80035d4:	f7fd f9d0 	bl	8000978 <__aeabi_dadd>
 80035d8:	0002      	movs	r2, r0
 80035da:	000b      	movs	r3, r1
 80035dc:	6a38      	ldr	r0, [r7, #32]
 80035de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035e0:	f7fd fd34 	bl	800104c <__aeabi_ddiv>
 80035e4:	0002      	movs	r2, r0
 80035e6:	000b      	movs	r3, r1
 80035e8:	0010      	movs	r0, r2
 80035ea:	0019      	movs	r1, r3
 80035ec:	2200      	movs	r2, #0
 80035ee:	4b36      	ldr	r3, [pc, #216]	; (80036c8 <_etoa+0x39c>)
 80035f0:	f7fd f9c2 	bl	8000978 <__aeabi_dadd>
 80035f4:	0002      	movs	r2, r0
 80035f6:	000b      	movs	r3, r1
 80035f8:	0020      	movs	r0, r4
 80035fa:	0029      	movs	r1, r5
 80035fc:	f7fe f92c 	bl	8001858 <__aeabi_dmul>
 8003600:	0002      	movs	r2, r0
 8003602:	000b      	movs	r3, r1
 8003604:	643a      	str	r2, [r7, #64]	; 0x40
 8003606:	647b      	str	r3, [r7, #68]	; 0x44
  // correct for rounding errors
  if (value < conv.F) {
 8003608:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800360a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800360c:	19b9      	adds	r1, r7, r6
 800360e:	6808      	ldr	r0, [r1, #0]
 8003610:	6849      	ldr	r1, [r1, #4]
 8003612:	f7fc ff05 	bl	8000420 <__aeabi_dcmplt>
 8003616:	1e03      	subs	r3, r0, #0
 8003618:	d00c      	beq.n	8003634 <_etoa+0x308>
    expval--;
 800361a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800361c:	3b01      	subs	r3, #1
 800361e:	677b      	str	r3, [r7, #116]	; 0x74
    conv.F /= 10;
 8003620:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003622:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003624:	2200      	movs	r2, #0
 8003626:	4b39      	ldr	r3, [pc, #228]	; (800370c <_etoa+0x3e0>)
 8003628:	f7fd fd10 	bl	800104c <__aeabi_ddiv>
 800362c:	0002      	movs	r2, r0
 800362e:	000b      	movs	r3, r1
 8003630:	643a      	str	r2, [r7, #64]	; 0x40
 8003632:	647b      	str	r3, [r7, #68]	; 0x44
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 8003634:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003636:	2b63      	cmp	r3, #99	; 0x63
 8003638:	dc04      	bgt.n	8003644 <_etoa+0x318>
 800363a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800363c:	3363      	adds	r3, #99	; 0x63
 800363e:	db01      	blt.n	8003644 <_etoa+0x318>
 8003640:	2304      	movs	r3, #4
 8003642:	e000      	b.n	8003646 <_etoa+0x31a>
 8003644:	2305      	movs	r3, #5
 8003646:	673b      	str	r3, [r7, #112]	; 0x70

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8003648:	23a0      	movs	r3, #160	; 0xa0
 800364a:	18fb      	adds	r3, r7, r3
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	2380      	movs	r3, #128	; 0x80
 8003650:	011b      	lsls	r3, r3, #4
 8003652:	4013      	ands	r3, r2
 8003654:	d100      	bne.n	8003658 <_etoa+0x32c>
 8003656:	e074      	b.n	8003742 <_etoa+0x416>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 8003658:	4a2e      	ldr	r2, [pc, #184]	; (8003714 <_etoa+0x3e8>)
 800365a:	4b2f      	ldr	r3, [pc, #188]	; (8003718 <_etoa+0x3ec>)
 800365c:	2490      	movs	r4, #144	; 0x90
 800365e:	1939      	adds	r1, r7, r4
 8003660:	6808      	ldr	r0, [r1, #0]
 8003662:	6849      	ldr	r1, [r1, #4]
 8003664:	f7fc fefa 	bl	800045c <__aeabi_dcmpge>
 8003668:	1e03      	subs	r3, r0, #0
 800366a:	d059      	beq.n	8003720 <_etoa+0x3f4>
 800366c:	2200      	movs	r2, #0
 800366e:	4b2b      	ldr	r3, [pc, #172]	; (800371c <_etoa+0x3f0>)
 8003670:	1939      	adds	r1, r7, r4
 8003672:	6808      	ldr	r0, [r1, #0]
 8003674:	6849      	ldr	r1, [r1, #4]
 8003676:	f7fc fed3 	bl	8000420 <__aeabi_dcmplt>
 800367a:	1e03      	subs	r3, r0, #0
 800367c:	d050      	beq.n	8003720 <_etoa+0x3f4>
      if ((int)prec > expval) {
 800367e:	2198      	movs	r1, #152	; 0x98
 8003680:	187b      	adds	r3, r7, r1
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003686:	429a      	cmp	r2, r3
 8003688:	da07      	bge.n	800369a <_etoa+0x36e>
        prec = (unsigned)((int)prec - expval - 1);
 800368a:	187b      	adds	r3, r7, r1
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	3b01      	subs	r3, #1
 8003694:	187a      	adds	r2, r7, r1
 8003696:	6013      	str	r3, [r2, #0]
 8003698:	e003      	b.n	80036a2 <_etoa+0x376>
      }
      else {
        prec = 0;
 800369a:	2300      	movs	r3, #0
 800369c:	2298      	movs	r2, #152	; 0x98
 800369e:	18ba      	adds	r2, r7, r2
 80036a0:	6013      	str	r3, [r2, #0]
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 80036a2:	21a0      	movs	r1, #160	; 0xa0
 80036a4:	187b      	adds	r3, r7, r1
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2280      	movs	r2, #128	; 0x80
 80036aa:	00d2      	lsls	r2, r2, #3
 80036ac:	4313      	orrs	r3, r2
 80036ae:	187a      	adds	r2, r7, r1
 80036b0:	6013      	str	r3, [r2, #0]
      // no characters in exponent
      minwidth = 0U;
 80036b2:	2300      	movs	r3, #0
 80036b4:	673b      	str	r3, [r7, #112]	; 0x70
      expval   = 0;
 80036b6:	2300      	movs	r3, #0
 80036b8:	677b      	str	r3, [r7, #116]	; 0x74
 80036ba:	e042      	b.n	8003742 <_etoa+0x416>
 80036bc:	7fefffff 	.word	0x7fefffff
 80036c0:	ffefffff 	.word	0xffefffff
 80036c4:	fffffc01 	.word	0xfffffc01
 80036c8:	3ff00000 	.word	0x3ff00000
 80036cc:	509f79fb 	.word	0x509f79fb
 80036d0:	3fd34413 	.word	0x3fd34413
 80036d4:	8b60c8b3 	.word	0x8b60c8b3
 80036d8:	3fc68a28 	.word	0x3fc68a28
 80036dc:	3ff80000 	.word	0x3ff80000
 80036e0:	636f4361 	.word	0x636f4361
 80036e4:	3fd287a7 	.word	0x3fd287a7
 80036e8:	0979a371 	.word	0x0979a371
 80036ec:	400a934f 	.word	0x400a934f
 80036f0:	3fe00000 	.word	0x3fe00000
 80036f4:	bbb55516 	.word	0xbbb55516
 80036f8:	40026bb1 	.word	0x40026bb1
 80036fc:	fefa39ef 	.word	0xfefa39ef
 8003700:	3fe62e42 	.word	0x3fe62e42
 8003704:	000003ff 	.word	0x000003ff
 8003708:	402c0000 	.word	0x402c0000
 800370c:	40240000 	.word	0x40240000
 8003710:	40180000 	.word	0x40180000
 8003714:	eb1c432d 	.word	0xeb1c432d
 8003718:	3f1a36e2 	.word	0x3f1a36e2
 800371c:	412e8480 	.word	0x412e8480
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 8003720:	2198      	movs	r1, #152	; 0x98
 8003722:	187b      	adds	r3, r7, r1
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00b      	beq.n	8003742 <_etoa+0x416>
 800372a:	23a0      	movs	r3, #160	; 0xa0
 800372c:	18fb      	adds	r3, r7, r3
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	2380      	movs	r3, #128	; 0x80
 8003732:	00db      	lsls	r3, r3, #3
 8003734:	4013      	ands	r3, r2
 8003736:	d004      	beq.n	8003742 <_etoa+0x416>
        --prec;
 8003738:	187b      	adds	r3, r7, r1
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	3b01      	subs	r3, #1
 800373e:	187a      	adds	r2, r7, r1
 8003740:	6013      	str	r3, [r2, #0]
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 8003742:	229c      	movs	r2, #156	; 0x9c
 8003744:	18bb      	adds	r3, r7, r2
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (width > minwidth) {
 800374a:	18bb      	adds	r3, r7, r2
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003750:	429a      	cmp	r2, r3
 8003752:	d904      	bls.n	800375e <_etoa+0x432>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 8003754:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003756:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800375c:	e001      	b.n	8003762 <_etoa+0x436>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 800375e:	2300      	movs	r3, #0
 8003760:	66fb      	str	r3, [r7, #108]	; 0x6c
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 8003762:	23a0      	movs	r3, #160	; 0xa0
 8003764:	18fb      	adds	r3, r7, r3
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2202      	movs	r2, #2
 800376a:	4013      	ands	r3, r2
 800376c:	d004      	beq.n	8003778 <_etoa+0x44c>
 800376e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003770:	2b00      	cmp	r3, #0
 8003772:	d001      	beq.n	8003778 <_etoa+0x44c>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 8003774:	2300      	movs	r3, #0
 8003776:	66fb      	str	r3, [r7, #108]	; 0x6c
  }

  // rescale the float value
  if (expval) {
 8003778:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800377a:	2b00      	cmp	r3, #0
 800377c:	d00c      	beq.n	8003798 <_etoa+0x46c>
    value /= conv.F;
 800377e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003780:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003782:	2490      	movs	r4, #144	; 0x90
 8003784:	1939      	adds	r1, r7, r4
 8003786:	6808      	ldr	r0, [r1, #0]
 8003788:	6849      	ldr	r1, [r1, #4]
 800378a:	f7fd fc5f 	bl	800104c <__aeabi_ddiv>
 800378e:	0002      	movs	r2, r0
 8003790:	000b      	movs	r3, r1
 8003792:	1939      	adds	r1, r7, r4
 8003794:	600a      	str	r2, [r1, #0]
 8003796:	604b      	str	r3, [r1, #4]
  }

  // output the floating part
  const size_t start_idx = idx;
 8003798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800379a:	64fb      	str	r3, [r7, #76]	; 0x4c
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 800379c:	233b      	movs	r3, #59	; 0x3b
 800379e:	2230      	movs	r2, #48	; 0x30
 80037a0:	4694      	mov	ip, r2
 80037a2:	44bc      	add	ip, r7
 80037a4:	4463      	add	r3, ip
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d00b      	beq.n	80037c4 <_etoa+0x498>
 80037ac:	2390      	movs	r3, #144	; 0x90
 80037ae:	18fb      	adds	r3, r7, r3
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80037b4:	2394      	movs	r3, #148	; 0x94
 80037b6:	18fb      	adds	r3, r7, r3
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2280      	movs	r2, #128	; 0x80
 80037bc:	0612      	lsls	r2, r2, #24
 80037be:	405a      	eors	r2, r3
 80037c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037c2:	e005      	b.n	80037d0 <_etoa+0x4a4>
 80037c4:	2390      	movs	r3, #144	; 0x90
 80037c6:	18fb      	adds	r3, r7, r3
 80037c8:	685c      	ldr	r4, [r3, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80037ce:	62fc      	str	r4, [r7, #44]	; 0x2c
 80037d0:	23a0      	movs	r3, #160	; 0xa0
 80037d2:	18fa      	adds	r2, r7, r3
 80037d4:	6813      	ldr	r3, [r2, #0]
 80037d6:	4a31      	ldr	r2, [pc, #196]	; (800389c <_etoa+0x570>)
 80037d8:	4013      	ands	r3, r2
 80037da:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 80037dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80037e0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80037e2:	9304      	str	r3, [sp, #16]
 80037e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80037e6:	9303      	str	r3, [sp, #12]
 80037e8:	2598      	movs	r5, #152	; 0x98
 80037ea:	197d      	adds	r5, r7, r5
 80037ec:	682b      	ldr	r3, [r5, #0]
 80037ee:	9302      	str	r3, [sp, #8]
 80037f0:	6abd      	ldr	r5, [r7, #40]	; 0x28
 80037f2:	6afe      	ldr	r6, [r7, #44]	; 0x2c
 80037f4:	9500      	str	r5, [sp, #0]
 80037f6:	9601      	str	r6, [sp, #4]
 80037f8:	0023      	movs	r3, r4
 80037fa:	f7ff fb59 	bl	8002eb0 <_ftoa>
 80037fe:	0003      	movs	r3, r0
 8003800:	637b      	str	r3, [r7, #52]	; 0x34

  // output the exponent part
  if (minwidth) {
 8003802:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003804:	2b00      	cmp	r3, #0
 8003806:	d044      	beq.n	8003892 <_etoa+0x566>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 8003808:	23a0      	movs	r3, #160	; 0xa0
 800380a:	18fb      	adds	r3, r7, r3
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2220      	movs	r2, #32
 8003810:	4013      	ands	r3, r2
 8003812:	d001      	beq.n	8003818 <_etoa+0x4ec>
 8003814:	2045      	movs	r0, #69	; 0x45
 8003816:	e000      	b.n	800381a <_etoa+0x4ee>
 8003818:	2065      	movs	r0, #101	; 0x65
 800381a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800381c:	1c53      	adds	r3, r2, #1
 800381e:	637b      	str	r3, [r7, #52]	; 0x34
 8003820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003822:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003824:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 8003826:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 8003828:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800382a:	17da      	asrs	r2, r3, #31
 800382c:	189b      	adds	r3, r3, r2
 800382e:	4053      	eors	r3, r2
 8003830:	469c      	mov	ip, r3
 8003832:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003834:	0fdb      	lsrs	r3, r3, #31
 8003836:	b2db      	uxtb	r3, r3
 8003838:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800383a:	3a01      	subs	r2, #1
 800383c:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 800383e:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 8003840:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003842:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8003844:	2605      	movs	r6, #5
 8003846:	9605      	str	r6, [sp, #20]
 8003848:	9204      	str	r2, [sp, #16]
 800384a:	2200      	movs	r2, #0
 800384c:	9203      	str	r2, [sp, #12]
 800384e:	220a      	movs	r2, #10
 8003850:	9202      	str	r2, [sp, #8]
 8003852:	9301      	str	r3, [sp, #4]
 8003854:	4663      	mov	r3, ip
 8003856:	9300      	str	r3, [sp, #0]
 8003858:	002b      	movs	r3, r5
 800385a:	0022      	movs	r2, r4
 800385c:	f7ff fa4b 	bl	8002cf6 <_ntoa_long>
 8003860:	0003      	movs	r3, r0
 8003862:	637b      	str	r3, [r7, #52]	; 0x34
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8003864:	23a0      	movs	r3, #160	; 0xa0
 8003866:	18fb      	adds	r3, r7, r3
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2202      	movs	r2, #2
 800386c:	4013      	ands	r3, r2
 800386e:	d010      	beq.n	8003892 <_etoa+0x566>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8003870:	e007      	b.n	8003882 <_etoa+0x556>
 8003872:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003874:	1c53      	adds	r3, r2, #1
 8003876:	637b      	str	r3, [r7, #52]	; 0x34
 8003878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800387a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800387c:	6bfc      	ldr	r4, [r7, #60]	; 0x3c
 800387e:	2020      	movs	r0, #32
 8003880:	47a0      	blx	r4
 8003882:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003884:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	229c      	movs	r2, #156	; 0x9c
 800388a:	18ba      	adds	r2, r7, r2
 800388c:	6812      	ldr	r2, [r2, #0]
 800388e:	429a      	cmp	r2, r3
 8003890:	d8ef      	bhi.n	8003872 <_etoa+0x546>
    }
  }
  return idx;
 8003892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003894:	0018      	movs	r0, r3
 8003896:	46bd      	mov	sp, r7
 8003898:	b01f      	add	sp, #124	; 0x7c
 800389a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800389c:	fffff7ff 	.word	0xfffff7ff

080038a0 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 80038a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80038a2:	46c6      	mov	lr, r8
 80038a4:	b500      	push	{lr}
 80038a6:	b0a6      	sub	sp, #152	; 0x98
 80038a8:	af0a      	add	r7, sp, #40	; 0x28
 80038aa:	6278      	str	r0, [r7, #36]	; 0x24
 80038ac:	6239      	str	r1, [r7, #32]
 80038ae:	61fa      	str	r2, [r7, #28]
 80038b0:	61bb      	str	r3, [r7, #24]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 80038b2:	2300      	movs	r3, #0
 80038b4:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (!buffer) {
 80038b6:	6a3b      	ldr	r3, [r7, #32]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d001      	beq.n	80038c0 <_vsnprintf+0x20>
 80038bc:	f000 fc26 	bl	800410c <_vsnprintf+0x86c>
    // use null output function
    out = _out_null;
 80038c0:	4bd0      	ldr	r3, [pc, #832]	; (8003c04 <_vsnprintf+0x364>)
 80038c2:	627b      	str	r3, [r7, #36]	; 0x24
  }

  while (*format)
 80038c4:	f000 fc22 	bl	800410c <_vsnprintf+0x86c>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 80038c8:	69bb      	ldr	r3, [r7, #24]
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	2b25      	cmp	r3, #37	; 0x25
 80038ce:	d00d      	beq.n	80038ec <_vsnprintf+0x4c>
      // no
      out(*format, buffer, idx++, maxlen);
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	7818      	ldrb	r0, [r3, #0]
 80038d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80038d6:	1c53      	adds	r3, r2, #1
 80038d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	6a39      	ldr	r1, [r7, #32]
 80038de:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80038e0:	47a0      	blx	r4
      format++;
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	3301      	adds	r3, #1
 80038e6:	61bb      	str	r3, [r7, #24]
      continue;
 80038e8:	f000 fc10 	bl	800410c <_vsnprintf+0x86c>
    }
    else {
      // yes, evaluate it
      format++;
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	3301      	adds	r3, #1
 80038f0:	61bb      	str	r3, [r7, #24]
    }

    // evaluate flags
    flags = 0U;
 80038f2:	2300      	movs	r3, #0
 80038f4:	66fb      	str	r3, [r7, #108]	; 0x6c
    do {
      switch (*format) {
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	3b20      	subs	r3, #32
 80038fc:	2b10      	cmp	r3, #16
 80038fe:	d836      	bhi.n	800396e <_vsnprintf+0xce>
 8003900:	009a      	lsls	r2, r3, #2
 8003902:	4bc1      	ldr	r3, [pc, #772]	; (8003c08 <_vsnprintf+0x368>)
 8003904:	18d3      	adds	r3, r2, r3
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	469f      	mov	pc, r3
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 800390a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800390c:	2201      	movs	r2, #1
 800390e:	4313      	orrs	r3, r2
 8003910:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003912:	69bb      	ldr	r3, [r7, #24]
 8003914:	3301      	adds	r3, #1
 8003916:	61bb      	str	r3, [r7, #24]
 8003918:	2301      	movs	r3, #1
 800391a:	663b      	str	r3, [r7, #96]	; 0x60
 800391c:	e02a      	b.n	8003974 <_vsnprintf+0xd4>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 800391e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003920:	2202      	movs	r2, #2
 8003922:	4313      	orrs	r3, r2
 8003924:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	3301      	adds	r3, #1
 800392a:	61bb      	str	r3, [r7, #24]
 800392c:	2301      	movs	r3, #1
 800392e:	663b      	str	r3, [r7, #96]	; 0x60
 8003930:	e020      	b.n	8003974 <_vsnprintf+0xd4>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8003932:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003934:	2204      	movs	r2, #4
 8003936:	4313      	orrs	r3, r2
 8003938:	66fb      	str	r3, [r7, #108]	; 0x6c
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	3301      	adds	r3, #1
 800393e:	61bb      	str	r3, [r7, #24]
 8003940:	2301      	movs	r3, #1
 8003942:	663b      	str	r3, [r7, #96]	; 0x60
 8003944:	e016      	b.n	8003974 <_vsnprintf+0xd4>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8003946:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003948:	2208      	movs	r2, #8
 800394a:	4313      	orrs	r3, r2
 800394c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	3301      	adds	r3, #1
 8003952:	61bb      	str	r3, [r7, #24]
 8003954:	2301      	movs	r3, #1
 8003956:	663b      	str	r3, [r7, #96]	; 0x60
 8003958:	e00c      	b.n	8003974 <_vsnprintf+0xd4>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 800395a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800395c:	2210      	movs	r2, #16
 800395e:	4313      	orrs	r3, r2
 8003960:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	3301      	adds	r3, #1
 8003966:	61bb      	str	r3, [r7, #24]
 8003968:	2301      	movs	r3, #1
 800396a:	663b      	str	r3, [r7, #96]	; 0x60
 800396c:	e002      	b.n	8003974 <_vsnprintf+0xd4>
        default :                                   n = 0U; break;
 800396e:	2300      	movs	r3, #0
 8003970:	663b      	str	r3, [r7, #96]	; 0x60
 8003972:	46c0      	nop			; (mov r8, r8)
      }
    } while (n);
 8003974:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003976:	2b00      	cmp	r3, #0
 8003978:	d1bd      	bne.n	80038f6 <_vsnprintf+0x56>

    // evaluate width field
    width = 0U;
 800397a:	2300      	movs	r3, #0
 800397c:	66bb      	str	r3, [r7, #104]	; 0x68
    if (_is_digit(*format)) {
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	0018      	movs	r0, r3
 8003984:	f7ff f858 	bl	8002a38 <_is_digit>
 8003988:	1e03      	subs	r3, r0, #0
 800398a:	d007      	beq.n	800399c <_vsnprintf+0xfc>
      width = _atoi(&format);
 800398c:	2318      	movs	r3, #24
 800398e:	18fb      	adds	r3, r7, r3
 8003990:	0018      	movs	r0, r3
 8003992:	f7ff f86a 	bl	8002a6a <_atoi>
 8003996:	0003      	movs	r3, r0
 8003998:	66bb      	str	r3, [r7, #104]	; 0x68
 800399a:	e01c      	b.n	80039d6 <_vsnprintf+0x136>
    }
    else if (*format == '*') {
 800399c:	69bb      	ldr	r3, [r7, #24]
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	2b2a      	cmp	r3, #42	; 0x2a
 80039a2:	d118      	bne.n	80039d6 <_vsnprintf+0x136>
      const int w = va_arg(va, int);
 80039a4:	2388      	movs	r3, #136	; 0x88
 80039a6:	18fb      	adds	r3, r7, r3
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	1d1a      	adds	r2, r3, #4
 80039ac:	2188      	movs	r1, #136	; 0x88
 80039ae:	1879      	adds	r1, r7, r1
 80039b0:	600a      	str	r2, [r1, #0]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	64bb      	str	r3, [r7, #72]	; 0x48
      if (w < 0) {
 80039b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	da07      	bge.n	80039cc <_vsnprintf+0x12c>
        flags |= FLAGS_LEFT;    // reverse padding
 80039bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039be:	2202      	movs	r2, #2
 80039c0:	4313      	orrs	r3, r2
 80039c2:	66fb      	str	r3, [r7, #108]	; 0x6c
        width = (unsigned int)-w;
 80039c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039c6:	425b      	negs	r3, r3
 80039c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80039ca:	e001      	b.n	80039d0 <_vsnprintf+0x130>
      }
      else {
        width = (unsigned int)w;
 80039cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80039ce:	66bb      	str	r3, [r7, #104]	; 0x68
      }
      format++;
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	3301      	adds	r3, #1
 80039d4:	61bb      	str	r3, [r7, #24]
    }

    // evaluate precision field
    precision = 0U;
 80039d6:	2300      	movs	r3, #0
 80039d8:	667b      	str	r3, [r7, #100]	; 0x64
    if (*format == '.') {
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	2b2e      	cmp	r3, #46	; 0x2e
 80039e0:	d12b      	bne.n	8003a3a <_vsnprintf+0x19a>
      flags |= FLAGS_PRECISION;
 80039e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80039e4:	2280      	movs	r2, #128	; 0x80
 80039e6:	00d2      	lsls	r2, r2, #3
 80039e8:	4313      	orrs	r3, r2
 80039ea:	66fb      	str	r3, [r7, #108]	; 0x6c
      format++;
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	3301      	adds	r3, #1
 80039f0:	61bb      	str	r3, [r7, #24]
      if (_is_digit(*format)) {
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	0018      	movs	r0, r3
 80039f8:	f7ff f81e 	bl	8002a38 <_is_digit>
 80039fc:	1e03      	subs	r3, r0, #0
 80039fe:	d007      	beq.n	8003a10 <_vsnprintf+0x170>
        precision = _atoi(&format);
 8003a00:	2318      	movs	r3, #24
 8003a02:	18fb      	adds	r3, r7, r3
 8003a04:	0018      	movs	r0, r3
 8003a06:	f7ff f830 	bl	8002a6a <_atoi>
 8003a0a:	0003      	movs	r3, r0
 8003a0c:	667b      	str	r3, [r7, #100]	; 0x64
 8003a0e:	e014      	b.n	8003a3a <_vsnprintf+0x19a>
      }
      else if (*format == '*') {
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	2b2a      	cmp	r3, #42	; 0x2a
 8003a16:	d110      	bne.n	8003a3a <_vsnprintf+0x19a>
        const int prec = (int)va_arg(va, int);
 8003a18:	2388      	movs	r3, #136	; 0x88
 8003a1a:	18fb      	adds	r3, r7, r3
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	1d1a      	adds	r2, r3, #4
 8003a20:	2188      	movs	r1, #136	; 0x88
 8003a22:	1879      	adds	r1, r7, r1
 8003a24:	600a      	str	r2, [r1, #0]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	647b      	str	r3, [r7, #68]	; 0x44
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8003a2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	da00      	bge.n	8003a32 <_vsnprintf+0x192>
 8003a30:	2300      	movs	r3, #0
 8003a32:	667b      	str	r3, [r7, #100]	; 0x64
        format++;
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	3301      	adds	r3, #1
 8003a38:	61bb      	str	r3, [r7, #24]
      }
    }

    // evaluate length field
    switch (*format) {
 8003a3a:	69bb      	ldr	r3, [r7, #24]
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	3b68      	subs	r3, #104	; 0x68
 8003a40:	2b12      	cmp	r3, #18
 8003a42:	d847      	bhi.n	8003ad4 <_vsnprintf+0x234>
 8003a44:	009a      	lsls	r2, r3, #2
 8003a46:	4b71      	ldr	r3, [pc, #452]	; (8003c0c <_vsnprintf+0x36c>)
 8003a48:	18d3      	adds	r3, r2, r3
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	469f      	mov	pc, r3
      case 'l' :
        flags |= FLAGS_LONG;
 8003a4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a50:	2280      	movs	r2, #128	; 0x80
 8003a52:	0052      	lsls	r2, r2, #1
 8003a54:	4313      	orrs	r3, r2
 8003a56:	66fb      	str	r3, [r7, #108]	; 0x6c
        format++;
 8003a58:	69bb      	ldr	r3, [r7, #24]
 8003a5a:	3301      	adds	r3, #1
 8003a5c:	61bb      	str	r3, [r7, #24]
        if (*format == 'l') {
 8003a5e:	69bb      	ldr	r3, [r7, #24]
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	2b6c      	cmp	r3, #108	; 0x6c
 8003a64:	d138      	bne.n	8003ad8 <_vsnprintf+0x238>
          flags |= FLAGS_LONG_LONG;
 8003a66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a68:	2280      	movs	r2, #128	; 0x80
 8003a6a:	0092      	lsls	r2, r2, #2
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	66fb      	str	r3, [r7, #108]	; 0x6c
          format++;
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	3301      	adds	r3, #1
 8003a74:	61bb      	str	r3, [r7, #24]
        }
        break;
 8003a76:	e02f      	b.n	8003ad8 <_vsnprintf+0x238>
      case 'h' :
        flags |= FLAGS_SHORT;
 8003a78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a7a:	2280      	movs	r2, #128	; 0x80
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	66fb      	str	r3, [r7, #108]	; 0x6c
        format++;
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	3301      	adds	r3, #1
 8003a84:	61bb      	str	r3, [r7, #24]
        if (*format == 'h') {
 8003a86:	69bb      	ldr	r3, [r7, #24]
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	2b68      	cmp	r3, #104	; 0x68
 8003a8c:	d126      	bne.n	8003adc <_vsnprintf+0x23c>
          flags |= FLAGS_CHAR;
 8003a8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003a90:	2240      	movs	r2, #64	; 0x40
 8003a92:	4313      	orrs	r3, r2
 8003a94:	66fb      	str	r3, [r7, #108]	; 0x6c
          format++;
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	3301      	adds	r3, #1
 8003a9a:	61bb      	str	r3, [r7, #24]
        }
        break;
 8003a9c:	e01e      	b.n	8003adc <_vsnprintf+0x23c>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8003a9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003aa0:	2280      	movs	r2, #128	; 0x80
 8003aa2:	0052      	lsls	r2, r2, #1
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	66fb      	str	r3, [r7, #108]	; 0x6c
        format++;
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	3301      	adds	r3, #1
 8003aac:	61bb      	str	r3, [r7, #24]
        break;
 8003aae:	e016      	b.n	8003ade <_vsnprintf+0x23e>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8003ab0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ab2:	2280      	movs	r2, #128	; 0x80
 8003ab4:	0092      	lsls	r2, r2, #2
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	66fb      	str	r3, [r7, #108]	; 0x6c
        format++;
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	3301      	adds	r3, #1
 8003abe:	61bb      	str	r3, [r7, #24]
        break;
 8003ac0:	e00d      	b.n	8003ade <_vsnprintf+0x23e>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8003ac2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ac4:	2280      	movs	r2, #128	; 0x80
 8003ac6:	0052      	lsls	r2, r2, #1
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	66fb      	str	r3, [r7, #108]	; 0x6c
        format++;
 8003acc:	69bb      	ldr	r3, [r7, #24]
 8003ace:	3301      	adds	r3, #1
 8003ad0:	61bb      	str	r3, [r7, #24]
        break;
 8003ad2:	e004      	b.n	8003ade <_vsnprintf+0x23e>
      default :
        break;
 8003ad4:	46c0      	nop			; (mov r8, r8)
 8003ad6:	e002      	b.n	8003ade <_vsnprintf+0x23e>
        break;
 8003ad8:	46c0      	nop			; (mov r8, r8)
 8003ada:	e000      	b.n	8003ade <_vsnprintf+0x23e>
        break;
 8003adc:	46c0      	nop			; (mov r8, r8)
    }

    // evaluate specifier
    switch (*format) {
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	3b25      	subs	r3, #37	; 0x25
 8003ae4:	2b53      	cmp	r3, #83	; 0x53
 8003ae6:	d900      	bls.n	8003aea <_vsnprintf+0x24a>
 8003ae8:	e303      	b.n	80040f2 <_vsnprintf+0x852>
 8003aea:	009a      	lsls	r2, r3, #2
 8003aec:	4b48      	ldr	r3, [pc, #288]	; (8003c10 <_vsnprintf+0x370>)
 8003aee:	18d3      	adds	r3, r2, r3
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	469f      	mov	pc, r3
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	781b      	ldrb	r3, [r3, #0]
 8003af8:	2b78      	cmp	r3, #120	; 0x78
 8003afa:	d003      	beq.n	8003b04 <_vsnprintf+0x264>
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	2b58      	cmp	r3, #88	; 0x58
 8003b02:	d102      	bne.n	8003b0a <_vsnprintf+0x26a>
          base = 16U;
 8003b04:	2310      	movs	r3, #16
 8003b06:	65bb      	str	r3, [r7, #88]	; 0x58
 8003b08:	e013      	b.n	8003b32 <_vsnprintf+0x292>
        }
        else if (*format == 'o') {
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	2b6f      	cmp	r3, #111	; 0x6f
 8003b10:	d102      	bne.n	8003b18 <_vsnprintf+0x278>
          base =  8U;
 8003b12:	2308      	movs	r3, #8
 8003b14:	65bb      	str	r3, [r7, #88]	; 0x58
 8003b16:	e00c      	b.n	8003b32 <_vsnprintf+0x292>
        }
        else if (*format == 'b') {
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	2b62      	cmp	r3, #98	; 0x62
 8003b1e:	d102      	bne.n	8003b26 <_vsnprintf+0x286>
          base =  2U;
 8003b20:	2302      	movs	r3, #2
 8003b22:	65bb      	str	r3, [r7, #88]	; 0x58
 8003b24:	e005      	b.n	8003b32 <_vsnprintf+0x292>
        }
        else {
          base = 10U;
 8003b26:	230a      	movs	r3, #10
 8003b28:	65bb      	str	r3, [r7, #88]	; 0x58
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8003b2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b2c:	2210      	movs	r2, #16
 8003b2e:	4393      	bics	r3, r2
 8003b30:	66fb      	str	r3, [r7, #108]	; 0x6c
        }
        // uppercase
        if (*format == 'X') {
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	2b58      	cmp	r3, #88	; 0x58
 8003b38:	d103      	bne.n	8003b42 <_vsnprintf+0x2a2>
          flags |= FLAGS_UPPERCASE;
 8003b3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b3c:	2220      	movs	r2, #32
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	66fb      	str	r3, [r7, #108]	; 0x6c
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	2b69      	cmp	r3, #105	; 0x69
 8003b48:	d007      	beq.n	8003b5a <_vsnprintf+0x2ba>
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	2b64      	cmp	r3, #100	; 0x64
 8003b50:	d003      	beq.n	8003b5a <_vsnprintf+0x2ba>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8003b52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b54:	220c      	movs	r2, #12
 8003b56:	4393      	bics	r3, r2
 8003b58:	66fb      	str	r3, [r7, #108]	; 0x6c
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 8003b5a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003b5c:	2380      	movs	r3, #128	; 0x80
 8003b5e:	00db      	lsls	r3, r3, #3
 8003b60:	4013      	ands	r3, r2
 8003b62:	d003      	beq.n	8003b6c <_vsnprintf+0x2cc>
          flags &= ~FLAGS_ZEROPAD;
 8003b64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b66:	2201      	movs	r2, #1
 8003b68:	4393      	bics	r3, r2
 8003b6a:	66fb      	str	r3, [r7, #108]	; 0x6c
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	2b69      	cmp	r3, #105	; 0x69
 8003b72:	d004      	beq.n	8003b7e <_vsnprintf+0x2de>
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	2b64      	cmp	r3, #100	; 0x64
 8003b7a:	d000      	beq.n	8003b7e <_vsnprintf+0x2de>
 8003b7c:	e0b7      	b.n	8003cee <_vsnprintf+0x44e>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 8003b7e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003b80:	2380      	movs	r3, #128	; 0x80
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	4013      	ands	r3, r2
 8003b86:	d045      	beq.n	8003c14 <_vsnprintf+0x374>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 8003b88:	2388      	movs	r3, #136	; 0x88
 8003b8a:	18fb      	adds	r3, r7, r3
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	3307      	adds	r3, #7
 8003b90:	2207      	movs	r2, #7
 8003b92:	4393      	bics	r3, r2
 8003b94:	001a      	movs	r2, r3
 8003b96:	3208      	adds	r2, #8
 8003b98:	2188      	movs	r1, #136	; 0x88
 8003b9a:	1879      	adds	r1, r7, r1
 8003b9c:	600a      	str	r2, [r1, #0]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	62ba      	str	r2, [r7, #40]	; 0x28
 8003ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8003ba6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	da04      	bge.n	8003bb8 <_vsnprintf+0x318>
 8003bae:	0010      	movs	r0, r2
 8003bb0:	0019      	movs	r1, r3
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	4242      	negs	r2, r0
 8003bb6:	418b      	sbcs	r3, r1
 8003bb8:	0010      	movs	r0, r2
 8003bba:	0019      	movs	r1, r3
 8003bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bbe:	0fdb      	lsrs	r3, r3, #31
 8003bc0:	b2da      	uxtb	r2, r3
 8003bc2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bc4:	613b      	str	r3, [r7, #16]
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	617b      	str	r3, [r7, #20]
 8003bca:	69fb      	ldr	r3, [r7, #28]
 8003bcc:	469c      	mov	ip, r3
 8003bce:	6dfe      	ldr	r6, [r7, #92]	; 0x5c
 8003bd0:	6a3d      	ldr	r5, [r7, #32]
 8003bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd4:	4698      	mov	r8, r3
 8003bd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bd8:	9308      	str	r3, [sp, #32]
 8003bda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003bdc:	9307      	str	r3, [sp, #28]
 8003bde:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003be0:	9306      	str	r3, [sp, #24]
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	697c      	ldr	r4, [r7, #20]
 8003be6:	9304      	str	r3, [sp, #16]
 8003be8:	9405      	str	r4, [sp, #20]
 8003bea:	9202      	str	r2, [sp, #8]
 8003bec:	9000      	str	r0, [sp, #0]
 8003bee:	9101      	str	r1, [sp, #4]
 8003bf0:	4663      	mov	r3, ip
 8003bf2:	0032      	movs	r2, r6
 8003bf4:	0029      	movs	r1, r5
 8003bf6:	4640      	mov	r0, r8
 8003bf8:	f7ff f8e6 	bl	8002dc8 <_ntoa_long_long>
 8003bfc:	0003      	movs	r3, r0
 8003bfe:	65fb      	str	r3, [r7, #92]	; 0x5c
          if (flags & FLAGS_LONG_LONG) {
 8003c00:	e103      	b.n	8003e0a <_vsnprintf+0x56a>
 8003c02:	46c0      	nop			; (mov r8, r8)
 8003c04:	080029b7 	.word	0x080029b7
 8003c08:	08007494 	.word	0x08007494
 8003c0c:	080074d8 	.word	0x080074d8
 8003c10:	08007524 	.word	0x08007524
#endif
          }
          else if (flags & FLAGS_LONG) {
 8003c14:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003c16:	2380      	movs	r3, #128	; 0x80
 8003c18:	005b      	lsls	r3, r3, #1
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	d025      	beq.n	8003c6a <_vsnprintf+0x3ca>
            const long value = va_arg(va, long);
 8003c1e:	2388      	movs	r3, #136	; 0x88
 8003c20:	18fb      	adds	r3, r7, r3
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	1d1a      	adds	r2, r3, #4
 8003c26:	2188      	movs	r1, #136	; 0x88
 8003c28:	1879      	adds	r1, r7, r1
 8003c2a:	600a      	str	r2, [r1, #0]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	637b      	str	r3, [r7, #52]	; 0x34
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8003c30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c32:	17da      	asrs	r2, r3, #31
 8003c34:	189b      	adds	r3, r3, r2
 8003c36:	4053      	eors	r3, r2
 8003c38:	001e      	movs	r6, r3
 8003c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c3c:	0fdb      	lsrs	r3, r3, #31
 8003c3e:	b2da      	uxtb	r2, r3
 8003c40:	69fd      	ldr	r5, [r7, #28]
 8003c42:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 8003c44:	6a39      	ldr	r1, [r7, #32]
 8003c46:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c4a:	9305      	str	r3, [sp, #20]
 8003c4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c4e:	9304      	str	r3, [sp, #16]
 8003c50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c52:	9303      	str	r3, [sp, #12]
 8003c54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c56:	9302      	str	r3, [sp, #8]
 8003c58:	9201      	str	r2, [sp, #4]
 8003c5a:	9600      	str	r6, [sp, #0]
 8003c5c:	002b      	movs	r3, r5
 8003c5e:	0022      	movs	r2, r4
 8003c60:	f7ff f849 	bl	8002cf6 <_ntoa_long>
 8003c64:	0003      	movs	r3, r0
 8003c66:	65fb      	str	r3, [r7, #92]	; 0x5c
          if (flags & FLAGS_LONG_LONG) {
 8003c68:	e0cf      	b.n	8003e0a <_vsnprintf+0x56a>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8003c6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c6c:	2240      	movs	r2, #64	; 0x40
 8003c6e:	4013      	ands	r3, r2
 8003c70:	d009      	beq.n	8003c86 <_vsnprintf+0x3e6>
 8003c72:	2388      	movs	r3, #136	; 0x88
 8003c74:	18fb      	adds	r3, r7, r3
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	1d1a      	adds	r2, r3, #4
 8003c7a:	2188      	movs	r1, #136	; 0x88
 8003c7c:	1879      	adds	r1, r7, r1
 8003c7e:	600a      	str	r2, [r1, #0]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	e015      	b.n	8003cb2 <_vsnprintf+0x412>
 8003c86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c88:	2280      	movs	r2, #128	; 0x80
 8003c8a:	4013      	ands	r3, r2
 8003c8c:	d009      	beq.n	8003ca2 <_vsnprintf+0x402>
 8003c8e:	2388      	movs	r3, #136	; 0x88
 8003c90:	18fb      	adds	r3, r7, r3
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	1d1a      	adds	r2, r3, #4
 8003c96:	2188      	movs	r1, #136	; 0x88
 8003c98:	1879      	adds	r1, r7, r1
 8003c9a:	600a      	str	r2, [r1, #0]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	b21b      	sxth	r3, r3
 8003ca0:	e007      	b.n	8003cb2 <_vsnprintf+0x412>
 8003ca2:	2388      	movs	r3, #136	; 0x88
 8003ca4:	18fb      	adds	r3, r7, r3
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	1d1a      	adds	r2, r3, #4
 8003caa:	2188      	movs	r1, #136	; 0x88
 8003cac:	1879      	adds	r1, r7, r1
 8003cae:	600a      	str	r2, [r1, #0]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	63bb      	str	r3, [r7, #56]	; 0x38
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8003cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cb6:	17da      	asrs	r2, r3, #31
 8003cb8:	189b      	adds	r3, r3, r2
 8003cba:	4053      	eors	r3, r2
 8003cbc:	001e      	movs	r6, r3
 8003cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cc0:	0fdb      	lsrs	r3, r3, #31
 8003cc2:	b2da      	uxtb	r2, r3
 8003cc4:	69fd      	ldr	r5, [r7, #28]
 8003cc6:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 8003cc8:	6a39      	ldr	r1, [r7, #32]
 8003cca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ccc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cce:	9305      	str	r3, [sp, #20]
 8003cd0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003cd2:	9304      	str	r3, [sp, #16]
 8003cd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003cd6:	9303      	str	r3, [sp, #12]
 8003cd8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003cda:	9302      	str	r3, [sp, #8]
 8003cdc:	9201      	str	r2, [sp, #4]
 8003cde:	9600      	str	r6, [sp, #0]
 8003ce0:	002b      	movs	r3, r5
 8003ce2:	0022      	movs	r2, r4
 8003ce4:	f7ff f807 	bl	8002cf6 <_ntoa_long>
 8003ce8:	0003      	movs	r3, r0
 8003cea:	65fb      	str	r3, [r7, #92]	; 0x5c
          if (flags & FLAGS_LONG_LONG) {
 8003cec:	e08d      	b.n	8003e0a <_vsnprintf+0x56a>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8003cee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003cf0:	2380      	movs	r3, #128	; 0x80
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	4013      	ands	r3, r2
 8003cf6:	d02b      	beq.n	8003d50 <_vsnprintf+0x4b0>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8003cf8:	2388      	movs	r3, #136	; 0x88
 8003cfa:	18fb      	adds	r3, r7, r3
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	3307      	adds	r3, #7
 8003d00:	2207      	movs	r2, #7
 8003d02:	4393      	bics	r3, r2
 8003d04:	001a      	movs	r2, r3
 8003d06:	3208      	adds	r2, #8
 8003d08:	2188      	movs	r1, #136	; 0x88
 8003d0a:	1879      	adds	r1, r7, r1
 8003d0c:	600a      	str	r2, [r1, #0]
 8003d0e:	6818      	ldr	r0, [r3, #0]
 8003d10:	6859      	ldr	r1, [r3, #4]
 8003d12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d14:	60bb      	str	r3, [r7, #8]
 8003d16:	2300      	movs	r3, #0
 8003d18:	60fb      	str	r3, [r7, #12]
 8003d1a:	69fe      	ldr	r6, [r7, #28]
 8003d1c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003d1e:	6a3d      	ldr	r5, [r7, #32]
 8003d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d22:	469c      	mov	ip, r3
 8003d24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d26:	9308      	str	r3, [sp, #32]
 8003d28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d2a:	9307      	str	r3, [sp, #28]
 8003d2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d2e:	9306      	str	r3, [sp, #24]
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	68fc      	ldr	r4, [r7, #12]
 8003d34:	9304      	str	r3, [sp, #16]
 8003d36:	9405      	str	r4, [sp, #20]
 8003d38:	2300      	movs	r3, #0
 8003d3a:	9302      	str	r3, [sp, #8]
 8003d3c:	9000      	str	r0, [sp, #0]
 8003d3e:	9101      	str	r1, [sp, #4]
 8003d40:	0033      	movs	r3, r6
 8003d42:	0029      	movs	r1, r5
 8003d44:	4660      	mov	r0, ip
 8003d46:	f7ff f83f 	bl	8002dc8 <_ntoa_long_long>
 8003d4a:	0003      	movs	r3, r0
 8003d4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d4e:	e05c      	b.n	8003e0a <_vsnprintf+0x56a>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8003d50:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003d52:	2380      	movs	r3, #128	; 0x80
 8003d54:	005b      	lsls	r3, r3, #1
 8003d56:	4013      	ands	r3, r2
 8003d58:	d01d      	beq.n	8003d96 <_vsnprintf+0x4f6>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8003d5a:	2388      	movs	r3, #136	; 0x88
 8003d5c:	18fb      	adds	r3, r7, r3
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	1d1a      	adds	r2, r3, #4
 8003d62:	2188      	movs	r1, #136	; 0x88
 8003d64:	1879      	adds	r1, r7, r1
 8003d66:	600a      	str	r2, [r1, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	69fd      	ldr	r5, [r7, #28]
 8003d6c:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 8003d6e:	6a39      	ldr	r1, [r7, #32]
 8003d70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003d72:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003d74:	9205      	str	r2, [sp, #20]
 8003d76:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003d78:	9204      	str	r2, [sp, #16]
 8003d7a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003d7c:	9203      	str	r2, [sp, #12]
 8003d7e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d80:	9202      	str	r2, [sp, #8]
 8003d82:	2200      	movs	r2, #0
 8003d84:	9201      	str	r2, [sp, #4]
 8003d86:	9300      	str	r3, [sp, #0]
 8003d88:	002b      	movs	r3, r5
 8003d8a:	0022      	movs	r2, r4
 8003d8c:	f7fe ffb3 	bl	8002cf6 <_ntoa_long>
 8003d90:	0003      	movs	r3, r0
 8003d92:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d94:	e039      	b.n	8003e0a <_vsnprintf+0x56a>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8003d96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d98:	2240      	movs	r2, #64	; 0x40
 8003d9a:	4013      	ands	r3, r2
 8003d9c:	d009      	beq.n	8003db2 <_vsnprintf+0x512>
 8003d9e:	2388      	movs	r3, #136	; 0x88
 8003da0:	18fb      	adds	r3, r7, r3
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	1d1a      	adds	r2, r3, #4
 8003da6:	2188      	movs	r1, #136	; 0x88
 8003da8:	1879      	adds	r1, r7, r1
 8003daa:	600a      	str	r2, [r1, #0]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	b2db      	uxtb	r3, r3
 8003db0:	e015      	b.n	8003dde <_vsnprintf+0x53e>
 8003db2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003db4:	2280      	movs	r2, #128	; 0x80
 8003db6:	4013      	ands	r3, r2
 8003db8:	d009      	beq.n	8003dce <_vsnprintf+0x52e>
 8003dba:	2388      	movs	r3, #136	; 0x88
 8003dbc:	18fb      	adds	r3, r7, r3
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	1d1a      	adds	r2, r3, #4
 8003dc2:	2188      	movs	r1, #136	; 0x88
 8003dc4:	1879      	adds	r1, r7, r1
 8003dc6:	600a      	str	r2, [r1, #0]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	b29b      	uxth	r3, r3
 8003dcc:	e007      	b.n	8003dde <_vsnprintf+0x53e>
 8003dce:	2388      	movs	r3, #136	; 0x88
 8003dd0:	18fb      	adds	r3, r7, r3
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	1d1a      	adds	r2, r3, #4
 8003dd6:	2188      	movs	r1, #136	; 0x88
 8003dd8:	1879      	adds	r1, r7, r1
 8003dda:	600a      	str	r2, [r1, #0]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	63fb      	str	r3, [r7, #60]	; 0x3c
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8003de0:	69fc      	ldr	r4, [r7, #28]
 8003de2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003de4:	6a39      	ldr	r1, [r7, #32]
 8003de6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003de8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003dea:	9305      	str	r3, [sp, #20]
 8003dec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003dee:	9304      	str	r3, [sp, #16]
 8003df0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003df2:	9303      	str	r3, [sp, #12]
 8003df4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003df6:	9302      	str	r3, [sp, #8]
 8003df8:	2300      	movs	r3, #0
 8003dfa:	9301      	str	r3, [sp, #4]
 8003dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dfe:	9300      	str	r3, [sp, #0]
 8003e00:	0023      	movs	r3, r4
 8003e02:	f7fe ff78 	bl	8002cf6 <_ntoa_long>
 8003e06:	0003      	movs	r3, r0
 8003e08:	65fb      	str	r3, [r7, #92]	; 0x5c
          }
        }
        format++;
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	61bb      	str	r3, [r7, #24]
        break;
 8003e10:	e17c      	b.n	800410c <_vsnprintf+0x86c>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	2b46      	cmp	r3, #70	; 0x46
 8003e18:	d103      	bne.n	8003e22 <_vsnprintf+0x582>
 8003e1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e1c:	2220      	movs	r2, #32
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	66fb      	str	r3, [r7, #108]	; 0x6c
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8003e22:	2388      	movs	r3, #136	; 0x88
 8003e24:	18fb      	adds	r3, r7, r3
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	3307      	adds	r3, #7
 8003e2a:	2207      	movs	r2, #7
 8003e2c:	4393      	bics	r3, r2
 8003e2e:	001a      	movs	r2, r3
 8003e30:	3208      	adds	r2, #8
 8003e32:	2188      	movs	r1, #136	; 0x88
 8003e34:	1879      	adds	r1, r7, r1
 8003e36:	600a      	str	r2, [r1, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	685b      	ldr	r3, [r3, #4]
 8003e3c:	69fe      	ldr	r6, [r7, #28]
 8003e3e:	6dfd      	ldr	r5, [r7, #92]	; 0x5c
 8003e40:	6a3c      	ldr	r4, [r7, #32]
 8003e42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003e44:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8003e46:	9104      	str	r1, [sp, #16]
 8003e48:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003e4a:	9103      	str	r1, [sp, #12]
 8003e4c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003e4e:	9102      	str	r1, [sp, #8]
 8003e50:	9200      	str	r2, [sp, #0]
 8003e52:	9301      	str	r3, [sp, #4]
 8003e54:	0033      	movs	r3, r6
 8003e56:	002a      	movs	r2, r5
 8003e58:	0021      	movs	r1, r4
 8003e5a:	f7ff f829 	bl	8002eb0 <_ftoa>
 8003e5e:	0003      	movs	r3, r0
 8003e60:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	3301      	adds	r3, #1
 8003e66:	61bb      	str	r3, [r7, #24]
        break;
 8003e68:	e150      	b.n	800410c <_vsnprintf+0x86c>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	2b67      	cmp	r3, #103	; 0x67
 8003e70:	d003      	beq.n	8003e7a <_vsnprintf+0x5da>
 8003e72:	69bb      	ldr	r3, [r7, #24]
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	2b47      	cmp	r3, #71	; 0x47
 8003e78:	d104      	bne.n	8003e84 <_vsnprintf+0x5e4>
 8003e7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e7c:	2280      	movs	r2, #128	; 0x80
 8003e7e:	0112      	lsls	r2, r2, #4
 8003e80:	4313      	orrs	r3, r2
 8003e82:	66fb      	str	r3, [r7, #108]	; 0x6c
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	2b45      	cmp	r3, #69	; 0x45
 8003e8a:	d003      	beq.n	8003e94 <_vsnprintf+0x5f4>
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	781b      	ldrb	r3, [r3, #0]
 8003e90:	2b47      	cmp	r3, #71	; 0x47
 8003e92:	d103      	bne.n	8003e9c <_vsnprintf+0x5fc>
 8003e94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e96:	2220      	movs	r2, #32
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	66fb      	str	r3, [r7, #108]	; 0x6c
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8003e9c:	2388      	movs	r3, #136	; 0x88
 8003e9e:	18fb      	adds	r3, r7, r3
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	3307      	adds	r3, #7
 8003ea4:	2207      	movs	r2, #7
 8003ea6:	4393      	bics	r3, r2
 8003ea8:	001a      	movs	r2, r3
 8003eaa:	3208      	adds	r2, #8
 8003eac:	2188      	movs	r1, #136	; 0x88
 8003eae:	1879      	adds	r1, r7, r1
 8003eb0:	600a      	str	r2, [r1, #0]
 8003eb2:	681a      	ldr	r2, [r3, #0]
 8003eb4:	685b      	ldr	r3, [r3, #4]
 8003eb6:	69fe      	ldr	r6, [r7, #28]
 8003eb8:	6dfd      	ldr	r5, [r7, #92]	; 0x5c
 8003eba:	6a3c      	ldr	r4, [r7, #32]
 8003ebc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ebe:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8003ec0:	9104      	str	r1, [sp, #16]
 8003ec2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003ec4:	9103      	str	r1, [sp, #12]
 8003ec6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003ec8:	9102      	str	r1, [sp, #8]
 8003eca:	9200      	str	r2, [sp, #0]
 8003ecc:	9301      	str	r3, [sp, #4]
 8003ece:	0033      	movs	r3, r6
 8003ed0:	002a      	movs	r2, r5
 8003ed2:	0021      	movs	r1, r4
 8003ed4:	f7ff fa2a 	bl	800332c <_etoa>
 8003ed8:	0003      	movs	r3, r0
 8003eda:	65fb      	str	r3, [r7, #92]	; 0x5c
        format++;
 8003edc:	69bb      	ldr	r3, [r7, #24]
 8003ede:	3301      	adds	r3, #1
 8003ee0:	61bb      	str	r3, [r7, #24]
        break;
 8003ee2:	e113      	b.n	800410c <_vsnprintf+0x86c>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	657b      	str	r3, [r7, #84]	; 0x54
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8003ee8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003eea:	2202      	movs	r2, #2
 8003eec:	4013      	ands	r3, r2
 8003eee:	d10e      	bne.n	8003f0e <_vsnprintf+0x66e>
          while (l++ < width) {
 8003ef0:	e007      	b.n	8003f02 <_vsnprintf+0x662>
            out(' ', buffer, idx++, maxlen);
 8003ef2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003ef4:	1c53      	adds	r3, r2, #1
 8003ef6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ef8:	69fb      	ldr	r3, [r7, #28]
 8003efa:	6a39      	ldr	r1, [r7, #32]
 8003efc:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8003efe:	2020      	movs	r0, #32
 8003f00:	47a0      	blx	r4
          while (l++ < width) {
 8003f02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f04:	1c5a      	adds	r2, r3, #1
 8003f06:	657a      	str	r2, [r7, #84]	; 0x54
 8003f08:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d8f1      	bhi.n	8003ef2 <_vsnprintf+0x652>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8003f0e:	2388      	movs	r3, #136	; 0x88
 8003f10:	18fb      	adds	r3, r7, r3
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	1d1a      	adds	r2, r3, #4
 8003f16:	2188      	movs	r1, #136	; 0x88
 8003f18:	1879      	adds	r1, r7, r1
 8003f1a:	600a      	str	r2, [r1, #0]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	b2d8      	uxtb	r0, r3
 8003f20:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003f22:	1c53      	adds	r3, r2, #1
 8003f24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	6a39      	ldr	r1, [r7, #32]
 8003f2a:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8003f2c:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 8003f2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f30:	2202      	movs	r2, #2
 8003f32:	4013      	ands	r3, r2
 8003f34:	d00e      	beq.n	8003f54 <_vsnprintf+0x6b4>
          while (l++ < width) {
 8003f36:	e007      	b.n	8003f48 <_vsnprintf+0x6a8>
            out(' ', buffer, idx++, maxlen);
 8003f38:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003f3a:	1c53      	adds	r3, r2, #1
 8003f3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	6a39      	ldr	r1, [r7, #32]
 8003f42:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8003f44:	2020      	movs	r0, #32
 8003f46:	47a0      	blx	r4
          while (l++ < width) {
 8003f48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f4a:	1c5a      	adds	r2, r3, #1
 8003f4c:	657a      	str	r2, [r7, #84]	; 0x54
 8003f4e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d8f1      	bhi.n	8003f38 <_vsnprintf+0x698>
          }
        }
        format++;
 8003f54:	69bb      	ldr	r3, [r7, #24]
 8003f56:	3301      	adds	r3, #1
 8003f58:	61bb      	str	r3, [r7, #24]
        break;
 8003f5a:	e0d7      	b.n	800410c <_vsnprintf+0x86c>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 8003f5c:	2388      	movs	r3, #136	; 0x88
 8003f5e:	18fb      	adds	r3, r7, r3
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	1d1a      	adds	r2, r3, #4
 8003f64:	2188      	movs	r1, #136	; 0x88
 8003f66:	1879      	adds	r1, r7, r1
 8003f68:	600a      	str	r2, [r1, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	653b      	str	r3, [r7, #80]	; 0x50
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8003f6e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d001      	beq.n	8003f78 <_vsnprintf+0x6d8>
 8003f74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f76:	e001      	b.n	8003f7c <_vsnprintf+0x6dc>
 8003f78:	2301      	movs	r3, #1
 8003f7a:	425b      	negs	r3, r3
 8003f7c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003f7e:	0019      	movs	r1, r3
 8003f80:	0010      	movs	r0, r2
 8003f82:	f7fe fd3e 	bl	8002a02 <_strnlen_s>
 8003f86:	0003      	movs	r3, r0
 8003f88:	64fb      	str	r3, [r7, #76]	; 0x4c
        // pre padding
        if (flags & FLAGS_PRECISION) {
 8003f8a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003f8c:	2380      	movs	r3, #128	; 0x80
 8003f8e:	00db      	lsls	r3, r3, #3
 8003f90:	4013      	ands	r3, r2
 8003f92:	d005      	beq.n	8003fa0 <_vsnprintf+0x700>
          l = (l < precision ? l : precision);
 8003f94:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f96:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d900      	bls.n	8003f9e <_vsnprintf+0x6fe>
 8003f9c:	0013      	movs	r3, r2
 8003f9e:	64fb      	str	r3, [r7, #76]	; 0x4c
        }
        if (!(flags & FLAGS_LEFT)) {
 8003fa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fa2:	2202      	movs	r2, #2
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	d11a      	bne.n	8003fde <_vsnprintf+0x73e>
          while (l++ < width) {
 8003fa8:	e007      	b.n	8003fba <_vsnprintf+0x71a>
            out(' ', buffer, idx++, maxlen);
 8003faa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003fac:	1c53      	adds	r3, r2, #1
 8003fae:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	6a39      	ldr	r1, [r7, #32]
 8003fb4:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8003fb6:	2020      	movs	r0, #32
 8003fb8:	47a0      	blx	r4
          while (l++ < width) {
 8003fba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fbc:	1c5a      	adds	r2, r3, #1
 8003fbe:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003fc0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d8f1      	bhi.n	8003faa <_vsnprintf+0x70a>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8003fc6:	e00a      	b.n	8003fde <_vsnprintf+0x73e>
          out(*(p++), buffer, idx++, maxlen);
 8003fc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fca:	1c5a      	adds	r2, r3, #1
 8003fcc:	653a      	str	r2, [r7, #80]	; 0x50
 8003fce:	7818      	ldrb	r0, [r3, #0]
 8003fd0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003fd2:	1c53      	adds	r3, r2, #1
 8003fd4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	6a39      	ldr	r1, [r7, #32]
 8003fda:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8003fdc:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8003fde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d009      	beq.n	8003ffa <_vsnprintf+0x75a>
 8003fe6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003fe8:	2380      	movs	r3, #128	; 0x80
 8003fea:	00db      	lsls	r3, r3, #3
 8003fec:	4013      	ands	r3, r2
 8003fee:	d0eb      	beq.n	8003fc8 <_vsnprintf+0x728>
 8003ff0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ff2:	1e5a      	subs	r2, r3, #1
 8003ff4:	667a      	str	r2, [r7, #100]	; 0x64
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d1e6      	bne.n	8003fc8 <_vsnprintf+0x728>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 8003ffa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ffc:	2202      	movs	r2, #2
 8003ffe:	4013      	ands	r3, r2
 8004000:	d00e      	beq.n	8004020 <_vsnprintf+0x780>
          while (l++ < width) {
 8004002:	e007      	b.n	8004014 <_vsnprintf+0x774>
            out(' ', buffer, idx++, maxlen);
 8004004:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004006:	1c53      	adds	r3, r2, #1
 8004008:	65fb      	str	r3, [r7, #92]	; 0x5c
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	6a39      	ldr	r1, [r7, #32]
 800400e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8004010:	2020      	movs	r0, #32
 8004012:	47a0      	blx	r4
          while (l++ < width) {
 8004014:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004016:	1c5a      	adds	r2, r3, #1
 8004018:	64fa      	str	r2, [r7, #76]	; 0x4c
 800401a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800401c:	429a      	cmp	r2, r3
 800401e:	d8f1      	bhi.n	8004004 <_vsnprintf+0x764>
          }
        }
        format++;
 8004020:	69bb      	ldr	r3, [r7, #24]
 8004022:	3301      	adds	r3, #1
 8004024:	61bb      	str	r3, [r7, #24]
        break;
 8004026:	e071      	b.n	800410c <_vsnprintf+0x86c>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 8004028:	2308      	movs	r3, #8
 800402a:	66bb      	str	r3, [r7, #104]	; 0x68
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 800402c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800402e:	2221      	movs	r2, #33	; 0x21
 8004030:	4313      	orrs	r3, r2
 8004032:	66fb      	str	r3, [r7, #108]	; 0x6c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 8004034:	212b      	movs	r1, #43	; 0x2b
 8004036:	2318      	movs	r3, #24
 8004038:	18fb      	adds	r3, r7, r3
 800403a:	185b      	adds	r3, r3, r1
 800403c:	2200      	movs	r2, #0
 800403e:	701a      	strb	r2, [r3, #0]
        if (is_ll) {
 8004040:	2318      	movs	r3, #24
 8004042:	18fb      	adds	r3, r7, r3
 8004044:	185b      	adds	r3, r3, r1
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d025      	beq.n	8004098 <_vsnprintf+0x7f8>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 800404c:	2388      	movs	r3, #136	; 0x88
 800404e:	18fb      	adds	r3, r7, r3
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	1d1a      	adds	r2, r3, #4
 8004054:	2188      	movs	r1, #136	; 0x88
 8004056:	1879      	adds	r1, r7, r1
 8004058:	600a      	str	r2, [r1, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	603b      	str	r3, [r7, #0]
 800405e:	2300      	movs	r3, #0
 8004060:	607b      	str	r3, [r7, #4]
 8004062:	69fd      	ldr	r5, [r7, #28]
 8004064:	6dfc      	ldr	r4, [r7, #92]	; 0x5c
 8004066:	6a39      	ldr	r1, [r7, #32]
 8004068:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800406a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800406c:	9308      	str	r3, [sp, #32]
 800406e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004070:	9307      	str	r3, [sp, #28]
 8004072:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004074:	9306      	str	r3, [sp, #24]
 8004076:	2210      	movs	r2, #16
 8004078:	2300      	movs	r3, #0
 800407a:	9204      	str	r2, [sp, #16]
 800407c:	9305      	str	r3, [sp, #20]
 800407e:	2300      	movs	r3, #0
 8004080:	9302      	str	r3, [sp, #8]
 8004082:	683a      	ldr	r2, [r7, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	9200      	str	r2, [sp, #0]
 8004088:	9301      	str	r3, [sp, #4]
 800408a:	002b      	movs	r3, r5
 800408c:	0022      	movs	r2, r4
 800408e:	f7fe fe9b 	bl	8002dc8 <_ntoa_long_long>
 8004092:	0003      	movs	r3, r0
 8004094:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004096:	e01c      	b.n	80040d2 <_vsnprintf+0x832>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8004098:	2388      	movs	r3, #136	; 0x88
 800409a:	18fb      	adds	r3, r7, r3
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	1d1a      	adds	r2, r3, #4
 80040a0:	2188      	movs	r1, #136	; 0x88
 80040a2:	1879      	adds	r1, r7, r1
 80040a4:	600a      	str	r2, [r1, #0]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	001d      	movs	r5, r3
 80040aa:	69fc      	ldr	r4, [r7, #28]
 80040ac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80040ae:	6a39      	ldr	r1, [r7, #32]
 80040b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80040b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040b4:	9305      	str	r3, [sp, #20]
 80040b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80040b8:	9304      	str	r3, [sp, #16]
 80040ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040bc:	9303      	str	r3, [sp, #12]
 80040be:	2310      	movs	r3, #16
 80040c0:	9302      	str	r3, [sp, #8]
 80040c2:	2300      	movs	r3, #0
 80040c4:	9301      	str	r3, [sp, #4]
 80040c6:	9500      	str	r5, [sp, #0]
 80040c8:	0023      	movs	r3, r4
 80040ca:	f7fe fe14 	bl	8002cf6 <_ntoa_long>
 80040ce:	0003      	movs	r3, r0
 80040d0:	65fb      	str	r3, [r7, #92]	; 0x5c
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 80040d2:	69bb      	ldr	r3, [r7, #24]
 80040d4:	3301      	adds	r3, #1
 80040d6:	61bb      	str	r3, [r7, #24]
        break;
 80040d8:	e018      	b.n	800410c <_vsnprintf+0x86c>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 80040da:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80040dc:	1c53      	adds	r3, r2, #1
 80040de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040e0:	69fb      	ldr	r3, [r7, #28]
 80040e2:	6a39      	ldr	r1, [r7, #32]
 80040e4:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80040e6:	2025      	movs	r0, #37	; 0x25
 80040e8:	47a0      	blx	r4
        format++;
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	3301      	adds	r3, #1
 80040ee:	61bb      	str	r3, [r7, #24]
        break;
 80040f0:	e00c      	b.n	800410c <_vsnprintf+0x86c>

      default :
        out(*format, buffer, idx++, maxlen);
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	7818      	ldrb	r0, [r3, #0]
 80040f6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80040f8:	1c53      	adds	r3, r2, #1
 80040fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040fc:	69fb      	ldr	r3, [r7, #28]
 80040fe:	6a39      	ldr	r1, [r7, #32]
 8004100:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8004102:	47a0      	blx	r4
        format++;
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	3301      	adds	r3, #1
 8004108:	61bb      	str	r3, [r7, #24]
        break;
 800410a:	46c0      	nop			; (mov r8, r8)
  while (*format)
 800410c:	69bb      	ldr	r3, [r7, #24]
 800410e:	781b      	ldrb	r3, [r3, #0]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d001      	beq.n	8004118 <_vsnprintf+0x878>
 8004114:	f7ff fbd8 	bl	80038c8 <_vsnprintf+0x28>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8004118:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800411a:	69fb      	ldr	r3, [r7, #28]
 800411c:	429a      	cmp	r2, r3
 800411e:	d302      	bcc.n	8004126 <_vsnprintf+0x886>
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	1e5a      	subs	r2, r3, #1
 8004124:	e000      	b.n	8004128 <_vsnprintf+0x888>
 8004126:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004128:	69fb      	ldr	r3, [r7, #28]
 800412a:	6a39      	ldr	r1, [r7, #32]
 800412c:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800412e:	2000      	movs	r0, #0
 8004130:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 8004132:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
}
 8004134:	0018      	movs	r0, r3
 8004136:	46bd      	mov	sp, r7
 8004138:	b01c      	add	sp, #112	; 0x70
 800413a:	bc80      	pop	{r7}
 800413c:	46b8      	mov	r8, r7
 800413e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004140 <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
 8004140:	b40f      	push	{r0, r1, r2, r3}
 8004142:	b590      	push	{r4, r7, lr}
 8004144:	b087      	sub	sp, #28
 8004146:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
 8004148:	2324      	movs	r3, #36	; 0x24
 800414a:	18fb      	adds	r3, r7, r3
 800414c:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
 800414e:	6a3c      	ldr	r4, [r7, #32]
 8004150:	2301      	movs	r3, #1
 8004152:	425a      	negs	r2, r3
 8004154:	1d39      	adds	r1, r7, #4
 8004156:	4808      	ldr	r0, [pc, #32]	; (8004178 <printf_+0x38>)
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	9300      	str	r3, [sp, #0]
 800415c:	0023      	movs	r3, r4
 800415e:	f7ff fb9f 	bl	80038a0 <_vsnprintf>
 8004162:	0003      	movs	r3, r0
 8004164:	60fb      	str	r3, [r7, #12]
  va_end(va);
  return ret;
 8004166:	68fb      	ldr	r3, [r7, #12]
}
 8004168:	0018      	movs	r0, r3
 800416a:	46bd      	mov	sp, r7
 800416c:	b005      	add	sp, #20
 800416e:	bc90      	pop	{r4, r7}
 8004170:	bc08      	pop	{r3}
 8004172:	b004      	add	sp, #16
 8004174:	4718      	bx	r3
 8004176:	46c0      	nop			; (mov r8, r8)
 8004178:	080029d3 	.word	0x080029d3

0800417c <_putchar>:
  va_end(va);
  return ret;
}

void _putchar(char character)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b084      	sub	sp, #16
 8004180:	af00      	add	r7, sp, #0
 8004182:	0002      	movs	r2, r0
 8004184:	1dfb      	adds	r3, r7, #7
 8004186:	701a      	strb	r2, [r3, #0]
  if (character == '\n') {
 8004188:	1dfb      	adds	r3, r7, #7
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	2b0a      	cmp	r3, #10
 800418e:	d10a      	bne.n	80041a6 <_putchar+0x2a>
        uint8_t ch2 = '\r';
 8004190:	210f      	movs	r1, #15
 8004192:	187b      	adds	r3, r7, r1
 8004194:	220d      	movs	r2, #13
 8004196:	701a      	strb	r2, [r3, #0]
        HAL_UART_Transmit(&huart2, &ch2, 1, HAL_MAX_DELAY);
 8004198:	2301      	movs	r3, #1
 800419a:	425b      	negs	r3, r3
 800419c:	1879      	adds	r1, r7, r1
 800419e:	4807      	ldr	r0, [pc, #28]	; (80041bc <_putchar+0x40>)
 80041a0:	2201      	movs	r2, #1
 80041a2:	f002 fb6d 	bl	8006880 <HAL_UART_Transmit>
    }
 
    HAL_UART_Transmit(&huart2, (uint8_t*)&character, 1, HAL_MAX_DELAY);
 80041a6:	2301      	movs	r3, #1
 80041a8:	425b      	negs	r3, r3
 80041aa:	1df9      	adds	r1, r7, #7
 80041ac:	4803      	ldr	r0, [pc, #12]	; (80041bc <_putchar+0x40>)
 80041ae:	2201      	movs	r2, #1
 80041b0:	f002 fb66 	bl	8006880 <HAL_UART_Transmit>
    return 1;
 80041b4:	46c0      	nop			; (mov r8, r8)
}
 80041b6:	46bd      	mov	sp, r7
 80041b8:	b004      	add	sp, #16
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	20000164 	.word	0x20000164

080041c0 <sensirion_common_generate_crc>:

    tmp.u32_value = sensirion_bytes_to_uint32_t(bytes);
    return tmp.float32;
}

uint8_t sensirion_common_generate_crc(const uint8_t* data, uint16_t count) {
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	000a      	movs	r2, r1
 80041ca:	1cbb      	adds	r3, r7, #2
 80041cc:	801a      	strh	r2, [r3, #0]
    uint16_t current_byte;
    uint8_t crc = CRC8_INIT;
 80041ce:	230d      	movs	r3, #13
 80041d0:	18fb      	adds	r3, r7, r3
 80041d2:	22ff      	movs	r2, #255	; 0xff
 80041d4:	701a      	strb	r2, [r3, #0]
    uint8_t crc_bit;

    /* calculates 8-Bit checksum with given polynomial */
    for (current_byte = 0; current_byte < count; ++current_byte) {
 80041d6:	230e      	movs	r3, #14
 80041d8:	18fb      	adds	r3, r7, r3
 80041da:	2200      	movs	r2, #0
 80041dc:	801a      	strh	r2, [r3, #0]
 80041de:	e037      	b.n	8004250 <sensirion_common_generate_crc+0x90>
        crc ^= (data[current_byte]);
 80041e0:	230e      	movs	r3, #14
 80041e2:	18fb      	adds	r3, r7, r3
 80041e4:	881b      	ldrh	r3, [r3, #0]
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	18d3      	adds	r3, r2, r3
 80041ea:	7819      	ldrb	r1, [r3, #0]
 80041ec:	220d      	movs	r2, #13
 80041ee:	18bb      	adds	r3, r7, r2
 80041f0:	18ba      	adds	r2, r7, r2
 80041f2:	7812      	ldrb	r2, [r2, #0]
 80041f4:	404a      	eors	r2, r1
 80041f6:	701a      	strb	r2, [r3, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 80041f8:	230c      	movs	r3, #12
 80041fa:	18fb      	adds	r3, r7, r3
 80041fc:	2208      	movs	r2, #8
 80041fe:	701a      	strb	r2, [r3, #0]
 8004200:	e01b      	b.n	800423a <sensirion_common_generate_crc+0x7a>
            if (crc & 0x80)
 8004202:	210d      	movs	r1, #13
 8004204:	187b      	adds	r3, r7, r1
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	b25b      	sxtb	r3, r3
 800420a:	2b00      	cmp	r3, #0
 800420c:	da09      	bge.n	8004222 <sensirion_common_generate_crc+0x62>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 800420e:	187b      	adds	r3, r7, r1
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	005b      	lsls	r3, r3, #1
 8004214:	b25b      	sxtb	r3, r3
 8004216:	2231      	movs	r2, #49	; 0x31
 8004218:	4053      	eors	r3, r2
 800421a:	b25a      	sxtb	r2, r3
 800421c:	187b      	adds	r3, r7, r1
 800421e:	701a      	strb	r2, [r3, #0]
 8004220:	e005      	b.n	800422e <sensirion_common_generate_crc+0x6e>
            else
                crc = (crc << 1);
 8004222:	230d      	movs	r3, #13
 8004224:	18fa      	adds	r2, r7, r3
 8004226:	18fb      	adds	r3, r7, r3
 8004228:	781b      	ldrb	r3, [r3, #0]
 800422a:	18db      	adds	r3, r3, r3
 800422c:	7013      	strb	r3, [r2, #0]
        for (crc_bit = 8; crc_bit > 0; --crc_bit) {
 800422e:	220c      	movs	r2, #12
 8004230:	18bb      	adds	r3, r7, r2
 8004232:	18ba      	adds	r2, r7, r2
 8004234:	7812      	ldrb	r2, [r2, #0]
 8004236:	3a01      	subs	r2, #1
 8004238:	701a      	strb	r2, [r3, #0]
 800423a:	230c      	movs	r3, #12
 800423c:	18fb      	adds	r3, r7, r3
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d1de      	bne.n	8004202 <sensirion_common_generate_crc+0x42>
    for (current_byte = 0; current_byte < count; ++current_byte) {
 8004244:	220e      	movs	r2, #14
 8004246:	18bb      	adds	r3, r7, r2
 8004248:	18ba      	adds	r2, r7, r2
 800424a:	8812      	ldrh	r2, [r2, #0]
 800424c:	3201      	adds	r2, #1
 800424e:	801a      	strh	r2, [r3, #0]
 8004250:	230e      	movs	r3, #14
 8004252:	18fa      	adds	r2, r7, r3
 8004254:	1cbb      	adds	r3, r7, #2
 8004256:	8812      	ldrh	r2, [r2, #0]
 8004258:	881b      	ldrh	r3, [r3, #0]
 800425a:	429a      	cmp	r2, r3
 800425c:	d3c0      	bcc.n	80041e0 <sensirion_common_generate_crc+0x20>
        }
    }
    return crc;
 800425e:	230d      	movs	r3, #13
 8004260:	18fb      	adds	r3, r7, r3
 8004262:	781b      	ldrb	r3, [r3, #0]
}
 8004264:	0018      	movs	r0, r3
 8004266:	46bd      	mov	sp, r7
 8004268:	b004      	add	sp, #16
 800426a:	bd80      	pop	{r7, pc}

0800426c <sensirion_common_check_crc>:

int8_t sensirion_common_check_crc(const uint8_t* data, uint16_t count,
                                  uint8_t checksum) {
 800426c:	b580      	push	{r7, lr}
 800426e:	b082      	sub	sp, #8
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	0008      	movs	r0, r1
 8004276:	0011      	movs	r1, r2
 8004278:	1cbb      	adds	r3, r7, #2
 800427a:	1c02      	adds	r2, r0, #0
 800427c:	801a      	strh	r2, [r3, #0]
 800427e:	1c7b      	adds	r3, r7, #1
 8004280:	1c0a      	adds	r2, r1, #0
 8004282:	701a      	strb	r2, [r3, #0]
    if (sensirion_common_generate_crc(data, count) != checksum)
 8004284:	1cbb      	adds	r3, r7, #2
 8004286:	881a      	ldrh	r2, [r3, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	0011      	movs	r1, r2
 800428c:	0018      	movs	r0, r3
 800428e:	f7ff ff97 	bl	80041c0 <sensirion_common_generate_crc>
 8004292:	0003      	movs	r3, r0
 8004294:	001a      	movs	r2, r3
 8004296:	1c7b      	adds	r3, r7, #1
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	4293      	cmp	r3, r2
 800429c:	d002      	beq.n	80042a4 <sensirion_common_check_crc+0x38>
        return STATUS_FAIL;
 800429e:	2301      	movs	r3, #1
 80042a0:	425b      	negs	r3, r3
 80042a2:	e000      	b.n	80042a6 <sensirion_common_check_crc+0x3a>
    return NO_ERROR;
 80042a4:	2300      	movs	r3, #0
}
 80042a6:	0018      	movs	r0, r3
 80042a8:	46bd      	mov	sp, r7
 80042aa:	b002      	add	sp, #8
 80042ac:	bd80      	pop	{r7, pc}

080042ae <sensirion_fill_cmd_send_buf>:
    const uint8_t data = 0x06;
    return sensirion_i2c_write(0, &data, (uint16_t)sizeof(data));
}

uint16_t sensirion_fill_cmd_send_buf(uint8_t* buf, uint16_t cmd,
                                     const uint16_t* args, uint8_t num_args) {
 80042ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042b0:	b087      	sub	sp, #28
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	60f8      	str	r0, [r7, #12]
 80042b6:	0008      	movs	r0, r1
 80042b8:	607a      	str	r2, [r7, #4]
 80042ba:	0019      	movs	r1, r3
 80042bc:	250a      	movs	r5, #10
 80042be:	197b      	adds	r3, r7, r5
 80042c0:	1c02      	adds	r2, r0, #0
 80042c2:	801a      	strh	r2, [r3, #0]
 80042c4:	2309      	movs	r3, #9
 80042c6:	18fb      	adds	r3, r7, r3
 80042c8:	1c0a      	adds	r2, r1, #0
 80042ca:	701a      	strb	r2, [r3, #0]
    uint8_t crc;
    uint8_t i;
    uint16_t idx = 0;
 80042cc:	2014      	movs	r0, #20
 80042ce:	183b      	adds	r3, r7, r0
 80042d0:	2200      	movs	r2, #0
 80042d2:	801a      	strh	r2, [r3, #0]

    buf[idx++] = (uint8_t)((cmd & 0xFF00) >> 8);
 80042d4:	197b      	adds	r3, r7, r5
 80042d6:	881b      	ldrh	r3, [r3, #0]
 80042d8:	0a1b      	lsrs	r3, r3, #8
 80042da:	b299      	uxth	r1, r3
 80042dc:	183b      	adds	r3, r7, r0
 80042de:	881b      	ldrh	r3, [r3, #0]
 80042e0:	0004      	movs	r4, r0
 80042e2:	183a      	adds	r2, r7, r0
 80042e4:	1c58      	adds	r0, r3, #1
 80042e6:	8010      	strh	r0, [r2, #0]
 80042e8:	001a      	movs	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	189b      	adds	r3, r3, r2
 80042ee:	b2ca      	uxtb	r2, r1
 80042f0:	701a      	strb	r2, [r3, #0]
    buf[idx++] = (uint8_t)((cmd & 0x00FF) >> 0);
 80042f2:	193b      	adds	r3, r7, r4
 80042f4:	881b      	ldrh	r3, [r3, #0]
 80042f6:	193a      	adds	r2, r7, r4
 80042f8:	1c59      	adds	r1, r3, #1
 80042fa:	8011      	strh	r1, [r2, #0]
 80042fc:	001a      	movs	r2, r3
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	189b      	adds	r3, r3, r2
 8004302:	197a      	adds	r2, r7, r5
 8004304:	8812      	ldrh	r2, [r2, #0]
 8004306:	b2d2      	uxtb	r2, r2
 8004308:	701a      	strb	r2, [r3, #0]

    for (i = 0; i < num_args; ++i) {
 800430a:	2317      	movs	r3, #23
 800430c:	18fb      	adds	r3, r7, r3
 800430e:	2200      	movs	r2, #0
 8004310:	701a      	strb	r2, [r3, #0]
 8004312:	e042      	b.n	800439a <sensirion_fill_cmd_send_buf+0xec>
        buf[idx++] = (uint8_t)((args[i] & 0xFF00) >> 8);
 8004314:	2617      	movs	r6, #23
 8004316:	19bb      	adds	r3, r7, r6
 8004318:	781b      	ldrb	r3, [r3, #0]
 800431a:	005b      	lsls	r3, r3, #1
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	18d3      	adds	r3, r2, r3
 8004320:	881b      	ldrh	r3, [r3, #0]
 8004322:	0a1b      	lsrs	r3, r3, #8
 8004324:	b299      	uxth	r1, r3
 8004326:	2414      	movs	r4, #20
 8004328:	193b      	adds	r3, r7, r4
 800432a:	881b      	ldrh	r3, [r3, #0]
 800432c:	193a      	adds	r2, r7, r4
 800432e:	1c58      	adds	r0, r3, #1
 8004330:	8010      	strh	r0, [r2, #0]
 8004332:	001a      	movs	r2, r3
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	189b      	adds	r3, r3, r2
 8004338:	b2ca      	uxtb	r2, r1
 800433a:	701a      	strb	r2, [r3, #0]
        buf[idx++] = (uint8_t)((args[i] & 0x00FF) >> 0);
 800433c:	19bb      	adds	r3, r7, r6
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	005b      	lsls	r3, r3, #1
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	18d3      	adds	r3, r2, r3
 8004346:	8819      	ldrh	r1, [r3, #0]
 8004348:	0025      	movs	r5, r4
 800434a:	197b      	adds	r3, r7, r5
 800434c:	881b      	ldrh	r3, [r3, #0]
 800434e:	197a      	adds	r2, r7, r5
 8004350:	1c58      	adds	r0, r3, #1
 8004352:	8010      	strh	r0, [r2, #0]
 8004354:	001a      	movs	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	189b      	adds	r3, r3, r2
 800435a:	b2ca      	uxtb	r2, r1
 800435c:	701a      	strb	r2, [r3, #0]

        crc = sensirion_common_generate_crc((uint8_t*)&buf[idx - 2],
 800435e:	197b      	adds	r3, r7, r5
 8004360:	881b      	ldrh	r3, [r3, #0]
 8004362:	3b02      	subs	r3, #2
 8004364:	68fa      	ldr	r2, [r7, #12]
 8004366:	18d3      	adds	r3, r2, r3
 8004368:	2213      	movs	r2, #19
 800436a:	18bc      	adds	r4, r7, r2
 800436c:	2102      	movs	r1, #2
 800436e:	0018      	movs	r0, r3
 8004370:	f7ff ff26 	bl	80041c0 <sensirion_common_generate_crc>
 8004374:	0003      	movs	r3, r0
 8004376:	7023      	strb	r3, [r4, #0]
                                            SENSIRION_WORD_SIZE);
        buf[idx++] = crc;
 8004378:	197b      	adds	r3, r7, r5
 800437a:	881b      	ldrh	r3, [r3, #0]
 800437c:	197a      	adds	r2, r7, r5
 800437e:	1c59      	adds	r1, r3, #1
 8004380:	8011      	strh	r1, [r2, #0]
 8004382:	001a      	movs	r2, r3
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	189b      	adds	r3, r3, r2
 8004388:	2213      	movs	r2, #19
 800438a:	18ba      	adds	r2, r7, r2
 800438c:	7812      	ldrb	r2, [r2, #0]
 800438e:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < num_args; ++i) {
 8004390:	19bb      	adds	r3, r7, r6
 8004392:	19ba      	adds	r2, r7, r6
 8004394:	7812      	ldrb	r2, [r2, #0]
 8004396:	3201      	adds	r2, #1
 8004398:	701a      	strb	r2, [r3, #0]
 800439a:	2317      	movs	r3, #23
 800439c:	18fa      	adds	r2, r7, r3
 800439e:	2309      	movs	r3, #9
 80043a0:	18fb      	adds	r3, r7, r3
 80043a2:	7812      	ldrb	r2, [r2, #0]
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d3b4      	bcc.n	8004314 <sensirion_fill_cmd_send_buf+0x66>
    }
    return idx;
 80043aa:	2314      	movs	r3, #20
 80043ac:	18fb      	adds	r3, r7, r3
 80043ae:	881b      	ldrh	r3, [r3, #0]
}
 80043b0:	0018      	movs	r0, r3
 80043b2:	46bd      	mov	sp, r7
 80043b4:	b007      	add	sp, #28
 80043b6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080043b8 <sensirion_i2c_read_words_as_bytes>:

int16_t sensirion_i2c_read_words_as_bytes(uint8_t address, uint8_t* data,
                                          uint16_t num_words) {
 80043b8:	b5b0      	push	{r4, r5, r7, lr}
 80043ba:	b096      	sub	sp, #88	; 0x58
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6039      	str	r1, [r7, #0]
 80043c0:	0011      	movs	r1, r2
 80043c2:	1dfb      	adds	r3, r7, #7
 80043c4:	1c02      	adds	r2, r0, #0
 80043c6:	701a      	strb	r2, [r3, #0]
 80043c8:	1d3b      	adds	r3, r7, #4
 80043ca:	1c0a      	adds	r2, r1, #0
 80043cc:	801a      	strh	r2, [r3, #0]
    int16_t ret;
    uint16_t i, j;
    uint16_t size = num_words * (SENSIRION_WORD_SIZE + CRC8_LEN);
 80043ce:	2052      	movs	r0, #82	; 0x52
 80043d0:	1839      	adds	r1, r7, r0
 80043d2:	1d3b      	adds	r3, r7, #4
 80043d4:	881b      	ldrh	r3, [r3, #0]
 80043d6:	1c1a      	adds	r2, r3, #0
 80043d8:	1892      	adds	r2, r2, r2
 80043da:	18d3      	adds	r3, r2, r3
 80043dc:	800b      	strh	r3, [r1, #0]
    uint16_t word_buf[SENSIRION_MAX_BUFFER_WORDS];
    uint8_t* const buf8 = (uint8_t*)word_buf;
 80043de:	2308      	movs	r3, #8
 80043e0:	18fb      	adds	r3, r7, r3
 80043e2:	64fb      	str	r3, [r7, #76]	; 0x4c

    ret = sensirion_i2c_read(address, buf8, size);
 80043e4:	183b      	adds	r3, r7, r0
 80043e6:	881a      	ldrh	r2, [r3, #0]
 80043e8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80043ea:	1dfb      	adds	r3, r7, #7
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	0018      	movs	r0, r3
 80043f0:	f000 f914 	bl	800461c <sensirion_i2c_read>
 80043f4:	0003      	movs	r3, r0
 80043f6:	001a      	movs	r2, r3
 80043f8:	214a      	movs	r1, #74	; 0x4a
 80043fa:	187b      	adds	r3, r7, r1
 80043fc:	801a      	strh	r2, [r3, #0]
    if (ret != NO_ERROR)
 80043fe:	000a      	movs	r2, r1
 8004400:	18bb      	adds	r3, r7, r2
 8004402:	2100      	movs	r1, #0
 8004404:	5e5b      	ldrsh	r3, [r3, r1]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d003      	beq.n	8004412 <sensirion_i2c_read_words_as_bytes+0x5a>
        return ret;
 800440a:	18bb      	adds	r3, r7, r2
 800440c:	2200      	movs	r2, #0
 800440e:	5e9b      	ldrsh	r3, [r3, r2]
 8004410:	e053      	b.n	80044ba <sensirion_i2c_read_words_as_bytes+0x102>

    /* check the CRC for each word */
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 8004412:	2356      	movs	r3, #86	; 0x56
 8004414:	18fb      	adds	r3, r7, r3
 8004416:	2200      	movs	r2, #0
 8004418:	801a      	strh	r2, [r3, #0]
 800441a:	2354      	movs	r3, #84	; 0x54
 800441c:	18fb      	adds	r3, r7, r3
 800441e:	2200      	movs	r2, #0
 8004420:	801a      	strh	r2, [r3, #0]
 8004422:	e041      	b.n	80044a8 <sensirion_i2c_read_words_as_bytes+0xf0>

        ret = sensirion_common_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
 8004424:	2156      	movs	r1, #86	; 0x56
 8004426:	187b      	adds	r3, r7, r1
 8004428:	881b      	ldrh	r3, [r3, #0]
 800442a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800442c:	18d0      	adds	r0, r2, r3
                                         buf8[i + SENSIRION_WORD_SIZE]);
 800442e:	187b      	adds	r3, r7, r1
 8004430:	881b      	ldrh	r3, [r3, #0]
 8004432:	3302      	adds	r3, #2
 8004434:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004436:	18d3      	adds	r3, r2, r3
        ret = sensirion_common_check_crc(&buf8[i], SENSIRION_WORD_SIZE,
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	001a      	movs	r2, r3
 800443c:	2102      	movs	r1, #2
 800443e:	f7ff ff15 	bl	800426c <sensirion_common_check_crc>
 8004442:	0003      	movs	r3, r0
 8004444:	001a      	movs	r2, r3
 8004446:	214a      	movs	r1, #74	; 0x4a
 8004448:	187b      	adds	r3, r7, r1
 800444a:	801a      	strh	r2, [r3, #0]
        if (ret != NO_ERROR)
 800444c:	000a      	movs	r2, r1
 800444e:	18bb      	adds	r3, r7, r2
 8004450:	2100      	movs	r1, #0
 8004452:	5e5b      	ldrsh	r3, [r3, r1]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d003      	beq.n	8004460 <sensirion_i2c_read_words_as_bytes+0xa8>
            return ret;
 8004458:	18bb      	adds	r3, r7, r2
 800445a:	2200      	movs	r2, #0
 800445c:	5e9b      	ldrsh	r3, [r3, r2]
 800445e:	e02c      	b.n	80044ba <sensirion_i2c_read_words_as_bytes+0x102>

        data[j++] = buf8[i];
 8004460:	2456      	movs	r4, #86	; 0x56
 8004462:	193b      	adds	r3, r7, r4
 8004464:	881b      	ldrh	r3, [r3, #0]
 8004466:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004468:	18d2      	adds	r2, r2, r3
 800446a:	2554      	movs	r5, #84	; 0x54
 800446c:	197b      	adds	r3, r7, r5
 800446e:	881b      	ldrh	r3, [r3, #0]
 8004470:	1979      	adds	r1, r7, r5
 8004472:	1c58      	adds	r0, r3, #1
 8004474:	8008      	strh	r0, [r1, #0]
 8004476:	0019      	movs	r1, r3
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	185b      	adds	r3, r3, r1
 800447c:	7812      	ldrb	r2, [r2, #0]
 800447e:	701a      	strb	r2, [r3, #0]
        data[j++] = buf8[i + 1];
 8004480:	193b      	adds	r3, r7, r4
 8004482:	881b      	ldrh	r3, [r3, #0]
 8004484:	3301      	adds	r3, #1
 8004486:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004488:	18d2      	adds	r2, r2, r3
 800448a:	197b      	adds	r3, r7, r5
 800448c:	881b      	ldrh	r3, [r3, #0]
 800448e:	1979      	adds	r1, r7, r5
 8004490:	1c58      	adds	r0, r3, #1
 8004492:	8008      	strh	r0, [r1, #0]
 8004494:	0019      	movs	r1, r3
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	185b      	adds	r3, r3, r1
 800449a:	7812      	ldrb	r2, [r2, #0]
 800449c:	701a      	strb	r2, [r3, #0]
    for (i = 0, j = 0; i < size; i += SENSIRION_WORD_SIZE + CRC8_LEN) {
 800449e:	193b      	adds	r3, r7, r4
 80044a0:	193a      	adds	r2, r7, r4
 80044a2:	8812      	ldrh	r2, [r2, #0]
 80044a4:	3203      	adds	r2, #3
 80044a6:	801a      	strh	r2, [r3, #0]
 80044a8:	2356      	movs	r3, #86	; 0x56
 80044aa:	18fa      	adds	r2, r7, r3
 80044ac:	2352      	movs	r3, #82	; 0x52
 80044ae:	18fb      	adds	r3, r7, r3
 80044b0:	8812      	ldrh	r2, [r2, #0]
 80044b2:	881b      	ldrh	r3, [r3, #0]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d3b5      	bcc.n	8004424 <sensirion_i2c_read_words_as_bytes+0x6c>
    }

    return NO_ERROR;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	0018      	movs	r0, r3
 80044bc:	46bd      	mov	sp, r7
 80044be:	b016      	add	sp, #88	; 0x58
 80044c0:	bdb0      	pop	{r4, r5, r7, pc}

080044c2 <sensirion_i2c_read_words>:

int16_t sensirion_i2c_read_words(uint8_t address, uint16_t* data_words,
                                 uint16_t num_words) {
 80044c2:	b5b0      	push	{r4, r5, r7, lr}
 80044c4:	b084      	sub	sp, #16
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6039      	str	r1, [r7, #0]
 80044ca:	0011      	movs	r1, r2
 80044cc:	1dfb      	adds	r3, r7, #7
 80044ce:	1c02      	adds	r2, r0, #0
 80044d0:	701a      	strb	r2, [r3, #0]
 80044d2:	1d3b      	adds	r3, r7, #4
 80044d4:	1c0a      	adds	r2, r1, #0
 80044d6:	801a      	strh	r2, [r3, #0]
    int16_t ret;
    uint8_t i;
    const uint8_t* word_bytes;

    ret = sensirion_i2c_read_words_as_bytes(address, (uint8_t*)data_words,
 80044d8:	250c      	movs	r5, #12
 80044da:	197c      	adds	r4, r7, r5
 80044dc:	1d3b      	adds	r3, r7, #4
 80044de:	881a      	ldrh	r2, [r3, #0]
 80044e0:	6839      	ldr	r1, [r7, #0]
 80044e2:	1dfb      	adds	r3, r7, #7
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	0018      	movs	r0, r3
 80044e8:	f7ff ff66 	bl	80043b8 <sensirion_i2c_read_words_as_bytes>
 80044ec:	0003      	movs	r3, r0
 80044ee:	8023      	strh	r3, [r4, #0]
                                            num_words);
    if (ret != NO_ERROR)
 80044f0:	197b      	adds	r3, r7, r5
 80044f2:	2200      	movs	r2, #0
 80044f4:	5e9b      	ldrsh	r3, [r3, r2]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d003      	beq.n	8004502 <sensirion_i2c_read_words+0x40>
        return ret;
 80044fa:	197b      	adds	r3, r7, r5
 80044fc:	2200      	movs	r2, #0
 80044fe:	5e9b      	ldrsh	r3, [r3, r2]
 8004500:	e02a      	b.n	8004558 <sensirion_i2c_read_words+0x96>

    for (i = 0; i < num_words; ++i) {
 8004502:	230f      	movs	r3, #15
 8004504:	18fb      	adds	r3, r7, r3
 8004506:	2200      	movs	r2, #0
 8004508:	701a      	strb	r2, [r3, #0]
 800450a:	e01c      	b.n	8004546 <sensirion_i2c_read_words+0x84>
        word_bytes = (uint8_t*)&data_words[i];
 800450c:	200f      	movs	r0, #15
 800450e:	183b      	adds	r3, r7, r0
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	005b      	lsls	r3, r3, #1
 8004514:	683a      	ldr	r2, [r7, #0]
 8004516:	18d3      	adds	r3, r2, r3
 8004518:	60bb      	str	r3, [r7, #8]
        data_words[i] = ((uint16_t)word_bytes[0] << 8) | word_bytes[1];
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	021b      	lsls	r3, r3, #8
 8004520:	b21a      	sxth	r2, r3
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	3301      	adds	r3, #1
 8004526:	781b      	ldrb	r3, [r3, #0]
 8004528:	b21b      	sxth	r3, r3
 800452a:	4313      	orrs	r3, r2
 800452c:	b219      	sxth	r1, r3
 800452e:	183b      	adds	r3, r7, r0
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	005b      	lsls	r3, r3, #1
 8004534:	683a      	ldr	r2, [r7, #0]
 8004536:	18d3      	adds	r3, r2, r3
 8004538:	b28a      	uxth	r2, r1
 800453a:	801a      	strh	r2, [r3, #0]
    for (i = 0; i < num_words; ++i) {
 800453c:	183b      	adds	r3, r7, r0
 800453e:	183a      	adds	r2, r7, r0
 8004540:	7812      	ldrb	r2, [r2, #0]
 8004542:	3201      	adds	r2, #1
 8004544:	701a      	strb	r2, [r3, #0]
 8004546:	230f      	movs	r3, #15
 8004548:	18fb      	adds	r3, r7, r3
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	b29b      	uxth	r3, r3
 800454e:	1d3a      	adds	r2, r7, #4
 8004550:	8812      	ldrh	r2, [r2, #0]
 8004552:	429a      	cmp	r2, r3
 8004554:	d8da      	bhi.n	800450c <sensirion_i2c_read_words+0x4a>
    }

    return NO_ERROR;
 8004556:	2300      	movs	r3, #0
}
 8004558:	0018      	movs	r0, r3
 800455a:	46bd      	mov	sp, r7
 800455c:	b004      	add	sp, #16
 800455e:	bdb0      	pop	{r4, r5, r7, pc}

08004560 <sensirion_i2c_write_cmd>:

int16_t sensirion_i2c_write_cmd(uint8_t address, uint16_t command) {
 8004560:	b590      	push	{r4, r7, lr}
 8004562:	b085      	sub	sp, #20
 8004564:	af00      	add	r7, sp, #0
 8004566:	0002      	movs	r2, r0
 8004568:	1dfb      	adds	r3, r7, #7
 800456a:	701a      	strb	r2, [r3, #0]
 800456c:	1d3b      	adds	r3, r7, #4
 800456e:	1c0a      	adds	r2, r1, #0
 8004570:	801a      	strh	r2, [r3, #0]
    uint8_t buf[SENSIRION_COMMAND_SIZE];

    sensirion_fill_cmd_send_buf(buf, command, NULL, 0);
 8004572:	1d3b      	adds	r3, r7, #4
 8004574:	8819      	ldrh	r1, [r3, #0]
 8004576:	240c      	movs	r4, #12
 8004578:	1938      	adds	r0, r7, r4
 800457a:	2300      	movs	r3, #0
 800457c:	2200      	movs	r2, #0
 800457e:	f7ff fe96 	bl	80042ae <sensirion_fill_cmd_send_buf>
    return sensirion_i2c_write(address, buf, SENSIRION_COMMAND_SIZE);
 8004582:	1939      	adds	r1, r7, r4
 8004584:	1dfb      	adds	r3, r7, #7
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	2202      	movs	r2, #2
 800458a:	0018      	movs	r0, r3
 800458c:	f000 f866 	bl	800465c <sensirion_i2c_write>
 8004590:	0003      	movs	r3, r0
 8004592:	b21b      	sxth	r3, r3
}
 8004594:	0018      	movs	r0, r3
 8004596:	46bd      	mov	sp, r7
 8004598:	b005      	add	sp, #20
 800459a:	bd90      	pop	{r4, r7, pc}

0800459c <sensirion_i2c_init>:

/**
 * Initialize all hard- and software components that are needed for the I2C
 * communication.
 */
void sensirion_i2c_init(void) {
 800459c:	b580      	push	{r7, lr}
 800459e:	af00      	add	r7, sp, #0
	hi2c1.Instance = I2C1;
 80045a0:	4b1c      	ldr	r3, [pc, #112]	; (8004614 <sensirion_i2c_init+0x78>)
 80045a2:	4a1d      	ldr	r2, [pc, #116]	; (8004618 <sensirion_i2c_init+0x7c>)
 80045a4:	601a      	str	r2, [r3, #0]
	  hi2c1.Init.Timing = 0x00000708;
 80045a6:	4b1b      	ldr	r3, [pc, #108]	; (8004614 <sensirion_i2c_init+0x78>)
 80045a8:	22e1      	movs	r2, #225	; 0xe1
 80045aa:	00d2      	lsls	r2, r2, #3
 80045ac:	605a      	str	r2, [r3, #4]
	  hi2c1.Init.OwnAddress1 = 0;
 80045ae:	4b19      	ldr	r3, [pc, #100]	; (8004614 <sensirion_i2c_init+0x78>)
 80045b0:	2200      	movs	r2, #0
 80045b2:	609a      	str	r2, [r3, #8]
	  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80045b4:	4b17      	ldr	r3, [pc, #92]	; (8004614 <sensirion_i2c_init+0x78>)
 80045b6:	2201      	movs	r2, #1
 80045b8:	60da      	str	r2, [r3, #12]
	  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80045ba:	4b16      	ldr	r3, [pc, #88]	; (8004614 <sensirion_i2c_init+0x78>)
 80045bc:	2200      	movs	r2, #0
 80045be:	611a      	str	r2, [r3, #16]
	  hi2c1.Init.OwnAddress2 = 0;
 80045c0:	4b14      	ldr	r3, [pc, #80]	; (8004614 <sensirion_i2c_init+0x78>)
 80045c2:	2200      	movs	r2, #0
 80045c4:	615a      	str	r2, [r3, #20]
	  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80045c6:	4b13      	ldr	r3, [pc, #76]	; (8004614 <sensirion_i2c_init+0x78>)
 80045c8:	2200      	movs	r2, #0
 80045ca:	619a      	str	r2, [r3, #24]
	  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80045cc:	4b11      	ldr	r3, [pc, #68]	; (8004614 <sensirion_i2c_init+0x78>)
 80045ce:	2200      	movs	r2, #0
 80045d0:	61da      	str	r2, [r3, #28]
	  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80045d2:	4b10      	ldr	r3, [pc, #64]	; (8004614 <sensirion_i2c_init+0x78>)
 80045d4:	2200      	movs	r2, #0
 80045d6:	621a      	str	r2, [r3, #32]
	  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80045d8:	4b0e      	ldr	r3, [pc, #56]	; (8004614 <sensirion_i2c_init+0x78>)
 80045da:	0018      	movs	r0, r3
 80045dc:	f000 fd02 	bl	8004fe4 <HAL_I2C_Init>
 80045e0:	1e03      	subs	r3, r0, #0
 80045e2:	d001      	beq.n	80045e8 <sensirion_i2c_init+0x4c>
	  {
	    Error_Handler();
 80045e4:	f7fe f9e2 	bl	80029ac <Error_Handler>
	  }
	  /** Configure Analogue filter
	  */
	  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80045e8:	4b0a      	ldr	r3, [pc, #40]	; (8004614 <sensirion_i2c_init+0x78>)
 80045ea:	2100      	movs	r1, #0
 80045ec:	0018      	movs	r0, r3
 80045ee:	f001 f997 	bl	8005920 <HAL_I2CEx_ConfigAnalogFilter>
 80045f2:	1e03      	subs	r3, r0, #0
 80045f4:	d001      	beq.n	80045fa <sensirion_i2c_init+0x5e>
	  {
	    Error_Handler();
 80045f6:	f7fe f9d9 	bl	80029ac <Error_Handler>
	  }
	  /** Configure Digital filter
	  */
	  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80045fa:	4b06      	ldr	r3, [pc, #24]	; (8004614 <sensirion_i2c_init+0x78>)
 80045fc:	2100      	movs	r1, #0
 80045fe:	0018      	movs	r0, r3
 8004600:	f001 f9da 	bl	80059b8 <HAL_I2CEx_ConfigDigitalFilter>
 8004604:	1e03      	subs	r3, r0, #0
 8004606:	d001      	beq.n	800460c <sensirion_i2c_init+0x70>
	  {
	    Error_Handler();
 8004608:	f7fe f9d0 	bl	80029ac <Error_Handler>
	  }
	  /* USER CODE BEGIN I2C1_Init 2 */

	  /* USER CODE END I2C1_Init 2 */

	}
 800460c:	46c0      	nop			; (mov r8, r8)
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	46c0      	nop			; (mov r8, r8)
 8004614:	2000002c 	.word	0x2000002c
 8004618:	40005400 	.word	0x40005400

0800461c <sensirion_i2c_read>:
 * @param address 7-bit I2C address to read from
 * @param data    pointer to the buffer where the data is to be stored
 * @param count   number of bytes to read from I2C and store in the buffer
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_read(uint8_t address, uint8_t* data, uint16_t count) {
 800461c:	b590      	push	{r4, r7, lr}
 800461e:	b085      	sub	sp, #20
 8004620:	af02      	add	r7, sp, #8
 8004622:	6039      	str	r1, [r7, #0]
 8004624:	0011      	movs	r1, r2
 8004626:	1dfb      	adds	r3, r7, #7
 8004628:	1c02      	adds	r2, r0, #0
 800462a:	701a      	strb	r2, [r3, #0]
 800462c:	1d3b      	adds	r3, r7, #4
 800462e:	1c0a      	adds	r2, r1, #0
 8004630:	801a      	strh	r2, [r3, #0]
    return (int8_t)HAL_I2C_Master_Receive(&hi2c1, (uint16_t)(address << 1),
 8004632:	1dfb      	adds	r3, r7, #7
 8004634:	781b      	ldrb	r3, [r3, #0]
 8004636:	b29b      	uxth	r3, r3
 8004638:	18db      	adds	r3, r3, r3
 800463a:	b299      	uxth	r1, r3
 800463c:	1d3b      	adds	r3, r7, #4
 800463e:	881b      	ldrh	r3, [r3, #0]
 8004640:	683a      	ldr	r2, [r7, #0]
 8004642:	4805      	ldr	r0, [pc, #20]	; (8004658 <sensirion_i2c_read+0x3c>)
 8004644:	2464      	movs	r4, #100	; 0x64
 8004646:	9400      	str	r4, [sp, #0]
 8004648:	f000 fe6a 	bl	8005320 <HAL_I2C_Master_Receive>
 800464c:	0003      	movs	r3, r0
 800464e:	b25b      	sxtb	r3, r3
                                          data, count, 100);
}
 8004650:	0018      	movs	r0, r3
 8004652:	46bd      	mov	sp, r7
 8004654:	b003      	add	sp, #12
 8004656:	bd90      	pop	{r4, r7, pc}
 8004658:	2000002c 	.word	0x2000002c

0800465c <sensirion_i2c_write>:
 * @param data    pointer to the buffer containing the data to write
 * @param count   number of bytes to read from the buffer and send over I2C
 * @returns 0 on success, error code otherwise
 */
int8_t sensirion_i2c_write(uint8_t address, const uint8_t* data,
                           uint16_t count) {
 800465c:	b590      	push	{r4, r7, lr}
 800465e:	b085      	sub	sp, #20
 8004660:	af02      	add	r7, sp, #8
 8004662:	6039      	str	r1, [r7, #0]
 8004664:	0011      	movs	r1, r2
 8004666:	1dfb      	adds	r3, r7, #7
 8004668:	1c02      	adds	r2, r0, #0
 800466a:	701a      	strb	r2, [r3, #0]
 800466c:	1d3b      	adds	r3, r7, #4
 800466e:	1c0a      	adds	r2, r1, #0
 8004670:	801a      	strh	r2, [r3, #0]
    return (int8_t)HAL_I2C_Master_Transmit(&hi2c1, (uint16_t)(address << 1),
 8004672:	1dfb      	adds	r3, r7, #7
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	b29b      	uxth	r3, r3
 8004678:	18db      	adds	r3, r3, r3
 800467a:	b299      	uxth	r1, r3
 800467c:	1d3b      	adds	r3, r7, #4
 800467e:	881b      	ldrh	r3, [r3, #0]
 8004680:	683a      	ldr	r2, [r7, #0]
 8004682:	4805      	ldr	r0, [pc, #20]	; (8004698 <sensirion_i2c_write+0x3c>)
 8004684:	2464      	movs	r4, #100	; 0x64
 8004686:	9400      	str	r4, [sp, #0]
 8004688:	f000 fd42 	bl	8005110 <HAL_I2C_Master_Transmit>
 800468c:	0003      	movs	r3, r0
 800468e:	b25b      	sxtb	r3, r3
                                           (uint8_t*)data, count, 100);
}
 8004690:	0018      	movs	r0, r3
 8004692:	46bd      	mov	sp, r7
 8004694:	b003      	add	sp, #12
 8004696:	bd90      	pop	{r4, r7, pc}
 8004698:	2000002c 	.word	0x2000002c

0800469c <sensirion_sleep_usec>:
 * Sleep for a given number of microseconds. The function should delay the
 * execution for at least the given time, but may also sleep longer.
 *
 * @param useconds the sleep time in microseconds
 */
void sensirion_sleep_usec(uint32_t useconds) {
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
    uint32_t msec = useconds / 1000;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	22fa      	movs	r2, #250	; 0xfa
 80046a8:	0091      	lsls	r1, r2, #2
 80046aa:	0018      	movs	r0, r3
 80046ac:	f7fb fd2c 	bl	8000108 <__udivsi3>
 80046b0:	0003      	movs	r3, r0
 80046b2:	60fb      	str	r3, [r7, #12]
    if (useconds % 1000 > 0) {
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	22fa      	movs	r2, #250	; 0xfa
 80046b8:	0091      	lsls	r1, r2, #2
 80046ba:	0018      	movs	r0, r3
 80046bc:	f7fb fdaa 	bl	8000214 <__aeabi_uidivmod>
 80046c0:	1e0b      	subs	r3, r1, #0
 80046c2:	d002      	beq.n	80046ca <sensirion_sleep_usec+0x2e>
        msec++;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	3301      	adds	r3, #1
 80046c8:	60fb      	str	r3, [r7, #12]
     * Increment by 1 if STM32F1 driver version less than 1.1.1
     * Old firmwares of STM32F1 sleep 1ms shorter than specified in HAL_Delay.
     * This was fixed with firmware 1.6 (driver version 1.1.1), so we have to
     * fix it ourselves for older firmwares
     */
    if (HAL_GetHalVersion() < 0x01010100) {
 80046ca:	f000 fa3b 	bl	8004b44 <HAL_GetHalVersion>
 80046ce:	0003      	movs	r3, r0
 80046d0:	4a06      	ldr	r2, [pc, #24]	; (80046ec <sensirion_sleep_usec+0x50>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d802      	bhi.n	80046dc <sensirion_sleep_usec+0x40>
        msec++;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	3301      	adds	r3, #1
 80046da:	60fb      	str	r3, [r7, #12]
    }

    HAL_Delay(msec);
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	0018      	movs	r0, r3
 80046e0:	f000 fa0c 	bl	8004afc <HAL_Delay>
}
 80046e4:	46c0      	nop			; (mov r8, r8)
 80046e6:	46bd      	mov	sp, r7
 80046e8:	b004      	add	sp, #16
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	010100ff 	.word	0x010100ff

080046f0 <shtc1_measure_blocking_read>:

int16_t shtc1_wake_up(void) {
    return sensirion_i2c_write_cmd(SHTC1_ADDRESS, SHTC3_CMD_WAKEUP);
}

int16_t shtc1_measure_blocking_read(int32_t* temperature, int32_t* humidity) {
 80046f0:	b5b0      	push	{r4, r5, r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]
    int16_t ret;

    ret = shtc1_measure();
 80046fa:	250e      	movs	r5, #14
 80046fc:	197c      	adds	r4, r7, r5
 80046fe:	f000 f81d 	bl	800473c <shtc1_measure>
 8004702:	0003      	movs	r3, r0
 8004704:	8023      	strh	r3, [r4, #0]
    if (ret)
 8004706:	002a      	movs	r2, r5
 8004708:	18bb      	adds	r3, r7, r2
 800470a:	2100      	movs	r1, #0
 800470c:	5e5b      	ldrsh	r3, [r3, r1]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d003      	beq.n	800471a <shtc1_measure_blocking_read+0x2a>
        return ret;
 8004712:	18bb      	adds	r3, r7, r2
 8004714:	2200      	movs	r2, #0
 8004716:	5e9b      	ldrsh	r3, [r3, r2]
 8004718:	e00b      	b.n	8004732 <shtc1_measure_blocking_read+0x42>
#if !defined(USE_SENSIRION_CLOCK_STRETCHING) || !USE_SENSIRION_CLOCK_STRETCHING
    sensirion_sleep_usec(SHTC1_MEASUREMENT_DURATION_USEC);
 800471a:	23e1      	movs	r3, #225	; 0xe1
 800471c:	019b      	lsls	r3, r3, #6
 800471e:	0018      	movs	r0, r3
 8004720:	f7ff ffbc 	bl	800469c <sensirion_sleep_usec>
#endif /* USE_SENSIRION_CLOCK_STRETCHING */
    return shtc1_read(temperature, humidity);
 8004724:	683a      	ldr	r2, [r7, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	0011      	movs	r1, r2
 800472a:	0018      	movs	r0, r3
 800472c:	f000 f816 	bl	800475c <shtc1_read>
 8004730:	0003      	movs	r3, r0
}
 8004732:	0018      	movs	r0, r3
 8004734:	46bd      	mov	sp, r7
 8004736:	b004      	add	sp, #16
 8004738:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800473c <shtc1_measure>:

int16_t shtc1_measure(void) {
 800473c:	b580      	push	{r7, lr}
 800473e:	af00      	add	r7, sp, #0
    return sensirion_i2c_write_cmd(SHTC1_ADDRESS, shtc1_cmd_measure);
 8004740:	2270      	movs	r2, #112	; 0x70
 8004742:	4b05      	ldr	r3, [pc, #20]	; (8004758 <shtc1_measure+0x1c>)
 8004744:	881b      	ldrh	r3, [r3, #0]
 8004746:	0019      	movs	r1, r3
 8004748:	0010      	movs	r0, r2
 800474a:	f7ff ff09 	bl	8004560 <sensirion_i2c_write_cmd>
 800474e:	0003      	movs	r3, r0
}
 8004750:	0018      	movs	r0, r3
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	46c0      	nop			; (mov r8, r8)
 8004758:	20000000 	.word	0x20000000

0800475c <shtc1_read>:

int16_t shtc1_read(int32_t* temperature, int32_t* humidity) {
 800475c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800475e:	b085      	sub	sp, #20
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]
    uint16_t words[2];
    int16_t ret = sensirion_i2c_read_words(SHTC1_ADDRESS, words,
 8004766:	2070      	movs	r0, #112	; 0x70
 8004768:	260e      	movs	r6, #14
 800476a:	19bc      	adds	r4, r7, r6
 800476c:	2508      	movs	r5, #8
 800476e:	197b      	adds	r3, r7, r5
 8004770:	2202      	movs	r2, #2
 8004772:	0019      	movs	r1, r3
 8004774:	f7ff fea5 	bl	80044c2 <sensirion_i2c_read_words>
 8004778:	0003      	movs	r3, r0
 800477a:	8023      	strh	r3, [r4, #0]
     * formulas for conversion of the sensor signals, optimized for fixed point
     * algebra:
     * Temperature = 175 * S_T / 2^16 - 45
     * Relative Humidity = 100 * S_RH / 2^16
     */
    *temperature = ((21875 * (int32_t)words[0]) >> 13) - 45000;
 800477c:	0029      	movs	r1, r5
 800477e:	187b      	adds	r3, r7, r1
 8004780:	881b      	ldrh	r3, [r3, #0]
 8004782:	001a      	movs	r2, r3
 8004784:	4b0a      	ldr	r3, [pc, #40]	; (80047b0 <shtc1_read+0x54>)
 8004786:	4353      	muls	r3, r2
 8004788:	135b      	asrs	r3, r3, #13
 800478a:	4a0a      	ldr	r2, [pc, #40]	; (80047b4 <shtc1_read+0x58>)
 800478c:	189a      	adds	r2, r3, r2
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	601a      	str	r2, [r3, #0]
    *humidity = ((12500 * (int32_t)words[1]) >> 13);
 8004792:	187b      	adds	r3, r7, r1
 8004794:	885b      	ldrh	r3, [r3, #2]
 8004796:	001a      	movs	r2, r3
 8004798:	4b07      	ldr	r3, [pc, #28]	; (80047b8 <shtc1_read+0x5c>)
 800479a:	4353      	muls	r3, r2
 800479c:	135a      	asrs	r2, r3, #13
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	601a      	str	r2, [r3, #0]

    return ret;
 80047a2:	19bb      	adds	r3, r7, r6
 80047a4:	2200      	movs	r2, #0
 80047a6:	5e9b      	ldrsh	r3, [r3, r2]
}
 80047a8:	0018      	movs	r0, r3
 80047aa:	46bd      	mov	sp, r7
 80047ac:	b005      	add	sp, #20
 80047ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047b0:	00005573 	.word	0x00005573
 80047b4:	ffff5038 	.word	0xffff5038
 80047b8:	000030d4 	.word	0x000030d4

080047bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047c0:	4b07      	ldr	r3, [pc, #28]	; (80047e0 <HAL_MspInit+0x24>)
 80047c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047c4:	4b06      	ldr	r3, [pc, #24]	; (80047e0 <HAL_MspInit+0x24>)
 80047c6:	2101      	movs	r1, #1
 80047c8:	430a      	orrs	r2, r1
 80047ca:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80047cc:	4b04      	ldr	r3, [pc, #16]	; (80047e0 <HAL_MspInit+0x24>)
 80047ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047d0:	4b03      	ldr	r3, [pc, #12]	; (80047e0 <HAL_MspInit+0x24>)
 80047d2:	2180      	movs	r1, #128	; 0x80
 80047d4:	0549      	lsls	r1, r1, #21
 80047d6:	430a      	orrs	r2, r1
 80047d8:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80047da:	46c0      	nop			; (mov r8, r8)
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}
 80047e0:	40021000 	.word	0x40021000

080047e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80047e8:	e7fe      	b.n	80047e8 <NMI_Handler+0x4>

080047ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80047ea:	b580      	push	{r7, lr}
 80047ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80047ee:	e7fe      	b.n	80047ee <HardFault_Handler+0x4>

080047f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80047f4:	46c0      	nop			; (mov r8, r8)
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}

080047fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80047fa:	b580      	push	{r7, lr}
 80047fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80047fe:	46c0      	nop			; (mov r8, r8)
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004808:	f000 f95c 	bl	8004ac4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800480c:	46c0      	nop			; (mov r8, r8)
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}

08004812 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004812:	b580      	push	{r7, lr}
 8004814:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004816:	46c0      	nop			; (mov r8, r8)
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}

0800481c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004820:	4b14      	ldr	r3, [pc, #80]	; (8004874 <MX_USART1_UART_Init+0x58>)
 8004822:	4a15      	ldr	r2, [pc, #84]	; (8004878 <MX_USART1_UART_Init+0x5c>)
 8004824:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8004826:	4b13      	ldr	r3, [pc, #76]	; (8004874 <MX_USART1_UART_Init+0x58>)
 8004828:	2296      	movs	r2, #150	; 0x96
 800482a:	0192      	lsls	r2, r2, #6
 800482c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800482e:	4b11      	ldr	r3, [pc, #68]	; (8004874 <MX_USART1_UART_Init+0x58>)
 8004830:	2200      	movs	r2, #0
 8004832:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004834:	4b0f      	ldr	r3, [pc, #60]	; (8004874 <MX_USART1_UART_Init+0x58>)
 8004836:	2200      	movs	r2, #0
 8004838:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800483a:	4b0e      	ldr	r3, [pc, #56]	; (8004874 <MX_USART1_UART_Init+0x58>)
 800483c:	2200      	movs	r2, #0
 800483e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004840:	4b0c      	ldr	r3, [pc, #48]	; (8004874 <MX_USART1_UART_Init+0x58>)
 8004842:	220c      	movs	r2, #12
 8004844:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004846:	4b0b      	ldr	r3, [pc, #44]	; (8004874 <MX_USART1_UART_Init+0x58>)
 8004848:	2200      	movs	r2, #0
 800484a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800484c:	4b09      	ldr	r3, [pc, #36]	; (8004874 <MX_USART1_UART_Init+0x58>)
 800484e:	2200      	movs	r2, #0
 8004850:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004852:	4b08      	ldr	r3, [pc, #32]	; (8004874 <MX_USART1_UART_Init+0x58>)
 8004854:	2200      	movs	r2, #0
 8004856:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004858:	4b06      	ldr	r3, [pc, #24]	; (8004874 <MX_USART1_UART_Init+0x58>)
 800485a:	2200      	movs	r2, #0
 800485c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800485e:	4b05      	ldr	r3, [pc, #20]	; (8004874 <MX_USART1_UART_Init+0x58>)
 8004860:	0018      	movs	r0, r3
 8004862:	f001 ffb9 	bl	80067d8 <HAL_UART_Init>
 8004866:	1e03      	subs	r3, r0, #0
 8004868:	d001      	beq.n	800486e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800486a:	f7fe f89f 	bl	80029ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800486e:	46c0      	nop			; (mov r8, r8)
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}
 8004874:	200000e0 	.word	0x200000e0
 8004878:	40013800 	.word	0x40013800

0800487c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004880:	4b14      	ldr	r3, [pc, #80]	; (80048d4 <MX_USART2_UART_Init+0x58>)
 8004882:	4a15      	ldr	r2, [pc, #84]	; (80048d8 <MX_USART2_UART_Init+0x5c>)
 8004884:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8004886:	4b13      	ldr	r3, [pc, #76]	; (80048d4 <MX_USART2_UART_Init+0x58>)
 8004888:	2296      	movs	r2, #150	; 0x96
 800488a:	0192      	lsls	r2, r2, #6
 800488c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800488e:	4b11      	ldr	r3, [pc, #68]	; (80048d4 <MX_USART2_UART_Init+0x58>)
 8004890:	2200      	movs	r2, #0
 8004892:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004894:	4b0f      	ldr	r3, [pc, #60]	; (80048d4 <MX_USART2_UART_Init+0x58>)
 8004896:	2200      	movs	r2, #0
 8004898:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800489a:	4b0e      	ldr	r3, [pc, #56]	; (80048d4 <MX_USART2_UART_Init+0x58>)
 800489c:	2200      	movs	r2, #0
 800489e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80048a0:	4b0c      	ldr	r3, [pc, #48]	; (80048d4 <MX_USART2_UART_Init+0x58>)
 80048a2:	220c      	movs	r2, #12
 80048a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80048a6:	4b0b      	ldr	r3, [pc, #44]	; (80048d4 <MX_USART2_UART_Init+0x58>)
 80048a8:	2200      	movs	r2, #0
 80048aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80048ac:	4b09      	ldr	r3, [pc, #36]	; (80048d4 <MX_USART2_UART_Init+0x58>)
 80048ae:	2200      	movs	r2, #0
 80048b0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80048b2:	4b08      	ldr	r3, [pc, #32]	; (80048d4 <MX_USART2_UART_Init+0x58>)
 80048b4:	2200      	movs	r2, #0
 80048b6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80048b8:	4b06      	ldr	r3, [pc, #24]	; (80048d4 <MX_USART2_UART_Init+0x58>)
 80048ba:	2200      	movs	r2, #0
 80048bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80048be:	4b05      	ldr	r3, [pc, #20]	; (80048d4 <MX_USART2_UART_Init+0x58>)
 80048c0:	0018      	movs	r0, r3
 80048c2:	f001 ff89 	bl	80067d8 <HAL_UART_Init>
 80048c6:	1e03      	subs	r3, r0, #0
 80048c8:	d001      	beq.n	80048ce <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80048ca:	f7fe f86f 	bl	80029ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80048ce:	46c0      	nop			; (mov r8, r8)
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}
 80048d4:	20000164 	.word	0x20000164
 80048d8:	40004400 	.word	0x40004400

080048dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80048dc:	b590      	push	{r4, r7, lr}
 80048de:	b08b      	sub	sp, #44	; 0x2c
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048e4:	2414      	movs	r4, #20
 80048e6:	193b      	adds	r3, r7, r4
 80048e8:	0018      	movs	r0, r3
 80048ea:	2314      	movs	r3, #20
 80048ec:	001a      	movs	r2, r3
 80048ee:	2100      	movs	r1, #0
 80048f0:	f002 fcf2 	bl	80072d8 <memset>
  if(uartHandle->Instance==USART1)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a30      	ldr	r2, [pc, #192]	; (80049bc <HAL_UART_MspInit+0xe0>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d12b      	bne.n	8004956 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80048fe:	4b30      	ldr	r3, [pc, #192]	; (80049c0 <HAL_UART_MspInit+0xe4>)
 8004900:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004902:	4b2f      	ldr	r3, [pc, #188]	; (80049c0 <HAL_UART_MspInit+0xe4>)
 8004904:	2180      	movs	r1, #128	; 0x80
 8004906:	01c9      	lsls	r1, r1, #7
 8004908:	430a      	orrs	r2, r1
 800490a:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800490c:	4b2c      	ldr	r3, [pc, #176]	; (80049c0 <HAL_UART_MspInit+0xe4>)
 800490e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004910:	4b2b      	ldr	r3, [pc, #172]	; (80049c0 <HAL_UART_MspInit+0xe4>)
 8004912:	2101      	movs	r1, #1
 8004914:	430a      	orrs	r2, r1
 8004916:	62da      	str	r2, [r3, #44]	; 0x2c
 8004918:	4b29      	ldr	r3, [pc, #164]	; (80049c0 <HAL_UART_MspInit+0xe4>)
 800491a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491c:	2201      	movs	r2, #1
 800491e:	4013      	ands	r3, r2
 8004920:	613b      	str	r3, [r7, #16]
 8004922:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004924:	193b      	adds	r3, r7, r4
 8004926:	22c0      	movs	r2, #192	; 0xc0
 8004928:	00d2      	lsls	r2, r2, #3
 800492a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800492c:	0021      	movs	r1, r4
 800492e:	187b      	adds	r3, r7, r1
 8004930:	2202      	movs	r2, #2
 8004932:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004934:	187b      	adds	r3, r7, r1
 8004936:	2200      	movs	r2, #0
 8004938:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800493a:	187b      	adds	r3, r7, r1
 800493c:	2203      	movs	r2, #3
 800493e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8004940:	187b      	adds	r3, r7, r1
 8004942:	2204      	movs	r2, #4
 8004944:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004946:	187a      	adds	r2, r7, r1
 8004948:	23a0      	movs	r3, #160	; 0xa0
 800494a:	05db      	lsls	r3, r3, #23
 800494c:	0011      	movs	r1, r2
 800494e:	0018      	movs	r0, r3
 8004950:	f000 f9b4 	bl	8004cbc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004954:	e02e      	b.n	80049b4 <HAL_UART_MspInit+0xd8>
  else if(uartHandle->Instance==USART2)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a1a      	ldr	r2, [pc, #104]	; (80049c4 <HAL_UART_MspInit+0xe8>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d129      	bne.n	80049b4 <HAL_UART_MspInit+0xd8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004960:	4b17      	ldr	r3, [pc, #92]	; (80049c0 <HAL_UART_MspInit+0xe4>)
 8004962:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004964:	4b16      	ldr	r3, [pc, #88]	; (80049c0 <HAL_UART_MspInit+0xe4>)
 8004966:	2180      	movs	r1, #128	; 0x80
 8004968:	0289      	lsls	r1, r1, #10
 800496a:	430a      	orrs	r2, r1
 800496c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800496e:	4b14      	ldr	r3, [pc, #80]	; (80049c0 <HAL_UART_MspInit+0xe4>)
 8004970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004972:	4b13      	ldr	r3, [pc, #76]	; (80049c0 <HAL_UART_MspInit+0xe4>)
 8004974:	2101      	movs	r1, #1
 8004976:	430a      	orrs	r2, r1
 8004978:	62da      	str	r2, [r3, #44]	; 0x2c
 800497a:	4b11      	ldr	r3, [pc, #68]	; (80049c0 <HAL_UART_MspInit+0xe4>)
 800497c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800497e:	2201      	movs	r2, #1
 8004980:	4013      	ands	r3, r2
 8004982:	60fb      	str	r3, [r7, #12]
 8004984:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004986:	2114      	movs	r1, #20
 8004988:	187b      	adds	r3, r7, r1
 800498a:	220c      	movs	r2, #12
 800498c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800498e:	187b      	adds	r3, r7, r1
 8004990:	2202      	movs	r2, #2
 8004992:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004994:	187b      	adds	r3, r7, r1
 8004996:	2200      	movs	r2, #0
 8004998:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800499a:	187b      	adds	r3, r7, r1
 800499c:	2203      	movs	r2, #3
 800499e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 80049a0:	187b      	adds	r3, r7, r1
 80049a2:	2204      	movs	r2, #4
 80049a4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049a6:	187a      	adds	r2, r7, r1
 80049a8:	23a0      	movs	r3, #160	; 0xa0
 80049aa:	05db      	lsls	r3, r3, #23
 80049ac:	0011      	movs	r1, r2
 80049ae:	0018      	movs	r0, r3
 80049b0:	f000 f984 	bl	8004cbc <HAL_GPIO_Init>
}
 80049b4:	46c0      	nop			; (mov r8, r8)
 80049b6:	46bd      	mov	sp, r7
 80049b8:	b00b      	add	sp, #44	; 0x2c
 80049ba:	bd90      	pop	{r4, r7, pc}
 80049bc:	40013800 	.word	0x40013800
 80049c0:	40021000 	.word	0x40021000
 80049c4:	40004400 	.word	0x40004400

080049c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80049c8:	480d      	ldr	r0, [pc, #52]	; (8004a00 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80049ca:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80049cc:	480d      	ldr	r0, [pc, #52]	; (8004a04 <LoopForever+0x6>)
  ldr r1, =_edata
 80049ce:	490e      	ldr	r1, [pc, #56]	; (8004a08 <LoopForever+0xa>)
  ldr r2, =_sidata
 80049d0:	4a0e      	ldr	r2, [pc, #56]	; (8004a0c <LoopForever+0xe>)
  movs r3, #0
 80049d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80049d4:	e002      	b.n	80049dc <LoopCopyDataInit>

080049d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80049d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80049d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80049da:	3304      	adds	r3, #4

080049dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80049dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80049de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80049e0:	d3f9      	bcc.n	80049d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80049e2:	4a0b      	ldr	r2, [pc, #44]	; (8004a10 <LoopForever+0x12>)
  ldr r4, =_ebss
 80049e4:	4c0b      	ldr	r4, [pc, #44]	; (8004a14 <LoopForever+0x16>)
  movs r3, #0
 80049e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80049e8:	e001      	b.n	80049ee <LoopFillZerobss>

080049ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80049ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80049ec:	3204      	adds	r2, #4

080049ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80049ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80049f0:	d3fb      	bcc.n	80049ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80049f2:	f7ff ff0e 	bl	8004812 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80049f6:	f002 fc4b 	bl	8007290 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80049fa:	f7fd fef3 	bl	80027e4 <main>

080049fe <LoopForever>:

LoopForever:
    b LoopForever
 80049fe:	e7fe      	b.n	80049fe <LoopForever>
   ldr   r0, =_estack
 8004a00:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8004a04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004a08:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8004a0c:	08007744 	.word	0x08007744
  ldr r2, =_sbss
 8004a10:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8004a14:	200001ec 	.word	0x200001ec

08004a18 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004a18:	e7fe      	b.n	8004a18 <ADC1_COMP_IRQHandler>
	...

08004a1c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004a22:	1dfb      	adds	r3, r7, #7
 8004a24:	2200      	movs	r2, #0
 8004a26:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8004a28:	4b0b      	ldr	r3, [pc, #44]	; (8004a58 <HAL_Init+0x3c>)
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	4b0a      	ldr	r3, [pc, #40]	; (8004a58 <HAL_Init+0x3c>)
 8004a2e:	2140      	movs	r1, #64	; 0x40
 8004a30:	430a      	orrs	r2, r1
 8004a32:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004a34:	2003      	movs	r0, #3
 8004a36:	f000 f811 	bl	8004a5c <HAL_InitTick>
 8004a3a:	1e03      	subs	r3, r0, #0
 8004a3c:	d003      	beq.n	8004a46 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8004a3e:	1dfb      	adds	r3, r7, #7
 8004a40:	2201      	movs	r2, #1
 8004a42:	701a      	strb	r2, [r3, #0]
 8004a44:	e001      	b.n	8004a4a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004a46:	f7ff feb9 	bl	80047bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004a4a:	1dfb      	adds	r3, r7, #7
 8004a4c:	781b      	ldrb	r3, [r3, #0]
}
 8004a4e:	0018      	movs	r0, r3
 8004a50:	46bd      	mov	sp, r7
 8004a52:	b002      	add	sp, #8
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	46c0      	nop			; (mov r8, r8)
 8004a58:	40022000 	.word	0x40022000

08004a5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a5c:	b590      	push	{r4, r7, lr}
 8004a5e:	b083      	sub	sp, #12
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004a64:	4b14      	ldr	r3, [pc, #80]	; (8004ab8 <HAL_InitTick+0x5c>)
 8004a66:	681c      	ldr	r4, [r3, #0]
 8004a68:	4b14      	ldr	r3, [pc, #80]	; (8004abc <HAL_InitTick+0x60>)
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	0019      	movs	r1, r3
 8004a6e:	23fa      	movs	r3, #250	; 0xfa
 8004a70:	0098      	lsls	r0, r3, #2
 8004a72:	f7fb fb49 	bl	8000108 <__udivsi3>
 8004a76:	0003      	movs	r3, r0
 8004a78:	0019      	movs	r1, r3
 8004a7a:	0020      	movs	r0, r4
 8004a7c:	f7fb fb44 	bl	8000108 <__udivsi3>
 8004a80:	0003      	movs	r3, r0
 8004a82:	0018      	movs	r0, r3
 8004a84:	f000 f90d 	bl	8004ca2 <HAL_SYSTICK_Config>
 8004a88:	1e03      	subs	r3, r0, #0
 8004a8a:	d001      	beq.n	8004a90 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e00f      	b.n	8004ab0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2b03      	cmp	r3, #3
 8004a94:	d80b      	bhi.n	8004aae <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004a96:	6879      	ldr	r1, [r7, #4]
 8004a98:	2301      	movs	r3, #1
 8004a9a:	425b      	negs	r3, r3
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	0018      	movs	r0, r3
 8004aa0:	f000 f8ea 	bl	8004c78 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004aa4:	4b06      	ldr	r3, [pc, #24]	; (8004ac0 <HAL_InitTick+0x64>)
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	e000      	b.n	8004ab0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
}
 8004ab0:	0018      	movs	r0, r3
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	b003      	add	sp, #12
 8004ab6:	bd90      	pop	{r4, r7, pc}
 8004ab8:	20000004 	.word	0x20000004
 8004abc:	2000000c 	.word	0x2000000c
 8004ac0:	20000008 	.word	0x20000008

08004ac4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004ac8:	4b05      	ldr	r3, [pc, #20]	; (8004ae0 <HAL_IncTick+0x1c>)
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	001a      	movs	r2, r3
 8004ace:	4b05      	ldr	r3, [pc, #20]	; (8004ae4 <HAL_IncTick+0x20>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	18d2      	adds	r2, r2, r3
 8004ad4:	4b03      	ldr	r3, [pc, #12]	; (8004ae4 <HAL_IncTick+0x20>)
 8004ad6:	601a      	str	r2, [r3, #0]
}
 8004ad8:	46c0      	nop			; (mov r8, r8)
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	46c0      	nop			; (mov r8, r8)
 8004ae0:	2000000c 	.word	0x2000000c
 8004ae4:	200001e8 	.word	0x200001e8

08004ae8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	af00      	add	r7, sp, #0
  return uwTick;
 8004aec:	4b02      	ldr	r3, [pc, #8]	; (8004af8 <HAL_GetTick+0x10>)
 8004aee:	681b      	ldr	r3, [r3, #0]
}
 8004af0:	0018      	movs	r0, r3
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	46c0      	nop			; (mov r8, r8)
 8004af8:	200001e8 	.word	0x200001e8

08004afc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004b04:	f7ff fff0 	bl	8004ae8 <HAL_GetTick>
 8004b08:	0003      	movs	r3, r0
 8004b0a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	3301      	adds	r3, #1
 8004b14:	d005      	beq.n	8004b22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004b16:	4b0a      	ldr	r3, [pc, #40]	; (8004b40 <HAL_Delay+0x44>)
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	001a      	movs	r2, r3
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	189b      	adds	r3, r3, r2
 8004b20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004b22:	46c0      	nop			; (mov r8, r8)
 8004b24:	f7ff ffe0 	bl	8004ae8 <HAL_GetTick>
 8004b28:	0002      	movs	r2, r0
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	68fa      	ldr	r2, [r7, #12]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d8f7      	bhi.n	8004b24 <HAL_Delay+0x28>
  {
  }
}
 8004b34:	46c0      	nop			; (mov r8, r8)
 8004b36:	46c0      	nop			; (mov r8, r8)
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	b004      	add	sp, #16
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	46c0      	nop			; (mov r8, r8)
 8004b40:	2000000c 	.word	0x2000000c

08004b44 <HAL_GetHalVersion>:
/**
  * @brief Returns the HAL revision
  * @retval version: 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	af00      	add	r7, sp, #0
  return __STM32L0xx_HAL_VERSION;
 8004b48:	4b01      	ldr	r3, [pc, #4]	; (8004b50 <HAL_GetHalVersion+0xc>)
}
 8004b4a:	0018      	movs	r0, r3
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}
 8004b50:	010a0500 	.word	0x010a0500

08004b54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b54:	b590      	push	{r4, r7, lr}
 8004b56:	b083      	sub	sp, #12
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	0002      	movs	r2, r0
 8004b5c:	6039      	str	r1, [r7, #0]
 8004b5e:	1dfb      	adds	r3, r7, #7
 8004b60:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004b62:	1dfb      	adds	r3, r7, #7
 8004b64:	781b      	ldrb	r3, [r3, #0]
 8004b66:	2b7f      	cmp	r3, #127	; 0x7f
 8004b68:	d828      	bhi.n	8004bbc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004b6a:	4a2f      	ldr	r2, [pc, #188]	; (8004c28 <__NVIC_SetPriority+0xd4>)
 8004b6c:	1dfb      	adds	r3, r7, #7
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	b25b      	sxtb	r3, r3
 8004b72:	089b      	lsrs	r3, r3, #2
 8004b74:	33c0      	adds	r3, #192	; 0xc0
 8004b76:	009b      	lsls	r3, r3, #2
 8004b78:	589b      	ldr	r3, [r3, r2]
 8004b7a:	1dfa      	adds	r2, r7, #7
 8004b7c:	7812      	ldrb	r2, [r2, #0]
 8004b7e:	0011      	movs	r1, r2
 8004b80:	2203      	movs	r2, #3
 8004b82:	400a      	ands	r2, r1
 8004b84:	00d2      	lsls	r2, r2, #3
 8004b86:	21ff      	movs	r1, #255	; 0xff
 8004b88:	4091      	lsls	r1, r2
 8004b8a:	000a      	movs	r2, r1
 8004b8c:	43d2      	mvns	r2, r2
 8004b8e:	401a      	ands	r2, r3
 8004b90:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	019b      	lsls	r3, r3, #6
 8004b96:	22ff      	movs	r2, #255	; 0xff
 8004b98:	401a      	ands	r2, r3
 8004b9a:	1dfb      	adds	r3, r7, #7
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	0018      	movs	r0, r3
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	4003      	ands	r3, r0
 8004ba4:	00db      	lsls	r3, r3, #3
 8004ba6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004ba8:	481f      	ldr	r0, [pc, #124]	; (8004c28 <__NVIC_SetPriority+0xd4>)
 8004baa:	1dfb      	adds	r3, r7, #7
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	b25b      	sxtb	r3, r3
 8004bb0:	089b      	lsrs	r3, r3, #2
 8004bb2:	430a      	orrs	r2, r1
 8004bb4:	33c0      	adds	r3, #192	; 0xc0
 8004bb6:	009b      	lsls	r3, r3, #2
 8004bb8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004bba:	e031      	b.n	8004c20 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004bbc:	4a1b      	ldr	r2, [pc, #108]	; (8004c2c <__NVIC_SetPriority+0xd8>)
 8004bbe:	1dfb      	adds	r3, r7, #7
 8004bc0:	781b      	ldrb	r3, [r3, #0]
 8004bc2:	0019      	movs	r1, r3
 8004bc4:	230f      	movs	r3, #15
 8004bc6:	400b      	ands	r3, r1
 8004bc8:	3b08      	subs	r3, #8
 8004bca:	089b      	lsrs	r3, r3, #2
 8004bcc:	3306      	adds	r3, #6
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	18d3      	adds	r3, r2, r3
 8004bd2:	3304      	adds	r3, #4
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	1dfa      	adds	r2, r7, #7
 8004bd8:	7812      	ldrb	r2, [r2, #0]
 8004bda:	0011      	movs	r1, r2
 8004bdc:	2203      	movs	r2, #3
 8004bde:	400a      	ands	r2, r1
 8004be0:	00d2      	lsls	r2, r2, #3
 8004be2:	21ff      	movs	r1, #255	; 0xff
 8004be4:	4091      	lsls	r1, r2
 8004be6:	000a      	movs	r2, r1
 8004be8:	43d2      	mvns	r2, r2
 8004bea:	401a      	ands	r2, r3
 8004bec:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	019b      	lsls	r3, r3, #6
 8004bf2:	22ff      	movs	r2, #255	; 0xff
 8004bf4:	401a      	ands	r2, r3
 8004bf6:	1dfb      	adds	r3, r7, #7
 8004bf8:	781b      	ldrb	r3, [r3, #0]
 8004bfa:	0018      	movs	r0, r3
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	4003      	ands	r3, r0
 8004c00:	00db      	lsls	r3, r3, #3
 8004c02:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004c04:	4809      	ldr	r0, [pc, #36]	; (8004c2c <__NVIC_SetPriority+0xd8>)
 8004c06:	1dfb      	adds	r3, r7, #7
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	001c      	movs	r4, r3
 8004c0c:	230f      	movs	r3, #15
 8004c0e:	4023      	ands	r3, r4
 8004c10:	3b08      	subs	r3, #8
 8004c12:	089b      	lsrs	r3, r3, #2
 8004c14:	430a      	orrs	r2, r1
 8004c16:	3306      	adds	r3, #6
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	18c3      	adds	r3, r0, r3
 8004c1c:	3304      	adds	r3, #4
 8004c1e:	601a      	str	r2, [r3, #0]
}
 8004c20:	46c0      	nop			; (mov r8, r8)
 8004c22:	46bd      	mov	sp, r7
 8004c24:	b003      	add	sp, #12
 8004c26:	bd90      	pop	{r4, r7, pc}
 8004c28:	e000e100 	.word	0xe000e100
 8004c2c:	e000ed00 	.word	0xe000ed00

08004c30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b082      	sub	sp, #8
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	1e5a      	subs	r2, r3, #1
 8004c3c:	2380      	movs	r3, #128	; 0x80
 8004c3e:	045b      	lsls	r3, r3, #17
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d301      	bcc.n	8004c48 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c44:	2301      	movs	r3, #1
 8004c46:	e010      	b.n	8004c6a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c48:	4b0a      	ldr	r3, [pc, #40]	; (8004c74 <SysTick_Config+0x44>)
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	3a01      	subs	r2, #1
 8004c4e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c50:	2301      	movs	r3, #1
 8004c52:	425b      	negs	r3, r3
 8004c54:	2103      	movs	r1, #3
 8004c56:	0018      	movs	r0, r3
 8004c58:	f7ff ff7c 	bl	8004b54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c5c:	4b05      	ldr	r3, [pc, #20]	; (8004c74 <SysTick_Config+0x44>)
 8004c5e:	2200      	movs	r2, #0
 8004c60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c62:	4b04      	ldr	r3, [pc, #16]	; (8004c74 <SysTick_Config+0x44>)
 8004c64:	2207      	movs	r2, #7
 8004c66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c68:	2300      	movs	r3, #0
}
 8004c6a:	0018      	movs	r0, r3
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	b002      	add	sp, #8
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	46c0      	nop			; (mov r8, r8)
 8004c74:	e000e010 	.word	0xe000e010

08004c78 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	60b9      	str	r1, [r7, #8]
 8004c80:	607a      	str	r2, [r7, #4]
 8004c82:	210f      	movs	r1, #15
 8004c84:	187b      	adds	r3, r7, r1
 8004c86:	1c02      	adds	r2, r0, #0
 8004c88:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8004c8a:	68ba      	ldr	r2, [r7, #8]
 8004c8c:	187b      	adds	r3, r7, r1
 8004c8e:	781b      	ldrb	r3, [r3, #0]
 8004c90:	b25b      	sxtb	r3, r3
 8004c92:	0011      	movs	r1, r2
 8004c94:	0018      	movs	r0, r3
 8004c96:	f7ff ff5d 	bl	8004b54 <__NVIC_SetPriority>
}
 8004c9a:	46c0      	nop			; (mov r8, r8)
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	b004      	add	sp, #16
 8004ca0:	bd80      	pop	{r7, pc}

08004ca2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004ca2:	b580      	push	{r7, lr}
 8004ca4:	b082      	sub	sp, #8
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	0018      	movs	r0, r3
 8004cae:	f7ff ffbf 	bl	8004c30 <SysTick_Config>
 8004cb2:	0003      	movs	r3, r0
}
 8004cb4:	0018      	movs	r0, r3
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	b002      	add	sp, #8
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b086      	sub	sp, #24
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8004cce:	2300      	movs	r3, #0
 8004cd0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8004cd2:	e14f      	b.n	8004f74 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2101      	movs	r1, #1
 8004cda:	697a      	ldr	r2, [r7, #20]
 8004cdc:	4091      	lsls	r1, r2
 8004cde:	000a      	movs	r2, r1
 8004ce0:	4013      	ands	r3, r2
 8004ce2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d100      	bne.n	8004cec <HAL_GPIO_Init+0x30>
 8004cea:	e140      	b.n	8004f6e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	2203      	movs	r2, #3
 8004cf2:	4013      	ands	r3, r2
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d005      	beq.n	8004d04 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	2203      	movs	r2, #3
 8004cfe:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004d00:	2b02      	cmp	r3, #2
 8004d02:	d130      	bne.n	8004d66 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	005b      	lsls	r3, r3, #1
 8004d0e:	2203      	movs	r2, #3
 8004d10:	409a      	lsls	r2, r3
 8004d12:	0013      	movs	r3, r2
 8004d14:	43da      	mvns	r2, r3
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	4013      	ands	r3, r2
 8004d1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	68da      	ldr	r2, [r3, #12]
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	005b      	lsls	r3, r3, #1
 8004d24:	409a      	lsls	r2, r3
 8004d26:	0013      	movs	r3, r2
 8004d28:	693a      	ldr	r2, [r7, #16]
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	693a      	ldr	r2, [r7, #16]
 8004d32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	697b      	ldr	r3, [r7, #20]
 8004d3e:	409a      	lsls	r2, r3
 8004d40:	0013      	movs	r3, r2
 8004d42:	43da      	mvns	r2, r3
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	4013      	ands	r3, r2
 8004d48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	091b      	lsrs	r3, r3, #4
 8004d50:	2201      	movs	r2, #1
 8004d52:	401a      	ands	r2, r3
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	409a      	lsls	r2, r3
 8004d58:	0013      	movs	r3, r2
 8004d5a:	693a      	ldr	r2, [r7, #16]
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	693a      	ldr	r2, [r7, #16]
 8004d64:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	2203      	movs	r2, #3
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	2b03      	cmp	r3, #3
 8004d70:	d017      	beq.n	8004da2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	005b      	lsls	r3, r3, #1
 8004d7c:	2203      	movs	r2, #3
 8004d7e:	409a      	lsls	r2, r3
 8004d80:	0013      	movs	r3, r2
 8004d82:	43da      	mvns	r2, r3
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	4013      	ands	r3, r2
 8004d88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	689a      	ldr	r2, [r3, #8]
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	005b      	lsls	r3, r3, #1
 8004d92:	409a      	lsls	r2, r3
 8004d94:	0013      	movs	r3, r2
 8004d96:	693a      	ldr	r2, [r7, #16]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	693a      	ldr	r2, [r7, #16]
 8004da0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	2203      	movs	r2, #3
 8004da8:	4013      	ands	r3, r2
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d123      	bne.n	8004df6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004dae:	697b      	ldr	r3, [r7, #20]
 8004db0:	08da      	lsrs	r2, r3, #3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	3208      	adds	r2, #8
 8004db6:	0092      	lsls	r2, r2, #2
 8004db8:	58d3      	ldr	r3, [r2, r3]
 8004dba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	2207      	movs	r2, #7
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	009b      	lsls	r3, r3, #2
 8004dc4:	220f      	movs	r2, #15
 8004dc6:	409a      	lsls	r2, r3
 8004dc8:	0013      	movs	r3, r2
 8004dca:	43da      	mvns	r2, r3
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	4013      	ands	r3, r2
 8004dd0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	691a      	ldr	r2, [r3, #16]
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	2107      	movs	r1, #7
 8004dda:	400b      	ands	r3, r1
 8004ddc:	009b      	lsls	r3, r3, #2
 8004dde:	409a      	lsls	r2, r3
 8004de0:	0013      	movs	r3, r2
 8004de2:	693a      	ldr	r2, [r7, #16]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	08da      	lsrs	r2, r3, #3
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	3208      	adds	r2, #8
 8004df0:	0092      	lsls	r2, r2, #2
 8004df2:	6939      	ldr	r1, [r7, #16]
 8004df4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	005b      	lsls	r3, r3, #1
 8004e00:	2203      	movs	r2, #3
 8004e02:	409a      	lsls	r2, r3
 8004e04:	0013      	movs	r3, r2
 8004e06:	43da      	mvns	r2, r3
 8004e08:	693b      	ldr	r3, [r7, #16]
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	2203      	movs	r2, #3
 8004e14:	401a      	ands	r2, r3
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	005b      	lsls	r3, r3, #1
 8004e1a:	409a      	lsls	r2, r3
 8004e1c:	0013      	movs	r3, r2
 8004e1e:	693a      	ldr	r2, [r7, #16]
 8004e20:	4313      	orrs	r3, r2
 8004e22:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	693a      	ldr	r2, [r7, #16]
 8004e28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	685a      	ldr	r2, [r3, #4]
 8004e2e:	23c0      	movs	r3, #192	; 0xc0
 8004e30:	029b      	lsls	r3, r3, #10
 8004e32:	4013      	ands	r3, r2
 8004e34:	d100      	bne.n	8004e38 <HAL_GPIO_Init+0x17c>
 8004e36:	e09a      	b.n	8004f6e <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e38:	4b54      	ldr	r3, [pc, #336]	; (8004f8c <HAL_GPIO_Init+0x2d0>)
 8004e3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e3c:	4b53      	ldr	r3, [pc, #332]	; (8004f8c <HAL_GPIO_Init+0x2d0>)
 8004e3e:	2101      	movs	r1, #1
 8004e40:	430a      	orrs	r2, r1
 8004e42:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e44:	4a52      	ldr	r2, [pc, #328]	; (8004f90 <HAL_GPIO_Init+0x2d4>)
 8004e46:	697b      	ldr	r3, [r7, #20]
 8004e48:	089b      	lsrs	r3, r3, #2
 8004e4a:	3302      	adds	r3, #2
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	589b      	ldr	r3, [r3, r2]
 8004e50:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	2203      	movs	r2, #3
 8004e56:	4013      	ands	r3, r2
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	220f      	movs	r2, #15
 8004e5c:	409a      	lsls	r2, r3
 8004e5e:	0013      	movs	r3, r2
 8004e60:	43da      	mvns	r2, r3
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	4013      	ands	r3, r2
 8004e66:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8004e68:	687a      	ldr	r2, [r7, #4]
 8004e6a:	23a0      	movs	r3, #160	; 0xa0
 8004e6c:	05db      	lsls	r3, r3, #23
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d019      	beq.n	8004ea6 <HAL_GPIO_Init+0x1ea>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4a47      	ldr	r2, [pc, #284]	; (8004f94 <HAL_GPIO_Init+0x2d8>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d013      	beq.n	8004ea2 <HAL_GPIO_Init+0x1e6>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	4a46      	ldr	r2, [pc, #280]	; (8004f98 <HAL_GPIO_Init+0x2dc>)
 8004e7e:	4293      	cmp	r3, r2
 8004e80:	d00d      	beq.n	8004e9e <HAL_GPIO_Init+0x1e2>
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	4a45      	ldr	r2, [pc, #276]	; (8004f9c <HAL_GPIO_Init+0x2e0>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d007      	beq.n	8004e9a <HAL_GPIO_Init+0x1de>
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4a44      	ldr	r2, [pc, #272]	; (8004fa0 <HAL_GPIO_Init+0x2e4>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d101      	bne.n	8004e96 <HAL_GPIO_Init+0x1da>
 8004e92:	2305      	movs	r3, #5
 8004e94:	e008      	b.n	8004ea8 <HAL_GPIO_Init+0x1ec>
 8004e96:	2306      	movs	r3, #6
 8004e98:	e006      	b.n	8004ea8 <HAL_GPIO_Init+0x1ec>
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e004      	b.n	8004ea8 <HAL_GPIO_Init+0x1ec>
 8004e9e:	2302      	movs	r3, #2
 8004ea0:	e002      	b.n	8004ea8 <HAL_GPIO_Init+0x1ec>
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	e000      	b.n	8004ea8 <HAL_GPIO_Init+0x1ec>
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	697a      	ldr	r2, [r7, #20]
 8004eaa:	2103      	movs	r1, #3
 8004eac:	400a      	ands	r2, r1
 8004eae:	0092      	lsls	r2, r2, #2
 8004eb0:	4093      	lsls	r3, r2
 8004eb2:	693a      	ldr	r2, [r7, #16]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004eb8:	4935      	ldr	r1, [pc, #212]	; (8004f90 <HAL_GPIO_Init+0x2d4>)
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	089b      	lsrs	r3, r3, #2
 8004ebe:	3302      	adds	r3, #2
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	693a      	ldr	r2, [r7, #16]
 8004ec4:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ec6:	4b37      	ldr	r3, [pc, #220]	; (8004fa4 <HAL_GPIO_Init+0x2e8>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	43da      	mvns	r2, r3
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	685a      	ldr	r2, [r3, #4]
 8004eda:	2380      	movs	r3, #128	; 0x80
 8004edc:	025b      	lsls	r3, r3, #9
 8004ede:	4013      	ands	r3, r2
 8004ee0:	d003      	beq.n	8004eea <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8004ee2:	693a      	ldr	r2, [r7, #16]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004eea:	4b2e      	ldr	r3, [pc, #184]	; (8004fa4 <HAL_GPIO_Init+0x2e8>)
 8004eec:	693a      	ldr	r2, [r7, #16]
 8004eee:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8004ef0:	4b2c      	ldr	r3, [pc, #176]	; (8004fa4 <HAL_GPIO_Init+0x2e8>)
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	43da      	mvns	r2, r3
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	4013      	ands	r3, r2
 8004efe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	685a      	ldr	r2, [r3, #4]
 8004f04:	2380      	movs	r3, #128	; 0x80
 8004f06:	029b      	lsls	r3, r3, #10
 8004f08:	4013      	ands	r3, r2
 8004f0a:	d003      	beq.n	8004f14 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8004f0c:	693a      	ldr	r2, [r7, #16]
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004f14:	4b23      	ldr	r3, [pc, #140]	; (8004fa4 <HAL_GPIO_Init+0x2e8>)
 8004f16:	693a      	ldr	r2, [r7, #16]
 8004f18:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004f1a:	4b22      	ldr	r3, [pc, #136]	; (8004fa4 <HAL_GPIO_Init+0x2e8>)
 8004f1c:	689b      	ldr	r3, [r3, #8]
 8004f1e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	43da      	mvns	r2, r3
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	4013      	ands	r3, r2
 8004f28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	685a      	ldr	r2, [r3, #4]
 8004f2e:	2380      	movs	r3, #128	; 0x80
 8004f30:	035b      	lsls	r3, r3, #13
 8004f32:	4013      	ands	r3, r2
 8004f34:	d003      	beq.n	8004f3e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004f36:	693a      	ldr	r2, [r7, #16]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004f3e:	4b19      	ldr	r3, [pc, #100]	; (8004fa4 <HAL_GPIO_Init+0x2e8>)
 8004f40:	693a      	ldr	r2, [r7, #16]
 8004f42:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8004f44:	4b17      	ldr	r3, [pc, #92]	; (8004fa4 <HAL_GPIO_Init+0x2e8>)
 8004f46:	68db      	ldr	r3, [r3, #12]
 8004f48:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	43da      	mvns	r2, r3
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	4013      	ands	r3, r2
 8004f52:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	685a      	ldr	r2, [r3, #4]
 8004f58:	2380      	movs	r3, #128	; 0x80
 8004f5a:	039b      	lsls	r3, r3, #14
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	d003      	beq.n	8004f68 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8004f60:	693a      	ldr	r2, [r7, #16]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8004f68:	4b0e      	ldr	r3, [pc, #56]	; (8004fa4 <HAL_GPIO_Init+0x2e8>)
 8004f6a:	693a      	ldr	r2, [r7, #16]
 8004f6c:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	3301      	adds	r3, #1
 8004f72:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	681a      	ldr	r2, [r3, #0]
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	40da      	lsrs	r2, r3
 8004f7c:	1e13      	subs	r3, r2, #0
 8004f7e:	d000      	beq.n	8004f82 <HAL_GPIO_Init+0x2c6>
 8004f80:	e6a8      	b.n	8004cd4 <HAL_GPIO_Init+0x18>
  }
}
 8004f82:	46c0      	nop			; (mov r8, r8)
 8004f84:	46c0      	nop			; (mov r8, r8)
 8004f86:	46bd      	mov	sp, r7
 8004f88:	b006      	add	sp, #24
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	40021000 	.word	0x40021000
 8004f90:	40010000 	.word	0x40010000
 8004f94:	50000400 	.word	0x50000400
 8004f98:	50000800 	.word	0x50000800
 8004f9c:	50000c00 	.word	0x50000c00
 8004fa0:	50001c00 	.word	0x50001c00
 8004fa4:	40010400 	.word	0x40010400

08004fa8 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b082      	sub	sp, #8
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	0008      	movs	r0, r1
 8004fb2:	0011      	movs	r1, r2
 8004fb4:	1cbb      	adds	r3, r7, #2
 8004fb6:	1c02      	adds	r2, r0, #0
 8004fb8:	801a      	strh	r2, [r3, #0]
 8004fba:	1c7b      	adds	r3, r7, #1
 8004fbc:	1c0a      	adds	r2, r1, #0
 8004fbe:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004fc0:	1c7b      	adds	r3, r7, #1
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d004      	beq.n	8004fd2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004fc8:	1cbb      	adds	r3, r7, #2
 8004fca:	881a      	ldrh	r2, [r3, #0]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8004fd0:	e003      	b.n	8004fda <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8004fd2:	1cbb      	adds	r3, r7, #2
 8004fd4:	881a      	ldrh	r2, [r3, #0]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004fda:	46c0      	nop			; (mov r8, r8)
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	b002      	add	sp, #8
 8004fe0:	bd80      	pop	{r7, pc}
	...

08004fe4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b082      	sub	sp, #8
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d101      	bne.n	8004ff6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e082      	b.n	80050fc <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2241      	movs	r2, #65	; 0x41
 8004ffa:	5c9b      	ldrb	r3, [r3, r2]
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d107      	bne.n	8005012 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2240      	movs	r2, #64	; 0x40
 8005006:	2100      	movs	r1, #0
 8005008:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	0018      	movs	r0, r3
 800500e:	f7fd fba5 	bl	800275c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2241      	movs	r2, #65	; 0x41
 8005016:	2124      	movs	r1, #36	; 0x24
 8005018:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2101      	movs	r1, #1
 8005026:	438a      	bics	r2, r1
 8005028:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	685a      	ldr	r2, [r3, #4]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4934      	ldr	r1, [pc, #208]	; (8005104 <HAL_I2C_Init+0x120>)
 8005034:	400a      	ands	r2, r1
 8005036:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	689a      	ldr	r2, [r3, #8]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4931      	ldr	r1, [pc, #196]	; (8005108 <HAL_I2C_Init+0x124>)
 8005044:	400a      	ands	r2, r1
 8005046:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	2b01      	cmp	r3, #1
 800504e:	d108      	bne.n	8005062 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	689a      	ldr	r2, [r3, #8]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	2180      	movs	r1, #128	; 0x80
 800505a:	0209      	lsls	r1, r1, #8
 800505c:	430a      	orrs	r2, r1
 800505e:	609a      	str	r2, [r3, #8]
 8005060:	e007      	b.n	8005072 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	689a      	ldr	r2, [r3, #8]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	2184      	movs	r1, #132	; 0x84
 800506c:	0209      	lsls	r1, r1, #8
 800506e:	430a      	orrs	r2, r1
 8005070:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	2b02      	cmp	r3, #2
 8005078:	d104      	bne.n	8005084 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	2280      	movs	r2, #128	; 0x80
 8005080:	0112      	lsls	r2, r2, #4
 8005082:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	685a      	ldr	r2, [r3, #4]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	491f      	ldr	r1, [pc, #124]	; (800510c <HAL_I2C_Init+0x128>)
 8005090:	430a      	orrs	r2, r1
 8005092:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	68da      	ldr	r2, [r3, #12]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	491a      	ldr	r1, [pc, #104]	; (8005108 <HAL_I2C_Init+0x124>)
 80050a0:	400a      	ands	r2, r1
 80050a2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	691a      	ldr	r2, [r3, #16]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	695b      	ldr	r3, [r3, #20]
 80050ac:	431a      	orrs	r2, r3
 80050ae:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	699b      	ldr	r3, [r3, #24]
 80050b4:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	430a      	orrs	r2, r1
 80050bc:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	69d9      	ldr	r1, [r3, #28]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a1a      	ldr	r2, [r3, #32]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	430a      	orrs	r2, r1
 80050cc:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	2101      	movs	r1, #1
 80050da:	430a      	orrs	r2, r1
 80050dc:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2200      	movs	r2, #0
 80050e2:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2241      	movs	r2, #65	; 0x41
 80050e8:	2120      	movs	r1, #32
 80050ea:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2200      	movs	r2, #0
 80050f0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2242      	movs	r2, #66	; 0x42
 80050f6:	2100      	movs	r1, #0
 80050f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80050fa:	2300      	movs	r3, #0
}
 80050fc:	0018      	movs	r0, r3
 80050fe:	46bd      	mov	sp, r7
 8005100:	b002      	add	sp, #8
 8005102:	bd80      	pop	{r7, pc}
 8005104:	f0ffffff 	.word	0xf0ffffff
 8005108:	ffff7fff 	.word	0xffff7fff
 800510c:	02008000 	.word	0x02008000

08005110 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005110:	b590      	push	{r4, r7, lr}
 8005112:	b089      	sub	sp, #36	; 0x24
 8005114:	af02      	add	r7, sp, #8
 8005116:	60f8      	str	r0, [r7, #12]
 8005118:	0008      	movs	r0, r1
 800511a:	607a      	str	r2, [r7, #4]
 800511c:	0019      	movs	r1, r3
 800511e:	230a      	movs	r3, #10
 8005120:	18fb      	adds	r3, r7, r3
 8005122:	1c02      	adds	r2, r0, #0
 8005124:	801a      	strh	r2, [r3, #0]
 8005126:	2308      	movs	r3, #8
 8005128:	18fb      	adds	r3, r7, r3
 800512a:	1c0a      	adds	r2, r1, #0
 800512c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2241      	movs	r2, #65	; 0x41
 8005132:	5c9b      	ldrb	r3, [r3, r2]
 8005134:	b2db      	uxtb	r3, r3
 8005136:	2b20      	cmp	r3, #32
 8005138:	d000      	beq.n	800513c <HAL_I2C_Master_Transmit+0x2c>
 800513a:	e0e7      	b.n	800530c <HAL_I2C_Master_Transmit+0x1fc>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2240      	movs	r2, #64	; 0x40
 8005140:	5c9b      	ldrb	r3, [r3, r2]
 8005142:	2b01      	cmp	r3, #1
 8005144:	d101      	bne.n	800514a <HAL_I2C_Master_Transmit+0x3a>
 8005146:	2302      	movs	r3, #2
 8005148:	e0e1      	b.n	800530e <HAL_I2C_Master_Transmit+0x1fe>
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2240      	movs	r2, #64	; 0x40
 800514e:	2101      	movs	r1, #1
 8005150:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005152:	f7ff fcc9 	bl	8004ae8 <HAL_GetTick>
 8005156:	0003      	movs	r3, r0
 8005158:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800515a:	2380      	movs	r3, #128	; 0x80
 800515c:	0219      	lsls	r1, r3, #8
 800515e:	68f8      	ldr	r0, [r7, #12]
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	9300      	str	r3, [sp, #0]
 8005164:	2319      	movs	r3, #25
 8005166:	2201      	movs	r2, #1
 8005168:	f000 fa04 	bl	8005574 <I2C_WaitOnFlagUntilTimeout>
 800516c:	1e03      	subs	r3, r0, #0
 800516e:	d001      	beq.n	8005174 <HAL_I2C_Master_Transmit+0x64>
    {
      return HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	e0cc      	b.n	800530e <HAL_I2C_Master_Transmit+0x1fe>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2241      	movs	r2, #65	; 0x41
 8005178:	2121      	movs	r1, #33	; 0x21
 800517a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2242      	movs	r2, #66	; 0x42
 8005180:	2110      	movs	r1, #16
 8005182:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2200      	movs	r2, #0
 8005188:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2208      	movs	r2, #8
 8005194:	18ba      	adds	r2, r7, r2
 8005196:	8812      	ldrh	r2, [r2, #0]
 8005198:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	2200      	movs	r2, #0
 800519e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	2bff      	cmp	r3, #255	; 0xff
 80051a8:	d911      	bls.n	80051ce <HAL_I2C_Master_Transmit+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	22ff      	movs	r2, #255	; 0xff
 80051ae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051b4:	b2da      	uxtb	r2, r3
 80051b6:	2380      	movs	r3, #128	; 0x80
 80051b8:	045c      	lsls	r4, r3, #17
 80051ba:	230a      	movs	r3, #10
 80051bc:	18fb      	adds	r3, r7, r3
 80051be:	8819      	ldrh	r1, [r3, #0]
 80051c0:	68f8      	ldr	r0, [r7, #12]
 80051c2:	4b55      	ldr	r3, [pc, #340]	; (8005318 <HAL_I2C_Master_Transmit+0x208>)
 80051c4:	9300      	str	r3, [sp, #0]
 80051c6:	0023      	movs	r3, r4
 80051c8:	f000 fb74 	bl	80058b4 <I2C_TransferConfig>
 80051cc:	e075      	b.n	80052ba <HAL_I2C_Master_Transmit+0x1aa>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051d2:	b29a      	uxth	r2, r3
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051dc:	b2da      	uxtb	r2, r3
 80051de:	2380      	movs	r3, #128	; 0x80
 80051e0:	049c      	lsls	r4, r3, #18
 80051e2:	230a      	movs	r3, #10
 80051e4:	18fb      	adds	r3, r7, r3
 80051e6:	8819      	ldrh	r1, [r3, #0]
 80051e8:	68f8      	ldr	r0, [r7, #12]
 80051ea:	4b4b      	ldr	r3, [pc, #300]	; (8005318 <HAL_I2C_Master_Transmit+0x208>)
 80051ec:	9300      	str	r3, [sp, #0]
 80051ee:	0023      	movs	r3, r4
 80051f0:	f000 fb60 	bl	80058b4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80051f4:	e061      	b.n	80052ba <HAL_I2C_Master_Transmit+0x1aa>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051f6:	697a      	ldr	r2, [r7, #20]
 80051f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	0018      	movs	r0, r3
 80051fe:	f000 f9f8 	bl	80055f2 <I2C_WaitOnTXISFlagUntilTimeout>
 8005202:	1e03      	subs	r3, r0, #0
 8005204:	d001      	beq.n	800520a <HAL_I2C_Master_Transmit+0xfa>
      {
        return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e081      	b.n	800530e <HAL_I2C_Master_Transmit+0x1fe>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520e:	781a      	ldrb	r2, [r3, #0]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521a:	1c5a      	adds	r2, r3, #1
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005224:	b29b      	uxth	r3, r3
 8005226:	3b01      	subs	r3, #1
 8005228:	b29a      	uxth	r2, r3
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005232:	3b01      	subs	r3, #1
 8005234:	b29a      	uxth	r2, r3
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800523e:	b29b      	uxth	r3, r3
 8005240:	2b00      	cmp	r3, #0
 8005242:	d03a      	beq.n	80052ba <HAL_I2C_Master_Transmit+0x1aa>
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005248:	2b00      	cmp	r3, #0
 800524a:	d136      	bne.n	80052ba <HAL_I2C_Master_Transmit+0x1aa>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800524c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800524e:	68f8      	ldr	r0, [r7, #12]
 8005250:	697b      	ldr	r3, [r7, #20]
 8005252:	9300      	str	r3, [sp, #0]
 8005254:	0013      	movs	r3, r2
 8005256:	2200      	movs	r2, #0
 8005258:	2180      	movs	r1, #128	; 0x80
 800525a:	f000 f98b 	bl	8005574 <I2C_WaitOnFlagUntilTimeout>
 800525e:	1e03      	subs	r3, r0, #0
 8005260:	d001      	beq.n	8005266 <HAL_I2C_Master_Transmit+0x156>
        {
          return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e053      	b.n	800530e <HAL_I2C_Master_Transmit+0x1fe>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800526a:	b29b      	uxth	r3, r3
 800526c:	2bff      	cmp	r3, #255	; 0xff
 800526e:	d911      	bls.n	8005294 <HAL_I2C_Master_Transmit+0x184>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	22ff      	movs	r2, #255	; 0xff
 8005274:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800527a:	b2da      	uxtb	r2, r3
 800527c:	2380      	movs	r3, #128	; 0x80
 800527e:	045c      	lsls	r4, r3, #17
 8005280:	230a      	movs	r3, #10
 8005282:	18fb      	adds	r3, r7, r3
 8005284:	8819      	ldrh	r1, [r3, #0]
 8005286:	68f8      	ldr	r0, [r7, #12]
 8005288:	2300      	movs	r3, #0
 800528a:	9300      	str	r3, [sp, #0]
 800528c:	0023      	movs	r3, r4
 800528e:	f000 fb11 	bl	80058b4 <I2C_TransferConfig>
 8005292:	e012      	b.n	80052ba <HAL_I2C_Master_Transmit+0x1aa>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005298:	b29a      	uxth	r2, r3
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052a2:	b2da      	uxtb	r2, r3
 80052a4:	2380      	movs	r3, #128	; 0x80
 80052a6:	049c      	lsls	r4, r3, #18
 80052a8:	230a      	movs	r3, #10
 80052aa:	18fb      	adds	r3, r7, r3
 80052ac:	8819      	ldrh	r1, [r3, #0]
 80052ae:	68f8      	ldr	r0, [r7, #12]
 80052b0:	2300      	movs	r3, #0
 80052b2:	9300      	str	r3, [sp, #0]
 80052b4:	0023      	movs	r3, r4
 80052b6:	f000 fafd 	bl	80058b4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052be:	b29b      	uxth	r3, r3
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d198      	bne.n	80051f6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80052c4:	697a      	ldr	r2, [r7, #20]
 80052c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	0018      	movs	r0, r3
 80052cc:	f000 f9d0 	bl	8005670 <I2C_WaitOnSTOPFlagUntilTimeout>
 80052d0:	1e03      	subs	r3, r0, #0
 80052d2:	d001      	beq.n	80052d8 <HAL_I2C_Master_Transmit+0x1c8>
    {
      return HAL_ERROR;
 80052d4:	2301      	movs	r3, #1
 80052d6:	e01a      	b.n	800530e <HAL_I2C_Master_Transmit+0x1fe>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2220      	movs	r2, #32
 80052de:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	685a      	ldr	r2, [r3, #4]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	490c      	ldr	r1, [pc, #48]	; (800531c <HAL_I2C_Master_Transmit+0x20c>)
 80052ec:	400a      	ands	r2, r1
 80052ee:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2241      	movs	r2, #65	; 0x41
 80052f4:	2120      	movs	r1, #32
 80052f6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2242      	movs	r2, #66	; 0x42
 80052fc:	2100      	movs	r1, #0
 80052fe:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2240      	movs	r2, #64	; 0x40
 8005304:	2100      	movs	r1, #0
 8005306:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005308:	2300      	movs	r3, #0
 800530a:	e000      	b.n	800530e <HAL_I2C_Master_Transmit+0x1fe>
  }
  else
  {
    return HAL_BUSY;
 800530c:	2302      	movs	r3, #2
  }
}
 800530e:	0018      	movs	r0, r3
 8005310:	46bd      	mov	sp, r7
 8005312:	b007      	add	sp, #28
 8005314:	bd90      	pop	{r4, r7, pc}
 8005316:	46c0      	nop			; (mov r8, r8)
 8005318:	80002000 	.word	0x80002000
 800531c:	fe00e800 	.word	0xfe00e800

08005320 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005320:	b590      	push	{r4, r7, lr}
 8005322:	b089      	sub	sp, #36	; 0x24
 8005324:	af02      	add	r7, sp, #8
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	0008      	movs	r0, r1
 800532a:	607a      	str	r2, [r7, #4]
 800532c:	0019      	movs	r1, r3
 800532e:	230a      	movs	r3, #10
 8005330:	18fb      	adds	r3, r7, r3
 8005332:	1c02      	adds	r2, r0, #0
 8005334:	801a      	strh	r2, [r3, #0]
 8005336:	2308      	movs	r3, #8
 8005338:	18fb      	adds	r3, r7, r3
 800533a:	1c0a      	adds	r2, r1, #0
 800533c:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2241      	movs	r2, #65	; 0x41
 8005342:	5c9b      	ldrb	r3, [r3, r2]
 8005344:	b2db      	uxtb	r3, r3
 8005346:	2b20      	cmp	r3, #32
 8005348:	d000      	beq.n	800534c <HAL_I2C_Master_Receive+0x2c>
 800534a:	e0e8      	b.n	800551e <HAL_I2C_Master_Receive+0x1fe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	2240      	movs	r2, #64	; 0x40
 8005350:	5c9b      	ldrb	r3, [r3, r2]
 8005352:	2b01      	cmp	r3, #1
 8005354:	d101      	bne.n	800535a <HAL_I2C_Master_Receive+0x3a>
 8005356:	2302      	movs	r3, #2
 8005358:	e0e2      	b.n	8005520 <HAL_I2C_Master_Receive+0x200>
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2240      	movs	r2, #64	; 0x40
 800535e:	2101      	movs	r1, #1
 8005360:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005362:	f7ff fbc1 	bl	8004ae8 <HAL_GetTick>
 8005366:	0003      	movs	r3, r0
 8005368:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800536a:	2380      	movs	r3, #128	; 0x80
 800536c:	0219      	lsls	r1, r3, #8
 800536e:	68f8      	ldr	r0, [r7, #12]
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	9300      	str	r3, [sp, #0]
 8005374:	2319      	movs	r3, #25
 8005376:	2201      	movs	r2, #1
 8005378:	f000 f8fc 	bl	8005574 <I2C_WaitOnFlagUntilTimeout>
 800537c:	1e03      	subs	r3, r0, #0
 800537e:	d001      	beq.n	8005384 <HAL_I2C_Master_Receive+0x64>
    {
      return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e0cd      	b.n	8005520 <HAL_I2C_Master_Receive+0x200>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2241      	movs	r2, #65	; 0x41
 8005388:	2122      	movs	r1, #34	; 0x22
 800538a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2242      	movs	r2, #66	; 0x42
 8005390:	2110      	movs	r1, #16
 8005392:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2200      	movs	r2, #0
 8005398:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2208      	movs	r2, #8
 80053a4:	18ba      	adds	r2, r7, r2
 80053a6:	8812      	ldrh	r2, [r2, #0]
 80053a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2200      	movs	r2, #0
 80053ae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	2bff      	cmp	r3, #255	; 0xff
 80053b8:	d911      	bls.n	80053de <HAL_I2C_Master_Receive+0xbe>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	22ff      	movs	r2, #255	; 0xff
 80053be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053c4:	b2da      	uxtb	r2, r3
 80053c6:	2380      	movs	r3, #128	; 0x80
 80053c8:	045c      	lsls	r4, r3, #17
 80053ca:	230a      	movs	r3, #10
 80053cc:	18fb      	adds	r3, r7, r3
 80053ce:	8819      	ldrh	r1, [r3, #0]
 80053d0:	68f8      	ldr	r0, [r7, #12]
 80053d2:	4b55      	ldr	r3, [pc, #340]	; (8005528 <HAL_I2C_Master_Receive+0x208>)
 80053d4:	9300      	str	r3, [sp, #0]
 80053d6:	0023      	movs	r3, r4
 80053d8:	f000 fa6c 	bl	80058b4 <I2C_TransferConfig>
 80053dc:	e076      	b.n	80054cc <HAL_I2C_Master_Receive+0x1ac>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053e2:	b29a      	uxth	r2, r3
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053ec:	b2da      	uxtb	r2, r3
 80053ee:	2380      	movs	r3, #128	; 0x80
 80053f0:	049c      	lsls	r4, r3, #18
 80053f2:	230a      	movs	r3, #10
 80053f4:	18fb      	adds	r3, r7, r3
 80053f6:	8819      	ldrh	r1, [r3, #0]
 80053f8:	68f8      	ldr	r0, [r7, #12]
 80053fa:	4b4b      	ldr	r3, [pc, #300]	; (8005528 <HAL_I2C_Master_Receive+0x208>)
 80053fc:	9300      	str	r3, [sp, #0]
 80053fe:	0023      	movs	r3, r4
 8005400:	f000 fa58 	bl	80058b4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005404:	e062      	b.n	80054cc <HAL_I2C_Master_Receive+0x1ac>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005406:	697a      	ldr	r2, [r7, #20]
 8005408:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	0018      	movs	r0, r3
 800540e:	f000 f96b 	bl	80056e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005412:	1e03      	subs	r3, r0, #0
 8005414:	d001      	beq.n	800541a <HAL_I2C_Master_Receive+0xfa>
      {
        return HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	e082      	b.n	8005520 <HAL_I2C_Master_Receive+0x200>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005424:	b2d2      	uxtb	r2, r2
 8005426:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800542c:	1c5a      	adds	r2, r3, #1
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005436:	3b01      	subs	r3, #1
 8005438:	b29a      	uxth	r2, r3
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005442:	b29b      	uxth	r3, r3
 8005444:	3b01      	subs	r3, #1
 8005446:	b29a      	uxth	r2, r3
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005450:	b29b      	uxth	r3, r3
 8005452:	2b00      	cmp	r3, #0
 8005454:	d03a      	beq.n	80054cc <HAL_I2C_Master_Receive+0x1ac>
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800545a:	2b00      	cmp	r3, #0
 800545c:	d136      	bne.n	80054cc <HAL_I2C_Master_Receive+0x1ac>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800545e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005460:	68f8      	ldr	r0, [r7, #12]
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	9300      	str	r3, [sp, #0]
 8005466:	0013      	movs	r3, r2
 8005468:	2200      	movs	r2, #0
 800546a:	2180      	movs	r1, #128	; 0x80
 800546c:	f000 f882 	bl	8005574 <I2C_WaitOnFlagUntilTimeout>
 8005470:	1e03      	subs	r3, r0, #0
 8005472:	d001      	beq.n	8005478 <HAL_I2C_Master_Receive+0x158>
        {
          return HAL_ERROR;
 8005474:	2301      	movs	r3, #1
 8005476:	e053      	b.n	8005520 <HAL_I2C_Master_Receive+0x200>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800547c:	b29b      	uxth	r3, r3
 800547e:	2bff      	cmp	r3, #255	; 0xff
 8005480:	d911      	bls.n	80054a6 <HAL_I2C_Master_Receive+0x186>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	22ff      	movs	r2, #255	; 0xff
 8005486:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800548c:	b2da      	uxtb	r2, r3
 800548e:	2380      	movs	r3, #128	; 0x80
 8005490:	045c      	lsls	r4, r3, #17
 8005492:	230a      	movs	r3, #10
 8005494:	18fb      	adds	r3, r7, r3
 8005496:	8819      	ldrh	r1, [r3, #0]
 8005498:	68f8      	ldr	r0, [r7, #12]
 800549a:	2300      	movs	r3, #0
 800549c:	9300      	str	r3, [sp, #0]
 800549e:	0023      	movs	r3, r4
 80054a0:	f000 fa08 	bl	80058b4 <I2C_TransferConfig>
 80054a4:	e012      	b.n	80054cc <HAL_I2C_Master_Receive+0x1ac>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054aa:	b29a      	uxth	r2, r3
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80054b4:	b2da      	uxtb	r2, r3
 80054b6:	2380      	movs	r3, #128	; 0x80
 80054b8:	049c      	lsls	r4, r3, #18
 80054ba:	230a      	movs	r3, #10
 80054bc:	18fb      	adds	r3, r7, r3
 80054be:	8819      	ldrh	r1, [r3, #0]
 80054c0:	68f8      	ldr	r0, [r7, #12]
 80054c2:	2300      	movs	r3, #0
 80054c4:	9300      	str	r3, [sp, #0]
 80054c6:	0023      	movs	r3, r4
 80054c8:	f000 f9f4 	bl	80058b4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d197      	bne.n	8005406 <HAL_I2C_Master_Receive+0xe6>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054d6:	697a      	ldr	r2, [r7, #20]
 80054d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	0018      	movs	r0, r3
 80054de:	f000 f8c7 	bl	8005670 <I2C_WaitOnSTOPFlagUntilTimeout>
 80054e2:	1e03      	subs	r3, r0, #0
 80054e4:	d001      	beq.n	80054ea <HAL_I2C_Master_Receive+0x1ca>
    {
      return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e01a      	b.n	8005520 <HAL_I2C_Master_Receive+0x200>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	2220      	movs	r2, #32
 80054f0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	685a      	ldr	r2, [r3, #4]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	490b      	ldr	r1, [pc, #44]	; (800552c <HAL_I2C_Master_Receive+0x20c>)
 80054fe:	400a      	ands	r2, r1
 8005500:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	2241      	movs	r2, #65	; 0x41
 8005506:	2120      	movs	r1, #32
 8005508:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2242      	movs	r2, #66	; 0x42
 800550e:	2100      	movs	r1, #0
 8005510:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2240      	movs	r2, #64	; 0x40
 8005516:	2100      	movs	r1, #0
 8005518:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800551a:	2300      	movs	r3, #0
 800551c:	e000      	b.n	8005520 <HAL_I2C_Master_Receive+0x200>
  }
  else
  {
    return HAL_BUSY;
 800551e:	2302      	movs	r3, #2
  }
}
 8005520:	0018      	movs	r0, r3
 8005522:	46bd      	mov	sp, r7
 8005524:	b007      	add	sp, #28
 8005526:	bd90      	pop	{r4, r7, pc}
 8005528:	80002400 	.word	0x80002400
 800552c:	fe00e800 	.word	0xfe00e800

08005530 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b082      	sub	sp, #8
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	699b      	ldr	r3, [r3, #24]
 800553e:	2202      	movs	r2, #2
 8005540:	4013      	ands	r3, r2
 8005542:	2b02      	cmp	r3, #2
 8005544:	d103      	bne.n	800554e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2200      	movs	r2, #0
 800554c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	699b      	ldr	r3, [r3, #24]
 8005554:	2201      	movs	r2, #1
 8005556:	4013      	ands	r3, r2
 8005558:	2b01      	cmp	r3, #1
 800555a:	d007      	beq.n	800556c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	699a      	ldr	r2, [r3, #24]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	2101      	movs	r1, #1
 8005568:	430a      	orrs	r2, r1
 800556a:	619a      	str	r2, [r3, #24]
  }
}
 800556c:	46c0      	nop			; (mov r8, r8)
 800556e:	46bd      	mov	sp, r7
 8005570:	b002      	add	sp, #8
 8005572:	bd80      	pop	{r7, pc}

08005574 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b084      	sub	sp, #16
 8005578:	af00      	add	r7, sp, #0
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	60b9      	str	r1, [r7, #8]
 800557e:	603b      	str	r3, [r7, #0]
 8005580:	1dfb      	adds	r3, r7, #7
 8005582:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005584:	e021      	b.n	80055ca <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	3301      	adds	r3, #1
 800558a:	d01e      	beq.n	80055ca <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800558c:	f7ff faac 	bl	8004ae8 <HAL_GetTick>
 8005590:	0002      	movs	r2, r0
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	683a      	ldr	r2, [r7, #0]
 8005598:	429a      	cmp	r2, r3
 800559a:	d302      	bcc.n	80055a2 <I2C_WaitOnFlagUntilTimeout+0x2e>
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d113      	bne.n	80055ca <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055a6:	2220      	movs	r2, #32
 80055a8:	431a      	orrs	r2, r3
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2241      	movs	r2, #65	; 0x41
 80055b2:	2120      	movs	r1, #32
 80055b4:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2242      	movs	r2, #66	; 0x42
 80055ba:	2100      	movs	r1, #0
 80055bc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2240      	movs	r2, #64	; 0x40
 80055c2:	2100      	movs	r1, #0
 80055c4:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	e00f      	b.n	80055ea <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	699b      	ldr	r3, [r3, #24]
 80055d0:	68ba      	ldr	r2, [r7, #8]
 80055d2:	4013      	ands	r3, r2
 80055d4:	68ba      	ldr	r2, [r7, #8]
 80055d6:	1ad3      	subs	r3, r2, r3
 80055d8:	425a      	negs	r2, r3
 80055da:	4153      	adcs	r3, r2
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	001a      	movs	r2, r3
 80055e0:	1dfb      	adds	r3, r7, #7
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d0ce      	beq.n	8005586 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80055e8:	2300      	movs	r3, #0
}
 80055ea:	0018      	movs	r0, r3
 80055ec:	46bd      	mov	sp, r7
 80055ee:	b004      	add	sp, #16
 80055f0:	bd80      	pop	{r7, pc}

080055f2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80055f2:	b580      	push	{r7, lr}
 80055f4:	b084      	sub	sp, #16
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	60f8      	str	r0, [r7, #12]
 80055fa:	60b9      	str	r1, [r7, #8]
 80055fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80055fe:	e02b      	b.n	8005658 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8005600:	687a      	ldr	r2, [r7, #4]
 8005602:	68b9      	ldr	r1, [r7, #8]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	0018      	movs	r0, r3
 8005608:	f000 f8da 	bl	80057c0 <I2C_IsAcknowledgeFailed>
 800560c:	1e03      	subs	r3, r0, #0
 800560e:	d001      	beq.n	8005614 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	e029      	b.n	8005668 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	3301      	adds	r3, #1
 8005618:	d01e      	beq.n	8005658 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800561a:	f7ff fa65 	bl	8004ae8 <HAL_GetTick>
 800561e:	0002      	movs	r2, r0
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	1ad3      	subs	r3, r2, r3
 8005624:	68ba      	ldr	r2, [r7, #8]
 8005626:	429a      	cmp	r2, r3
 8005628:	d302      	bcc.n	8005630 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d113      	bne.n	8005658 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005634:	2220      	movs	r2, #32
 8005636:	431a      	orrs	r2, r3
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	2241      	movs	r2, #65	; 0x41
 8005640:	2120      	movs	r1, #32
 8005642:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2242      	movs	r2, #66	; 0x42
 8005648:	2100      	movs	r1, #0
 800564a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2240      	movs	r2, #64	; 0x40
 8005650:	2100      	movs	r1, #0
 8005652:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	e007      	b.n	8005668 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	699b      	ldr	r3, [r3, #24]
 800565e:	2202      	movs	r2, #2
 8005660:	4013      	ands	r3, r2
 8005662:	2b02      	cmp	r3, #2
 8005664:	d1cc      	bne.n	8005600 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005666:	2300      	movs	r3, #0
}
 8005668:	0018      	movs	r0, r3
 800566a:	46bd      	mov	sp, r7
 800566c:	b004      	add	sp, #16
 800566e:	bd80      	pop	{r7, pc}

08005670 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b084      	sub	sp, #16
 8005674:	af00      	add	r7, sp, #0
 8005676:	60f8      	str	r0, [r7, #12]
 8005678:	60b9      	str	r1, [r7, #8]
 800567a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800567c:	e028      	b.n	80056d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800567e:	687a      	ldr	r2, [r7, #4]
 8005680:	68b9      	ldr	r1, [r7, #8]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	0018      	movs	r0, r3
 8005686:	f000 f89b 	bl	80057c0 <I2C_IsAcknowledgeFailed>
 800568a:	1e03      	subs	r3, r0, #0
 800568c:	d001      	beq.n	8005692 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e026      	b.n	80056e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005692:	f7ff fa29 	bl	8004ae8 <HAL_GetTick>
 8005696:	0002      	movs	r2, r0
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	68ba      	ldr	r2, [r7, #8]
 800569e:	429a      	cmp	r2, r3
 80056a0:	d302      	bcc.n	80056a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d113      	bne.n	80056d0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056ac:	2220      	movs	r2, #32
 80056ae:	431a      	orrs	r2, r3
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2241      	movs	r2, #65	; 0x41
 80056b8:	2120      	movs	r1, #32
 80056ba:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2242      	movs	r2, #66	; 0x42
 80056c0:	2100      	movs	r1, #0
 80056c2:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2240      	movs	r2, #64	; 0x40
 80056c8:	2100      	movs	r1, #0
 80056ca:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	e007      	b.n	80056e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	699b      	ldr	r3, [r3, #24]
 80056d6:	2220      	movs	r2, #32
 80056d8:	4013      	ands	r3, r2
 80056da:	2b20      	cmp	r3, #32
 80056dc:	d1cf      	bne.n	800567e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80056de:	2300      	movs	r3, #0
}
 80056e0:	0018      	movs	r0, r3
 80056e2:	46bd      	mov	sp, r7
 80056e4:	b004      	add	sp, #16
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b084      	sub	sp, #16
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	60b9      	str	r1, [r7, #8]
 80056f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80056f4:	e055      	b.n	80057a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	68b9      	ldr	r1, [r7, #8]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	0018      	movs	r0, r3
 80056fe:	f000 f85f 	bl	80057c0 <I2C_IsAcknowledgeFailed>
 8005702:	1e03      	subs	r3, r0, #0
 8005704:	d001      	beq.n	800570a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e053      	b.n	80057b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	699b      	ldr	r3, [r3, #24]
 8005710:	2220      	movs	r2, #32
 8005712:	4013      	ands	r3, r2
 8005714:	2b20      	cmp	r3, #32
 8005716:	d129      	bne.n	800576c <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	699b      	ldr	r3, [r3, #24]
 800571e:	2204      	movs	r2, #4
 8005720:	4013      	ands	r3, r2
 8005722:	2b04      	cmp	r3, #4
 8005724:	d105      	bne.n	8005732 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800572a:	2b00      	cmp	r3, #0
 800572c:	d001      	beq.n	8005732 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800572e:	2300      	movs	r3, #0
 8005730:	e03f      	b.n	80057b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	2220      	movs	r2, #32
 8005738:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	685a      	ldr	r2, [r3, #4]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	491d      	ldr	r1, [pc, #116]	; (80057bc <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8005746:	400a      	ands	r2, r1
 8005748:	605a      	str	r2, [r3, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2200      	movs	r2, #0
 800574e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2241      	movs	r2, #65	; 0x41
 8005754:	2120      	movs	r1, #32
 8005756:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	2242      	movs	r2, #66	; 0x42
 800575c:	2100      	movs	r1, #0
 800575e:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2240      	movs	r2, #64	; 0x40
 8005764:	2100      	movs	r1, #0
 8005766:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	e022      	b.n	80057b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800576c:	f7ff f9bc 	bl	8004ae8 <HAL_GetTick>
 8005770:	0002      	movs	r2, r0
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	1ad3      	subs	r3, r2, r3
 8005776:	68ba      	ldr	r2, [r7, #8]
 8005778:	429a      	cmp	r2, r3
 800577a:	d302      	bcc.n	8005782 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d10f      	bne.n	80057a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005786:	2220      	movs	r2, #32
 8005788:	431a      	orrs	r2, r3
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2241      	movs	r2, #65	; 0x41
 8005792:	2120      	movs	r1, #32
 8005794:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2240      	movs	r2, #64	; 0x40
 800579a:	2100      	movs	r1, #0
 800579c:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e007      	b.n	80057b2 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	699b      	ldr	r3, [r3, #24]
 80057a8:	2204      	movs	r2, #4
 80057aa:	4013      	ands	r3, r2
 80057ac:	2b04      	cmp	r3, #4
 80057ae:	d1a2      	bne.n	80056f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80057b0:	2300      	movs	r3, #0
}
 80057b2:	0018      	movs	r0, r3
 80057b4:	46bd      	mov	sp, r7
 80057b6:	b004      	add	sp, #16
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	46c0      	nop			; (mov r8, r8)
 80057bc:	fe00e800 	.word	0xfe00e800

080057c0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b084      	sub	sp, #16
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	699b      	ldr	r3, [r3, #24]
 80057d2:	2210      	movs	r2, #16
 80057d4:	4013      	ands	r3, r2
 80057d6:	2b10      	cmp	r3, #16
 80057d8:	d164      	bne.n	80058a4 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	685a      	ldr	r2, [r3, #4]
 80057e0:	2380      	movs	r3, #128	; 0x80
 80057e2:	049b      	lsls	r3, r3, #18
 80057e4:	401a      	ands	r2, r3
 80057e6:	2380      	movs	r3, #128	; 0x80
 80057e8:	049b      	lsls	r3, r3, #18
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d02b      	beq.n	8005846 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	685a      	ldr	r2, [r3, #4]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	2180      	movs	r1, #128	; 0x80
 80057fa:	01c9      	lsls	r1, r1, #7
 80057fc:	430a      	orrs	r2, r1
 80057fe:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005800:	e021      	b.n	8005846 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	3301      	adds	r3, #1
 8005806:	d01e      	beq.n	8005846 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005808:	f7ff f96e 	bl	8004ae8 <HAL_GetTick>
 800580c:	0002      	movs	r2, r0
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	1ad3      	subs	r3, r2, r3
 8005812:	68ba      	ldr	r2, [r7, #8]
 8005814:	429a      	cmp	r2, r3
 8005816:	d302      	bcc.n	800581e <I2C_IsAcknowledgeFailed+0x5e>
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d113      	bne.n	8005846 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005822:	2220      	movs	r2, #32
 8005824:	431a      	orrs	r2, r3
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	2241      	movs	r2, #65	; 0x41
 800582e:	2120      	movs	r1, #32
 8005830:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2242      	movs	r2, #66	; 0x42
 8005836:	2100      	movs	r1, #0
 8005838:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2240      	movs	r2, #64	; 0x40
 800583e:	2100      	movs	r1, #0
 8005840:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e02f      	b.n	80058a6 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	699b      	ldr	r3, [r3, #24]
 800584c:	2220      	movs	r2, #32
 800584e:	4013      	ands	r3, r2
 8005850:	2b20      	cmp	r3, #32
 8005852:	d1d6      	bne.n	8005802 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	2210      	movs	r2, #16
 800585a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	2220      	movs	r2, #32
 8005862:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	0018      	movs	r0, r3
 8005868:	f7ff fe62 	bl	8005530 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	685a      	ldr	r2, [r3, #4]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	490e      	ldr	r1, [pc, #56]	; (80058b0 <I2C_IsAcknowledgeFailed+0xf0>)
 8005878:	400a      	ands	r2, r1
 800587a:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005880:	2204      	movs	r2, #4
 8005882:	431a      	orrs	r2, r3
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	2241      	movs	r2, #65	; 0x41
 800588c:	2120      	movs	r1, #32
 800588e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2242      	movs	r2, #66	; 0x42
 8005894:	2100      	movs	r1, #0
 8005896:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2240      	movs	r2, #64	; 0x40
 800589c:	2100      	movs	r1, #0
 800589e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	e000      	b.n	80058a6 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 80058a4:	2300      	movs	r3, #0
}
 80058a6:	0018      	movs	r0, r3
 80058a8:	46bd      	mov	sp, r7
 80058aa:	b004      	add	sp, #16
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	46c0      	nop			; (mov r8, r8)
 80058b0:	fe00e800 	.word	0xfe00e800

080058b4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80058b4:	b590      	push	{r4, r7, lr}
 80058b6:	b085      	sub	sp, #20
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	0008      	movs	r0, r1
 80058be:	0011      	movs	r1, r2
 80058c0:	607b      	str	r3, [r7, #4]
 80058c2:	240a      	movs	r4, #10
 80058c4:	193b      	adds	r3, r7, r4
 80058c6:	1c02      	adds	r2, r0, #0
 80058c8:	801a      	strh	r2, [r3, #0]
 80058ca:	2009      	movs	r0, #9
 80058cc:	183b      	adds	r3, r7, r0
 80058ce:	1c0a      	adds	r2, r1, #0
 80058d0:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	6a3a      	ldr	r2, [r7, #32]
 80058da:	0d51      	lsrs	r1, r2, #21
 80058dc:	2280      	movs	r2, #128	; 0x80
 80058de:	00d2      	lsls	r2, r2, #3
 80058e0:	400a      	ands	r2, r1
 80058e2:	490e      	ldr	r1, [pc, #56]	; (800591c <I2C_TransferConfig+0x68>)
 80058e4:	430a      	orrs	r2, r1
 80058e6:	43d2      	mvns	r2, r2
 80058e8:	401a      	ands	r2, r3
 80058ea:	0011      	movs	r1, r2
 80058ec:	193b      	adds	r3, r7, r4
 80058ee:	881b      	ldrh	r3, [r3, #0]
 80058f0:	059b      	lsls	r3, r3, #22
 80058f2:	0d9a      	lsrs	r2, r3, #22
 80058f4:	183b      	adds	r3, r7, r0
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	0418      	lsls	r0, r3, #16
 80058fa:	23ff      	movs	r3, #255	; 0xff
 80058fc:	041b      	lsls	r3, r3, #16
 80058fe:	4003      	ands	r3, r0
 8005900:	431a      	orrs	r2, r3
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	431a      	orrs	r2, r3
 8005906:	6a3b      	ldr	r3, [r7, #32]
 8005908:	431a      	orrs	r2, r3
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	430a      	orrs	r2, r1
 8005910:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8005912:	46c0      	nop			; (mov r8, r8)
 8005914:	46bd      	mov	sp, r7
 8005916:	b005      	add	sp, #20
 8005918:	bd90      	pop	{r4, r7, pc}
 800591a:	46c0      	nop			; (mov r8, r8)
 800591c:	03ff63ff 	.word	0x03ff63ff

08005920 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b082      	sub	sp, #8
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2241      	movs	r2, #65	; 0x41
 800592e:	5c9b      	ldrb	r3, [r3, r2]
 8005930:	b2db      	uxtb	r3, r3
 8005932:	2b20      	cmp	r3, #32
 8005934:	d138      	bne.n	80059a8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2240      	movs	r2, #64	; 0x40
 800593a:	5c9b      	ldrb	r3, [r3, r2]
 800593c:	2b01      	cmp	r3, #1
 800593e:	d101      	bne.n	8005944 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005940:	2302      	movs	r3, #2
 8005942:	e032      	b.n	80059aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2240      	movs	r2, #64	; 0x40
 8005948:	2101      	movs	r1, #1
 800594a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2241      	movs	r2, #65	; 0x41
 8005950:	2124      	movs	r1, #36	; 0x24
 8005952:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	2101      	movs	r1, #1
 8005960:	438a      	bics	r2, r1
 8005962:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	681a      	ldr	r2, [r3, #0]
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4911      	ldr	r1, [pc, #68]	; (80059b4 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8005970:	400a      	ands	r2, r1
 8005972:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	6819      	ldr	r1, [r3, #0]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	683a      	ldr	r2, [r7, #0]
 8005980:	430a      	orrs	r2, r1
 8005982:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	681a      	ldr	r2, [r3, #0]
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2101      	movs	r1, #1
 8005990:	430a      	orrs	r2, r1
 8005992:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2241      	movs	r2, #65	; 0x41
 8005998:	2120      	movs	r1, #32
 800599a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2240      	movs	r2, #64	; 0x40
 80059a0:	2100      	movs	r1, #0
 80059a2:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80059a4:	2300      	movs	r3, #0
 80059a6:	e000      	b.n	80059aa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80059a8:	2302      	movs	r3, #2
  }
}
 80059aa:	0018      	movs	r0, r3
 80059ac:	46bd      	mov	sp, r7
 80059ae:	b002      	add	sp, #8
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	46c0      	nop			; (mov r8, r8)
 80059b4:	ffffefff 	.word	0xffffefff

080059b8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2241      	movs	r2, #65	; 0x41
 80059c6:	5c9b      	ldrb	r3, [r3, r2]
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	2b20      	cmp	r3, #32
 80059cc:	d139      	bne.n	8005a42 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2240      	movs	r2, #64	; 0x40
 80059d2:	5c9b      	ldrb	r3, [r3, r2]
 80059d4:	2b01      	cmp	r3, #1
 80059d6:	d101      	bne.n	80059dc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80059d8:	2302      	movs	r3, #2
 80059da:	e033      	b.n	8005a44 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2240      	movs	r2, #64	; 0x40
 80059e0:	2101      	movs	r1, #1
 80059e2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2241      	movs	r2, #65	; 0x41
 80059e8:	2124      	movs	r1, #36	; 0x24
 80059ea:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	2101      	movs	r1, #1
 80059f8:	438a      	bics	r2, r1
 80059fa:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	4a11      	ldr	r2, [pc, #68]	; (8005a4c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8005a08:	4013      	ands	r3, r2
 8005a0a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	021b      	lsls	r3, r3, #8
 8005a10:	68fa      	ldr	r2, [r7, #12]
 8005a12:	4313      	orrs	r3, r2
 8005a14:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	68fa      	ldr	r2, [r7, #12]
 8005a1c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	2101      	movs	r1, #1
 8005a2a:	430a      	orrs	r2, r1
 8005a2c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2241      	movs	r2, #65	; 0x41
 8005a32:	2120      	movs	r1, #32
 8005a34:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2240      	movs	r2, #64	; 0x40
 8005a3a:	2100      	movs	r1, #0
 8005a3c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	e000      	b.n	8005a44 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005a42:	2302      	movs	r3, #2
  }
}
 8005a44:	0018      	movs	r0, r3
 8005a46:	46bd      	mov	sp, r7
 8005a48:	b004      	add	sp, #16
 8005a4a:	bd80      	pop	{r7, pc}
 8005a4c:	fffff0ff 	.word	0xfffff0ff

08005a50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a50:	b5b0      	push	{r4, r5, r7, lr}
 8005a52:	b08a      	sub	sp, #40	; 0x28
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d102      	bne.n	8005a64 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	f000 fb5a 	bl	8006118 <HAL_RCC_OscConfig+0x6c8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a64:	4bce      	ldr	r3, [pc, #824]	; (8005da0 <HAL_RCC_OscConfig+0x350>)
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	220c      	movs	r2, #12
 8005a6a:	4013      	ands	r3, r2
 8005a6c:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005a6e:	4bcc      	ldr	r3, [pc, #816]	; (8005da0 <HAL_RCC_OscConfig+0x350>)
 8005a70:	68da      	ldr	r2, [r3, #12]
 8005a72:	2380      	movs	r3, #128	; 0x80
 8005a74:	025b      	lsls	r3, r3, #9
 8005a76:	4013      	ands	r3, r2
 8005a78:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	4013      	ands	r3, r2
 8005a82:	d100      	bne.n	8005a86 <HAL_RCC_OscConfig+0x36>
 8005a84:	e07c      	b.n	8005b80 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005a86:	6a3b      	ldr	r3, [r7, #32]
 8005a88:	2b08      	cmp	r3, #8
 8005a8a:	d007      	beq.n	8005a9c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005a8c:	6a3b      	ldr	r3, [r7, #32]
 8005a8e:	2b0c      	cmp	r3, #12
 8005a90:	d111      	bne.n	8005ab6 <HAL_RCC_OscConfig+0x66>
 8005a92:	69fa      	ldr	r2, [r7, #28]
 8005a94:	2380      	movs	r3, #128	; 0x80
 8005a96:	025b      	lsls	r3, r3, #9
 8005a98:	429a      	cmp	r2, r3
 8005a9a:	d10c      	bne.n	8005ab6 <HAL_RCC_OscConfig+0x66>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a9c:	4bc0      	ldr	r3, [pc, #768]	; (8005da0 <HAL_RCC_OscConfig+0x350>)
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	2380      	movs	r3, #128	; 0x80
 8005aa2:	029b      	lsls	r3, r3, #10
 8005aa4:	4013      	ands	r3, r2
 8005aa6:	d100      	bne.n	8005aaa <HAL_RCC_OscConfig+0x5a>
 8005aa8:	e069      	b.n	8005b7e <HAL_RCC_OscConfig+0x12e>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d165      	bne.n	8005b7e <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e330      	b.n	8006118 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	685a      	ldr	r2, [r3, #4]
 8005aba:	2380      	movs	r3, #128	; 0x80
 8005abc:	025b      	lsls	r3, r3, #9
 8005abe:	429a      	cmp	r2, r3
 8005ac0:	d107      	bne.n	8005ad2 <HAL_RCC_OscConfig+0x82>
 8005ac2:	4bb7      	ldr	r3, [pc, #732]	; (8005da0 <HAL_RCC_OscConfig+0x350>)
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	4bb6      	ldr	r3, [pc, #728]	; (8005da0 <HAL_RCC_OscConfig+0x350>)
 8005ac8:	2180      	movs	r1, #128	; 0x80
 8005aca:	0249      	lsls	r1, r1, #9
 8005acc:	430a      	orrs	r2, r1
 8005ace:	601a      	str	r2, [r3, #0]
 8005ad0:	e027      	b.n	8005b22 <HAL_RCC_OscConfig+0xd2>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	685a      	ldr	r2, [r3, #4]
 8005ad6:	23a0      	movs	r3, #160	; 0xa0
 8005ad8:	02db      	lsls	r3, r3, #11
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d10e      	bne.n	8005afc <HAL_RCC_OscConfig+0xac>
 8005ade:	4bb0      	ldr	r3, [pc, #704]	; (8005da0 <HAL_RCC_OscConfig+0x350>)
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	4baf      	ldr	r3, [pc, #700]	; (8005da0 <HAL_RCC_OscConfig+0x350>)
 8005ae4:	2180      	movs	r1, #128	; 0x80
 8005ae6:	02c9      	lsls	r1, r1, #11
 8005ae8:	430a      	orrs	r2, r1
 8005aea:	601a      	str	r2, [r3, #0]
 8005aec:	4bac      	ldr	r3, [pc, #688]	; (8005da0 <HAL_RCC_OscConfig+0x350>)
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	4bab      	ldr	r3, [pc, #684]	; (8005da0 <HAL_RCC_OscConfig+0x350>)
 8005af2:	2180      	movs	r1, #128	; 0x80
 8005af4:	0249      	lsls	r1, r1, #9
 8005af6:	430a      	orrs	r2, r1
 8005af8:	601a      	str	r2, [r3, #0]
 8005afa:	e012      	b.n	8005b22 <HAL_RCC_OscConfig+0xd2>
 8005afc:	4ba8      	ldr	r3, [pc, #672]	; (8005da0 <HAL_RCC_OscConfig+0x350>)
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	4ba7      	ldr	r3, [pc, #668]	; (8005da0 <HAL_RCC_OscConfig+0x350>)
 8005b02:	49a8      	ldr	r1, [pc, #672]	; (8005da4 <HAL_RCC_OscConfig+0x354>)
 8005b04:	400a      	ands	r2, r1
 8005b06:	601a      	str	r2, [r3, #0]
 8005b08:	4ba5      	ldr	r3, [pc, #660]	; (8005da0 <HAL_RCC_OscConfig+0x350>)
 8005b0a:	681a      	ldr	r2, [r3, #0]
 8005b0c:	2380      	movs	r3, #128	; 0x80
 8005b0e:	025b      	lsls	r3, r3, #9
 8005b10:	4013      	ands	r3, r2
 8005b12:	60fb      	str	r3, [r7, #12]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	4ba2      	ldr	r3, [pc, #648]	; (8005da0 <HAL_RCC_OscConfig+0x350>)
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	4ba1      	ldr	r3, [pc, #644]	; (8005da0 <HAL_RCC_OscConfig+0x350>)
 8005b1c:	49a2      	ldr	r1, [pc, #648]	; (8005da8 <HAL_RCC_OscConfig+0x358>)
 8005b1e:	400a      	ands	r2, r1
 8005b20:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d014      	beq.n	8005b54 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b2a:	f7fe ffdd 	bl	8004ae8 <HAL_GetTick>
 8005b2e:	0003      	movs	r3, r0
 8005b30:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005b32:	e008      	b.n	8005b46 <HAL_RCC_OscConfig+0xf6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b34:	f7fe ffd8 	bl	8004ae8 <HAL_GetTick>
 8005b38:	0002      	movs	r2, r0
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	1ad3      	subs	r3, r2, r3
 8005b3e:	2b64      	cmp	r3, #100	; 0x64
 8005b40:	d901      	bls.n	8005b46 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005b42:	2303      	movs	r3, #3
 8005b44:	e2e8      	b.n	8006118 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005b46:	4b96      	ldr	r3, [pc, #600]	; (8005da0 <HAL_RCC_OscConfig+0x350>)
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	2380      	movs	r3, #128	; 0x80
 8005b4c:	029b      	lsls	r3, r3, #10
 8005b4e:	4013      	ands	r3, r2
 8005b50:	d0f0      	beq.n	8005b34 <HAL_RCC_OscConfig+0xe4>
 8005b52:	e015      	b.n	8005b80 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b54:	f7fe ffc8 	bl	8004ae8 <HAL_GetTick>
 8005b58:	0003      	movs	r3, r0
 8005b5a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005b5c:	e008      	b.n	8005b70 <HAL_RCC_OscConfig+0x120>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b5e:	f7fe ffc3 	bl	8004ae8 <HAL_GetTick>
 8005b62:	0002      	movs	r2, r0
 8005b64:	69bb      	ldr	r3, [r7, #24]
 8005b66:	1ad3      	subs	r3, r2, r3
 8005b68:	2b64      	cmp	r3, #100	; 0x64
 8005b6a:	d901      	bls.n	8005b70 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8005b6c:	2303      	movs	r3, #3
 8005b6e:	e2d3      	b.n	8006118 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005b70:	4b8b      	ldr	r3, [pc, #556]	; (8005da0 <HAL_RCC_OscConfig+0x350>)
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	2380      	movs	r3, #128	; 0x80
 8005b76:	029b      	lsls	r3, r3, #10
 8005b78:	4013      	ands	r3, r2
 8005b7a:	d1f0      	bne.n	8005b5e <HAL_RCC_OscConfig+0x10e>
 8005b7c:	e000      	b.n	8005b80 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b7e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	2202      	movs	r2, #2
 8005b86:	4013      	ands	r3, r2
 8005b88:	d100      	bne.n	8005b8c <HAL_RCC_OscConfig+0x13c>
 8005b8a:	e08b      	b.n	8005ca4 <HAL_RCC_OscConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005b92:	6a3b      	ldr	r3, [r7, #32]
 8005b94:	2b04      	cmp	r3, #4
 8005b96:	d005      	beq.n	8005ba4 <HAL_RCC_OscConfig+0x154>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005b98:	6a3b      	ldr	r3, [r7, #32]
 8005b9a:	2b0c      	cmp	r3, #12
 8005b9c:	d13e      	bne.n	8005c1c <HAL_RCC_OscConfig+0x1cc>
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d13b      	bne.n	8005c1c <HAL_RCC_OscConfig+0x1cc>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8005ba4:	4b7e      	ldr	r3, [pc, #504]	; (8005da0 <HAL_RCC_OscConfig+0x350>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	2204      	movs	r2, #4
 8005baa:	4013      	ands	r3, r2
 8005bac:	d004      	beq.n	8005bb8 <HAL_RCC_OscConfig+0x168>
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d101      	bne.n	8005bb8 <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e2af      	b.n	8006118 <HAL_RCC_OscConfig+0x6c8>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bb8:	4b79      	ldr	r3, [pc, #484]	; (8005da0 <HAL_RCC_OscConfig+0x350>)
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	4a7b      	ldr	r2, [pc, #492]	; (8005dac <HAL_RCC_OscConfig+0x35c>)
 8005bbe:	4013      	ands	r3, r2
 8005bc0:	0019      	movs	r1, r3
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	021a      	lsls	r2, r3, #8
 8005bc8:	4b75      	ldr	r3, [pc, #468]	; (8005da0 <HAL_RCC_OscConfig+0x350>)
 8005bca:	430a      	orrs	r2, r1
 8005bcc:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005bce:	4b74      	ldr	r3, [pc, #464]	; (8005da0 <HAL_RCC_OscConfig+0x350>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	2209      	movs	r2, #9
 8005bd4:	4393      	bics	r3, r2
 8005bd6:	0019      	movs	r1, r3
 8005bd8:	4b71      	ldr	r3, [pc, #452]	; (8005da0 <HAL_RCC_OscConfig+0x350>)
 8005bda:	697a      	ldr	r2, [r7, #20]
 8005bdc:	430a      	orrs	r2, r1
 8005bde:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005be0:	f000 fbe8 	bl	80063b4 <HAL_RCC_GetSysClockFreq>
 8005be4:	0001      	movs	r1, r0
 8005be6:	4b6e      	ldr	r3, [pc, #440]	; (8005da0 <HAL_RCC_OscConfig+0x350>)
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	091b      	lsrs	r3, r3, #4
 8005bec:	220f      	movs	r2, #15
 8005bee:	4013      	ands	r3, r2
 8005bf0:	4a6f      	ldr	r2, [pc, #444]	; (8005db0 <HAL_RCC_OscConfig+0x360>)
 8005bf2:	5cd3      	ldrb	r3, [r2, r3]
 8005bf4:	000a      	movs	r2, r1
 8005bf6:	40da      	lsrs	r2, r3
 8005bf8:	4b6e      	ldr	r3, [pc, #440]	; (8005db4 <HAL_RCC_OscConfig+0x364>)
 8005bfa:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8005bfc:	4b6e      	ldr	r3, [pc, #440]	; (8005db8 <HAL_RCC_OscConfig+0x368>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	2513      	movs	r5, #19
 8005c02:	197c      	adds	r4, r7, r5
 8005c04:	0018      	movs	r0, r3
 8005c06:	f7fe ff29 	bl	8004a5c <HAL_InitTick>
 8005c0a:	0003      	movs	r3, r0
 8005c0c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8005c0e:	197b      	adds	r3, r7, r5
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d046      	beq.n	8005ca4 <HAL_RCC_OscConfig+0x254>
      {
        return status;
 8005c16:	197b      	adds	r3, r7, r5
 8005c18:	781b      	ldrb	r3, [r3, #0]
 8005c1a:	e27d      	b.n	8006118 <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d027      	beq.n	8005c72 <HAL_RCC_OscConfig+0x222>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8005c22:	4b5f      	ldr	r3, [pc, #380]	; (8005da0 <HAL_RCC_OscConfig+0x350>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	2209      	movs	r2, #9
 8005c28:	4393      	bics	r3, r2
 8005c2a:	0019      	movs	r1, r3
 8005c2c:	4b5c      	ldr	r3, [pc, #368]	; (8005da0 <HAL_RCC_OscConfig+0x350>)
 8005c2e:	697a      	ldr	r2, [r7, #20]
 8005c30:	430a      	orrs	r2, r1
 8005c32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c34:	f7fe ff58 	bl	8004ae8 <HAL_GetTick>
 8005c38:	0003      	movs	r3, r0
 8005c3a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c3c:	e008      	b.n	8005c50 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c3e:	f7fe ff53 	bl	8004ae8 <HAL_GetTick>
 8005c42:	0002      	movs	r2, r0
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	1ad3      	subs	r3, r2, r3
 8005c48:	2b02      	cmp	r3, #2
 8005c4a:	d901      	bls.n	8005c50 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8005c4c:	2303      	movs	r3, #3
 8005c4e:	e263      	b.n	8006118 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005c50:	4b53      	ldr	r3, [pc, #332]	; (8005da0 <HAL_RCC_OscConfig+0x350>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	2204      	movs	r2, #4
 8005c56:	4013      	ands	r3, r2
 8005c58:	d0f1      	beq.n	8005c3e <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005c5a:	4b51      	ldr	r3, [pc, #324]	; (8005da0 <HAL_RCC_OscConfig+0x350>)
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	4a53      	ldr	r2, [pc, #332]	; (8005dac <HAL_RCC_OscConfig+0x35c>)
 8005c60:	4013      	ands	r3, r2
 8005c62:	0019      	movs	r1, r3
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	691b      	ldr	r3, [r3, #16]
 8005c68:	021a      	lsls	r2, r3, #8
 8005c6a:	4b4d      	ldr	r3, [pc, #308]	; (8005da0 <HAL_RCC_OscConfig+0x350>)
 8005c6c:	430a      	orrs	r2, r1
 8005c6e:	605a      	str	r2, [r3, #4]
 8005c70:	e018      	b.n	8005ca4 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005c72:	4b4b      	ldr	r3, [pc, #300]	; (8005da0 <HAL_RCC_OscConfig+0x350>)
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	4b4a      	ldr	r3, [pc, #296]	; (8005da0 <HAL_RCC_OscConfig+0x350>)
 8005c78:	2101      	movs	r1, #1
 8005c7a:	438a      	bics	r2, r1
 8005c7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c7e:	f7fe ff33 	bl	8004ae8 <HAL_GetTick>
 8005c82:	0003      	movs	r3, r0
 8005c84:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005c86:	e008      	b.n	8005c9a <HAL_RCC_OscConfig+0x24a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005c88:	f7fe ff2e 	bl	8004ae8 <HAL_GetTick>
 8005c8c:	0002      	movs	r2, r0
 8005c8e:	69bb      	ldr	r3, [r7, #24]
 8005c90:	1ad3      	subs	r3, r2, r3
 8005c92:	2b02      	cmp	r3, #2
 8005c94:	d901      	bls.n	8005c9a <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8005c96:	2303      	movs	r3, #3
 8005c98:	e23e      	b.n	8006118 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005c9a:	4b41      	ldr	r3, [pc, #260]	; (8005da0 <HAL_RCC_OscConfig+0x350>)
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	2204      	movs	r2, #4
 8005ca0:	4013      	ands	r3, r2
 8005ca2:	d1f1      	bne.n	8005c88 <HAL_RCC_OscConfig+0x238>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	2210      	movs	r2, #16
 8005caa:	4013      	ands	r3, r2
 8005cac:	d100      	bne.n	8005cb0 <HAL_RCC_OscConfig+0x260>
 8005cae:	e0a1      	b.n	8005df4 <HAL_RCC_OscConfig+0x3a4>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005cb0:	6a3b      	ldr	r3, [r7, #32]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d140      	bne.n	8005d38 <HAL_RCC_OscConfig+0x2e8>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005cb6:	4b3a      	ldr	r3, [pc, #232]	; (8005da0 <HAL_RCC_OscConfig+0x350>)
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	2380      	movs	r3, #128	; 0x80
 8005cbc:	009b      	lsls	r3, r3, #2
 8005cbe:	4013      	ands	r3, r2
 8005cc0:	d005      	beq.n	8005cce <HAL_RCC_OscConfig+0x27e>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	699b      	ldr	r3, [r3, #24]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d101      	bne.n	8005cce <HAL_RCC_OscConfig+0x27e>
      {
        return HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e224      	b.n	8006118 <HAL_RCC_OscConfig+0x6c8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005cce:	4b34      	ldr	r3, [pc, #208]	; (8005da0 <HAL_RCC_OscConfig+0x350>)
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	4a3a      	ldr	r2, [pc, #232]	; (8005dbc <HAL_RCC_OscConfig+0x36c>)
 8005cd4:	4013      	ands	r3, r2
 8005cd6:	0019      	movs	r1, r3
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6a1a      	ldr	r2, [r3, #32]
 8005cdc:	4b30      	ldr	r3, [pc, #192]	; (8005da0 <HAL_RCC_OscConfig+0x350>)
 8005cde:	430a      	orrs	r2, r1
 8005ce0:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005ce2:	4b2f      	ldr	r3, [pc, #188]	; (8005da0 <HAL_RCC_OscConfig+0x350>)
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	021b      	lsls	r3, r3, #8
 8005ce8:	0a19      	lsrs	r1, r3, #8
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	69db      	ldr	r3, [r3, #28]
 8005cee:	061a      	lsls	r2, r3, #24
 8005cf0:	4b2b      	ldr	r3, [pc, #172]	; (8005da0 <HAL_RCC_OscConfig+0x350>)
 8005cf2:	430a      	orrs	r2, r1
 8005cf4:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a1b      	ldr	r3, [r3, #32]
 8005cfa:	0b5b      	lsrs	r3, r3, #13
 8005cfc:	3301      	adds	r3, #1
 8005cfe:	2280      	movs	r2, #128	; 0x80
 8005d00:	0212      	lsls	r2, r2, #8
 8005d02:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8005d04:	4b26      	ldr	r3, [pc, #152]	; (8005da0 <HAL_RCC_OscConfig+0x350>)
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	091b      	lsrs	r3, r3, #4
 8005d0a:	210f      	movs	r1, #15
 8005d0c:	400b      	ands	r3, r1
 8005d0e:	4928      	ldr	r1, [pc, #160]	; (8005db0 <HAL_RCC_OscConfig+0x360>)
 8005d10:	5ccb      	ldrb	r3, [r1, r3]
 8005d12:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8005d14:	4b27      	ldr	r3, [pc, #156]	; (8005db4 <HAL_RCC_OscConfig+0x364>)
 8005d16:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8005d18:	4b27      	ldr	r3, [pc, #156]	; (8005db8 <HAL_RCC_OscConfig+0x368>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	2513      	movs	r5, #19
 8005d1e:	197c      	adds	r4, r7, r5
 8005d20:	0018      	movs	r0, r3
 8005d22:	f7fe fe9b 	bl	8004a5c <HAL_InitTick>
 8005d26:	0003      	movs	r3, r0
 8005d28:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8005d2a:	197b      	adds	r3, r7, r5
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d060      	beq.n	8005df4 <HAL_RCC_OscConfig+0x3a4>
        {
          return status;
 8005d32:	197b      	adds	r3, r7, r5
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	e1ef      	b.n	8006118 <HAL_RCC_OscConfig+0x6c8>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	699b      	ldr	r3, [r3, #24]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d03f      	beq.n	8005dc0 <HAL_RCC_OscConfig+0x370>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005d40:	4b17      	ldr	r3, [pc, #92]	; (8005da0 <HAL_RCC_OscConfig+0x350>)
 8005d42:	681a      	ldr	r2, [r3, #0]
 8005d44:	4b16      	ldr	r3, [pc, #88]	; (8005da0 <HAL_RCC_OscConfig+0x350>)
 8005d46:	2180      	movs	r1, #128	; 0x80
 8005d48:	0049      	lsls	r1, r1, #1
 8005d4a:	430a      	orrs	r2, r1
 8005d4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d4e:	f7fe fecb 	bl	8004ae8 <HAL_GetTick>
 8005d52:	0003      	movs	r3, r0
 8005d54:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005d56:	e008      	b.n	8005d6a <HAL_RCC_OscConfig+0x31a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005d58:	f7fe fec6 	bl	8004ae8 <HAL_GetTick>
 8005d5c:	0002      	movs	r2, r0
 8005d5e:	69bb      	ldr	r3, [r7, #24]
 8005d60:	1ad3      	subs	r3, r2, r3
 8005d62:	2b02      	cmp	r3, #2
 8005d64:	d901      	bls.n	8005d6a <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 8005d66:	2303      	movs	r3, #3
 8005d68:	e1d6      	b.n	8006118 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8005d6a:	4b0d      	ldr	r3, [pc, #52]	; (8005da0 <HAL_RCC_OscConfig+0x350>)
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	2380      	movs	r3, #128	; 0x80
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	4013      	ands	r3, r2
 8005d74:	d0f0      	beq.n	8005d58 <HAL_RCC_OscConfig+0x308>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005d76:	4b0a      	ldr	r3, [pc, #40]	; (8005da0 <HAL_RCC_OscConfig+0x350>)
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	4a10      	ldr	r2, [pc, #64]	; (8005dbc <HAL_RCC_OscConfig+0x36c>)
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	0019      	movs	r1, r3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6a1a      	ldr	r2, [r3, #32]
 8005d84:	4b06      	ldr	r3, [pc, #24]	; (8005da0 <HAL_RCC_OscConfig+0x350>)
 8005d86:	430a      	orrs	r2, r1
 8005d88:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005d8a:	4b05      	ldr	r3, [pc, #20]	; (8005da0 <HAL_RCC_OscConfig+0x350>)
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	021b      	lsls	r3, r3, #8
 8005d90:	0a19      	lsrs	r1, r3, #8
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	69db      	ldr	r3, [r3, #28]
 8005d96:	061a      	lsls	r2, r3, #24
 8005d98:	4b01      	ldr	r3, [pc, #4]	; (8005da0 <HAL_RCC_OscConfig+0x350>)
 8005d9a:	430a      	orrs	r2, r1
 8005d9c:	605a      	str	r2, [r3, #4]
 8005d9e:	e029      	b.n	8005df4 <HAL_RCC_OscConfig+0x3a4>
 8005da0:	40021000 	.word	0x40021000
 8005da4:	fffeffff 	.word	0xfffeffff
 8005da8:	fffbffff 	.word	0xfffbffff
 8005dac:	ffffe0ff 	.word	0xffffe0ff
 8005db0:	080076c8 	.word	0x080076c8
 8005db4:	20000004 	.word	0x20000004
 8005db8:	20000008 	.word	0x20000008
 8005dbc:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8005dc0:	4bbe      	ldr	r3, [pc, #760]	; (80060bc <HAL_RCC_OscConfig+0x66c>)
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	4bbd      	ldr	r3, [pc, #756]	; (80060bc <HAL_RCC_OscConfig+0x66c>)
 8005dc6:	49be      	ldr	r1, [pc, #760]	; (80060c0 <HAL_RCC_OscConfig+0x670>)
 8005dc8:	400a      	ands	r2, r1
 8005dca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005dcc:	f7fe fe8c 	bl	8004ae8 <HAL_GetTick>
 8005dd0:	0003      	movs	r3, r0
 8005dd2:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005dd4:	e008      	b.n	8005de8 <HAL_RCC_OscConfig+0x398>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005dd6:	f7fe fe87 	bl	8004ae8 <HAL_GetTick>
 8005dda:	0002      	movs	r2, r0
 8005ddc:	69bb      	ldr	r3, [r7, #24]
 8005dde:	1ad3      	subs	r3, r2, r3
 8005de0:	2b02      	cmp	r3, #2
 8005de2:	d901      	bls.n	8005de8 <HAL_RCC_OscConfig+0x398>
          {
            return HAL_TIMEOUT;
 8005de4:	2303      	movs	r3, #3
 8005de6:	e197      	b.n	8006118 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8005de8:	4bb4      	ldr	r3, [pc, #720]	; (80060bc <HAL_RCC_OscConfig+0x66c>)
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	2380      	movs	r3, #128	; 0x80
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	4013      	ands	r3, r2
 8005df2:	d1f0      	bne.n	8005dd6 <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	2208      	movs	r2, #8
 8005dfa:	4013      	ands	r3, r2
 8005dfc:	d036      	beq.n	8005e6c <HAL_RCC_OscConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	695b      	ldr	r3, [r3, #20]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d019      	beq.n	8005e3a <HAL_RCC_OscConfig+0x3ea>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e06:	4bad      	ldr	r3, [pc, #692]	; (80060bc <HAL_RCC_OscConfig+0x66c>)
 8005e08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005e0a:	4bac      	ldr	r3, [pc, #688]	; (80060bc <HAL_RCC_OscConfig+0x66c>)
 8005e0c:	2101      	movs	r1, #1
 8005e0e:	430a      	orrs	r2, r1
 8005e10:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e12:	f7fe fe69 	bl	8004ae8 <HAL_GetTick>
 8005e16:	0003      	movs	r3, r0
 8005e18:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005e1a:	e008      	b.n	8005e2e <HAL_RCC_OscConfig+0x3de>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e1c:	f7fe fe64 	bl	8004ae8 <HAL_GetTick>
 8005e20:	0002      	movs	r2, r0
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	1ad3      	subs	r3, r2, r3
 8005e26:	2b02      	cmp	r3, #2
 8005e28:	d901      	bls.n	8005e2e <HAL_RCC_OscConfig+0x3de>
        {
          return HAL_TIMEOUT;
 8005e2a:	2303      	movs	r3, #3
 8005e2c:	e174      	b.n	8006118 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005e2e:	4ba3      	ldr	r3, [pc, #652]	; (80060bc <HAL_RCC_OscConfig+0x66c>)
 8005e30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e32:	2202      	movs	r2, #2
 8005e34:	4013      	ands	r3, r2
 8005e36:	d0f1      	beq.n	8005e1c <HAL_RCC_OscConfig+0x3cc>
 8005e38:	e018      	b.n	8005e6c <HAL_RCC_OscConfig+0x41c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e3a:	4ba0      	ldr	r3, [pc, #640]	; (80060bc <HAL_RCC_OscConfig+0x66c>)
 8005e3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005e3e:	4b9f      	ldr	r3, [pc, #636]	; (80060bc <HAL_RCC_OscConfig+0x66c>)
 8005e40:	2101      	movs	r1, #1
 8005e42:	438a      	bics	r2, r1
 8005e44:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005e46:	f7fe fe4f 	bl	8004ae8 <HAL_GetTick>
 8005e4a:	0003      	movs	r3, r0
 8005e4c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005e4e:	e008      	b.n	8005e62 <HAL_RCC_OscConfig+0x412>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e50:	f7fe fe4a 	bl	8004ae8 <HAL_GetTick>
 8005e54:	0002      	movs	r2, r0
 8005e56:	69bb      	ldr	r3, [r7, #24]
 8005e58:	1ad3      	subs	r3, r2, r3
 8005e5a:	2b02      	cmp	r3, #2
 8005e5c:	d901      	bls.n	8005e62 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8005e5e:	2303      	movs	r3, #3
 8005e60:	e15a      	b.n	8006118 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005e62:	4b96      	ldr	r3, [pc, #600]	; (80060bc <HAL_RCC_OscConfig+0x66c>)
 8005e64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e66:	2202      	movs	r2, #2
 8005e68:	4013      	ands	r3, r2
 8005e6a:	d1f1      	bne.n	8005e50 <HAL_RCC_OscConfig+0x400>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	2204      	movs	r2, #4
 8005e72:	4013      	ands	r3, r2
 8005e74:	d100      	bne.n	8005e78 <HAL_RCC_OscConfig+0x428>
 8005e76:	e0ae      	b.n	8005fd6 <HAL_RCC_OscConfig+0x586>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e78:	2027      	movs	r0, #39	; 0x27
 8005e7a:	183b      	adds	r3, r7, r0
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e80:	4b8e      	ldr	r3, [pc, #568]	; (80060bc <HAL_RCC_OscConfig+0x66c>)
 8005e82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e84:	2380      	movs	r3, #128	; 0x80
 8005e86:	055b      	lsls	r3, r3, #21
 8005e88:	4013      	ands	r3, r2
 8005e8a:	d109      	bne.n	8005ea0 <HAL_RCC_OscConfig+0x450>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e8c:	4b8b      	ldr	r3, [pc, #556]	; (80060bc <HAL_RCC_OscConfig+0x66c>)
 8005e8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e90:	4b8a      	ldr	r3, [pc, #552]	; (80060bc <HAL_RCC_OscConfig+0x66c>)
 8005e92:	2180      	movs	r1, #128	; 0x80
 8005e94:	0549      	lsls	r1, r1, #21
 8005e96:	430a      	orrs	r2, r1
 8005e98:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8005e9a:	183b      	adds	r3, r7, r0
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ea0:	4b88      	ldr	r3, [pc, #544]	; (80060c4 <HAL_RCC_OscConfig+0x674>)
 8005ea2:	681a      	ldr	r2, [r3, #0]
 8005ea4:	2380      	movs	r3, #128	; 0x80
 8005ea6:	005b      	lsls	r3, r3, #1
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	d11a      	bne.n	8005ee2 <HAL_RCC_OscConfig+0x492>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005eac:	4b85      	ldr	r3, [pc, #532]	; (80060c4 <HAL_RCC_OscConfig+0x674>)
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	4b84      	ldr	r3, [pc, #528]	; (80060c4 <HAL_RCC_OscConfig+0x674>)
 8005eb2:	2180      	movs	r1, #128	; 0x80
 8005eb4:	0049      	lsls	r1, r1, #1
 8005eb6:	430a      	orrs	r2, r1
 8005eb8:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005eba:	f7fe fe15 	bl	8004ae8 <HAL_GetTick>
 8005ebe:	0003      	movs	r3, r0
 8005ec0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ec2:	e008      	b.n	8005ed6 <HAL_RCC_OscConfig+0x486>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ec4:	f7fe fe10 	bl	8004ae8 <HAL_GetTick>
 8005ec8:	0002      	movs	r2, r0
 8005eca:	69bb      	ldr	r3, [r7, #24]
 8005ecc:	1ad3      	subs	r3, r2, r3
 8005ece:	2b64      	cmp	r3, #100	; 0x64
 8005ed0:	d901      	bls.n	8005ed6 <HAL_RCC_OscConfig+0x486>
        {
          return HAL_TIMEOUT;
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	e120      	b.n	8006118 <HAL_RCC_OscConfig+0x6c8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ed6:	4b7b      	ldr	r3, [pc, #492]	; (80060c4 <HAL_RCC_OscConfig+0x674>)
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	2380      	movs	r3, #128	; 0x80
 8005edc:	005b      	lsls	r3, r3, #1
 8005ede:	4013      	ands	r3, r2
 8005ee0:	d0f0      	beq.n	8005ec4 <HAL_RCC_OscConfig+0x474>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	689a      	ldr	r2, [r3, #8]
 8005ee6:	2380      	movs	r3, #128	; 0x80
 8005ee8:	005b      	lsls	r3, r3, #1
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d107      	bne.n	8005efe <HAL_RCC_OscConfig+0x4ae>
 8005eee:	4b73      	ldr	r3, [pc, #460]	; (80060bc <HAL_RCC_OscConfig+0x66c>)
 8005ef0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005ef2:	4b72      	ldr	r3, [pc, #456]	; (80060bc <HAL_RCC_OscConfig+0x66c>)
 8005ef4:	2180      	movs	r1, #128	; 0x80
 8005ef6:	0049      	lsls	r1, r1, #1
 8005ef8:	430a      	orrs	r2, r1
 8005efa:	651a      	str	r2, [r3, #80]	; 0x50
 8005efc:	e031      	b.n	8005f62 <HAL_RCC_OscConfig+0x512>
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	689b      	ldr	r3, [r3, #8]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d10c      	bne.n	8005f20 <HAL_RCC_OscConfig+0x4d0>
 8005f06:	4b6d      	ldr	r3, [pc, #436]	; (80060bc <HAL_RCC_OscConfig+0x66c>)
 8005f08:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f0a:	4b6c      	ldr	r3, [pc, #432]	; (80060bc <HAL_RCC_OscConfig+0x66c>)
 8005f0c:	496c      	ldr	r1, [pc, #432]	; (80060c0 <HAL_RCC_OscConfig+0x670>)
 8005f0e:	400a      	ands	r2, r1
 8005f10:	651a      	str	r2, [r3, #80]	; 0x50
 8005f12:	4b6a      	ldr	r3, [pc, #424]	; (80060bc <HAL_RCC_OscConfig+0x66c>)
 8005f14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f16:	4b69      	ldr	r3, [pc, #420]	; (80060bc <HAL_RCC_OscConfig+0x66c>)
 8005f18:	496b      	ldr	r1, [pc, #428]	; (80060c8 <HAL_RCC_OscConfig+0x678>)
 8005f1a:	400a      	ands	r2, r1
 8005f1c:	651a      	str	r2, [r3, #80]	; 0x50
 8005f1e:	e020      	b.n	8005f62 <HAL_RCC_OscConfig+0x512>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	689a      	ldr	r2, [r3, #8]
 8005f24:	23a0      	movs	r3, #160	; 0xa0
 8005f26:	00db      	lsls	r3, r3, #3
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d10e      	bne.n	8005f4a <HAL_RCC_OscConfig+0x4fa>
 8005f2c:	4b63      	ldr	r3, [pc, #396]	; (80060bc <HAL_RCC_OscConfig+0x66c>)
 8005f2e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f30:	4b62      	ldr	r3, [pc, #392]	; (80060bc <HAL_RCC_OscConfig+0x66c>)
 8005f32:	2180      	movs	r1, #128	; 0x80
 8005f34:	00c9      	lsls	r1, r1, #3
 8005f36:	430a      	orrs	r2, r1
 8005f38:	651a      	str	r2, [r3, #80]	; 0x50
 8005f3a:	4b60      	ldr	r3, [pc, #384]	; (80060bc <HAL_RCC_OscConfig+0x66c>)
 8005f3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f3e:	4b5f      	ldr	r3, [pc, #380]	; (80060bc <HAL_RCC_OscConfig+0x66c>)
 8005f40:	2180      	movs	r1, #128	; 0x80
 8005f42:	0049      	lsls	r1, r1, #1
 8005f44:	430a      	orrs	r2, r1
 8005f46:	651a      	str	r2, [r3, #80]	; 0x50
 8005f48:	e00b      	b.n	8005f62 <HAL_RCC_OscConfig+0x512>
 8005f4a:	4b5c      	ldr	r3, [pc, #368]	; (80060bc <HAL_RCC_OscConfig+0x66c>)
 8005f4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f4e:	4b5b      	ldr	r3, [pc, #364]	; (80060bc <HAL_RCC_OscConfig+0x66c>)
 8005f50:	495b      	ldr	r1, [pc, #364]	; (80060c0 <HAL_RCC_OscConfig+0x670>)
 8005f52:	400a      	ands	r2, r1
 8005f54:	651a      	str	r2, [r3, #80]	; 0x50
 8005f56:	4b59      	ldr	r3, [pc, #356]	; (80060bc <HAL_RCC_OscConfig+0x66c>)
 8005f58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f5a:	4b58      	ldr	r3, [pc, #352]	; (80060bc <HAL_RCC_OscConfig+0x66c>)
 8005f5c:	495a      	ldr	r1, [pc, #360]	; (80060c8 <HAL_RCC_OscConfig+0x678>)
 8005f5e:	400a      	ands	r2, r1
 8005f60:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	689b      	ldr	r3, [r3, #8]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d015      	beq.n	8005f96 <HAL_RCC_OscConfig+0x546>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f6a:	f7fe fdbd 	bl	8004ae8 <HAL_GetTick>
 8005f6e:	0003      	movs	r3, r0
 8005f70:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f72:	e009      	b.n	8005f88 <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f74:	f7fe fdb8 	bl	8004ae8 <HAL_GetTick>
 8005f78:	0002      	movs	r2, r0
 8005f7a:	69bb      	ldr	r3, [r7, #24]
 8005f7c:	1ad3      	subs	r3, r2, r3
 8005f7e:	4a53      	ldr	r2, [pc, #332]	; (80060cc <HAL_RCC_OscConfig+0x67c>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d901      	bls.n	8005f88 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8005f84:	2303      	movs	r3, #3
 8005f86:	e0c7      	b.n	8006118 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f88:	4b4c      	ldr	r3, [pc, #304]	; (80060bc <HAL_RCC_OscConfig+0x66c>)
 8005f8a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005f8c:	2380      	movs	r3, #128	; 0x80
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	4013      	ands	r3, r2
 8005f92:	d0ef      	beq.n	8005f74 <HAL_RCC_OscConfig+0x524>
 8005f94:	e014      	b.n	8005fc0 <HAL_RCC_OscConfig+0x570>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f96:	f7fe fda7 	bl	8004ae8 <HAL_GetTick>
 8005f9a:	0003      	movs	r3, r0
 8005f9c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005f9e:	e009      	b.n	8005fb4 <HAL_RCC_OscConfig+0x564>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fa0:	f7fe fda2 	bl	8004ae8 <HAL_GetTick>
 8005fa4:	0002      	movs	r2, r0
 8005fa6:	69bb      	ldr	r3, [r7, #24]
 8005fa8:	1ad3      	subs	r3, r2, r3
 8005faa:	4a48      	ldr	r2, [pc, #288]	; (80060cc <HAL_RCC_OscConfig+0x67c>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d901      	bls.n	8005fb4 <HAL_RCC_OscConfig+0x564>
        {
          return HAL_TIMEOUT;
 8005fb0:	2303      	movs	r3, #3
 8005fb2:	e0b1      	b.n	8006118 <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005fb4:	4b41      	ldr	r3, [pc, #260]	; (80060bc <HAL_RCC_OscConfig+0x66c>)
 8005fb6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005fb8:	2380      	movs	r3, #128	; 0x80
 8005fba:	009b      	lsls	r3, r3, #2
 8005fbc:	4013      	ands	r3, r2
 8005fbe:	d1ef      	bne.n	8005fa0 <HAL_RCC_OscConfig+0x550>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8005fc0:	2327      	movs	r3, #39	; 0x27
 8005fc2:	18fb      	adds	r3, r7, r3
 8005fc4:	781b      	ldrb	r3, [r3, #0]
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d105      	bne.n	8005fd6 <HAL_RCC_OscConfig+0x586>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fca:	4b3c      	ldr	r3, [pc, #240]	; (80060bc <HAL_RCC_OscConfig+0x66c>)
 8005fcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005fce:	4b3b      	ldr	r3, [pc, #236]	; (80060bc <HAL_RCC_OscConfig+0x66c>)
 8005fd0:	493f      	ldr	r1, [pc, #252]	; (80060d0 <HAL_RCC_OscConfig+0x680>)
 8005fd2:	400a      	ands	r2, r1
 8005fd4:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d100      	bne.n	8005fe0 <HAL_RCC_OscConfig+0x590>
 8005fde:	e09a      	b.n	8006116 <HAL_RCC_OscConfig+0x6c6>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005fe0:	6a3b      	ldr	r3, [r7, #32]
 8005fe2:	2b0c      	cmp	r3, #12
 8005fe4:	d064      	beq.n	80060b0 <HAL_RCC_OscConfig+0x660>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fea:	2b02      	cmp	r3, #2
 8005fec:	d145      	bne.n	800607a <HAL_RCC_OscConfig+0x62a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005fee:	4b33      	ldr	r3, [pc, #204]	; (80060bc <HAL_RCC_OscConfig+0x66c>)
 8005ff0:	681a      	ldr	r2, [r3, #0]
 8005ff2:	4b32      	ldr	r3, [pc, #200]	; (80060bc <HAL_RCC_OscConfig+0x66c>)
 8005ff4:	4937      	ldr	r1, [pc, #220]	; (80060d4 <HAL_RCC_OscConfig+0x684>)
 8005ff6:	400a      	ands	r2, r1
 8005ff8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ffa:	f7fe fd75 	bl	8004ae8 <HAL_GetTick>
 8005ffe:	0003      	movs	r3, r0
 8006000:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006002:	e008      	b.n	8006016 <HAL_RCC_OscConfig+0x5c6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006004:	f7fe fd70 	bl	8004ae8 <HAL_GetTick>
 8006008:	0002      	movs	r2, r0
 800600a:	69bb      	ldr	r3, [r7, #24]
 800600c:	1ad3      	subs	r3, r2, r3
 800600e:	2b02      	cmp	r3, #2
 8006010:	d901      	bls.n	8006016 <HAL_RCC_OscConfig+0x5c6>
          {
            return HAL_TIMEOUT;
 8006012:	2303      	movs	r3, #3
 8006014:	e080      	b.n	8006118 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006016:	4b29      	ldr	r3, [pc, #164]	; (80060bc <HAL_RCC_OscConfig+0x66c>)
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	2380      	movs	r3, #128	; 0x80
 800601c:	049b      	lsls	r3, r3, #18
 800601e:	4013      	ands	r3, r2
 8006020:	d1f0      	bne.n	8006004 <HAL_RCC_OscConfig+0x5b4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006022:	4b26      	ldr	r3, [pc, #152]	; (80060bc <HAL_RCC_OscConfig+0x66c>)
 8006024:	68db      	ldr	r3, [r3, #12]
 8006026:	4a2c      	ldr	r2, [pc, #176]	; (80060d8 <HAL_RCC_OscConfig+0x688>)
 8006028:	4013      	ands	r3, r2
 800602a:	0019      	movs	r1, r3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006034:	431a      	orrs	r2, r3
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800603a:	431a      	orrs	r2, r3
 800603c:	4b1f      	ldr	r3, [pc, #124]	; (80060bc <HAL_RCC_OscConfig+0x66c>)
 800603e:	430a      	orrs	r2, r1
 8006040:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006042:	4b1e      	ldr	r3, [pc, #120]	; (80060bc <HAL_RCC_OscConfig+0x66c>)
 8006044:	681a      	ldr	r2, [r3, #0]
 8006046:	4b1d      	ldr	r3, [pc, #116]	; (80060bc <HAL_RCC_OscConfig+0x66c>)
 8006048:	2180      	movs	r1, #128	; 0x80
 800604a:	0449      	lsls	r1, r1, #17
 800604c:	430a      	orrs	r2, r1
 800604e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006050:	f7fe fd4a 	bl	8004ae8 <HAL_GetTick>
 8006054:	0003      	movs	r3, r0
 8006056:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8006058:	e008      	b.n	800606c <HAL_RCC_OscConfig+0x61c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800605a:	f7fe fd45 	bl	8004ae8 <HAL_GetTick>
 800605e:	0002      	movs	r2, r0
 8006060:	69bb      	ldr	r3, [r7, #24]
 8006062:	1ad3      	subs	r3, r2, r3
 8006064:	2b02      	cmp	r3, #2
 8006066:	d901      	bls.n	800606c <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 8006068:	2303      	movs	r3, #3
 800606a:	e055      	b.n	8006118 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800606c:	4b13      	ldr	r3, [pc, #76]	; (80060bc <HAL_RCC_OscConfig+0x66c>)
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	2380      	movs	r3, #128	; 0x80
 8006072:	049b      	lsls	r3, r3, #18
 8006074:	4013      	ands	r3, r2
 8006076:	d0f0      	beq.n	800605a <HAL_RCC_OscConfig+0x60a>
 8006078:	e04d      	b.n	8006116 <HAL_RCC_OscConfig+0x6c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800607a:	4b10      	ldr	r3, [pc, #64]	; (80060bc <HAL_RCC_OscConfig+0x66c>)
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	4b0f      	ldr	r3, [pc, #60]	; (80060bc <HAL_RCC_OscConfig+0x66c>)
 8006080:	4914      	ldr	r1, [pc, #80]	; (80060d4 <HAL_RCC_OscConfig+0x684>)
 8006082:	400a      	ands	r2, r1
 8006084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006086:	f7fe fd2f 	bl	8004ae8 <HAL_GetTick>
 800608a:	0003      	movs	r3, r0
 800608c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800608e:	e008      	b.n	80060a2 <HAL_RCC_OscConfig+0x652>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006090:	f7fe fd2a 	bl	8004ae8 <HAL_GetTick>
 8006094:	0002      	movs	r2, r0
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	1ad3      	subs	r3, r2, r3
 800609a:	2b02      	cmp	r3, #2
 800609c:	d901      	bls.n	80060a2 <HAL_RCC_OscConfig+0x652>
          {
            return HAL_TIMEOUT;
 800609e:	2303      	movs	r3, #3
 80060a0:	e03a      	b.n	8006118 <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80060a2:	4b06      	ldr	r3, [pc, #24]	; (80060bc <HAL_RCC_OscConfig+0x66c>)
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	2380      	movs	r3, #128	; 0x80
 80060a8:	049b      	lsls	r3, r3, #18
 80060aa:	4013      	ands	r3, r2
 80060ac:	d1f0      	bne.n	8006090 <HAL_RCC_OscConfig+0x640>
 80060ae:	e032      	b.n	8006116 <HAL_RCC_OscConfig+0x6c6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	d111      	bne.n	80060dc <HAL_RCC_OscConfig+0x68c>
      {
        return HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	e02d      	b.n	8006118 <HAL_RCC_OscConfig+0x6c8>
 80060bc:	40021000 	.word	0x40021000
 80060c0:	fffffeff 	.word	0xfffffeff
 80060c4:	40007000 	.word	0x40007000
 80060c8:	fffffbff 	.word	0xfffffbff
 80060cc:	00001388 	.word	0x00001388
 80060d0:	efffffff 	.word	0xefffffff
 80060d4:	feffffff 	.word	0xfeffffff
 80060d8:	ff02ffff 	.word	0xff02ffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80060dc:	4b10      	ldr	r3, [pc, #64]	; (8006120 <HAL_RCC_OscConfig+0x6d0>)
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060e2:	69fa      	ldr	r2, [r7, #28]
 80060e4:	2380      	movs	r3, #128	; 0x80
 80060e6:	025b      	lsls	r3, r3, #9
 80060e8:	401a      	ands	r2, r3
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d10f      	bne.n	8006112 <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80060f2:	69fa      	ldr	r2, [r7, #28]
 80060f4:	23f0      	movs	r3, #240	; 0xf0
 80060f6:	039b      	lsls	r3, r3, #14
 80060f8:	401a      	ands	r2, r3
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80060fe:	429a      	cmp	r2, r3
 8006100:	d107      	bne.n	8006112 <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8006102:	69fa      	ldr	r2, [r7, #28]
 8006104:	23c0      	movs	r3, #192	; 0xc0
 8006106:	041b      	lsls	r3, r3, #16
 8006108:	401a      	ands	r2, r3
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800610e:	429a      	cmp	r2, r3
 8006110:	d001      	beq.n	8006116 <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	e000      	b.n	8006118 <HAL_RCC_OscConfig+0x6c8>
        }
      }
    }
  }
  return HAL_OK;
 8006116:	2300      	movs	r3, #0
}
 8006118:	0018      	movs	r0, r3
 800611a:	46bd      	mov	sp, r7
 800611c:	b00a      	add	sp, #40	; 0x28
 800611e:	bdb0      	pop	{r4, r5, r7, pc}
 8006120:	40021000 	.word	0x40021000

08006124 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006124:	b5b0      	push	{r4, r5, r7, lr}
 8006126:	b084      	sub	sp, #16
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d101      	bne.n	8006138 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006134:	2301      	movs	r3, #1
 8006136:	e128      	b.n	800638a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006138:	4b96      	ldr	r3, [pc, #600]	; (8006394 <HAL_RCC_ClockConfig+0x270>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	2201      	movs	r2, #1
 800613e:	4013      	ands	r3, r2
 8006140:	683a      	ldr	r2, [r7, #0]
 8006142:	429a      	cmp	r2, r3
 8006144:	d91e      	bls.n	8006184 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006146:	4b93      	ldr	r3, [pc, #588]	; (8006394 <HAL_RCC_ClockConfig+0x270>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	2201      	movs	r2, #1
 800614c:	4393      	bics	r3, r2
 800614e:	0019      	movs	r1, r3
 8006150:	4b90      	ldr	r3, [pc, #576]	; (8006394 <HAL_RCC_ClockConfig+0x270>)
 8006152:	683a      	ldr	r2, [r7, #0]
 8006154:	430a      	orrs	r2, r1
 8006156:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006158:	f7fe fcc6 	bl	8004ae8 <HAL_GetTick>
 800615c:	0003      	movs	r3, r0
 800615e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006160:	e009      	b.n	8006176 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006162:	f7fe fcc1 	bl	8004ae8 <HAL_GetTick>
 8006166:	0002      	movs	r2, r0
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	1ad3      	subs	r3, r2, r3
 800616c:	4a8a      	ldr	r2, [pc, #552]	; (8006398 <HAL_RCC_ClockConfig+0x274>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d901      	bls.n	8006176 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8006172:	2303      	movs	r3, #3
 8006174:	e109      	b.n	800638a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006176:	4b87      	ldr	r3, [pc, #540]	; (8006394 <HAL_RCC_ClockConfig+0x270>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2201      	movs	r2, #1
 800617c:	4013      	ands	r3, r2
 800617e:	683a      	ldr	r2, [r7, #0]
 8006180:	429a      	cmp	r2, r3
 8006182:	d1ee      	bne.n	8006162 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	2202      	movs	r2, #2
 800618a:	4013      	ands	r3, r2
 800618c:	d009      	beq.n	80061a2 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800618e:	4b83      	ldr	r3, [pc, #524]	; (800639c <HAL_RCC_ClockConfig+0x278>)
 8006190:	68db      	ldr	r3, [r3, #12]
 8006192:	22f0      	movs	r2, #240	; 0xf0
 8006194:	4393      	bics	r3, r2
 8006196:	0019      	movs	r1, r3
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	689a      	ldr	r2, [r3, #8]
 800619c:	4b7f      	ldr	r3, [pc, #508]	; (800639c <HAL_RCC_ClockConfig+0x278>)
 800619e:	430a      	orrs	r2, r1
 80061a0:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	2201      	movs	r2, #1
 80061a8:	4013      	ands	r3, r2
 80061aa:	d100      	bne.n	80061ae <HAL_RCC_ClockConfig+0x8a>
 80061ac:	e089      	b.n	80062c2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	2b02      	cmp	r3, #2
 80061b4:	d107      	bne.n	80061c6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80061b6:	4b79      	ldr	r3, [pc, #484]	; (800639c <HAL_RCC_ClockConfig+0x278>)
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	2380      	movs	r3, #128	; 0x80
 80061bc:	029b      	lsls	r3, r3, #10
 80061be:	4013      	ands	r3, r2
 80061c0:	d120      	bne.n	8006204 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	e0e1      	b.n	800638a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	2b03      	cmp	r3, #3
 80061cc:	d107      	bne.n	80061de <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80061ce:	4b73      	ldr	r3, [pc, #460]	; (800639c <HAL_RCC_ClockConfig+0x278>)
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	2380      	movs	r3, #128	; 0x80
 80061d4:	049b      	lsls	r3, r3, #18
 80061d6:	4013      	ands	r3, r2
 80061d8:	d114      	bne.n	8006204 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	e0d5      	b.n	800638a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d106      	bne.n	80061f4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80061e6:	4b6d      	ldr	r3, [pc, #436]	; (800639c <HAL_RCC_ClockConfig+0x278>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	2204      	movs	r2, #4
 80061ec:	4013      	ands	r3, r2
 80061ee:	d109      	bne.n	8006204 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80061f0:	2301      	movs	r3, #1
 80061f2:	e0ca      	b.n	800638a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80061f4:	4b69      	ldr	r3, [pc, #420]	; (800639c <HAL_RCC_ClockConfig+0x278>)
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	2380      	movs	r3, #128	; 0x80
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	4013      	ands	r3, r2
 80061fe:	d101      	bne.n	8006204 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	e0c2      	b.n	800638a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006204:	4b65      	ldr	r3, [pc, #404]	; (800639c <HAL_RCC_ClockConfig+0x278>)
 8006206:	68db      	ldr	r3, [r3, #12]
 8006208:	2203      	movs	r2, #3
 800620a:	4393      	bics	r3, r2
 800620c:	0019      	movs	r1, r3
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	685a      	ldr	r2, [r3, #4]
 8006212:	4b62      	ldr	r3, [pc, #392]	; (800639c <HAL_RCC_ClockConfig+0x278>)
 8006214:	430a      	orrs	r2, r1
 8006216:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006218:	f7fe fc66 	bl	8004ae8 <HAL_GetTick>
 800621c:	0003      	movs	r3, r0
 800621e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	2b02      	cmp	r3, #2
 8006226:	d111      	bne.n	800624c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006228:	e009      	b.n	800623e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800622a:	f7fe fc5d 	bl	8004ae8 <HAL_GetTick>
 800622e:	0002      	movs	r2, r0
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	1ad3      	subs	r3, r2, r3
 8006234:	4a58      	ldr	r2, [pc, #352]	; (8006398 <HAL_RCC_ClockConfig+0x274>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d901      	bls.n	800623e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800623a:	2303      	movs	r3, #3
 800623c:	e0a5      	b.n	800638a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800623e:	4b57      	ldr	r3, [pc, #348]	; (800639c <HAL_RCC_ClockConfig+0x278>)
 8006240:	68db      	ldr	r3, [r3, #12]
 8006242:	220c      	movs	r2, #12
 8006244:	4013      	ands	r3, r2
 8006246:	2b08      	cmp	r3, #8
 8006248:	d1ef      	bne.n	800622a <HAL_RCC_ClockConfig+0x106>
 800624a:	e03a      	b.n	80062c2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	2b03      	cmp	r3, #3
 8006252:	d111      	bne.n	8006278 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006254:	e009      	b.n	800626a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006256:	f7fe fc47 	bl	8004ae8 <HAL_GetTick>
 800625a:	0002      	movs	r2, r0
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	1ad3      	subs	r3, r2, r3
 8006260:	4a4d      	ldr	r2, [pc, #308]	; (8006398 <HAL_RCC_ClockConfig+0x274>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d901      	bls.n	800626a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8006266:	2303      	movs	r3, #3
 8006268:	e08f      	b.n	800638a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800626a:	4b4c      	ldr	r3, [pc, #304]	; (800639c <HAL_RCC_ClockConfig+0x278>)
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	220c      	movs	r2, #12
 8006270:	4013      	ands	r3, r2
 8006272:	2b0c      	cmp	r3, #12
 8006274:	d1ef      	bne.n	8006256 <HAL_RCC_ClockConfig+0x132>
 8006276:	e024      	b.n	80062c2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	2b01      	cmp	r3, #1
 800627e:	d11b      	bne.n	80062b8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006280:	e009      	b.n	8006296 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006282:	f7fe fc31 	bl	8004ae8 <HAL_GetTick>
 8006286:	0002      	movs	r2, r0
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	1ad3      	subs	r3, r2, r3
 800628c:	4a42      	ldr	r2, [pc, #264]	; (8006398 <HAL_RCC_ClockConfig+0x274>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d901      	bls.n	8006296 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8006292:	2303      	movs	r3, #3
 8006294:	e079      	b.n	800638a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006296:	4b41      	ldr	r3, [pc, #260]	; (800639c <HAL_RCC_ClockConfig+0x278>)
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	220c      	movs	r2, #12
 800629c:	4013      	ands	r3, r2
 800629e:	2b04      	cmp	r3, #4
 80062a0:	d1ef      	bne.n	8006282 <HAL_RCC_ClockConfig+0x15e>
 80062a2:	e00e      	b.n	80062c2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062a4:	f7fe fc20 	bl	8004ae8 <HAL_GetTick>
 80062a8:	0002      	movs	r2, r0
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	1ad3      	subs	r3, r2, r3
 80062ae:	4a3a      	ldr	r2, [pc, #232]	; (8006398 <HAL_RCC_ClockConfig+0x274>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d901      	bls.n	80062b8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80062b4:	2303      	movs	r3, #3
 80062b6:	e068      	b.n	800638a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80062b8:	4b38      	ldr	r3, [pc, #224]	; (800639c <HAL_RCC_ClockConfig+0x278>)
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	220c      	movs	r2, #12
 80062be:	4013      	ands	r3, r2
 80062c0:	d1f0      	bne.n	80062a4 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80062c2:	4b34      	ldr	r3, [pc, #208]	; (8006394 <HAL_RCC_ClockConfig+0x270>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	2201      	movs	r2, #1
 80062c8:	4013      	ands	r3, r2
 80062ca:	683a      	ldr	r2, [r7, #0]
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d21e      	bcs.n	800630e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062d0:	4b30      	ldr	r3, [pc, #192]	; (8006394 <HAL_RCC_ClockConfig+0x270>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	2201      	movs	r2, #1
 80062d6:	4393      	bics	r3, r2
 80062d8:	0019      	movs	r1, r3
 80062da:	4b2e      	ldr	r3, [pc, #184]	; (8006394 <HAL_RCC_ClockConfig+0x270>)
 80062dc:	683a      	ldr	r2, [r7, #0]
 80062de:	430a      	orrs	r2, r1
 80062e0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80062e2:	f7fe fc01 	bl	8004ae8 <HAL_GetTick>
 80062e6:	0003      	movs	r3, r0
 80062e8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80062ea:	e009      	b.n	8006300 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062ec:	f7fe fbfc 	bl	8004ae8 <HAL_GetTick>
 80062f0:	0002      	movs	r2, r0
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	1ad3      	subs	r3, r2, r3
 80062f6:	4a28      	ldr	r2, [pc, #160]	; (8006398 <HAL_RCC_ClockConfig+0x274>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d901      	bls.n	8006300 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80062fc:	2303      	movs	r3, #3
 80062fe:	e044      	b.n	800638a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006300:	4b24      	ldr	r3, [pc, #144]	; (8006394 <HAL_RCC_ClockConfig+0x270>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	2201      	movs	r2, #1
 8006306:	4013      	ands	r3, r2
 8006308:	683a      	ldr	r2, [r7, #0]
 800630a:	429a      	cmp	r2, r3
 800630c:	d1ee      	bne.n	80062ec <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	2204      	movs	r2, #4
 8006314:	4013      	ands	r3, r2
 8006316:	d009      	beq.n	800632c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006318:	4b20      	ldr	r3, [pc, #128]	; (800639c <HAL_RCC_ClockConfig+0x278>)
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	4a20      	ldr	r2, [pc, #128]	; (80063a0 <HAL_RCC_ClockConfig+0x27c>)
 800631e:	4013      	ands	r3, r2
 8006320:	0019      	movs	r1, r3
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	68da      	ldr	r2, [r3, #12]
 8006326:	4b1d      	ldr	r3, [pc, #116]	; (800639c <HAL_RCC_ClockConfig+0x278>)
 8006328:	430a      	orrs	r2, r1
 800632a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	2208      	movs	r2, #8
 8006332:	4013      	ands	r3, r2
 8006334:	d00a      	beq.n	800634c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006336:	4b19      	ldr	r3, [pc, #100]	; (800639c <HAL_RCC_ClockConfig+0x278>)
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	4a1a      	ldr	r2, [pc, #104]	; (80063a4 <HAL_RCC_ClockConfig+0x280>)
 800633c:	4013      	ands	r3, r2
 800633e:	0019      	movs	r1, r3
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	691b      	ldr	r3, [r3, #16]
 8006344:	00da      	lsls	r2, r3, #3
 8006346:	4b15      	ldr	r3, [pc, #84]	; (800639c <HAL_RCC_ClockConfig+0x278>)
 8006348:	430a      	orrs	r2, r1
 800634a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800634c:	f000 f832 	bl	80063b4 <HAL_RCC_GetSysClockFreq>
 8006350:	0001      	movs	r1, r0
 8006352:	4b12      	ldr	r3, [pc, #72]	; (800639c <HAL_RCC_ClockConfig+0x278>)
 8006354:	68db      	ldr	r3, [r3, #12]
 8006356:	091b      	lsrs	r3, r3, #4
 8006358:	220f      	movs	r2, #15
 800635a:	4013      	ands	r3, r2
 800635c:	4a12      	ldr	r2, [pc, #72]	; (80063a8 <HAL_RCC_ClockConfig+0x284>)
 800635e:	5cd3      	ldrb	r3, [r2, r3]
 8006360:	000a      	movs	r2, r1
 8006362:	40da      	lsrs	r2, r3
 8006364:	4b11      	ldr	r3, [pc, #68]	; (80063ac <HAL_RCC_ClockConfig+0x288>)
 8006366:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8006368:	4b11      	ldr	r3, [pc, #68]	; (80063b0 <HAL_RCC_ClockConfig+0x28c>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	250b      	movs	r5, #11
 800636e:	197c      	adds	r4, r7, r5
 8006370:	0018      	movs	r0, r3
 8006372:	f7fe fb73 	bl	8004a5c <HAL_InitTick>
 8006376:	0003      	movs	r3, r0
 8006378:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800637a:	197b      	adds	r3, r7, r5
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d002      	beq.n	8006388 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8006382:	197b      	adds	r3, r7, r5
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	e000      	b.n	800638a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8006388:	2300      	movs	r3, #0
}
 800638a:	0018      	movs	r0, r3
 800638c:	46bd      	mov	sp, r7
 800638e:	b004      	add	sp, #16
 8006390:	bdb0      	pop	{r4, r5, r7, pc}
 8006392:	46c0      	nop			; (mov r8, r8)
 8006394:	40022000 	.word	0x40022000
 8006398:	00001388 	.word	0x00001388
 800639c:	40021000 	.word	0x40021000
 80063a0:	fffff8ff 	.word	0xfffff8ff
 80063a4:	ffffc7ff 	.word	0xffffc7ff
 80063a8:	080076c8 	.word	0x080076c8
 80063ac:	20000004 	.word	0x20000004
 80063b0:	20000008 	.word	0x20000008

080063b4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80063b4:	b5b0      	push	{r4, r5, r7, lr}
 80063b6:	b08e      	sub	sp, #56	; 0x38
 80063b8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80063ba:	4b4c      	ldr	r3, [pc, #304]	; (80064ec <HAL_RCC_GetSysClockFreq+0x138>)
 80063bc:	68db      	ldr	r3, [r3, #12]
 80063be:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80063c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063c2:	230c      	movs	r3, #12
 80063c4:	4013      	ands	r3, r2
 80063c6:	2b0c      	cmp	r3, #12
 80063c8:	d014      	beq.n	80063f4 <HAL_RCC_GetSysClockFreq+0x40>
 80063ca:	d900      	bls.n	80063ce <HAL_RCC_GetSysClockFreq+0x1a>
 80063cc:	e07b      	b.n	80064c6 <HAL_RCC_GetSysClockFreq+0x112>
 80063ce:	2b04      	cmp	r3, #4
 80063d0:	d002      	beq.n	80063d8 <HAL_RCC_GetSysClockFreq+0x24>
 80063d2:	2b08      	cmp	r3, #8
 80063d4:	d00b      	beq.n	80063ee <HAL_RCC_GetSysClockFreq+0x3a>
 80063d6:	e076      	b.n	80064c6 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80063d8:	4b44      	ldr	r3, [pc, #272]	; (80064ec <HAL_RCC_GetSysClockFreq+0x138>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	2210      	movs	r2, #16
 80063de:	4013      	ands	r3, r2
 80063e0:	d002      	beq.n	80063e8 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80063e2:	4b43      	ldr	r3, [pc, #268]	; (80064f0 <HAL_RCC_GetSysClockFreq+0x13c>)
 80063e4:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80063e6:	e07c      	b.n	80064e2 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80063e8:	4b42      	ldr	r3, [pc, #264]	; (80064f4 <HAL_RCC_GetSysClockFreq+0x140>)
 80063ea:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80063ec:	e079      	b.n	80064e2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80063ee:	4b42      	ldr	r3, [pc, #264]	; (80064f8 <HAL_RCC_GetSysClockFreq+0x144>)
 80063f0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80063f2:	e076      	b.n	80064e2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80063f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063f6:	0c9a      	lsrs	r2, r3, #18
 80063f8:	230f      	movs	r3, #15
 80063fa:	401a      	ands	r2, r3
 80063fc:	4b3f      	ldr	r3, [pc, #252]	; (80064fc <HAL_RCC_GetSysClockFreq+0x148>)
 80063fe:	5c9b      	ldrb	r3, [r3, r2]
 8006400:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8006402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006404:	0d9a      	lsrs	r2, r3, #22
 8006406:	2303      	movs	r3, #3
 8006408:	4013      	ands	r3, r2
 800640a:	3301      	adds	r3, #1
 800640c:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800640e:	4b37      	ldr	r3, [pc, #220]	; (80064ec <HAL_RCC_GetSysClockFreq+0x138>)
 8006410:	68da      	ldr	r2, [r3, #12]
 8006412:	2380      	movs	r3, #128	; 0x80
 8006414:	025b      	lsls	r3, r3, #9
 8006416:	4013      	ands	r3, r2
 8006418:	d01a      	beq.n	8006450 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800641a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800641c:	61bb      	str	r3, [r7, #24]
 800641e:	2300      	movs	r3, #0
 8006420:	61fb      	str	r3, [r7, #28]
 8006422:	4a35      	ldr	r2, [pc, #212]	; (80064f8 <HAL_RCC_GetSysClockFreq+0x144>)
 8006424:	2300      	movs	r3, #0
 8006426:	69b8      	ldr	r0, [r7, #24]
 8006428:	69f9      	ldr	r1, [r7, #28]
 800642a:	f7fa f841 	bl	80004b0 <__aeabi_lmul>
 800642e:	0002      	movs	r2, r0
 8006430:	000b      	movs	r3, r1
 8006432:	0010      	movs	r0, r2
 8006434:	0019      	movs	r1, r3
 8006436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006438:	613b      	str	r3, [r7, #16]
 800643a:	2300      	movs	r3, #0
 800643c:	617b      	str	r3, [r7, #20]
 800643e:	693a      	ldr	r2, [r7, #16]
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	f7fa f815 	bl	8000470 <__aeabi_uldivmod>
 8006446:	0002      	movs	r2, r0
 8006448:	000b      	movs	r3, r1
 800644a:	0013      	movs	r3, r2
 800644c:	637b      	str	r3, [r7, #52]	; 0x34
 800644e:	e037      	b.n	80064c0 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8006450:	4b26      	ldr	r3, [pc, #152]	; (80064ec <HAL_RCC_GetSysClockFreq+0x138>)
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	2210      	movs	r2, #16
 8006456:	4013      	ands	r3, r2
 8006458:	d01a      	beq.n	8006490 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800645a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800645c:	60bb      	str	r3, [r7, #8]
 800645e:	2300      	movs	r3, #0
 8006460:	60fb      	str	r3, [r7, #12]
 8006462:	4a23      	ldr	r2, [pc, #140]	; (80064f0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8006464:	2300      	movs	r3, #0
 8006466:	68b8      	ldr	r0, [r7, #8]
 8006468:	68f9      	ldr	r1, [r7, #12]
 800646a:	f7fa f821 	bl	80004b0 <__aeabi_lmul>
 800646e:	0002      	movs	r2, r0
 8006470:	000b      	movs	r3, r1
 8006472:	0010      	movs	r0, r2
 8006474:	0019      	movs	r1, r3
 8006476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006478:	603b      	str	r3, [r7, #0]
 800647a:	2300      	movs	r3, #0
 800647c:	607b      	str	r3, [r7, #4]
 800647e:	683a      	ldr	r2, [r7, #0]
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f7f9 fff5 	bl	8000470 <__aeabi_uldivmod>
 8006486:	0002      	movs	r2, r0
 8006488:	000b      	movs	r3, r1
 800648a:	0013      	movs	r3, r2
 800648c:	637b      	str	r3, [r7, #52]	; 0x34
 800648e:	e017      	b.n	80064c0 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8006490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006492:	0018      	movs	r0, r3
 8006494:	2300      	movs	r3, #0
 8006496:	0019      	movs	r1, r3
 8006498:	4a16      	ldr	r2, [pc, #88]	; (80064f4 <HAL_RCC_GetSysClockFreq+0x140>)
 800649a:	2300      	movs	r3, #0
 800649c:	f7fa f808 	bl	80004b0 <__aeabi_lmul>
 80064a0:	0002      	movs	r2, r0
 80064a2:	000b      	movs	r3, r1
 80064a4:	0010      	movs	r0, r2
 80064a6:	0019      	movs	r1, r3
 80064a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064aa:	001c      	movs	r4, r3
 80064ac:	2300      	movs	r3, #0
 80064ae:	001d      	movs	r5, r3
 80064b0:	0022      	movs	r2, r4
 80064b2:	002b      	movs	r3, r5
 80064b4:	f7f9 ffdc 	bl	8000470 <__aeabi_uldivmod>
 80064b8:	0002      	movs	r2, r0
 80064ba:	000b      	movs	r3, r1
 80064bc:	0013      	movs	r3, r2
 80064be:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80064c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064c2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80064c4:	e00d      	b.n	80064e2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80064c6:	4b09      	ldr	r3, [pc, #36]	; (80064ec <HAL_RCC_GetSysClockFreq+0x138>)
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	0b5b      	lsrs	r3, r3, #13
 80064cc:	2207      	movs	r2, #7
 80064ce:	4013      	ands	r3, r2
 80064d0:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80064d2:	6a3b      	ldr	r3, [r7, #32]
 80064d4:	3301      	adds	r3, #1
 80064d6:	2280      	movs	r2, #128	; 0x80
 80064d8:	0212      	lsls	r2, r2, #8
 80064da:	409a      	lsls	r2, r3
 80064dc:	0013      	movs	r3, r2
 80064de:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80064e0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80064e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80064e4:	0018      	movs	r0, r3
 80064e6:	46bd      	mov	sp, r7
 80064e8:	b00e      	add	sp, #56	; 0x38
 80064ea:	bdb0      	pop	{r4, r5, r7, pc}
 80064ec:	40021000 	.word	0x40021000
 80064f0:	003d0900 	.word	0x003d0900
 80064f4:	00f42400 	.word	0x00f42400
 80064f8:	007a1200 	.word	0x007a1200
 80064fc:	080076e0 	.word	0x080076e0

08006500 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006504:	4b02      	ldr	r3, [pc, #8]	; (8006510 <HAL_RCC_GetHCLKFreq+0x10>)
 8006506:	681b      	ldr	r3, [r3, #0]
}
 8006508:	0018      	movs	r0, r3
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
 800650e:	46c0      	nop			; (mov r8, r8)
 8006510:	20000004 	.word	0x20000004

08006514 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006518:	f7ff fff2 	bl	8006500 <HAL_RCC_GetHCLKFreq>
 800651c:	0001      	movs	r1, r0
 800651e:	4b06      	ldr	r3, [pc, #24]	; (8006538 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	0a1b      	lsrs	r3, r3, #8
 8006524:	2207      	movs	r2, #7
 8006526:	4013      	ands	r3, r2
 8006528:	4a04      	ldr	r2, [pc, #16]	; (800653c <HAL_RCC_GetPCLK1Freq+0x28>)
 800652a:	5cd3      	ldrb	r3, [r2, r3]
 800652c:	40d9      	lsrs	r1, r3
 800652e:	000b      	movs	r3, r1
}
 8006530:	0018      	movs	r0, r3
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
 8006536:	46c0      	nop			; (mov r8, r8)
 8006538:	40021000 	.word	0x40021000
 800653c:	080076d8 	.word	0x080076d8

08006540 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006544:	f7ff ffdc 	bl	8006500 <HAL_RCC_GetHCLKFreq>
 8006548:	0001      	movs	r1, r0
 800654a:	4b06      	ldr	r3, [pc, #24]	; (8006564 <HAL_RCC_GetPCLK2Freq+0x24>)
 800654c:	68db      	ldr	r3, [r3, #12]
 800654e:	0adb      	lsrs	r3, r3, #11
 8006550:	2207      	movs	r2, #7
 8006552:	4013      	ands	r3, r2
 8006554:	4a04      	ldr	r2, [pc, #16]	; (8006568 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006556:	5cd3      	ldrb	r3, [r2, r3]
 8006558:	40d9      	lsrs	r1, r3
 800655a:	000b      	movs	r3, r1
}
 800655c:	0018      	movs	r0, r3
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}
 8006562:	46c0      	nop			; (mov r8, r8)
 8006564:	40021000 	.word	0x40021000
 8006568:	080076d8 	.word	0x080076d8

0800656c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b086      	sub	sp, #24
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8006574:	2017      	movs	r0, #23
 8006576:	183b      	adds	r3, r7, r0
 8006578:	2200      	movs	r2, #0
 800657a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	2220      	movs	r2, #32
 8006582:	4013      	ands	r3, r2
 8006584:	d100      	bne.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8006586:	e0c2      	b.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006588:	4b89      	ldr	r3, [pc, #548]	; (80067b0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800658a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800658c:	2380      	movs	r3, #128	; 0x80
 800658e:	055b      	lsls	r3, r3, #21
 8006590:	4013      	ands	r3, r2
 8006592:	d109      	bne.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006594:	4b86      	ldr	r3, [pc, #536]	; (80067b0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8006596:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006598:	4b85      	ldr	r3, [pc, #532]	; (80067b0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800659a:	2180      	movs	r1, #128	; 0x80
 800659c:	0549      	lsls	r1, r1, #21
 800659e:	430a      	orrs	r2, r1
 80065a0:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80065a2:	183b      	adds	r3, r7, r0
 80065a4:	2201      	movs	r2, #1
 80065a6:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065a8:	4b82      	ldr	r3, [pc, #520]	; (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	2380      	movs	r3, #128	; 0x80
 80065ae:	005b      	lsls	r3, r3, #1
 80065b0:	4013      	ands	r3, r2
 80065b2:	d11a      	bne.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80065b4:	4b7f      	ldr	r3, [pc, #508]	; (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	4b7e      	ldr	r3, [pc, #504]	; (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80065ba:	2180      	movs	r1, #128	; 0x80
 80065bc:	0049      	lsls	r1, r1, #1
 80065be:	430a      	orrs	r2, r1
 80065c0:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80065c2:	f7fe fa91 	bl	8004ae8 <HAL_GetTick>
 80065c6:	0003      	movs	r3, r0
 80065c8:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065ca:	e008      	b.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065cc:	f7fe fa8c 	bl	8004ae8 <HAL_GetTick>
 80065d0:	0002      	movs	r2, r0
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	1ad3      	subs	r3, r2, r3
 80065d6:	2b64      	cmp	r3, #100	; 0x64
 80065d8:	d901      	bls.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80065da:	2303      	movs	r3, #3
 80065dc:	e0e3      	b.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065de:	4b75      	ldr	r3, [pc, #468]	; (80067b4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	2380      	movs	r3, #128	; 0x80
 80065e4:	005b      	lsls	r3, r3, #1
 80065e6:	4013      	ands	r3, r2
 80065e8:	d0f0      	beq.n	80065cc <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80065ea:	4b71      	ldr	r3, [pc, #452]	; (80067b0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	23c0      	movs	r3, #192	; 0xc0
 80065f0:	039b      	lsls	r3, r3, #14
 80065f2:	4013      	ands	r3, r2
 80065f4:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	685a      	ldr	r2, [r3, #4]
 80065fa:	23c0      	movs	r3, #192	; 0xc0
 80065fc:	039b      	lsls	r3, r3, #14
 80065fe:	4013      	ands	r3, r2
 8006600:	68fa      	ldr	r2, [r7, #12]
 8006602:	429a      	cmp	r2, r3
 8006604:	d013      	beq.n	800662e <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	685a      	ldr	r2, [r3, #4]
 800660a:	23c0      	movs	r3, #192	; 0xc0
 800660c:	029b      	lsls	r3, r3, #10
 800660e:	401a      	ands	r2, r3
 8006610:	23c0      	movs	r3, #192	; 0xc0
 8006612:	029b      	lsls	r3, r3, #10
 8006614:	429a      	cmp	r2, r3
 8006616:	d10a      	bne.n	800662e <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006618:	4b65      	ldr	r3, [pc, #404]	; (80067b0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	2380      	movs	r3, #128	; 0x80
 800661e:	029b      	lsls	r3, r3, #10
 8006620:	401a      	ands	r2, r3
 8006622:	2380      	movs	r3, #128	; 0x80
 8006624:	029b      	lsls	r3, r3, #10
 8006626:	429a      	cmp	r2, r3
 8006628:	d101      	bne.n	800662e <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	e0bb      	b.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800662e:	4b60      	ldr	r3, [pc, #384]	; (80067b0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8006630:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006632:	23c0      	movs	r3, #192	; 0xc0
 8006634:	029b      	lsls	r3, r3, #10
 8006636:	4013      	ands	r3, r2
 8006638:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d03b      	beq.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	685a      	ldr	r2, [r3, #4]
 8006644:	23c0      	movs	r3, #192	; 0xc0
 8006646:	029b      	lsls	r3, r3, #10
 8006648:	4013      	ands	r3, r2
 800664a:	68fa      	ldr	r2, [r7, #12]
 800664c:	429a      	cmp	r2, r3
 800664e:	d033      	beq.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	2220      	movs	r2, #32
 8006656:	4013      	ands	r3, r2
 8006658:	d02e      	beq.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800665a:	4b55      	ldr	r3, [pc, #340]	; (80067b0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800665c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800665e:	4a56      	ldr	r2, [pc, #344]	; (80067b8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8006660:	4013      	ands	r3, r2
 8006662:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006664:	4b52      	ldr	r3, [pc, #328]	; (80067b0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8006666:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006668:	4b51      	ldr	r3, [pc, #324]	; (80067b0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800666a:	2180      	movs	r1, #128	; 0x80
 800666c:	0309      	lsls	r1, r1, #12
 800666e:	430a      	orrs	r2, r1
 8006670:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006672:	4b4f      	ldr	r3, [pc, #316]	; (80067b0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8006674:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006676:	4b4e      	ldr	r3, [pc, #312]	; (80067b0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8006678:	4950      	ldr	r1, [pc, #320]	; (80067bc <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800667a:	400a      	ands	r2, r1
 800667c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800667e:	4b4c      	ldr	r3, [pc, #304]	; (80067b0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8006680:	68fa      	ldr	r2, [r7, #12]
 8006682:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8006684:	68fa      	ldr	r2, [r7, #12]
 8006686:	2380      	movs	r3, #128	; 0x80
 8006688:	005b      	lsls	r3, r3, #1
 800668a:	4013      	ands	r3, r2
 800668c:	d014      	beq.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800668e:	f7fe fa2b 	bl	8004ae8 <HAL_GetTick>
 8006692:	0003      	movs	r3, r0
 8006694:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006696:	e009      	b.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006698:	f7fe fa26 	bl	8004ae8 <HAL_GetTick>
 800669c:	0002      	movs	r2, r0
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	1ad3      	subs	r3, r2, r3
 80066a2:	4a47      	ldr	r2, [pc, #284]	; (80067c0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d901      	bls.n	80066ac <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 80066a8:	2303      	movs	r3, #3
 80066aa:	e07c      	b.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0x23a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80066ac:	4b40      	ldr	r3, [pc, #256]	; (80067b0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80066ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80066b0:	2380      	movs	r3, #128	; 0x80
 80066b2:	009b      	lsls	r3, r3, #2
 80066b4:	4013      	ands	r3, r2
 80066b6:	d0ef      	beq.n	8006698 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	685a      	ldr	r2, [r3, #4]
 80066bc:	23c0      	movs	r3, #192	; 0xc0
 80066be:	029b      	lsls	r3, r3, #10
 80066c0:	401a      	ands	r2, r3
 80066c2:	23c0      	movs	r3, #192	; 0xc0
 80066c4:	029b      	lsls	r3, r3, #10
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d10c      	bne.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x178>
 80066ca:	4b39      	ldr	r3, [pc, #228]	; (80067b0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a3d      	ldr	r2, [pc, #244]	; (80067c4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80066d0:	4013      	ands	r3, r2
 80066d2:	0019      	movs	r1, r3
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	685a      	ldr	r2, [r3, #4]
 80066d8:	23c0      	movs	r3, #192	; 0xc0
 80066da:	039b      	lsls	r3, r3, #14
 80066dc:	401a      	ands	r2, r3
 80066de:	4b34      	ldr	r3, [pc, #208]	; (80067b0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80066e0:	430a      	orrs	r2, r1
 80066e2:	601a      	str	r2, [r3, #0]
 80066e4:	4b32      	ldr	r3, [pc, #200]	; (80067b0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80066e6:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	685a      	ldr	r2, [r3, #4]
 80066ec:	23c0      	movs	r3, #192	; 0xc0
 80066ee:	029b      	lsls	r3, r3, #10
 80066f0:	401a      	ands	r2, r3
 80066f2:	4b2f      	ldr	r3, [pc, #188]	; (80067b0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80066f4:	430a      	orrs	r2, r1
 80066f6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80066f8:	2317      	movs	r3, #23
 80066fa:	18fb      	adds	r3, r7, r3
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d105      	bne.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006702:	4b2b      	ldr	r3, [pc, #172]	; (80067b0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8006704:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006706:	4b2a      	ldr	r3, [pc, #168]	; (80067b0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8006708:	492f      	ldr	r1, [pc, #188]	; (80067c8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800670a:	400a      	ands	r2, r1
 800670c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	2201      	movs	r2, #1
 8006714:	4013      	ands	r3, r2
 8006716:	d009      	beq.n	800672c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006718:	4b25      	ldr	r3, [pc, #148]	; (80067b0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800671a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800671c:	2203      	movs	r2, #3
 800671e:	4393      	bics	r3, r2
 8006720:	0019      	movs	r1, r3
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	689a      	ldr	r2, [r3, #8]
 8006726:	4b22      	ldr	r3, [pc, #136]	; (80067b0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8006728:	430a      	orrs	r2, r1
 800672a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	2202      	movs	r2, #2
 8006732:	4013      	ands	r3, r2
 8006734:	d009      	beq.n	800674a <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006736:	4b1e      	ldr	r3, [pc, #120]	; (80067b0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8006738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800673a:	220c      	movs	r2, #12
 800673c:	4393      	bics	r3, r2
 800673e:	0019      	movs	r1, r3
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	68da      	ldr	r2, [r3, #12]
 8006744:	4b1a      	ldr	r3, [pc, #104]	; (80067b0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8006746:	430a      	orrs	r2, r1
 8006748:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	2204      	movs	r2, #4
 8006750:	4013      	ands	r3, r2
 8006752:	d009      	beq.n	8006768 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006754:	4b16      	ldr	r3, [pc, #88]	; (80067b0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8006756:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006758:	4a1c      	ldr	r2, [pc, #112]	; (80067cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800675a:	4013      	ands	r3, r2
 800675c:	0019      	movs	r1, r3
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	691a      	ldr	r2, [r3, #16]
 8006762:	4b13      	ldr	r3, [pc, #76]	; (80067b0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8006764:	430a      	orrs	r2, r1
 8006766:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	2208      	movs	r2, #8
 800676e:	4013      	ands	r3, r2
 8006770:	d009      	beq.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006772:	4b0f      	ldr	r3, [pc, #60]	; (80067b0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8006774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006776:	4a16      	ldr	r2, [pc, #88]	; (80067d0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8006778:	4013      	ands	r3, r2
 800677a:	0019      	movs	r1, r3
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	695a      	ldr	r2, [r3, #20]
 8006780:	4b0b      	ldr	r3, [pc, #44]	; (80067b0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8006782:	430a      	orrs	r2, r1
 8006784:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	2280      	movs	r2, #128	; 0x80
 800678c:	4013      	ands	r3, r2
 800678e:	d009      	beq.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8006790:	4b07      	ldr	r3, [pc, #28]	; (80067b0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8006792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006794:	4a0f      	ldr	r2, [pc, #60]	; (80067d4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8006796:	4013      	ands	r3, r2
 8006798:	0019      	movs	r1, r3
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	699a      	ldr	r2, [r3, #24]
 800679e:	4b04      	ldr	r3, [pc, #16]	; (80067b0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80067a0:	430a      	orrs	r2, r1
 80067a2:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80067a4:	2300      	movs	r3, #0
}
 80067a6:	0018      	movs	r0, r3
 80067a8:	46bd      	mov	sp, r7
 80067aa:	b006      	add	sp, #24
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	46c0      	nop			; (mov r8, r8)
 80067b0:	40021000 	.word	0x40021000
 80067b4:	40007000 	.word	0x40007000
 80067b8:	fffcffff 	.word	0xfffcffff
 80067bc:	fff7ffff 	.word	0xfff7ffff
 80067c0:	00001388 	.word	0x00001388
 80067c4:	ffcfffff 	.word	0xffcfffff
 80067c8:	efffffff 	.word	0xefffffff
 80067cc:	fffff3ff 	.word	0xfffff3ff
 80067d0:	ffffcfff 	.word	0xffffcfff
 80067d4:	fff3ffff 	.word	0xfff3ffff

080067d8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b082      	sub	sp, #8
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d101      	bne.n	80067ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	e044      	b.n	8006874 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d107      	bne.n	8006802 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2274      	movs	r2, #116	; 0x74
 80067f6:	2100      	movs	r1, #0
 80067f8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	0018      	movs	r0, r3
 80067fe:	f7fe f86d 	bl	80048dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	2224      	movs	r2, #36	; 0x24
 8006806:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	681a      	ldr	r2, [r3, #0]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	2101      	movs	r1, #1
 8006814:	438a      	bics	r2, r1
 8006816:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	0018      	movs	r0, r3
 800681c:	f000 f8d8 	bl	80069d0 <UART_SetConfig>
 8006820:	0003      	movs	r3, r0
 8006822:	2b01      	cmp	r3, #1
 8006824:	d101      	bne.n	800682a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	e024      	b.n	8006874 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800682e:	2b00      	cmp	r3, #0
 8006830:	d003      	beq.n	800683a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	0018      	movs	r0, r3
 8006836:	f000 fb6b 	bl	8006f10 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	685a      	ldr	r2, [r3, #4]
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	490d      	ldr	r1, [pc, #52]	; (800687c <HAL_UART_Init+0xa4>)
 8006846:	400a      	ands	r2, r1
 8006848:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	689a      	ldr	r2, [r3, #8]
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	212a      	movs	r1, #42	; 0x2a
 8006856:	438a      	bics	r2, r1
 8006858:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	2101      	movs	r1, #1
 8006866:	430a      	orrs	r2, r1
 8006868:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	0018      	movs	r0, r3
 800686e:	f000 fc03 	bl	8007078 <UART_CheckIdleState>
 8006872:	0003      	movs	r3, r0
}
 8006874:	0018      	movs	r0, r3
 8006876:	46bd      	mov	sp, r7
 8006878:	b002      	add	sp, #8
 800687a:	bd80      	pop	{r7, pc}
 800687c:	ffffb7ff 	.word	0xffffb7ff

08006880 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006880:	b580      	push	{r7, lr}
 8006882:	b08a      	sub	sp, #40	; 0x28
 8006884:	af02      	add	r7, sp, #8
 8006886:	60f8      	str	r0, [r7, #12]
 8006888:	60b9      	str	r1, [r7, #8]
 800688a:	603b      	str	r3, [r7, #0]
 800688c:	1dbb      	adds	r3, r7, #6
 800688e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006894:	2b20      	cmp	r3, #32
 8006896:	d000      	beq.n	800689a <HAL_UART_Transmit+0x1a>
 8006898:	e095      	b.n	80069c6 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d003      	beq.n	80068a8 <HAL_UART_Transmit+0x28>
 80068a0:	1dbb      	adds	r3, r7, #6
 80068a2:	881b      	ldrh	r3, [r3, #0]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d101      	bne.n	80068ac <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80068a8:	2301      	movs	r3, #1
 80068aa:	e08d      	b.n	80069c8 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	689a      	ldr	r2, [r3, #8]
 80068b0:	2380      	movs	r3, #128	; 0x80
 80068b2:	015b      	lsls	r3, r3, #5
 80068b4:	429a      	cmp	r2, r3
 80068b6:	d109      	bne.n	80068cc <HAL_UART_Transmit+0x4c>
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	691b      	ldr	r3, [r3, #16]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d105      	bne.n	80068cc <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	2201      	movs	r2, #1
 80068c4:	4013      	ands	r3, r2
 80068c6:	d001      	beq.n	80068cc <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80068c8:	2301      	movs	r3, #1
 80068ca:	e07d      	b.n	80069c8 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2274      	movs	r2, #116	; 0x74
 80068d0:	5c9b      	ldrb	r3, [r3, r2]
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d101      	bne.n	80068da <HAL_UART_Transmit+0x5a>
 80068d6:	2302      	movs	r3, #2
 80068d8:	e076      	b.n	80069c8 <HAL_UART_Transmit+0x148>
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2274      	movs	r2, #116	; 0x74
 80068de:	2101      	movs	r1, #1
 80068e0:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2280      	movs	r2, #128	; 0x80
 80068e6:	2100      	movs	r1, #0
 80068e8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2221      	movs	r2, #33	; 0x21
 80068ee:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80068f0:	f7fe f8fa 	bl	8004ae8 <HAL_GetTick>
 80068f4:	0003      	movs	r3, r0
 80068f6:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	1dba      	adds	r2, r7, #6
 80068fc:	2150      	movs	r1, #80	; 0x50
 80068fe:	8812      	ldrh	r2, [r2, #0]
 8006900:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	1dba      	adds	r2, r7, #6
 8006906:	2152      	movs	r1, #82	; 0x52
 8006908:	8812      	ldrh	r2, [r2, #0]
 800690a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	689a      	ldr	r2, [r3, #8]
 8006910:	2380      	movs	r3, #128	; 0x80
 8006912:	015b      	lsls	r3, r3, #5
 8006914:	429a      	cmp	r2, r3
 8006916:	d108      	bne.n	800692a <HAL_UART_Transmit+0xaa>
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	691b      	ldr	r3, [r3, #16]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d104      	bne.n	800692a <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8006920:	2300      	movs	r3, #0
 8006922:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	61bb      	str	r3, [r7, #24]
 8006928:	e003      	b.n	8006932 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800692e:	2300      	movs	r3, #0
 8006930:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2274      	movs	r2, #116	; 0x74
 8006936:	2100      	movs	r1, #0
 8006938:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 800693a:	e02c      	b.n	8006996 <HAL_UART_Transmit+0x116>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800693c:	697a      	ldr	r2, [r7, #20]
 800693e:	68f8      	ldr	r0, [r7, #12]
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	9300      	str	r3, [sp, #0]
 8006944:	0013      	movs	r3, r2
 8006946:	2200      	movs	r2, #0
 8006948:	2180      	movs	r1, #128	; 0x80
 800694a:	f000 fbdd 	bl	8007108 <UART_WaitOnFlagUntilTimeout>
 800694e:	1e03      	subs	r3, r0, #0
 8006950:	d001      	beq.n	8006956 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8006952:	2303      	movs	r3, #3
 8006954:	e038      	b.n	80069c8 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8006956:	69fb      	ldr	r3, [r7, #28]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d10b      	bne.n	8006974 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800695c:	69bb      	ldr	r3, [r7, #24]
 800695e:	881b      	ldrh	r3, [r3, #0]
 8006960:	001a      	movs	r2, r3
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	05d2      	lsls	r2, r2, #23
 8006968:	0dd2      	lsrs	r2, r2, #23
 800696a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800696c:	69bb      	ldr	r3, [r7, #24]
 800696e:	3302      	adds	r3, #2
 8006970:	61bb      	str	r3, [r7, #24]
 8006972:	e007      	b.n	8006984 <HAL_UART_Transmit+0x104>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006974:	69fb      	ldr	r3, [r7, #28]
 8006976:	781a      	ldrb	r2, [r3, #0]
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800697e:	69fb      	ldr	r3, [r7, #28]
 8006980:	3301      	adds	r3, #1
 8006982:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2252      	movs	r2, #82	; 0x52
 8006988:	5a9b      	ldrh	r3, [r3, r2]
 800698a:	b29b      	uxth	r3, r3
 800698c:	3b01      	subs	r3, #1
 800698e:	b299      	uxth	r1, r3
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2252      	movs	r2, #82	; 0x52
 8006994:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	2252      	movs	r2, #82	; 0x52
 800699a:	5a9b      	ldrh	r3, [r3, r2]
 800699c:	b29b      	uxth	r3, r3
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d1cc      	bne.n	800693c <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80069a2:	697a      	ldr	r2, [r7, #20]
 80069a4:	68f8      	ldr	r0, [r7, #12]
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	9300      	str	r3, [sp, #0]
 80069aa:	0013      	movs	r3, r2
 80069ac:	2200      	movs	r2, #0
 80069ae:	2140      	movs	r1, #64	; 0x40
 80069b0:	f000 fbaa 	bl	8007108 <UART_WaitOnFlagUntilTimeout>
 80069b4:	1e03      	subs	r3, r0, #0
 80069b6:	d001      	beq.n	80069bc <HAL_UART_Transmit+0x13c>
    {
      return HAL_TIMEOUT;
 80069b8:	2303      	movs	r3, #3
 80069ba:	e005      	b.n	80069c8 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2220      	movs	r2, #32
 80069c0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80069c2:	2300      	movs	r3, #0
 80069c4:	e000      	b.n	80069c8 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 80069c6:	2302      	movs	r3, #2
  }
}
 80069c8:	0018      	movs	r0, r3
 80069ca:	46bd      	mov	sp, r7
 80069cc:	b008      	add	sp, #32
 80069ce:	bd80      	pop	{r7, pc}

080069d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069d0:	b5b0      	push	{r4, r5, r7, lr}
 80069d2:	b08e      	sub	sp, #56	; 0x38
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80069d8:	231a      	movs	r3, #26
 80069da:	2218      	movs	r2, #24
 80069dc:	4694      	mov	ip, r2
 80069de:	44bc      	add	ip, r7
 80069e0:	4463      	add	r3, ip
 80069e2:	2200      	movs	r2, #0
 80069e4:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80069e6:	69fb      	ldr	r3, [r7, #28]
 80069e8:	689a      	ldr	r2, [r3, #8]
 80069ea:	69fb      	ldr	r3, [r7, #28]
 80069ec:	691b      	ldr	r3, [r3, #16]
 80069ee:	431a      	orrs	r2, r3
 80069f0:	69fb      	ldr	r3, [r7, #28]
 80069f2:	695b      	ldr	r3, [r3, #20]
 80069f4:	431a      	orrs	r2, r3
 80069f6:	69fb      	ldr	r3, [r7, #28]
 80069f8:	69db      	ldr	r3, [r3, #28]
 80069fa:	4313      	orrs	r3, r2
 80069fc:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80069fe:	69fb      	ldr	r3, [r7, #28]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	4ac1      	ldr	r2, [pc, #772]	; (8006d0c <UART_SetConfig+0x33c>)
 8006a06:	4013      	ands	r3, r2
 8006a08:	0019      	movs	r1, r3
 8006a0a:	69fb      	ldr	r3, [r7, #28]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a10:	430a      	orrs	r2, r1
 8006a12:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006a14:	69fb      	ldr	r3, [r7, #28]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	4abd      	ldr	r2, [pc, #756]	; (8006d10 <UART_SetConfig+0x340>)
 8006a1c:	4013      	ands	r3, r2
 8006a1e:	0019      	movs	r1, r3
 8006a20:	69fb      	ldr	r3, [r7, #28]
 8006a22:	68da      	ldr	r2, [r3, #12]
 8006a24:	69fb      	ldr	r3, [r7, #28]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	430a      	orrs	r2, r1
 8006a2a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006a2c:	69fb      	ldr	r3, [r7, #28]
 8006a2e:	699b      	ldr	r3, [r3, #24]
 8006a30:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006a32:	69fb      	ldr	r3, [r7, #28]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4ab7      	ldr	r2, [pc, #732]	; (8006d14 <UART_SetConfig+0x344>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d004      	beq.n	8006a46 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006a3c:	69fb      	ldr	r3, [r7, #28]
 8006a3e:	6a1b      	ldr	r3, [r3, #32]
 8006a40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a42:	4313      	orrs	r3, r2
 8006a44:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006a46:	69fb      	ldr	r3, [r7, #28]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	4ab2      	ldr	r2, [pc, #712]	; (8006d18 <UART_SetConfig+0x348>)
 8006a4e:	4013      	ands	r3, r2
 8006a50:	0019      	movs	r1, r3
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006a58:	430a      	orrs	r2, r1
 8006a5a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4aae      	ldr	r2, [pc, #696]	; (8006d1c <UART_SetConfig+0x34c>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d136      	bne.n	8006ad4 <UART_SetConfig+0x104>
 8006a66:	4bae      	ldr	r3, [pc, #696]	; (8006d20 <UART_SetConfig+0x350>)
 8006a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a6a:	2203      	movs	r2, #3
 8006a6c:	4013      	ands	r3, r2
 8006a6e:	2b03      	cmp	r3, #3
 8006a70:	d020      	beq.n	8006ab4 <UART_SetConfig+0xe4>
 8006a72:	d827      	bhi.n	8006ac4 <UART_SetConfig+0xf4>
 8006a74:	2b02      	cmp	r3, #2
 8006a76:	d00d      	beq.n	8006a94 <UART_SetConfig+0xc4>
 8006a78:	d824      	bhi.n	8006ac4 <UART_SetConfig+0xf4>
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d002      	beq.n	8006a84 <UART_SetConfig+0xb4>
 8006a7e:	2b01      	cmp	r3, #1
 8006a80:	d010      	beq.n	8006aa4 <UART_SetConfig+0xd4>
 8006a82:	e01f      	b.n	8006ac4 <UART_SetConfig+0xf4>
 8006a84:	231b      	movs	r3, #27
 8006a86:	2218      	movs	r2, #24
 8006a88:	4694      	mov	ip, r2
 8006a8a:	44bc      	add	ip, r7
 8006a8c:	4463      	add	r3, ip
 8006a8e:	2201      	movs	r2, #1
 8006a90:	701a      	strb	r2, [r3, #0]
 8006a92:	e0ab      	b.n	8006bec <UART_SetConfig+0x21c>
 8006a94:	231b      	movs	r3, #27
 8006a96:	2218      	movs	r2, #24
 8006a98:	4694      	mov	ip, r2
 8006a9a:	44bc      	add	ip, r7
 8006a9c:	4463      	add	r3, ip
 8006a9e:	2202      	movs	r2, #2
 8006aa0:	701a      	strb	r2, [r3, #0]
 8006aa2:	e0a3      	b.n	8006bec <UART_SetConfig+0x21c>
 8006aa4:	231b      	movs	r3, #27
 8006aa6:	2218      	movs	r2, #24
 8006aa8:	4694      	mov	ip, r2
 8006aaa:	44bc      	add	ip, r7
 8006aac:	4463      	add	r3, ip
 8006aae:	2204      	movs	r2, #4
 8006ab0:	701a      	strb	r2, [r3, #0]
 8006ab2:	e09b      	b.n	8006bec <UART_SetConfig+0x21c>
 8006ab4:	231b      	movs	r3, #27
 8006ab6:	2218      	movs	r2, #24
 8006ab8:	4694      	mov	ip, r2
 8006aba:	44bc      	add	ip, r7
 8006abc:	4463      	add	r3, ip
 8006abe:	2208      	movs	r2, #8
 8006ac0:	701a      	strb	r2, [r3, #0]
 8006ac2:	e093      	b.n	8006bec <UART_SetConfig+0x21c>
 8006ac4:	231b      	movs	r3, #27
 8006ac6:	2218      	movs	r2, #24
 8006ac8:	4694      	mov	ip, r2
 8006aca:	44bc      	add	ip, r7
 8006acc:	4463      	add	r3, ip
 8006ace:	2210      	movs	r2, #16
 8006ad0:	701a      	strb	r2, [r3, #0]
 8006ad2:	e08b      	b.n	8006bec <UART_SetConfig+0x21c>
 8006ad4:	69fb      	ldr	r3, [r7, #28]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a92      	ldr	r2, [pc, #584]	; (8006d24 <UART_SetConfig+0x354>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d136      	bne.n	8006b4c <UART_SetConfig+0x17c>
 8006ade:	4b90      	ldr	r3, [pc, #576]	; (8006d20 <UART_SetConfig+0x350>)
 8006ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ae2:	220c      	movs	r2, #12
 8006ae4:	4013      	ands	r3, r2
 8006ae6:	2b0c      	cmp	r3, #12
 8006ae8:	d020      	beq.n	8006b2c <UART_SetConfig+0x15c>
 8006aea:	d827      	bhi.n	8006b3c <UART_SetConfig+0x16c>
 8006aec:	2b08      	cmp	r3, #8
 8006aee:	d00d      	beq.n	8006b0c <UART_SetConfig+0x13c>
 8006af0:	d824      	bhi.n	8006b3c <UART_SetConfig+0x16c>
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d002      	beq.n	8006afc <UART_SetConfig+0x12c>
 8006af6:	2b04      	cmp	r3, #4
 8006af8:	d010      	beq.n	8006b1c <UART_SetConfig+0x14c>
 8006afa:	e01f      	b.n	8006b3c <UART_SetConfig+0x16c>
 8006afc:	231b      	movs	r3, #27
 8006afe:	2218      	movs	r2, #24
 8006b00:	4694      	mov	ip, r2
 8006b02:	44bc      	add	ip, r7
 8006b04:	4463      	add	r3, ip
 8006b06:	2200      	movs	r2, #0
 8006b08:	701a      	strb	r2, [r3, #0]
 8006b0a:	e06f      	b.n	8006bec <UART_SetConfig+0x21c>
 8006b0c:	231b      	movs	r3, #27
 8006b0e:	2218      	movs	r2, #24
 8006b10:	4694      	mov	ip, r2
 8006b12:	44bc      	add	ip, r7
 8006b14:	4463      	add	r3, ip
 8006b16:	2202      	movs	r2, #2
 8006b18:	701a      	strb	r2, [r3, #0]
 8006b1a:	e067      	b.n	8006bec <UART_SetConfig+0x21c>
 8006b1c:	231b      	movs	r3, #27
 8006b1e:	2218      	movs	r2, #24
 8006b20:	4694      	mov	ip, r2
 8006b22:	44bc      	add	ip, r7
 8006b24:	4463      	add	r3, ip
 8006b26:	2204      	movs	r2, #4
 8006b28:	701a      	strb	r2, [r3, #0]
 8006b2a:	e05f      	b.n	8006bec <UART_SetConfig+0x21c>
 8006b2c:	231b      	movs	r3, #27
 8006b2e:	2218      	movs	r2, #24
 8006b30:	4694      	mov	ip, r2
 8006b32:	44bc      	add	ip, r7
 8006b34:	4463      	add	r3, ip
 8006b36:	2208      	movs	r2, #8
 8006b38:	701a      	strb	r2, [r3, #0]
 8006b3a:	e057      	b.n	8006bec <UART_SetConfig+0x21c>
 8006b3c:	231b      	movs	r3, #27
 8006b3e:	2218      	movs	r2, #24
 8006b40:	4694      	mov	ip, r2
 8006b42:	44bc      	add	ip, r7
 8006b44:	4463      	add	r3, ip
 8006b46:	2210      	movs	r2, #16
 8006b48:	701a      	strb	r2, [r3, #0]
 8006b4a:	e04f      	b.n	8006bec <UART_SetConfig+0x21c>
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a70      	ldr	r2, [pc, #448]	; (8006d14 <UART_SetConfig+0x344>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d143      	bne.n	8006bde <UART_SetConfig+0x20e>
 8006b56:	4b72      	ldr	r3, [pc, #456]	; (8006d20 <UART_SetConfig+0x350>)
 8006b58:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006b5a:	23c0      	movs	r3, #192	; 0xc0
 8006b5c:	011b      	lsls	r3, r3, #4
 8006b5e:	4013      	ands	r3, r2
 8006b60:	22c0      	movs	r2, #192	; 0xc0
 8006b62:	0112      	lsls	r2, r2, #4
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d02a      	beq.n	8006bbe <UART_SetConfig+0x1ee>
 8006b68:	22c0      	movs	r2, #192	; 0xc0
 8006b6a:	0112      	lsls	r2, r2, #4
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d82e      	bhi.n	8006bce <UART_SetConfig+0x1fe>
 8006b70:	2280      	movs	r2, #128	; 0x80
 8006b72:	0112      	lsls	r2, r2, #4
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d012      	beq.n	8006b9e <UART_SetConfig+0x1ce>
 8006b78:	2280      	movs	r2, #128	; 0x80
 8006b7a:	0112      	lsls	r2, r2, #4
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d826      	bhi.n	8006bce <UART_SetConfig+0x1fe>
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d004      	beq.n	8006b8e <UART_SetConfig+0x1be>
 8006b84:	2280      	movs	r2, #128	; 0x80
 8006b86:	00d2      	lsls	r2, r2, #3
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d010      	beq.n	8006bae <UART_SetConfig+0x1de>
 8006b8c:	e01f      	b.n	8006bce <UART_SetConfig+0x1fe>
 8006b8e:	231b      	movs	r3, #27
 8006b90:	2218      	movs	r2, #24
 8006b92:	4694      	mov	ip, r2
 8006b94:	44bc      	add	ip, r7
 8006b96:	4463      	add	r3, ip
 8006b98:	2200      	movs	r2, #0
 8006b9a:	701a      	strb	r2, [r3, #0]
 8006b9c:	e026      	b.n	8006bec <UART_SetConfig+0x21c>
 8006b9e:	231b      	movs	r3, #27
 8006ba0:	2218      	movs	r2, #24
 8006ba2:	4694      	mov	ip, r2
 8006ba4:	44bc      	add	ip, r7
 8006ba6:	4463      	add	r3, ip
 8006ba8:	2202      	movs	r2, #2
 8006baa:	701a      	strb	r2, [r3, #0]
 8006bac:	e01e      	b.n	8006bec <UART_SetConfig+0x21c>
 8006bae:	231b      	movs	r3, #27
 8006bb0:	2218      	movs	r2, #24
 8006bb2:	4694      	mov	ip, r2
 8006bb4:	44bc      	add	ip, r7
 8006bb6:	4463      	add	r3, ip
 8006bb8:	2204      	movs	r2, #4
 8006bba:	701a      	strb	r2, [r3, #0]
 8006bbc:	e016      	b.n	8006bec <UART_SetConfig+0x21c>
 8006bbe:	231b      	movs	r3, #27
 8006bc0:	2218      	movs	r2, #24
 8006bc2:	4694      	mov	ip, r2
 8006bc4:	44bc      	add	ip, r7
 8006bc6:	4463      	add	r3, ip
 8006bc8:	2208      	movs	r2, #8
 8006bca:	701a      	strb	r2, [r3, #0]
 8006bcc:	e00e      	b.n	8006bec <UART_SetConfig+0x21c>
 8006bce:	231b      	movs	r3, #27
 8006bd0:	2218      	movs	r2, #24
 8006bd2:	4694      	mov	ip, r2
 8006bd4:	44bc      	add	ip, r7
 8006bd6:	4463      	add	r3, ip
 8006bd8:	2210      	movs	r2, #16
 8006bda:	701a      	strb	r2, [r3, #0]
 8006bdc:	e006      	b.n	8006bec <UART_SetConfig+0x21c>
 8006bde:	231b      	movs	r3, #27
 8006be0:	2218      	movs	r2, #24
 8006be2:	4694      	mov	ip, r2
 8006be4:	44bc      	add	ip, r7
 8006be6:	4463      	add	r3, ip
 8006be8:	2210      	movs	r2, #16
 8006bea:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006bec:	69fb      	ldr	r3, [r7, #28]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a48      	ldr	r2, [pc, #288]	; (8006d14 <UART_SetConfig+0x344>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d000      	beq.n	8006bf8 <UART_SetConfig+0x228>
 8006bf6:	e09b      	b.n	8006d30 <UART_SetConfig+0x360>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006bf8:	231b      	movs	r3, #27
 8006bfa:	2218      	movs	r2, #24
 8006bfc:	4694      	mov	ip, r2
 8006bfe:	44bc      	add	ip, r7
 8006c00:	4463      	add	r3, ip
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	2b08      	cmp	r3, #8
 8006c06:	d01d      	beq.n	8006c44 <UART_SetConfig+0x274>
 8006c08:	dc20      	bgt.n	8006c4c <UART_SetConfig+0x27c>
 8006c0a:	2b04      	cmp	r3, #4
 8006c0c:	d015      	beq.n	8006c3a <UART_SetConfig+0x26a>
 8006c0e:	dc1d      	bgt.n	8006c4c <UART_SetConfig+0x27c>
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d002      	beq.n	8006c1a <UART_SetConfig+0x24a>
 8006c14:	2b02      	cmp	r3, #2
 8006c16:	d005      	beq.n	8006c24 <UART_SetConfig+0x254>
 8006c18:	e018      	b.n	8006c4c <UART_SetConfig+0x27c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c1a:	f7ff fc7b 	bl	8006514 <HAL_RCC_GetPCLK1Freq>
 8006c1e:	0003      	movs	r3, r0
 8006c20:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c22:	e01d      	b.n	8006c60 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c24:	4b3e      	ldr	r3, [pc, #248]	; (8006d20 <UART_SetConfig+0x350>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	2210      	movs	r2, #16
 8006c2a:	4013      	ands	r3, r2
 8006c2c:	d002      	beq.n	8006c34 <UART_SetConfig+0x264>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006c2e:	4b3e      	ldr	r3, [pc, #248]	; (8006d28 <UART_SetConfig+0x358>)
 8006c30:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006c32:	e015      	b.n	8006c60 <UART_SetConfig+0x290>
          pclk = (uint32_t) HSI_VALUE;
 8006c34:	4b3d      	ldr	r3, [pc, #244]	; (8006d2c <UART_SetConfig+0x35c>)
 8006c36:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c38:	e012      	b.n	8006c60 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c3a:	f7ff fbbb 	bl	80063b4 <HAL_RCC_GetSysClockFreq>
 8006c3e:	0003      	movs	r3, r0
 8006c40:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c42:	e00d      	b.n	8006c60 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c44:	2380      	movs	r3, #128	; 0x80
 8006c46:	021b      	lsls	r3, r3, #8
 8006c48:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006c4a:	e009      	b.n	8006c60 <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006c50:	231a      	movs	r3, #26
 8006c52:	2218      	movs	r2, #24
 8006c54:	4694      	mov	ip, r2
 8006c56:	44bc      	add	ip, r7
 8006c58:	4463      	add	r3, ip
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	701a      	strb	r2, [r3, #0]
        break;
 8006c5e:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d100      	bne.n	8006c68 <UART_SetConfig+0x298>
 8006c66:	e139      	b.n	8006edc <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006c68:	69fb      	ldr	r3, [r7, #28]
 8006c6a:	685a      	ldr	r2, [r3, #4]
 8006c6c:	0013      	movs	r3, r2
 8006c6e:	005b      	lsls	r3, r3, #1
 8006c70:	189b      	adds	r3, r3, r2
 8006c72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d305      	bcc.n	8006c84 <UART_SetConfig+0x2b4>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006c78:	69fb      	ldr	r3, [r7, #28]
 8006c7a:	685b      	ldr	r3, [r3, #4]
 8006c7c:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006c7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d907      	bls.n	8006c94 <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8006c84:	231a      	movs	r3, #26
 8006c86:	2218      	movs	r2, #24
 8006c88:	4694      	mov	ip, r2
 8006c8a:	44bc      	add	ip, r7
 8006c8c:	4463      	add	r3, ip
 8006c8e:	2201      	movs	r2, #1
 8006c90:	701a      	strb	r2, [r3, #0]
 8006c92:	e123      	b.n	8006edc <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c96:	613b      	str	r3, [r7, #16]
 8006c98:	2300      	movs	r3, #0
 8006c9a:	617b      	str	r3, [r7, #20]
 8006c9c:	6939      	ldr	r1, [r7, #16]
 8006c9e:	697a      	ldr	r2, [r7, #20]
 8006ca0:	000b      	movs	r3, r1
 8006ca2:	0e1b      	lsrs	r3, r3, #24
 8006ca4:	0010      	movs	r0, r2
 8006ca6:	0205      	lsls	r5, r0, #8
 8006ca8:	431d      	orrs	r5, r3
 8006caa:	000b      	movs	r3, r1
 8006cac:	021c      	lsls	r4, r3, #8
 8006cae:	69fb      	ldr	r3, [r7, #28]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	085b      	lsrs	r3, r3, #1
 8006cb4:	60bb      	str	r3, [r7, #8]
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	60fb      	str	r3, [r7, #12]
 8006cba:	68b8      	ldr	r0, [r7, #8]
 8006cbc:	68f9      	ldr	r1, [r7, #12]
 8006cbe:	1900      	adds	r0, r0, r4
 8006cc0:	4169      	adcs	r1, r5
 8006cc2:	69fb      	ldr	r3, [r7, #28]
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	603b      	str	r3, [r7, #0]
 8006cc8:	2300      	movs	r3, #0
 8006cca:	607b      	str	r3, [r7, #4]
 8006ccc:	683a      	ldr	r2, [r7, #0]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	f7f9 fbce 	bl	8000470 <__aeabi_uldivmod>
 8006cd4:	0002      	movs	r2, r0
 8006cd6:	000b      	movs	r3, r1
 8006cd8:	0013      	movs	r3, r2
 8006cda:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006cdc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006cde:	23c0      	movs	r3, #192	; 0xc0
 8006ce0:	009b      	lsls	r3, r3, #2
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d309      	bcc.n	8006cfa <UART_SetConfig+0x32a>
 8006ce6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ce8:	2380      	movs	r3, #128	; 0x80
 8006cea:	035b      	lsls	r3, r3, #13
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d204      	bcs.n	8006cfa <UART_SetConfig+0x32a>
        {
          huart->Instance->BRR = usartdiv;
 8006cf0:	69fb      	ldr	r3, [r7, #28]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006cf6:	60da      	str	r2, [r3, #12]
 8006cf8:	e0f0      	b.n	8006edc <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 8006cfa:	231a      	movs	r3, #26
 8006cfc:	2218      	movs	r2, #24
 8006cfe:	4694      	mov	ip, r2
 8006d00:	44bc      	add	ip, r7
 8006d02:	4463      	add	r3, ip
 8006d04:	2201      	movs	r2, #1
 8006d06:	701a      	strb	r2, [r3, #0]
 8006d08:	e0e8      	b.n	8006edc <UART_SetConfig+0x50c>
 8006d0a:	46c0      	nop			; (mov r8, r8)
 8006d0c:	efff69f3 	.word	0xefff69f3
 8006d10:	ffffcfff 	.word	0xffffcfff
 8006d14:	40004800 	.word	0x40004800
 8006d18:	fffff4ff 	.word	0xfffff4ff
 8006d1c:	40013800 	.word	0x40013800
 8006d20:	40021000 	.word	0x40021000
 8006d24:	40004400 	.word	0x40004400
 8006d28:	003d0900 	.word	0x003d0900
 8006d2c:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d30:	69fb      	ldr	r3, [r7, #28]
 8006d32:	69da      	ldr	r2, [r3, #28]
 8006d34:	2380      	movs	r3, #128	; 0x80
 8006d36:	021b      	lsls	r3, r3, #8
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d000      	beq.n	8006d3e <UART_SetConfig+0x36e>
 8006d3c:	e074      	b.n	8006e28 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8006d3e:	231b      	movs	r3, #27
 8006d40:	2218      	movs	r2, #24
 8006d42:	4694      	mov	ip, r2
 8006d44:	44bc      	add	ip, r7
 8006d46:	4463      	add	r3, ip
 8006d48:	781b      	ldrb	r3, [r3, #0]
 8006d4a:	2b08      	cmp	r3, #8
 8006d4c:	d822      	bhi.n	8006d94 <UART_SetConfig+0x3c4>
 8006d4e:	009a      	lsls	r2, r3, #2
 8006d50:	4b6a      	ldr	r3, [pc, #424]	; (8006efc <UART_SetConfig+0x52c>)
 8006d52:	18d3      	adds	r3, r2, r3
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d58:	f7ff fbdc 	bl	8006514 <HAL_RCC_GetPCLK1Freq>
 8006d5c:	0003      	movs	r3, r0
 8006d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006d60:	e022      	b.n	8006da8 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d62:	f7ff fbed 	bl	8006540 <HAL_RCC_GetPCLK2Freq>
 8006d66:	0003      	movs	r3, r0
 8006d68:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006d6a:	e01d      	b.n	8006da8 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d6c:	4b64      	ldr	r3, [pc, #400]	; (8006f00 <UART_SetConfig+0x530>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	2210      	movs	r2, #16
 8006d72:	4013      	ands	r3, r2
 8006d74:	d002      	beq.n	8006d7c <UART_SetConfig+0x3ac>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006d76:	4b63      	ldr	r3, [pc, #396]	; (8006f04 <UART_SetConfig+0x534>)
 8006d78:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006d7a:	e015      	b.n	8006da8 <UART_SetConfig+0x3d8>
          pclk = (uint32_t) HSI_VALUE;
 8006d7c:	4b62      	ldr	r3, [pc, #392]	; (8006f08 <UART_SetConfig+0x538>)
 8006d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006d80:	e012      	b.n	8006da8 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d82:	f7ff fb17 	bl	80063b4 <HAL_RCC_GetSysClockFreq>
 8006d86:	0003      	movs	r3, r0
 8006d88:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006d8a:	e00d      	b.n	8006da8 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d8c:	2380      	movs	r3, #128	; 0x80
 8006d8e:	021b      	lsls	r3, r3, #8
 8006d90:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006d92:	e009      	b.n	8006da8 <UART_SetConfig+0x3d8>
      default:
        pclk = 0U;
 8006d94:	2300      	movs	r3, #0
 8006d96:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006d98:	231a      	movs	r3, #26
 8006d9a:	2218      	movs	r2, #24
 8006d9c:	4694      	mov	ip, r2
 8006d9e:	44bc      	add	ip, r7
 8006da0:	4463      	add	r3, ip
 8006da2:	2201      	movs	r2, #1
 8006da4:	701a      	strb	r2, [r3, #0]
        break;
 8006da6:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d100      	bne.n	8006db0 <UART_SetConfig+0x3e0>
 8006dae:	e095      	b.n	8006edc <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006db2:	005a      	lsls	r2, r3, #1
 8006db4:	69fb      	ldr	r3, [r7, #28]
 8006db6:	685b      	ldr	r3, [r3, #4]
 8006db8:	085b      	lsrs	r3, r3, #1
 8006dba:	18d2      	adds	r2, r2, r3
 8006dbc:	69fb      	ldr	r3, [r7, #28]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	0019      	movs	r1, r3
 8006dc2:	0010      	movs	r0, r2
 8006dc4:	f7f9 f9a0 	bl	8000108 <__udivsi3>
 8006dc8:	0003      	movs	r3, r0
 8006dca:	b29b      	uxth	r3, r3
 8006dcc:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006dce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dd0:	2b0f      	cmp	r3, #15
 8006dd2:	d921      	bls.n	8006e18 <UART_SetConfig+0x448>
 8006dd4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006dd6:	2380      	movs	r3, #128	; 0x80
 8006dd8:	025b      	lsls	r3, r3, #9
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d21c      	bcs.n	8006e18 <UART_SetConfig+0x448>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de0:	b29a      	uxth	r2, r3
 8006de2:	200e      	movs	r0, #14
 8006de4:	2418      	movs	r4, #24
 8006de6:	193b      	adds	r3, r7, r4
 8006de8:	181b      	adds	r3, r3, r0
 8006dea:	210f      	movs	r1, #15
 8006dec:	438a      	bics	r2, r1
 8006dee:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006df2:	085b      	lsrs	r3, r3, #1
 8006df4:	b29b      	uxth	r3, r3
 8006df6:	2207      	movs	r2, #7
 8006df8:	4013      	ands	r3, r2
 8006dfa:	b299      	uxth	r1, r3
 8006dfc:	193b      	adds	r3, r7, r4
 8006dfe:	181b      	adds	r3, r3, r0
 8006e00:	193a      	adds	r2, r7, r4
 8006e02:	1812      	adds	r2, r2, r0
 8006e04:	8812      	ldrh	r2, [r2, #0]
 8006e06:	430a      	orrs	r2, r1
 8006e08:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006e0a:	69fb      	ldr	r3, [r7, #28]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	193a      	adds	r2, r7, r4
 8006e10:	1812      	adds	r2, r2, r0
 8006e12:	8812      	ldrh	r2, [r2, #0]
 8006e14:	60da      	str	r2, [r3, #12]
 8006e16:	e061      	b.n	8006edc <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8006e18:	231a      	movs	r3, #26
 8006e1a:	2218      	movs	r2, #24
 8006e1c:	4694      	mov	ip, r2
 8006e1e:	44bc      	add	ip, r7
 8006e20:	4463      	add	r3, ip
 8006e22:	2201      	movs	r2, #1
 8006e24:	701a      	strb	r2, [r3, #0]
 8006e26:	e059      	b.n	8006edc <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006e28:	231b      	movs	r3, #27
 8006e2a:	2218      	movs	r2, #24
 8006e2c:	4694      	mov	ip, r2
 8006e2e:	44bc      	add	ip, r7
 8006e30:	4463      	add	r3, ip
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	2b08      	cmp	r3, #8
 8006e36:	d822      	bhi.n	8006e7e <UART_SetConfig+0x4ae>
 8006e38:	009a      	lsls	r2, r3, #2
 8006e3a:	4b34      	ldr	r3, [pc, #208]	; (8006f0c <UART_SetConfig+0x53c>)
 8006e3c:	18d3      	adds	r3, r2, r3
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e42:	f7ff fb67 	bl	8006514 <HAL_RCC_GetPCLK1Freq>
 8006e46:	0003      	movs	r3, r0
 8006e48:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006e4a:	e022      	b.n	8006e92 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e4c:	f7ff fb78 	bl	8006540 <HAL_RCC_GetPCLK2Freq>
 8006e50:	0003      	movs	r3, r0
 8006e52:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006e54:	e01d      	b.n	8006e92 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006e56:	4b2a      	ldr	r3, [pc, #168]	; (8006f00 <UART_SetConfig+0x530>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	2210      	movs	r2, #16
 8006e5c:	4013      	ands	r3, r2
 8006e5e:	d002      	beq.n	8006e66 <UART_SetConfig+0x496>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8006e60:	4b28      	ldr	r3, [pc, #160]	; (8006f04 <UART_SetConfig+0x534>)
 8006e62:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006e64:	e015      	b.n	8006e92 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8006e66:	4b28      	ldr	r3, [pc, #160]	; (8006f08 <UART_SetConfig+0x538>)
 8006e68:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006e6a:	e012      	b.n	8006e92 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e6c:	f7ff faa2 	bl	80063b4 <HAL_RCC_GetSysClockFreq>
 8006e70:	0003      	movs	r3, r0
 8006e72:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006e74:	e00d      	b.n	8006e92 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e76:	2380      	movs	r3, #128	; 0x80
 8006e78:	021b      	lsls	r3, r3, #8
 8006e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006e7c:	e009      	b.n	8006e92 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8006e82:	231a      	movs	r3, #26
 8006e84:	2218      	movs	r2, #24
 8006e86:	4694      	mov	ip, r2
 8006e88:	44bc      	add	ip, r7
 8006e8a:	4463      	add	r3, ip
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	701a      	strb	r2, [r3, #0]
        break;
 8006e90:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d021      	beq.n	8006edc <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006e98:	69fb      	ldr	r3, [r7, #28]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	085a      	lsrs	r2, r3, #1
 8006e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea0:	18d2      	adds	r2, r2, r3
 8006ea2:	69fb      	ldr	r3, [r7, #28]
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	0019      	movs	r1, r3
 8006ea8:	0010      	movs	r0, r2
 8006eaa:	f7f9 f92d 	bl	8000108 <__udivsi3>
 8006eae:	0003      	movs	r3, r0
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb6:	2b0f      	cmp	r3, #15
 8006eb8:	d909      	bls.n	8006ece <UART_SetConfig+0x4fe>
 8006eba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ebc:	2380      	movs	r3, #128	; 0x80
 8006ebe:	025b      	lsls	r3, r3, #9
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d204      	bcs.n	8006ece <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = usartdiv;
 8006ec4:	69fb      	ldr	r3, [r7, #28]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006eca:	60da      	str	r2, [r3, #12]
 8006ecc:	e006      	b.n	8006edc <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8006ece:	231a      	movs	r3, #26
 8006ed0:	2218      	movs	r2, #24
 8006ed2:	4694      	mov	ip, r2
 8006ed4:	44bc      	add	ip, r7
 8006ed6:	4463      	add	r3, ip
 8006ed8:	2201      	movs	r2, #1
 8006eda:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006edc:	69fb      	ldr	r3, [r7, #28]
 8006ede:	2200      	movs	r2, #0
 8006ee0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006ee2:	69fb      	ldr	r3, [r7, #28]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006ee8:	231a      	movs	r3, #26
 8006eea:	2218      	movs	r2, #24
 8006eec:	4694      	mov	ip, r2
 8006eee:	44bc      	add	ip, r7
 8006ef0:	4463      	add	r3, ip
 8006ef2:	781b      	ldrb	r3, [r3, #0]
}
 8006ef4:	0018      	movs	r0, r3
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	b00e      	add	sp, #56	; 0x38
 8006efa:	bdb0      	pop	{r4, r5, r7, pc}
 8006efc:	080076ec 	.word	0x080076ec
 8006f00:	40021000 	.word	0x40021000
 8006f04:	003d0900 	.word	0x003d0900
 8006f08:	00f42400 	.word	0x00f42400
 8006f0c:	08007710 	.word	0x08007710

08006f10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b082      	sub	sp, #8
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	4013      	ands	r3, r2
 8006f20:	d00b      	beq.n	8006f3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	685b      	ldr	r3, [r3, #4]
 8006f28:	4a4a      	ldr	r2, [pc, #296]	; (8007054 <UART_AdvFeatureConfig+0x144>)
 8006f2a:	4013      	ands	r3, r2
 8006f2c:	0019      	movs	r1, r3
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	430a      	orrs	r2, r1
 8006f38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f3e:	2202      	movs	r2, #2
 8006f40:	4013      	ands	r3, r2
 8006f42:	d00b      	beq.n	8006f5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	4a43      	ldr	r2, [pc, #268]	; (8007058 <UART_AdvFeatureConfig+0x148>)
 8006f4c:	4013      	ands	r3, r2
 8006f4e:	0019      	movs	r1, r3
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	430a      	orrs	r2, r1
 8006f5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f60:	2204      	movs	r2, #4
 8006f62:	4013      	ands	r3, r2
 8006f64:	d00b      	beq.n	8006f7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	4a3b      	ldr	r2, [pc, #236]	; (800705c <UART_AdvFeatureConfig+0x14c>)
 8006f6e:	4013      	ands	r3, r2
 8006f70:	0019      	movs	r1, r3
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	430a      	orrs	r2, r1
 8006f7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f82:	2208      	movs	r2, #8
 8006f84:	4013      	ands	r3, r2
 8006f86:	d00b      	beq.n	8006fa0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	685b      	ldr	r3, [r3, #4]
 8006f8e:	4a34      	ldr	r2, [pc, #208]	; (8007060 <UART_AdvFeatureConfig+0x150>)
 8006f90:	4013      	ands	r3, r2
 8006f92:	0019      	movs	r1, r3
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	430a      	orrs	r2, r1
 8006f9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fa4:	2210      	movs	r2, #16
 8006fa6:	4013      	ands	r3, r2
 8006fa8:	d00b      	beq.n	8006fc2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	4a2c      	ldr	r2, [pc, #176]	; (8007064 <UART_AdvFeatureConfig+0x154>)
 8006fb2:	4013      	ands	r3, r2
 8006fb4:	0019      	movs	r1, r3
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	430a      	orrs	r2, r1
 8006fc0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fc6:	2220      	movs	r2, #32
 8006fc8:	4013      	ands	r3, r2
 8006fca:	d00b      	beq.n	8006fe4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	4a25      	ldr	r2, [pc, #148]	; (8007068 <UART_AdvFeatureConfig+0x158>)
 8006fd4:	4013      	ands	r3, r2
 8006fd6:	0019      	movs	r1, r3
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	430a      	orrs	r2, r1
 8006fe2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fe8:	2240      	movs	r2, #64	; 0x40
 8006fea:	4013      	ands	r3, r2
 8006fec:	d01d      	beq.n	800702a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	4a1d      	ldr	r2, [pc, #116]	; (800706c <UART_AdvFeatureConfig+0x15c>)
 8006ff6:	4013      	ands	r3, r2
 8006ff8:	0019      	movs	r1, r3
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	430a      	orrs	r2, r1
 8007004:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800700a:	2380      	movs	r3, #128	; 0x80
 800700c:	035b      	lsls	r3, r3, #13
 800700e:	429a      	cmp	r2, r3
 8007010:	d10b      	bne.n	800702a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	685b      	ldr	r3, [r3, #4]
 8007018:	4a15      	ldr	r2, [pc, #84]	; (8007070 <UART_AdvFeatureConfig+0x160>)
 800701a:	4013      	ands	r3, r2
 800701c:	0019      	movs	r1, r3
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	430a      	orrs	r2, r1
 8007028:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800702e:	2280      	movs	r2, #128	; 0x80
 8007030:	4013      	ands	r3, r2
 8007032:	d00b      	beq.n	800704c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	4a0e      	ldr	r2, [pc, #56]	; (8007074 <UART_AdvFeatureConfig+0x164>)
 800703c:	4013      	ands	r3, r2
 800703e:	0019      	movs	r1, r3
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	430a      	orrs	r2, r1
 800704a:	605a      	str	r2, [r3, #4]
  }
}
 800704c:	46c0      	nop			; (mov r8, r8)
 800704e:	46bd      	mov	sp, r7
 8007050:	b002      	add	sp, #8
 8007052:	bd80      	pop	{r7, pc}
 8007054:	fffdffff 	.word	0xfffdffff
 8007058:	fffeffff 	.word	0xfffeffff
 800705c:	fffbffff 	.word	0xfffbffff
 8007060:	ffff7fff 	.word	0xffff7fff
 8007064:	ffffefff 	.word	0xffffefff
 8007068:	ffffdfff 	.word	0xffffdfff
 800706c:	ffefffff 	.word	0xffefffff
 8007070:	ff9fffff 	.word	0xff9fffff
 8007074:	fff7ffff 	.word	0xfff7ffff

08007078 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b086      	sub	sp, #24
 800707c:	af02      	add	r7, sp, #8
 800707e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2280      	movs	r2, #128	; 0x80
 8007084:	2100      	movs	r1, #0
 8007086:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007088:	f7fd fd2e 	bl	8004ae8 <HAL_GetTick>
 800708c:	0003      	movs	r3, r0
 800708e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	2208      	movs	r2, #8
 8007098:	4013      	ands	r3, r2
 800709a:	2b08      	cmp	r3, #8
 800709c:	d10c      	bne.n	80070b8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2280      	movs	r2, #128	; 0x80
 80070a2:	0391      	lsls	r1, r2, #14
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	4a17      	ldr	r2, [pc, #92]	; (8007104 <UART_CheckIdleState+0x8c>)
 80070a8:	9200      	str	r2, [sp, #0]
 80070aa:	2200      	movs	r2, #0
 80070ac:	f000 f82c 	bl	8007108 <UART_WaitOnFlagUntilTimeout>
 80070b0:	1e03      	subs	r3, r0, #0
 80070b2:	d001      	beq.n	80070b8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070b4:	2303      	movs	r3, #3
 80070b6:	e021      	b.n	80070fc <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	2204      	movs	r2, #4
 80070c0:	4013      	ands	r3, r2
 80070c2:	2b04      	cmp	r3, #4
 80070c4:	d10c      	bne.n	80070e0 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2280      	movs	r2, #128	; 0x80
 80070ca:	03d1      	lsls	r1, r2, #15
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	4a0d      	ldr	r2, [pc, #52]	; (8007104 <UART_CheckIdleState+0x8c>)
 80070d0:	9200      	str	r2, [sp, #0]
 80070d2:	2200      	movs	r2, #0
 80070d4:	f000 f818 	bl	8007108 <UART_WaitOnFlagUntilTimeout>
 80070d8:	1e03      	subs	r3, r0, #0
 80070da:	d001      	beq.n	80070e0 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070dc:	2303      	movs	r3, #3
 80070de:	e00d      	b.n	80070fc <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2220      	movs	r2, #32
 80070e4:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2220      	movs	r2, #32
 80070ea:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2200      	movs	r2, #0
 80070f0:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2274      	movs	r2, #116	; 0x74
 80070f6:	2100      	movs	r1, #0
 80070f8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80070fa:	2300      	movs	r3, #0
}
 80070fc:	0018      	movs	r0, r3
 80070fe:	46bd      	mov	sp, r7
 8007100:	b004      	add	sp, #16
 8007102:	bd80      	pop	{r7, pc}
 8007104:	01ffffff 	.word	0x01ffffff

08007108 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b094      	sub	sp, #80	; 0x50
 800710c:	af00      	add	r7, sp, #0
 800710e:	60f8      	str	r0, [r7, #12]
 8007110:	60b9      	str	r1, [r7, #8]
 8007112:	603b      	str	r3, [r7, #0]
 8007114:	1dfb      	adds	r3, r7, #7
 8007116:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007118:	e0a3      	b.n	8007262 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800711a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800711c:	3301      	adds	r3, #1
 800711e:	d100      	bne.n	8007122 <UART_WaitOnFlagUntilTimeout+0x1a>
 8007120:	e09f      	b.n	8007262 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007122:	f7fd fce1 	bl	8004ae8 <HAL_GetTick>
 8007126:	0002      	movs	r2, r0
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	1ad3      	subs	r3, r2, r3
 800712c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800712e:	429a      	cmp	r2, r3
 8007130:	d302      	bcc.n	8007138 <UART_WaitOnFlagUntilTimeout+0x30>
 8007132:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007134:	2b00      	cmp	r3, #0
 8007136:	d13d      	bne.n	80071b4 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007138:	f3ef 8310 	mrs	r3, PRIMASK
 800713c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800713e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007140:	647b      	str	r3, [r7, #68]	; 0x44
 8007142:	2301      	movs	r3, #1
 8007144:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007148:	f383 8810 	msr	PRIMASK, r3
}
 800714c:	46c0      	nop			; (mov r8, r8)
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	494c      	ldr	r1, [pc, #304]	; (800728c <UART_WaitOnFlagUntilTimeout+0x184>)
 800715a:	400a      	ands	r2, r1
 800715c:	601a      	str	r2, [r3, #0]
 800715e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007160:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007164:	f383 8810 	msr	PRIMASK, r3
}
 8007168:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800716a:	f3ef 8310 	mrs	r3, PRIMASK
 800716e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8007170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007172:	643b      	str	r3, [r7, #64]	; 0x40
 8007174:	2301      	movs	r3, #1
 8007176:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800717a:	f383 8810 	msr	PRIMASK, r3
}
 800717e:	46c0      	nop			; (mov r8, r8)
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	689a      	ldr	r2, [r3, #8]
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	2101      	movs	r1, #1
 800718c:	438a      	bics	r2, r1
 800718e:	609a      	str	r2, [r3, #8]
 8007190:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007192:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007196:	f383 8810 	msr	PRIMASK, r3
}
 800719a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	2220      	movs	r2, #32
 80071a0:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2220      	movs	r2, #32
 80071a6:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2274      	movs	r2, #116	; 0x74
 80071ac:	2100      	movs	r1, #0
 80071ae:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80071b0:	2303      	movs	r3, #3
 80071b2:	e067      	b.n	8007284 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	2204      	movs	r2, #4
 80071bc:	4013      	ands	r3, r2
 80071be:	d050      	beq.n	8007262 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	69da      	ldr	r2, [r3, #28]
 80071c6:	2380      	movs	r3, #128	; 0x80
 80071c8:	011b      	lsls	r3, r3, #4
 80071ca:	401a      	ands	r2, r3
 80071cc:	2380      	movs	r3, #128	; 0x80
 80071ce:	011b      	lsls	r3, r3, #4
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d146      	bne.n	8007262 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	2280      	movs	r2, #128	; 0x80
 80071da:	0112      	lsls	r2, r2, #4
 80071dc:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071de:	f3ef 8310 	mrs	r3, PRIMASK
 80071e2:	613b      	str	r3, [r7, #16]
  return(result);
 80071e4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80071e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80071e8:	2301      	movs	r3, #1
 80071ea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	f383 8810 	msr	PRIMASK, r3
}
 80071f2:	46c0      	nop			; (mov r8, r8)
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4923      	ldr	r1, [pc, #140]	; (800728c <UART_WaitOnFlagUntilTimeout+0x184>)
 8007200:	400a      	ands	r2, r1
 8007202:	601a      	str	r2, [r3, #0]
 8007204:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007206:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007208:	69bb      	ldr	r3, [r7, #24]
 800720a:	f383 8810 	msr	PRIMASK, r3
}
 800720e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007210:	f3ef 8310 	mrs	r3, PRIMASK
 8007214:	61fb      	str	r3, [r7, #28]
  return(result);
 8007216:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007218:	64bb      	str	r3, [r7, #72]	; 0x48
 800721a:	2301      	movs	r3, #1
 800721c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800721e:	6a3b      	ldr	r3, [r7, #32]
 8007220:	f383 8810 	msr	PRIMASK, r3
}
 8007224:	46c0      	nop			; (mov r8, r8)
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	689a      	ldr	r2, [r3, #8]
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	2101      	movs	r1, #1
 8007232:	438a      	bics	r2, r1
 8007234:	609a      	str	r2, [r3, #8]
 8007236:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007238:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800723a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800723c:	f383 8810 	msr	PRIMASK, r3
}
 8007240:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	2220      	movs	r2, #32
 8007246:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2220      	movs	r2, #32
 800724c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	2280      	movs	r2, #128	; 0x80
 8007252:	2120      	movs	r1, #32
 8007254:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2274      	movs	r2, #116	; 0x74
 800725a:	2100      	movs	r1, #0
 800725c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800725e:	2303      	movs	r3, #3
 8007260:	e010      	b.n	8007284 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	69db      	ldr	r3, [r3, #28]
 8007268:	68ba      	ldr	r2, [r7, #8]
 800726a:	4013      	ands	r3, r2
 800726c:	68ba      	ldr	r2, [r7, #8]
 800726e:	1ad3      	subs	r3, r2, r3
 8007270:	425a      	negs	r2, r3
 8007272:	4153      	adcs	r3, r2
 8007274:	b2db      	uxtb	r3, r3
 8007276:	001a      	movs	r2, r3
 8007278:	1dfb      	adds	r3, r7, #7
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	429a      	cmp	r2, r3
 800727e:	d100      	bne.n	8007282 <UART_WaitOnFlagUntilTimeout+0x17a>
 8007280:	e74b      	b.n	800711a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007282:	2300      	movs	r3, #0
}
 8007284:	0018      	movs	r0, r3
 8007286:	46bd      	mov	sp, r7
 8007288:	b014      	add	sp, #80	; 0x50
 800728a:	bd80      	pop	{r7, pc}
 800728c:	fffffe5f 	.word	0xfffffe5f

08007290 <__libc_init_array>:
 8007290:	b570      	push	{r4, r5, r6, lr}
 8007292:	2600      	movs	r6, #0
 8007294:	4d0c      	ldr	r5, [pc, #48]	; (80072c8 <__libc_init_array+0x38>)
 8007296:	4c0d      	ldr	r4, [pc, #52]	; (80072cc <__libc_init_array+0x3c>)
 8007298:	1b64      	subs	r4, r4, r5
 800729a:	10a4      	asrs	r4, r4, #2
 800729c:	42a6      	cmp	r6, r4
 800729e:	d109      	bne.n	80072b4 <__libc_init_array+0x24>
 80072a0:	2600      	movs	r6, #0
 80072a2:	f000 f821 	bl	80072e8 <_init>
 80072a6:	4d0a      	ldr	r5, [pc, #40]	; (80072d0 <__libc_init_array+0x40>)
 80072a8:	4c0a      	ldr	r4, [pc, #40]	; (80072d4 <__libc_init_array+0x44>)
 80072aa:	1b64      	subs	r4, r4, r5
 80072ac:	10a4      	asrs	r4, r4, #2
 80072ae:	42a6      	cmp	r6, r4
 80072b0:	d105      	bne.n	80072be <__libc_init_array+0x2e>
 80072b2:	bd70      	pop	{r4, r5, r6, pc}
 80072b4:	00b3      	lsls	r3, r6, #2
 80072b6:	58eb      	ldr	r3, [r5, r3]
 80072b8:	4798      	blx	r3
 80072ba:	3601      	adds	r6, #1
 80072bc:	e7ee      	b.n	800729c <__libc_init_array+0xc>
 80072be:	00b3      	lsls	r3, r6, #2
 80072c0:	58eb      	ldr	r3, [r5, r3]
 80072c2:	4798      	blx	r3
 80072c4:	3601      	adds	r6, #1
 80072c6:	e7f2      	b.n	80072ae <__libc_init_array+0x1e>
 80072c8:	0800773c 	.word	0x0800773c
 80072cc:	0800773c 	.word	0x0800773c
 80072d0:	0800773c 	.word	0x0800773c
 80072d4:	08007740 	.word	0x08007740

080072d8 <memset>:
 80072d8:	0003      	movs	r3, r0
 80072da:	1882      	adds	r2, r0, r2
 80072dc:	4293      	cmp	r3, r2
 80072de:	d100      	bne.n	80072e2 <memset+0xa>
 80072e0:	4770      	bx	lr
 80072e2:	7019      	strb	r1, [r3, #0]
 80072e4:	3301      	adds	r3, #1
 80072e6:	e7f9      	b.n	80072dc <memset+0x4>

080072e8 <_init>:
 80072e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ea:	46c0      	nop			; (mov r8, r8)
 80072ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072ee:	bc08      	pop	{r3}
 80072f0:	469e      	mov	lr, r3
 80072f2:	4770      	bx	lr

080072f4 <_fini>:
 80072f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072f6:	46c0      	nop			; (mov r8, r8)
 80072f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072fa:	bc08      	pop	{r3}
 80072fc:	469e      	mov	lr, r3
 80072fe:	4770      	bx	lr
