
nucleo-l476-spi-eeprom.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c9c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000158  08004e2c  08004e2c  00014e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f84  08004f84  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004f84  08004f84  00014f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f8c  08004f8c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f8c  08004f8c  00014f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f90  08004f90  00014f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004f94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  20000070  08005004  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000018c  08005004  0002018c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c7d5  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a0c  00000000  00000000  0002c875  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa8  00000000  00000000  0002e288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a00  00000000  00000000  0002ed30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026530  00000000  00000000  0002f730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ce1f  00000000  00000000  00055c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ebcf7  00000000  00000000  00062a7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014e776  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f50  00000000  00000000  0014e7c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004e14 	.word	0x08004e14

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08004e14 	.word	0x08004e14

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b0a6      	sub	sp, #152	; 0x98
 8000578:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057a:	f000 fd0d 	bl	8000f98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057e:	f000 fa81 	bl	8000a84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000582:	f000 fb3f 	bl	8000c04 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000586:	f000 fb0d 	bl	8000ba4 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800058a:	f000 facd 	bl	8000b28 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  // CS pin should be default high
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800058e:	2201      	movs	r2, #1
 8000590:	2140      	movs	r1, #64	; 0x40
 8000592:	48c4      	ldr	r0, [pc, #784]	; (80008a4 <main+0x330>)
 8000594:	f001 f80c 	bl	80015b0 <HAL_GPIO_WritePin>

  //Say something proba uarta
  uart_buf_len = sprintf(uart_buf, "SPI Test\r\n");
 8000598:	f107 031c 	add.w	r3, r7, #28
 800059c:	49c2      	ldr	r1, [pc, #776]	; (80008a8 <main+0x334>)
 800059e:	4618      	mov	r0, r3
 80005a0:	f003 ffca 	bl	8004538 <siprintf>
 80005a4:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 80005a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80005ac:	b29a      	uxth	r2, r3
 80005ae:	f107 011c 	add.w	r1, r7, #28
 80005b2:	2364      	movs	r3, #100	; 0x64
 80005b4:	48bd      	ldr	r0, [pc, #756]	; (80008ac <main+0x338>)
 80005b6:	f003 fa91 	bl	8003adc <HAL_UART_Transmit>

  //Enable write enable latch (allow write operations)
  //aby cokolwiek wysalc wren sent
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80005ba:	2200      	movs	r2, #0
 80005bc:	2140      	movs	r1, #64	; 0x40
 80005be:	48b9      	ldr	r0, [pc, #740]	; (80008a4 <main+0x330>)
 80005c0:	f000 fff6 	bl	80015b0 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_WREN, 1, 100); //chcemy pisac do niego
 80005c4:	2364      	movs	r3, #100	; 0x64
 80005c6:	2201      	movs	r2, #1
 80005c8:	49b9      	ldr	r1, [pc, #740]	; (80008b0 <main+0x33c>)
 80005ca:	48ba      	ldr	r0, [pc, #744]	; (80008b4 <main+0x340>)
 80005cc:	f002 fbcb 	bl	8002d66 <HAL_SPI_Transmit>
  //(cast the data we wish to send to an 8bit unsigned integer pointer)
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80005d0:	2201      	movs	r2, #1
 80005d2:	2140      	movs	r1, #64	; 0x40
 80005d4:	48b3      	ldr	r0, [pc, #716]	; (80008a4 <main+0x330>)
 80005d6:	f000 ffeb 	bl	80015b0 <HAL_GPIO_WritePin>


  //Read status register
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80005da:	2200      	movs	r2, #0
 80005dc:	2140      	movs	r1, #64	; 0x40
 80005de:	48b1      	ldr	r0, [pc, #708]	; (80008a4 <main+0x330>)
 80005e0:	f000 ffe6 	bl	80015b0 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_RDSR, 1, 100); //czytamy status register
 80005e4:	2364      	movs	r3, #100	; 0x64
 80005e6:	2201      	movs	r2, #1
 80005e8:	49b3      	ldr	r1, [pc, #716]	; (80008b8 <main+0x344>)
 80005ea:	48b2      	ldr	r0, [pc, #712]	; (80008b4 <main+0x340>)
 80005ec:	f002 fbbb 	bl	8002d66 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, (uint8_t *)spi_buf, 1, 100);
 80005f0:	f107 0108 	add.w	r1, r7, #8
 80005f4:	2364      	movs	r3, #100	; 0x64
 80005f6:	2201      	movs	r2, #1
 80005f8:	48ae      	ldr	r0, [pc, #696]	; (80008b4 <main+0x340>)
 80005fa:	f002 fd22 	bl	8003042 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80005fe:	2201      	movs	r2, #1
 8000600:	2140      	movs	r1, #64	; 0x40
 8000602:	48a8      	ldr	r0, [pc, #672]	; (80008a4 <main+0x330>)
 8000604:	f000 ffd4 	bl	80015b0 <HAL_GPIO_WritePin>
  //odebrenie hex 0x02 -> ustawienie bitu wel a to znaczy ze write enable jest mzoliwe

  // Print out status register WEL write enable latch (bit 2)
  uart_buf_len = sprintf(uart_buf,
		  	  	  	  	  "Status if WEL is set: 0x%02x\r\n",
						  (unsigned int)spi_buf[0]);
 8000608:	7a3b      	ldrb	r3, [r7, #8]
  uart_buf_len = sprintf(uart_buf,
 800060a:	461a      	mov	r2, r3
 800060c:	f107 031c 	add.w	r3, r7, #28
 8000610:	49aa      	ldr	r1, [pc, #680]	; (80008bc <main+0x348>)
 8000612:	4618      	mov	r0, r3
 8000614:	f003 ff90 	bl	8004538 <siprintf>
 8000618:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 800061c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000620:	b29a      	uxth	r2, r3
 8000622:	f107 011c 	add.w	r1, r7, #28
 8000626:	2364      	movs	r3, #100	; 0x64
 8000628:	48a0      	ldr	r0, [pc, #640]	; (80008ac <main+0x338>)
 800062a:	f003 fa57 	bl	8003adc <HAL_UART_Transmit>

#endif

#ifdef blockWriting

    spi_buf[0] |= (1<<3);
 800062e:	7a3b      	ldrb	r3, [r7, #8]
 8000630:	f043 0308 	orr.w	r3, r3, #8
 8000634:	b2db      	uxtb	r3, r3
 8000636:	723b      	strb	r3, [r7, #8]
  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000638:	2200      	movs	r2, #0
 800063a:	2140      	movs	r1, #64	; 0x40
 800063c:	4899      	ldr	r0, [pc, #612]	; (80008a4 <main+0x330>)
 800063e:	f000 ffb7 	bl	80015b0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_WRSR, 1, 100); //chcemy pisac do niego
 8000642:	2364      	movs	r3, #100	; 0x64
 8000644:	2201      	movs	r2, #1
 8000646:	499e      	ldr	r1, [pc, #632]	; (80008c0 <main+0x34c>)
 8000648:	489a      	ldr	r0, [pc, #616]	; (80008b4 <main+0x340>)
 800064a:	f002 fb8c 	bl	8002d66 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)spi_buf, 1, 100);
 800064e:	f107 0108 	add.w	r1, r7, #8
 8000652:	2364      	movs	r3, #100	; 0x64
 8000654:	2201      	movs	r2, #1
 8000656:	4897      	ldr	r0, [pc, #604]	; (80008b4 <main+0x340>)
 8000658:	f002 fb85 	bl	8002d66 <HAL_SPI_Transmit>
    //(cast the data we wish to send to an 8bit unsigned integer pointer)
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800065c:	2201      	movs	r2, #1
 800065e:	2140      	movs	r1, #64	; 0x40
 8000660:	4890      	ldr	r0, [pc, #576]	; (80008a4 <main+0x330>)
 8000662:	f000 ffa5 	bl	80015b0 <HAL_GPIO_WritePin>
    wip = 1; //czasami zapis troche zajmuje czasu czekamy az wip sie wyzeruje
 8000666:	2301      	movs	r3, #1
 8000668:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
      while (wip)
 800066c:	e01b      	b.n	80006a6 <main+0x132>
      {
    	  // Read status register
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); //sprawdzic czy rozumiem wysyłane ponizej dane
 800066e:	2200      	movs	r2, #0
 8000670:	2140      	movs	r1, #64	; 0x40
 8000672:	488c      	ldr	r0, [pc, #560]	; (80008a4 <main+0x330>)
 8000674:	f000 ff9c 	bl	80015b0 <HAL_GPIO_WritePin>
    	  HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_RDSR, 1, 100);
 8000678:	2364      	movs	r3, #100	; 0x64
 800067a:	2201      	movs	r2, #1
 800067c:	498e      	ldr	r1, [pc, #568]	; (80008b8 <main+0x344>)
 800067e:	488d      	ldr	r0, [pc, #564]	; (80008b4 <main+0x340>)
 8000680:	f002 fb71 	bl	8002d66 <HAL_SPI_Transmit>
    	  HAL_SPI_Receive(&hspi1, (uint8_t *)spi_buf, 1, 100);
 8000684:	f107 0108 	add.w	r1, r7, #8
 8000688:	2364      	movs	r3, #100	; 0x64
 800068a:	2201      	movs	r2, #1
 800068c:	4889      	ldr	r0, [pc, #548]	; (80008b4 <main+0x340>)
 800068e:	f002 fcd8 	bl	8003042 <HAL_SPI_Receive>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000692:	2201      	movs	r2, #1
 8000694:	2140      	movs	r1, #64	; 0x40
 8000696:	4883      	ldr	r0, [pc, #524]	; (80008a4 <main+0x330>)
 8000698:	f000 ff8a 	bl	80015b0 <HAL_GPIO_WritePin>

    	  // Mask out WIP bit
    	  wip = spi_buf[0] & 0b00000001; //LSB spi_buf[0] it should be 0 -> sprytne porownanie
 800069c:	7a3b      	ldrb	r3, [r7, #8]
 800069e:	f003 0301 	and.w	r3, r3, #1
 80006a2:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
      while (wip)
 80006a6:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d1df      	bne.n	800066e <main+0xfa>
      }


    //Read status register
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80006ae:	2200      	movs	r2, #0
 80006b0:	2140      	movs	r1, #64	; 0x40
 80006b2:	487c      	ldr	r0, [pc, #496]	; (80008a4 <main+0x330>)
 80006b4:	f000 ff7c 	bl	80015b0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_RDSR, 1, 100); //czytamy status register
 80006b8:	2364      	movs	r3, #100	; 0x64
 80006ba:	2201      	movs	r2, #1
 80006bc:	497e      	ldr	r1, [pc, #504]	; (80008b8 <main+0x344>)
 80006be:	487d      	ldr	r0, [pc, #500]	; (80008b4 <main+0x340>)
 80006c0:	f002 fb51 	bl	8002d66 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, (uint8_t *)spi_buf, 1, 100);
 80006c4:	f107 0108 	add.w	r1, r7, #8
 80006c8:	2364      	movs	r3, #100	; 0x64
 80006ca:	2201      	movs	r2, #1
 80006cc:	4879      	ldr	r0, [pc, #484]	; (80008b4 <main+0x340>)
 80006ce:	f002 fcb8 	bl	8003042 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80006d2:	2201      	movs	r2, #1
 80006d4:	2140      	movs	r1, #64	; 0x40
 80006d6:	4873      	ldr	r0, [pc, #460]	; (80008a4 <main+0x330>)
 80006d8:	f000 ff6a 	bl	80015b0 <HAL_GPIO_WritePin>
    //odebrenie hex 0x02 -> ustawienie bitu wel a to znaczy ze write enable jest mzoliwe

    // Print out status register
    uart_buf_len = sprintf(uart_buf,
  		  	  	  	  	  "block register SR: 0x%02x\r\n",
  						  (unsigned int)spi_buf[0]);
 80006dc:	7a3b      	ldrb	r3, [r7, #8]
    uart_buf_len = sprintf(uart_buf,
 80006de:	461a      	mov	r2, r3
 80006e0:	f107 031c 	add.w	r3, r7, #28
 80006e4:	4977      	ldr	r1, [pc, #476]	; (80008c4 <main+0x350>)
 80006e6:	4618      	mov	r0, r3
 80006e8:	f003 ff26 	bl	8004538 <siprintf>
 80006ec:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 80006f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80006f4:	b29a      	uxth	r2, r3
 80006f6:	f107 011c 	add.w	r1, r7, #28
 80006fa:	2364      	movs	r3, #100	; 0x64
 80006fc:	486b      	ldr	r0, [pc, #428]	; (80008ac <main+0x338>)
 80006fe:	f003 f9ed 	bl	8003adc <HAL_UART_Transmit>

#endif


    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000702:	2200      	movs	r2, #0
 8000704:	2140      	movs	r1, #64	; 0x40
 8000706:	4867      	ldr	r0, [pc, #412]	; (80008a4 <main+0x330>)
 8000708:	f000 ff52 	bl	80015b0 <HAL_GPIO_WritePin>
      HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_WREN, 1, 100); //chcemy pisac do niego
 800070c:	2364      	movs	r3, #100	; 0x64
 800070e:	2201      	movs	r2, #1
 8000710:	4967      	ldr	r1, [pc, #412]	; (80008b0 <main+0x33c>)
 8000712:	4868      	ldr	r0, [pc, #416]	; (80008b4 <main+0x340>)
 8000714:	f002 fb27 	bl	8002d66 <HAL_SPI_Transmit>
      //(cast the data we wish to send to an 8bit unsigned integer pointer)
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000718:	2201      	movs	r2, #1
 800071a:	2140      	movs	r1, #64	; 0x40
 800071c:	4861      	ldr	r0, [pc, #388]	; (80008a4 <main+0x330>)
 800071e:	f000 ff47 	bl	80015b0 <HAL_GPIO_WritePin>


      //Read status register
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000722:	2200      	movs	r2, #0
 8000724:	2140      	movs	r1, #64	; 0x40
 8000726:	485f      	ldr	r0, [pc, #380]	; (80008a4 <main+0x330>)
 8000728:	f000 ff42 	bl	80015b0 <HAL_GPIO_WritePin>
      HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_RDSR, 1, 100); //czytamy status register
 800072c:	2364      	movs	r3, #100	; 0x64
 800072e:	2201      	movs	r2, #1
 8000730:	4961      	ldr	r1, [pc, #388]	; (80008b8 <main+0x344>)
 8000732:	4860      	ldr	r0, [pc, #384]	; (80008b4 <main+0x340>)
 8000734:	f002 fb17 	bl	8002d66 <HAL_SPI_Transmit>
      HAL_SPI_Receive(&hspi1, (uint8_t *)spi_buf, 1, 100);
 8000738:	f107 0108 	add.w	r1, r7, #8
 800073c:	2364      	movs	r3, #100	; 0x64
 800073e:	2201      	movs	r2, #1
 8000740:	485c      	ldr	r0, [pc, #368]	; (80008b4 <main+0x340>)
 8000742:	f002 fc7e 	bl	8003042 <HAL_SPI_Receive>
      HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000746:	2201      	movs	r2, #1
 8000748:	2140      	movs	r1, #64	; 0x40
 800074a:	4856      	ldr	r0, [pc, #344]	; (80008a4 <main+0x330>)
 800074c:	f000 ff30 	bl	80015b0 <HAL_GPIO_WritePin>
      //odebrenie hex 0x02 -> ustawienie bitu wel a to znaczy ze write enable jest mzoliwe

      // Print out status register WEL write enable latch (bit 2)
      uart_buf_len = sprintf(uart_buf,
    		  	  	  	  	  "enable rewrite register: 0x%02x\r\n",
    						  (unsigned int)spi_buf[0]);
 8000750:	7a3b      	ldrb	r3, [r7, #8]
      uart_buf_len = sprintf(uart_buf,
 8000752:	461a      	mov	r2, r3
 8000754:	f107 031c 	add.w	r3, r7, #28
 8000758:	495b      	ldr	r1, [pc, #364]	; (80008c8 <main+0x354>)
 800075a:	4618      	mov	r0, r3
 800075c:	f003 feec 	bl	8004538 <siprintf>
 8000760:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
      HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 8000764:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000768:	b29a      	uxth	r2, r3
 800076a:	f107 011c 	add.w	r1, r7, #28
 800076e:	2364      	movs	r3, #100	; 0x64
 8000770:	484e      	ldr	r0, [pc, #312]	; (80008ac <main+0x338>)
 8000772:	f003 f9b3 	bl	8003adc <HAL_UART_Transmit>
  /*spi_buf[0] = 0x00;
  spi_buf[1] = 0xCD;
  spi_buf[2] = 0x00;
  spi_buf[3] = 0x69;*/

    int temp=0x60;
 8000776:	2360      	movs	r3, #96	; 0x60
 8000778:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  for (int i = 0; i<16; i++){
 800077c:	2300      	movs	r3, #0
 800077e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8000782:	e011      	b.n	80007a8 <main+0x234>
  	  spi_buf[i] = temp++;
 8000784:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000788:	1c5a      	adds	r2, r3, #1
 800078a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800078e:	b2d9      	uxtb	r1, r3
 8000790:	f107 0208 	add.w	r2, r7, #8
 8000794:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000798:	4413      	add	r3, r2
 800079a:	460a      	mov	r2, r1
 800079c:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i<16; i++){
 800079e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80007a2:	3301      	adds	r3, #1
 80007a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80007a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80007ac:	2b0f      	cmp	r3, #15
 80007ae:	dde9      	ble.n	8000784 <main+0x210>
  	//spi_buf[i] = 0;
    }

  // Set starting address
  addr = 0xFE;
 80007b0:	23fe      	movs	r3, #254	; 0xfe
 80007b2:	71fb      	strb	r3, [r7, #7]
  // read address
  readAddr = 0xFE;
 80007b4:	23fe      	movs	r3, #254	; 0xfe
 80007b6:	71bb      	strb	r3, [r7, #6]

  // Write 3 bytes starting at given address
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80007b8:	2200      	movs	r2, #0
 80007ba:	2140      	movs	r1, #64	; 0x40
 80007bc:	4839      	ldr	r0, [pc, #228]	; (80008a4 <main+0x330>)
 80007be:	f000 fef7 	bl	80015b0 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_WRITE, 1, 100); //Write data to memory array beginning at selected address
 80007c2:	2364      	movs	r3, #100	; 0x64
 80007c4:	2201      	movs	r2, #1
 80007c6:	4941      	ldr	r1, [pc, #260]	; (80008cc <main+0x358>)
 80007c8:	483a      	ldr	r0, [pc, #232]	; (80008b4 <main+0x340>)
 80007ca:	f002 facc 	bl	8002d66 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, (uint8_t *)&addr, 1, 100); 	//od jakiego adresu zaczynamy pisac
 80007ce:	1df9      	adds	r1, r7, #7
 80007d0:	2364      	movs	r3, #100	; 0x64
 80007d2:	2201      	movs	r2, #1
 80007d4:	4837      	ldr	r0, [pc, #220]	; (80008b4 <main+0x340>)
 80007d6:	f002 fac6 	bl	8002d66 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_buf, 16, 100);//wyslanie 3 bajtow
 80007da:	f107 0108 	add.w	r1, r7, #8
 80007de:	2364      	movs	r3, #100	; 0x64
 80007e0:	2210      	movs	r2, #16
 80007e2:	4834      	ldr	r0, [pc, #208]	; (80008b4 <main+0x340>)
 80007e4:	f002 fabf 	bl	8002d66 <HAL_SPI_Transmit>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80007e8:	2201      	movs	r2, #1
 80007ea:	2140      	movs	r1, #64	; 0x40
 80007ec:	482d      	ldr	r0, [pc, #180]	; (80008a4 <main+0x330>)
 80007ee:	f000 fedf 	bl	80015b0 <HAL_GPIO_WritePin>
  // zeros read bytes
  for (int i = 0; i<16; i++){
 80007f2:	2300      	movs	r3, #0
 80007f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80007f8:	e00b      	b.n	8000812 <main+0x29e>
	  spi_buf[i] = 0;
 80007fa:	f107 0208 	add.w	r2, r7, #8
 80007fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000802:	4413      	add	r3, r2
 8000804:	2200      	movs	r2, #0
 8000806:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i<16; i++){
 8000808:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800080c:	3301      	adds	r3, #1
 800080e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8000812:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8000816:	2b0f      	cmp	r3, #15
 8000818:	ddef      	ble.n	80007fa <main+0x286>
  }



  // Wait until WIP bit is cleared
  wip = 1; //czasami zapis troche zajmuje czasu czekamy az wip sie wyzeruje
 800081a:	2301      	movs	r3, #1
 800081c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  while (wip)
 8000820:	e01b      	b.n	800085a <main+0x2e6>
  {
	  // Read status register
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); //sprawdzic czy rozumiem wysyłane ponizej dane
 8000822:	2200      	movs	r2, #0
 8000824:	2140      	movs	r1, #64	; 0x40
 8000826:	481f      	ldr	r0, [pc, #124]	; (80008a4 <main+0x330>)
 8000828:	f000 fec2 	bl	80015b0 <HAL_GPIO_WritePin>
	  HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_RDSR, 1, 100);
 800082c:	2364      	movs	r3, #100	; 0x64
 800082e:	2201      	movs	r2, #1
 8000830:	4921      	ldr	r1, [pc, #132]	; (80008b8 <main+0x344>)
 8000832:	4820      	ldr	r0, [pc, #128]	; (80008b4 <main+0x340>)
 8000834:	f002 fa97 	bl	8002d66 <HAL_SPI_Transmit>
	  HAL_SPI_Receive(&hspi1, (uint8_t *)spi_buf, 1, 100);
 8000838:	f107 0108 	add.w	r1, r7, #8
 800083c:	2364      	movs	r3, #100	; 0x64
 800083e:	2201      	movs	r2, #1
 8000840:	481c      	ldr	r0, [pc, #112]	; (80008b4 <main+0x340>)
 8000842:	f002 fbfe 	bl	8003042 <HAL_SPI_Receive>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000846:	2201      	movs	r2, #1
 8000848:	2140      	movs	r1, #64	; 0x40
 800084a:	4816      	ldr	r0, [pc, #88]	; (80008a4 <main+0x330>)
 800084c:	f000 feb0 	bl	80015b0 <HAL_GPIO_WritePin>

	  // Mask out WIP bit
	  wip = spi_buf[0] & 0b00000001; //LSB spi_buf[0] it should be 0 -> sprytne porownanie
 8000850:	7a3b      	ldrb	r3, [r7, #8]
 8000852:	f003 0301 	and.w	r3, r3, #1
 8000856:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  while (wip)
 800085a:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800085e:	2b00      	cmp	r3, #0
 8000860:	d1df      	bne.n	8000822 <main+0x2ae>
  }

  // Read the 3 bytes back
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	2140      	movs	r1, #64	; 0x40
 8000866:	480f      	ldr	r0, [pc, #60]	; (80008a4 <main+0x330>)
 8000868:	f000 fea2 	bl	80015b0 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_READ, 1, 100);
 800086c:	2364      	movs	r3, #100	; 0x64
 800086e:	2201      	movs	r2, #1
 8000870:	4917      	ldr	r1, [pc, #92]	; (80008d0 <main+0x35c>)
 8000872:	4810      	ldr	r0, [pc, #64]	; (80008b4 <main+0x340>)
 8000874:	f002 fa77 	bl	8002d66 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, (uint8_t *)&readAddr, 1, 100); 			//czytaj od tego aderes a pozneij go zwieksza
 8000878:	1db9      	adds	r1, r7, #6
 800087a:	2364      	movs	r3, #100	; 0x64
 800087c:	2201      	movs	r2, #1
 800087e:	480d      	ldr	r0, [pc, #52]	; (80008b4 <main+0x340>)
 8000880:	f002 fa71 	bl	8002d66 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, (uint8_t *)&spi_buf, 16, 100);
 8000884:	f107 0108 	add.w	r1, r7, #8
 8000888:	2364      	movs	r3, #100	; 0x64
 800088a:	2210      	movs	r2, #16
 800088c:	4809      	ldr	r0, [pc, #36]	; (80008b4 <main+0x340>)
 800088e:	f002 fbd8 	bl	8003042 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000892:	2201      	movs	r2, #1
 8000894:	2140      	movs	r1, #64	; 0x40
 8000896:	4803      	ldr	r0, [pc, #12]	; (80008a4 <main+0x330>)
 8000898:	f000 fe8a 	bl	80015b0 <HAL_GPIO_WritePin>

  // Print out bytes read
  for (int i=0;i<16;i++){
 800089c:	2300      	movs	r3, #0
 800089e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80008a2:	e034      	b.n	800090e <main+0x39a>
 80008a4:	48000400 	.word	0x48000400
 80008a8:	08004e2c 	.word	0x08004e2c
 80008ac:	200000f0 	.word	0x200000f0
 80008b0:	08004f05 	.word	0x08004f05
 80008b4:	2000008c 	.word	0x2000008c
 80008b8:	08004f06 	.word	0x08004f06
 80008bc:	08004e38 	.word	0x08004e38
 80008c0:	08004f07 	.word	0x08004f07
 80008c4:	08004e58 	.word	0x08004e58
 80008c8:	08004e74 	.word	0x08004e74
 80008cc:	08004f04 	.word	0x08004f04
 80008d0:	08004f03 	.word	0x08004f03
	  uart_buf_len = sprintf(uart_buf,
  		  	  	  	  	  "Status read byte nr %d: 0x%02x\r\n",
						  i,
  						  (unsigned int)spi_buf[i]);
 80008d4:	f107 0208 	add.w	r2, r7, #8
 80008d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80008dc:	4413      	add	r3, r2
 80008de:	781b      	ldrb	r3, [r3, #0]
	  uart_buf_len = sprintf(uart_buf,
 80008e0:	f107 001c 	add.w	r0, r7, #28
 80008e4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80008e8:	495d      	ldr	r1, [pc, #372]	; (8000a60 <main+0x4ec>)
 80008ea:	f003 fe25 	bl	8004538 <siprintf>
 80008ee:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
	  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 80008f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80008f6:	b29a      	uxth	r2, r3
 80008f8:	f107 011c 	add.w	r1, r7, #28
 80008fc:	2364      	movs	r3, #100	; 0x64
 80008fe:	4859      	ldr	r0, [pc, #356]	; (8000a64 <main+0x4f0>)
 8000900:	f003 f8ec 	bl	8003adc <HAL_UART_Transmit>
  for (int i=0;i<16;i++){
 8000904:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000908:	3301      	adds	r3, #1
 800090a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800090e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000912:	2b0f      	cmp	r3, #15
 8000914:	ddde      	ble.n	80008d4 <main+0x360>
  }


  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000916:	2200      	movs	r2, #0
 8000918:	2140      	movs	r1, #64	; 0x40
 800091a:	4853      	ldr	r0, [pc, #332]	; (8000a68 <main+0x4f4>)
 800091c:	f000 fe48 	bl	80015b0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_WREN, 1, 100); //chcemy pisac do niego
 8000920:	2364      	movs	r3, #100	; 0x64
 8000922:	2201      	movs	r2, #1
 8000924:	4951      	ldr	r1, [pc, #324]	; (8000a6c <main+0x4f8>)
 8000926:	4852      	ldr	r0, [pc, #328]	; (8000a70 <main+0x4fc>)
 8000928:	f002 fa1d 	bl	8002d66 <HAL_SPI_Transmit>
    //(cast the data we wish to send to an 8bit unsigned integer pointer)
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800092c:	2201      	movs	r2, #1
 800092e:	2140      	movs	r1, #64	; 0x40
 8000930:	484d      	ldr	r0, [pc, #308]	; (8000a68 <main+0x4f4>)
 8000932:	f000 fe3d 	bl	80015b0 <HAL_GPIO_WritePin>
  // Read status register
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); //sprawdzic czy rozumiem wysyłane ponizej dane
 8000936:	2200      	movs	r2, #0
 8000938:	2140      	movs	r1, #64	; 0x40
 800093a:	484b      	ldr	r0, [pc, #300]	; (8000a68 <main+0x4f4>)
 800093c:	f000 fe38 	bl	80015b0 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_RDSR, 1, 100);
 8000940:	2364      	movs	r3, #100	; 0x64
 8000942:	2201      	movs	r2, #1
 8000944:	494b      	ldr	r1, [pc, #300]	; (8000a74 <main+0x500>)
 8000946:	484a      	ldr	r0, [pc, #296]	; (8000a70 <main+0x4fc>)
 8000948:	f002 fa0d 	bl	8002d66 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi1, (uint8_t *)spi_buf, 1, 100);
 800094c:	f107 0108 	add.w	r1, r7, #8
 8000950:	2364      	movs	r3, #100	; 0x64
 8000952:	2201      	movs	r2, #1
 8000954:	4846      	ldr	r0, [pc, #280]	; (8000a70 <main+0x4fc>)
 8000956:	f002 fb74 	bl	8003042 <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800095a:	2201      	movs	r2, #1
 800095c:	2140      	movs	r1, #64	; 0x40
 800095e:	4842      	ldr	r0, [pc, #264]	; (8000a68 <main+0x4f4>)
 8000960:	f000 fe26 	bl	80015b0 <HAL_GPIO_WritePin>

  // Print out status register
  uart_buf_len = sprintf(uart_buf,
	  	  	  	  	  "zapis aby wylaczyc: 0x%02x\r\n",
					  (unsigned int)spi_buf[0]);
 8000964:	7a3b      	ldrb	r3, [r7, #8]
  uart_buf_len = sprintf(uart_buf,
 8000966:	461a      	mov	r2, r3
 8000968:	f107 031c 	add.w	r3, r7, #28
 800096c:	4942      	ldr	r1, [pc, #264]	; (8000a78 <main+0x504>)
 800096e:	4618      	mov	r0, r3
 8000970:	f003 fde2 	bl	8004538 <siprintf>
 8000974:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
  HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 8000978:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800097c:	b29a      	uxth	r2, r3
 800097e:	f107 011c 	add.w	r1, r7, #28
 8000982:	2364      	movs	r3, #100	; 0x64
 8000984:	4837      	ldr	r0, [pc, #220]	; (8000a64 <main+0x4f0>)
 8000986:	f003 f8a9 	bl	8003adc <HAL_UART_Transmit>

  //odczytanie 0 wel czyli do zapisu wyzerował sie poniewaz poprawnie zapisalismy do niego dane
#ifdef blockWriting

  	spi_buf[0] &= 0xF7;
 800098a:	7a3b      	ldrb	r3, [r7, #8]
 800098c:	f023 0308 	bic.w	r3, r3, #8
 8000990:	b2db      	uxtb	r3, r3
 8000992:	723b      	strb	r3, [r7, #8]
  	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000994:	2200      	movs	r2, #0
 8000996:	2140      	movs	r1, #64	; 0x40
 8000998:	4833      	ldr	r0, [pc, #204]	; (8000a68 <main+0x4f4>)
 800099a:	f000 fe09 	bl	80015b0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_WRSR, 1, 100); //chcemy pisac do niego
 800099e:	2364      	movs	r3, #100	; 0x64
 80009a0:	2201      	movs	r2, #1
 80009a2:	4936      	ldr	r1, [pc, #216]	; (8000a7c <main+0x508>)
 80009a4:	4832      	ldr	r0, [pc, #200]	; (8000a70 <main+0x4fc>)
 80009a6:	f002 f9de 	bl	8002d66 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)spi_buf, 1, 100);
 80009aa:	f107 0108 	add.w	r1, r7, #8
 80009ae:	2364      	movs	r3, #100	; 0x64
 80009b0:	2201      	movs	r2, #1
 80009b2:	482f      	ldr	r0, [pc, #188]	; (8000a70 <main+0x4fc>)
 80009b4:	f002 f9d7 	bl	8002d66 <HAL_SPI_Transmit>
    //(cast the data we wish to send to an 8bit unsigned integer pointer)
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80009b8:	2201      	movs	r2, #1
 80009ba:	2140      	movs	r1, #64	; 0x40
 80009bc:	482a      	ldr	r0, [pc, #168]	; (8000a68 <main+0x4f4>)
 80009be:	f000 fdf7 	bl	80015b0 <HAL_GPIO_WritePin>
    wip = 1; //czasami zapis troche zajmuje czasu czekamy az wip sie wyzeruje
 80009c2:	2301      	movs	r3, #1
 80009c4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
      while (wip)
 80009c8:	e01b      	b.n	8000a02 <main+0x48e>
      {
    	  // Read status register
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET); //sprawdzic czy rozumiem wysyłane ponizej dane
 80009ca:	2200      	movs	r2, #0
 80009cc:	2140      	movs	r1, #64	; 0x40
 80009ce:	4826      	ldr	r0, [pc, #152]	; (8000a68 <main+0x4f4>)
 80009d0:	f000 fdee 	bl	80015b0 <HAL_GPIO_WritePin>
    	  HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_RDSR, 1, 100);
 80009d4:	2364      	movs	r3, #100	; 0x64
 80009d6:	2201      	movs	r2, #1
 80009d8:	4926      	ldr	r1, [pc, #152]	; (8000a74 <main+0x500>)
 80009da:	4825      	ldr	r0, [pc, #148]	; (8000a70 <main+0x4fc>)
 80009dc:	f002 f9c3 	bl	8002d66 <HAL_SPI_Transmit>
    	  HAL_SPI_Receive(&hspi1, (uint8_t *)spi_buf, 1, 100);
 80009e0:	f107 0108 	add.w	r1, r7, #8
 80009e4:	2364      	movs	r3, #100	; 0x64
 80009e6:	2201      	movs	r2, #1
 80009e8:	4821      	ldr	r0, [pc, #132]	; (8000a70 <main+0x4fc>)
 80009ea:	f002 fb2a 	bl	8003042 <HAL_SPI_Receive>
    	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80009ee:	2201      	movs	r2, #1
 80009f0:	2140      	movs	r1, #64	; 0x40
 80009f2:	481d      	ldr	r0, [pc, #116]	; (8000a68 <main+0x4f4>)
 80009f4:	f000 fddc 	bl	80015b0 <HAL_GPIO_WritePin>

    	  // Mask out WIP bit
    	  wip = spi_buf[0] & 0b00000001; //LSB spi_buf[0] it should be 0 -> sprytne porownanie
 80009f8:	7a3b      	ldrb	r3, [r7, #8]
 80009fa:	f003 0301 	and.w	r3, r3, #1
 80009fe:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
      while (wip)
 8000a02:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d1df      	bne.n	80009ca <main+0x456>
      }


    //Read status register
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	2140      	movs	r1, #64	; 0x40
 8000a0e:	4816      	ldr	r0, [pc, #88]	; (8000a68 <main+0x4f4>)
 8000a10:	f000 fdce 	bl	80015b0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_RDSR, 1, 100); //czytamy status register
 8000a14:	2364      	movs	r3, #100	; 0x64
 8000a16:	2201      	movs	r2, #1
 8000a18:	4916      	ldr	r1, [pc, #88]	; (8000a74 <main+0x500>)
 8000a1a:	4815      	ldr	r0, [pc, #84]	; (8000a70 <main+0x4fc>)
 8000a1c:	f002 f9a3 	bl	8002d66 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi1, (uint8_t *)spi_buf, 1, 100);
 8000a20:	f107 0108 	add.w	r1, r7, #8
 8000a24:	2364      	movs	r3, #100	; 0x64
 8000a26:	2201      	movs	r2, #1
 8000a28:	4811      	ldr	r0, [pc, #68]	; (8000a70 <main+0x4fc>)
 8000a2a:	f002 fb0a 	bl	8003042 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000a2e:	2201      	movs	r2, #1
 8000a30:	2140      	movs	r1, #64	; 0x40
 8000a32:	480d      	ldr	r0, [pc, #52]	; (8000a68 <main+0x4f4>)
 8000a34:	f000 fdbc 	bl	80015b0 <HAL_GPIO_WritePin>
    //odebrenie hex 0x02 -> ustawienie bitu wel a to znaczy ze write enable jest mzoliwe

    // Print out status register
    uart_buf_len = sprintf(uart_buf,
  		  	  	  	  	  "block register SR at the end: 0x%02x\r\n",
  						  (unsigned int)spi_buf[0]);
 8000a38:	7a3b      	ldrb	r3, [r7, #8]
    uart_buf_len = sprintf(uart_buf,
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	f107 031c 	add.w	r3, r7, #28
 8000a40:	490f      	ldr	r1, [pc, #60]	; (8000a80 <main+0x50c>)
 8000a42:	4618      	mov	r0, r3
 8000a44:	f003 fd78 	bl	8004538 <siprintf>
 8000a48:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
    HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 8000a4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8000a50:	b29a      	uxth	r2, r3
 8000a52:	f107 011c 	add.w	r1, r7, #28
 8000a56:	2364      	movs	r3, #100	; 0x64
 8000a58:	4802      	ldr	r0, [pc, #8]	; (8000a64 <main+0x4f0>)
 8000a5a:	f003 f83f 	bl	8003adc <HAL_UART_Transmit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a5e:	e7fe      	b.n	8000a5e <main+0x4ea>
 8000a60:	08004e98 	.word	0x08004e98
 8000a64:	200000f0 	.word	0x200000f0
 8000a68:	48000400 	.word	0x48000400
 8000a6c:	08004f05 	.word	0x08004f05
 8000a70:	2000008c 	.word	0x2000008c
 8000a74:	08004f06 	.word	0x08004f06
 8000a78:	08004ebc 	.word	0x08004ebc
 8000a7c:	08004f07 	.word	0x08004f07
 8000a80:	08004edc 	.word	0x08004edc

08000a84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b096      	sub	sp, #88	; 0x58
 8000a88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a8a:	f107 0314 	add.w	r3, r7, #20
 8000a8e:	2244      	movs	r2, #68	; 0x44
 8000a90:	2100      	movs	r1, #0
 8000a92:	4618      	mov	r0, r3
 8000a94:	f003 fd48 	bl	8004528 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a98:	463b      	mov	r3, r7
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
 8000aa0:	609a      	str	r2, [r3, #8]
 8000aa2:	60da      	str	r2, [r3, #12]
 8000aa4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000aa6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000aaa:	f000 fda7 	bl	80015fc <HAL_PWREx_ControlVoltageScaling>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000ab4:	f000 f90c 	bl	8000cd0 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ab8:	2302      	movs	r3, #2
 8000aba:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000abc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ac0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ac2:	2310      	movs	r3, #16
 8000ac4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000aca:	2302      	movs	r3, #2
 8000acc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000ace:	2301      	movs	r3, #1
 8000ad0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000ad2:	230a      	movs	r3, #10
 8000ad4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000ad6:	2307      	movs	r3, #7
 8000ad8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ada:	2302      	movs	r3, #2
 8000adc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ade:	2302      	movs	r3, #2
 8000ae0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ae2:	f107 0314 	add.w	r3, r7, #20
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f000 fdde 	bl	80016a8 <HAL_RCC_OscConfig>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000af2:	f000 f8ed 	bl	8000cd0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000af6:	230f      	movs	r3, #15
 8000af8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000afa:	2303      	movs	r3, #3
 8000afc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000afe:	2300      	movs	r3, #0
 8000b00:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b02:	2300      	movs	r3, #0
 8000b04:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b06:	2300      	movs	r3, #0
 8000b08:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b0a:	463b      	mov	r3, r7
 8000b0c:	2104      	movs	r1, #4
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f001 f9a6 	bl	8001e60 <HAL_RCC_ClockConfig>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b1a:	f000 f8d9 	bl	8000cd0 <Error_Handler>
  }
}
 8000b1e:	bf00      	nop
 8000b20:	3758      	adds	r7, #88	; 0x58
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
	...

08000b28 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b2c:	4b1b      	ldr	r3, [pc, #108]	; (8000b9c <MX_SPI1_Init+0x74>)
 8000b2e:	4a1c      	ldr	r2, [pc, #112]	; (8000ba0 <MX_SPI1_Init+0x78>)
 8000b30:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b32:	4b1a      	ldr	r3, [pc, #104]	; (8000b9c <MX_SPI1_Init+0x74>)
 8000b34:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b38:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b3a:	4b18      	ldr	r3, [pc, #96]	; (8000b9c <MX_SPI1_Init+0x74>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b40:	4b16      	ldr	r3, [pc, #88]	; (8000b9c <MX_SPI1_Init+0x74>)
 8000b42:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000b46:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b48:	4b14      	ldr	r3, [pc, #80]	; (8000b9c <MX_SPI1_Init+0x74>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b4e:	4b13      	ldr	r3, [pc, #76]	; (8000b9c <MX_SPI1_Init+0x74>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b54:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <MX_SPI1_Init+0x74>)
 8000b56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b5a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000b5c:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <MX_SPI1_Init+0x74>)
 8000b5e:	2228      	movs	r2, #40	; 0x28
 8000b60:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b62:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <MX_SPI1_Init+0x74>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b68:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <MX_SPI1_Init+0x74>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b6e:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <MX_SPI1_Init+0x74>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000b74:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <MX_SPI1_Init+0x74>)
 8000b76:	2207      	movs	r2, #7
 8000b78:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000b7a:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <MX_SPI1_Init+0x74>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000b80:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <MX_SPI1_Init+0x74>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b86:	4805      	ldr	r0, [pc, #20]	; (8000b9c <MX_SPI1_Init+0x74>)
 8000b88:	f002 f84a 	bl	8002c20 <HAL_SPI_Init>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000b92:	f000 f89d 	bl	8000cd0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	2000008c 	.word	0x2000008c
 8000ba0:	40013000 	.word	0x40013000

08000ba4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ba8:	4b14      	ldr	r3, [pc, #80]	; (8000bfc <MX_USART2_UART_Init+0x58>)
 8000baa:	4a15      	ldr	r2, [pc, #84]	; (8000c00 <MX_USART2_UART_Init+0x5c>)
 8000bac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000bae:	4b13      	ldr	r3, [pc, #76]	; (8000bfc <MX_USART2_UART_Init+0x58>)
 8000bb0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bb4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bb6:	4b11      	ldr	r3, [pc, #68]	; (8000bfc <MX_USART2_UART_Init+0x58>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000bbc:	4b0f      	ldr	r3, [pc, #60]	; (8000bfc <MX_USART2_UART_Init+0x58>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000bc2:	4b0e      	ldr	r3, [pc, #56]	; (8000bfc <MX_USART2_UART_Init+0x58>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bc8:	4b0c      	ldr	r3, [pc, #48]	; (8000bfc <MX_USART2_UART_Init+0x58>)
 8000bca:	220c      	movs	r2, #12
 8000bcc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bce:	4b0b      	ldr	r3, [pc, #44]	; (8000bfc <MX_USART2_UART_Init+0x58>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bd4:	4b09      	ldr	r3, [pc, #36]	; (8000bfc <MX_USART2_UART_Init+0x58>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bda:	4b08      	ldr	r3, [pc, #32]	; (8000bfc <MX_USART2_UART_Init+0x58>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <MX_USART2_UART_Init+0x58>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000be6:	4805      	ldr	r0, [pc, #20]	; (8000bfc <MX_USART2_UART_Init+0x58>)
 8000be8:	f002 ff2a 	bl	8003a40 <HAL_UART_Init>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000bf2:	f000 f86d 	bl	8000cd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bf6:	bf00      	nop
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	200000f0 	.word	0x200000f0
 8000c00:	40004400 	.word	0x40004400

08000c04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08a      	sub	sp, #40	; 0x28
 8000c08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0a:	f107 0314 	add.w	r3, r7, #20
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	605a      	str	r2, [r3, #4]
 8000c14:	609a      	str	r2, [r3, #8]
 8000c16:	60da      	str	r2, [r3, #12]
 8000c18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c1a:	4b2a      	ldr	r3, [pc, #168]	; (8000cc4 <MX_GPIO_Init+0xc0>)
 8000c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c1e:	4a29      	ldr	r2, [pc, #164]	; (8000cc4 <MX_GPIO_Init+0xc0>)
 8000c20:	f043 0304 	orr.w	r3, r3, #4
 8000c24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c26:	4b27      	ldr	r3, [pc, #156]	; (8000cc4 <MX_GPIO_Init+0xc0>)
 8000c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2a:	f003 0304 	and.w	r3, r3, #4
 8000c2e:	613b      	str	r3, [r7, #16]
 8000c30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c32:	4b24      	ldr	r3, [pc, #144]	; (8000cc4 <MX_GPIO_Init+0xc0>)
 8000c34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c36:	4a23      	ldr	r2, [pc, #140]	; (8000cc4 <MX_GPIO_Init+0xc0>)
 8000c38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c3e:	4b21      	ldr	r3, [pc, #132]	; (8000cc4 <MX_GPIO_Init+0xc0>)
 8000c40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4a:	4b1e      	ldr	r3, [pc, #120]	; (8000cc4 <MX_GPIO_Init+0xc0>)
 8000c4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c4e:	4a1d      	ldr	r2, [pc, #116]	; (8000cc4 <MX_GPIO_Init+0xc0>)
 8000c50:	f043 0301 	orr.w	r3, r3, #1
 8000c54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c56:	4b1b      	ldr	r3, [pc, #108]	; (8000cc4 <MX_GPIO_Init+0xc0>)
 8000c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c5a:	f003 0301 	and.w	r3, r3, #1
 8000c5e:	60bb      	str	r3, [r7, #8]
 8000c60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c62:	4b18      	ldr	r3, [pc, #96]	; (8000cc4 <MX_GPIO_Init+0xc0>)
 8000c64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c66:	4a17      	ldr	r2, [pc, #92]	; (8000cc4 <MX_GPIO_Init+0xc0>)
 8000c68:	f043 0302 	orr.w	r3, r3, #2
 8000c6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c6e:	4b15      	ldr	r3, [pc, #84]	; (8000cc4 <MX_GPIO_Init+0xc0>)
 8000c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c72:	f003 0302 	and.w	r3, r3, #2
 8000c76:	607b      	str	r3, [r7, #4]
 8000c78:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2140      	movs	r1, #64	; 0x40
 8000c7e:	4812      	ldr	r0, [pc, #72]	; (8000cc8 <MX_GPIO_Init+0xc4>)
 8000c80:	f000 fc96 	bl	80015b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c8a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c8e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	2300      	movs	r3, #0
 8000c92:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	4619      	mov	r1, r3
 8000c9a:	480c      	ldr	r0, [pc, #48]	; (8000ccc <MX_GPIO_Init+0xc8>)
 8000c9c:	f000 fade 	bl	800125c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ca0:	2340      	movs	r3, #64	; 0x40
 8000ca2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cac:	2300      	movs	r3, #0
 8000cae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb0:	f107 0314 	add.w	r3, r7, #20
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	4804      	ldr	r0, [pc, #16]	; (8000cc8 <MX_GPIO_Init+0xc4>)
 8000cb8:	f000 fad0 	bl	800125c <HAL_GPIO_Init>

}
 8000cbc:	bf00      	nop
 8000cbe:	3728      	adds	r7, #40	; 0x28
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	40021000 	.word	0x40021000
 8000cc8:	48000400 	.word	0x48000400
 8000ccc:	48000800 	.word	0x48000800

08000cd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cd4:	b672      	cpsid	i
}
 8000cd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cd8:	e7fe      	b.n	8000cd8 <Error_Handler+0x8>
	...

08000cdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce2:	4b0f      	ldr	r3, [pc, #60]	; (8000d20 <HAL_MspInit+0x44>)
 8000ce4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ce6:	4a0e      	ldr	r2, [pc, #56]	; (8000d20 <HAL_MspInit+0x44>)
 8000ce8:	f043 0301 	orr.w	r3, r3, #1
 8000cec:	6613      	str	r3, [r2, #96]	; 0x60
 8000cee:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <HAL_MspInit+0x44>)
 8000cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cf2:	f003 0301 	and.w	r3, r3, #1
 8000cf6:	607b      	str	r3, [r7, #4]
 8000cf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cfa:	4b09      	ldr	r3, [pc, #36]	; (8000d20 <HAL_MspInit+0x44>)
 8000cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cfe:	4a08      	ldr	r2, [pc, #32]	; (8000d20 <HAL_MspInit+0x44>)
 8000d00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d04:	6593      	str	r3, [r2, #88]	; 0x58
 8000d06:	4b06      	ldr	r3, [pc, #24]	; (8000d20 <HAL_MspInit+0x44>)
 8000d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d0e:	603b      	str	r3, [r7, #0]
 8000d10:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d12:	bf00      	nop
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	40021000 	.word	0x40021000

08000d24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b08a      	sub	sp, #40	; 0x28
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2c:	f107 0314 	add.w	r3, r7, #20
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a17      	ldr	r2, [pc, #92]	; (8000da0 <HAL_SPI_MspInit+0x7c>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d128      	bne.n	8000d98 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d46:	4b17      	ldr	r3, [pc, #92]	; (8000da4 <HAL_SPI_MspInit+0x80>)
 8000d48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d4a:	4a16      	ldr	r2, [pc, #88]	; (8000da4 <HAL_SPI_MspInit+0x80>)
 8000d4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d50:	6613      	str	r3, [r2, #96]	; 0x60
 8000d52:	4b14      	ldr	r3, [pc, #80]	; (8000da4 <HAL_SPI_MspInit+0x80>)
 8000d54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d5a:	613b      	str	r3, [r7, #16]
 8000d5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5e:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <HAL_SPI_MspInit+0x80>)
 8000d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d62:	4a10      	ldr	r2, [pc, #64]	; (8000da4 <HAL_SPI_MspInit+0x80>)
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d6a:	4b0e      	ldr	r3, [pc, #56]	; (8000da4 <HAL_SPI_MspInit+0x80>)
 8000d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000d76:	23e0      	movs	r3, #224	; 0xe0
 8000d78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d82:	2303      	movs	r3, #3
 8000d84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d86:	2305      	movs	r3, #5
 8000d88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8a:	f107 0314 	add.w	r3, r7, #20
 8000d8e:	4619      	mov	r1, r3
 8000d90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d94:	f000 fa62 	bl	800125c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d98:	bf00      	nop
 8000d9a:	3728      	adds	r7, #40	; 0x28
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	40013000 	.word	0x40013000
 8000da4:	40021000 	.word	0x40021000

08000da8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b0ac      	sub	sp, #176	; 0xb0
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
 8000dbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dc0:	f107 0314 	add.w	r3, r7, #20
 8000dc4:	2288      	movs	r2, #136	; 0x88
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f003 fbad 	bl	8004528 <memset>
  if(huart->Instance==USART2)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a21      	ldr	r2, [pc, #132]	; (8000e58 <HAL_UART_MspInit+0xb0>)
 8000dd4:	4293      	cmp	r3, r2
 8000dd6:	d13b      	bne.n	8000e50 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000de0:	f107 0314 	add.w	r3, r7, #20
 8000de4:	4618      	mov	r0, r3
 8000de6:	f001 fa5f 	bl	80022a8 <HAL_RCCEx_PeriphCLKConfig>
 8000dea:	4603      	mov	r3, r0
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000df0:	f7ff ff6e 	bl	8000cd0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000df4:	4b19      	ldr	r3, [pc, #100]	; (8000e5c <HAL_UART_MspInit+0xb4>)
 8000df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000df8:	4a18      	ldr	r2, [pc, #96]	; (8000e5c <HAL_UART_MspInit+0xb4>)
 8000dfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dfe:	6593      	str	r3, [r2, #88]	; 0x58
 8000e00:	4b16      	ldr	r3, [pc, #88]	; (8000e5c <HAL_UART_MspInit+0xb4>)
 8000e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e08:	613b      	str	r3, [r7, #16]
 8000e0a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0c:	4b13      	ldr	r3, [pc, #76]	; (8000e5c <HAL_UART_MspInit+0xb4>)
 8000e0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e10:	4a12      	ldr	r2, [pc, #72]	; (8000e5c <HAL_UART_MspInit+0xb4>)
 8000e12:	f043 0301 	orr.w	r3, r3, #1
 8000e16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e18:	4b10      	ldr	r3, [pc, #64]	; (8000e5c <HAL_UART_MspInit+0xb4>)
 8000e1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1c:	f003 0301 	and.w	r3, r3, #1
 8000e20:	60fb      	str	r3, [r7, #12]
 8000e22:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e24:	230c      	movs	r3, #12
 8000e26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e36:	2303      	movs	r3, #3
 8000e38:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e3c:	2307      	movs	r3, #7
 8000e3e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e42:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e46:	4619      	mov	r1, r3
 8000e48:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e4c:	f000 fa06 	bl	800125c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e50:	bf00      	nop
 8000e52:	37b0      	adds	r7, #176	; 0xb0
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40004400 	.word	0x40004400
 8000e5c:	40021000 	.word	0x40021000

08000e60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e64:	e7fe      	b.n	8000e64 <NMI_Handler+0x4>

08000e66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e6a:	e7fe      	b.n	8000e6a <HardFault_Handler+0x4>

08000e6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e70:	e7fe      	b.n	8000e70 <MemManage_Handler+0x4>

08000e72 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e72:	b480      	push	{r7}
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e76:	e7fe      	b.n	8000e76 <BusFault_Handler+0x4>

08000e78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e7c:	e7fe      	b.n	8000e7c <UsageFault_Handler+0x4>

08000e7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr

08000e9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eac:	f000 f8d0 	bl	8001050 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eb0:	bf00      	nop
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b086      	sub	sp, #24
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ebc:	4a14      	ldr	r2, [pc, #80]	; (8000f10 <_sbrk+0x5c>)
 8000ebe:	4b15      	ldr	r3, [pc, #84]	; (8000f14 <_sbrk+0x60>)
 8000ec0:	1ad3      	subs	r3, r2, r3
 8000ec2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ec8:	4b13      	ldr	r3, [pc, #76]	; (8000f18 <_sbrk+0x64>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d102      	bne.n	8000ed6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ed0:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <_sbrk+0x64>)
 8000ed2:	4a12      	ldr	r2, [pc, #72]	; (8000f1c <_sbrk+0x68>)
 8000ed4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ed6:	4b10      	ldr	r3, [pc, #64]	; (8000f18 <_sbrk+0x64>)
 8000ed8:	681a      	ldr	r2, [r3, #0]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4413      	add	r3, r2
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d207      	bcs.n	8000ef4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ee4:	f003 faf6 	bl	80044d4 <__errno>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	220c      	movs	r2, #12
 8000eec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eee:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef2:	e009      	b.n	8000f08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ef4:	4b08      	ldr	r3, [pc, #32]	; (8000f18 <_sbrk+0x64>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000efa:	4b07      	ldr	r3, [pc, #28]	; (8000f18 <_sbrk+0x64>)
 8000efc:	681a      	ldr	r2, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4413      	add	r3, r2
 8000f02:	4a05      	ldr	r2, [pc, #20]	; (8000f18 <_sbrk+0x64>)
 8000f04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f06:	68fb      	ldr	r3, [r7, #12]
}
 8000f08:	4618      	mov	r0, r3
 8000f0a:	3718      	adds	r7, #24
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	20018000 	.word	0x20018000
 8000f14:	00000400 	.word	0x00000400
 8000f18:	20000174 	.word	0x20000174
 8000f1c:	20000190 	.word	0x20000190

08000f20 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f24:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <SystemInit+0x20>)
 8000f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f2a:	4a05      	ldr	r2, [pc, #20]	; (8000f40 <SystemInit+0x20>)
 8000f2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f7c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f48:	f7ff ffea 	bl	8000f20 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f4c:	480c      	ldr	r0, [pc, #48]	; (8000f80 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f4e:	490d      	ldr	r1, [pc, #52]	; (8000f84 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f50:	4a0d      	ldr	r2, [pc, #52]	; (8000f88 <LoopForever+0xe>)
  movs r3, #0
 8000f52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f54:	e002      	b.n	8000f5c <LoopCopyDataInit>

08000f56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f5a:	3304      	adds	r3, #4

08000f5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f60:	d3f9      	bcc.n	8000f56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f62:	4a0a      	ldr	r2, [pc, #40]	; (8000f8c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f64:	4c0a      	ldr	r4, [pc, #40]	; (8000f90 <LoopForever+0x16>)
  movs r3, #0
 8000f66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f68:	e001      	b.n	8000f6e <LoopFillZerobss>

08000f6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f6c:	3204      	adds	r2, #4

08000f6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f70:	d3fb      	bcc.n	8000f6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f72:	f003 fab5 	bl	80044e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f76:	f7ff fafd 	bl	8000574 <main>

08000f7a <LoopForever>:

LoopForever:
    b LoopForever
 8000f7a:	e7fe      	b.n	8000f7a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f7c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000f80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f84:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000f88:	08004f94 	.word	0x08004f94
  ldr r2, =_sbss
 8000f8c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000f90:	2000018c 	.word	0x2000018c

08000f94 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f94:	e7fe      	b.n	8000f94 <ADC1_2_IRQHandler>
	...

08000f98 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fa2:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <HAL_Init+0x3c>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a0b      	ldr	r2, [pc, #44]	; (8000fd4 <HAL_Init+0x3c>)
 8000fa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fac:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fae:	2003      	movs	r0, #3
 8000fb0:	f000 f920 	bl	80011f4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fb4:	2000      	movs	r0, #0
 8000fb6:	f000 f80f 	bl	8000fd8 <HAL_InitTick>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d002      	beq.n	8000fc6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	71fb      	strb	r3, [r7, #7]
 8000fc4:	e001      	b.n	8000fca <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fc6:	f7ff fe89 	bl	8000cdc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fca:	79fb      	ldrb	r3, [r7, #7]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40022000 	.word	0x40022000

08000fd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000fe4:	4b17      	ldr	r3, [pc, #92]	; (8001044 <HAL_InitTick+0x6c>)
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d023      	beq.n	8001034 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000fec:	4b16      	ldr	r3, [pc, #88]	; (8001048 <HAL_InitTick+0x70>)
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	4b14      	ldr	r3, [pc, #80]	; (8001044 <HAL_InitTick+0x6c>)
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ffa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001002:	4618      	mov	r0, r3
 8001004:	f000 f91d 	bl	8001242 <HAL_SYSTICK_Config>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d10f      	bne.n	800102e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2b0f      	cmp	r3, #15
 8001012:	d809      	bhi.n	8001028 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001014:	2200      	movs	r2, #0
 8001016:	6879      	ldr	r1, [r7, #4]
 8001018:	f04f 30ff 	mov.w	r0, #4294967295
 800101c:	f000 f8f5 	bl	800120a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001020:	4a0a      	ldr	r2, [pc, #40]	; (800104c <HAL_InitTick+0x74>)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6013      	str	r3, [r2, #0]
 8001026:	e007      	b.n	8001038 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001028:	2301      	movs	r3, #1
 800102a:	73fb      	strb	r3, [r7, #15]
 800102c:	e004      	b.n	8001038 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800102e:	2301      	movs	r3, #1
 8001030:	73fb      	strb	r3, [r7, #15]
 8001032:	e001      	b.n	8001038 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001034:	2301      	movs	r3, #1
 8001036:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001038:	7bfb      	ldrb	r3, [r7, #15]
}
 800103a:	4618      	mov	r0, r3
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	20000008 	.word	0x20000008
 8001048:	20000000 	.word	0x20000000
 800104c:	20000004 	.word	0x20000004

08001050 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001054:	4b06      	ldr	r3, [pc, #24]	; (8001070 <HAL_IncTick+0x20>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	461a      	mov	r2, r3
 800105a:	4b06      	ldr	r3, [pc, #24]	; (8001074 <HAL_IncTick+0x24>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4413      	add	r3, r2
 8001060:	4a04      	ldr	r2, [pc, #16]	; (8001074 <HAL_IncTick+0x24>)
 8001062:	6013      	str	r3, [r2, #0]
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	20000008 	.word	0x20000008
 8001074:	20000178 	.word	0x20000178

08001078 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  return uwTick;
 800107c:	4b03      	ldr	r3, [pc, #12]	; (800108c <HAL_GetTick+0x14>)
 800107e:	681b      	ldr	r3, [r3, #0]
}
 8001080:	4618      	mov	r0, r3
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	20000178 	.word	0x20000178

08001090 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f003 0307 	and.w	r3, r3, #7
 800109e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010a0:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <__NVIC_SetPriorityGrouping+0x44>)
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010a6:	68ba      	ldr	r2, [r7, #8]
 80010a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010ac:	4013      	ands	r3, r2
 80010ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010c2:	4a04      	ldr	r2, [pc, #16]	; (80010d4 <__NVIC_SetPriorityGrouping+0x44>)
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	60d3      	str	r3, [r2, #12]
}
 80010c8:	bf00      	nop
 80010ca:	3714      	adds	r7, #20
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010dc:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <__NVIC_GetPriorityGrouping+0x18>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	0a1b      	lsrs	r3, r3, #8
 80010e2:	f003 0307 	and.w	r3, r3, #7
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	e000ed00 	.word	0xe000ed00

080010f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	6039      	str	r1, [r7, #0]
 80010fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001104:	2b00      	cmp	r3, #0
 8001106:	db0a      	blt.n	800111e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	b2da      	uxtb	r2, r3
 800110c:	490c      	ldr	r1, [pc, #48]	; (8001140 <__NVIC_SetPriority+0x4c>)
 800110e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001112:	0112      	lsls	r2, r2, #4
 8001114:	b2d2      	uxtb	r2, r2
 8001116:	440b      	add	r3, r1
 8001118:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800111c:	e00a      	b.n	8001134 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	b2da      	uxtb	r2, r3
 8001122:	4908      	ldr	r1, [pc, #32]	; (8001144 <__NVIC_SetPriority+0x50>)
 8001124:	79fb      	ldrb	r3, [r7, #7]
 8001126:	f003 030f 	and.w	r3, r3, #15
 800112a:	3b04      	subs	r3, #4
 800112c:	0112      	lsls	r2, r2, #4
 800112e:	b2d2      	uxtb	r2, r2
 8001130:	440b      	add	r3, r1
 8001132:	761a      	strb	r2, [r3, #24]
}
 8001134:	bf00      	nop
 8001136:	370c      	adds	r7, #12
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	e000e100 	.word	0xe000e100
 8001144:	e000ed00 	.word	0xe000ed00

08001148 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001148:	b480      	push	{r7}
 800114a:	b089      	sub	sp, #36	; 0x24
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	f003 0307 	and.w	r3, r3, #7
 800115a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	f1c3 0307 	rsb	r3, r3, #7
 8001162:	2b04      	cmp	r3, #4
 8001164:	bf28      	it	cs
 8001166:	2304      	movcs	r3, #4
 8001168:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	3304      	adds	r3, #4
 800116e:	2b06      	cmp	r3, #6
 8001170:	d902      	bls.n	8001178 <NVIC_EncodePriority+0x30>
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	3b03      	subs	r3, #3
 8001176:	e000      	b.n	800117a <NVIC_EncodePriority+0x32>
 8001178:	2300      	movs	r3, #0
 800117a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800117c:	f04f 32ff 	mov.w	r2, #4294967295
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	43da      	mvns	r2, r3
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	401a      	ands	r2, r3
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001190:	f04f 31ff 	mov.w	r1, #4294967295
 8001194:	697b      	ldr	r3, [r7, #20]
 8001196:	fa01 f303 	lsl.w	r3, r1, r3
 800119a:	43d9      	mvns	r1, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011a0:	4313      	orrs	r3, r2
         );
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3724      	adds	r7, #36	; 0x24
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
	...

080011b0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	3b01      	subs	r3, #1
 80011bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011c0:	d301      	bcc.n	80011c6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011c2:	2301      	movs	r3, #1
 80011c4:	e00f      	b.n	80011e6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011c6:	4a0a      	ldr	r2, [pc, #40]	; (80011f0 <SysTick_Config+0x40>)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3b01      	subs	r3, #1
 80011cc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011ce:	210f      	movs	r1, #15
 80011d0:	f04f 30ff 	mov.w	r0, #4294967295
 80011d4:	f7ff ff8e 	bl	80010f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011d8:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <SysTick_Config+0x40>)
 80011da:	2200      	movs	r2, #0
 80011dc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011de:	4b04      	ldr	r3, [pc, #16]	; (80011f0 <SysTick_Config+0x40>)
 80011e0:	2207      	movs	r2, #7
 80011e2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	e000e010 	.word	0xe000e010

080011f4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	f7ff ff47 	bl	8001090 <__NVIC_SetPriorityGrouping>
}
 8001202:	bf00      	nop
 8001204:	3708      	adds	r7, #8
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	b086      	sub	sp, #24
 800120e:	af00      	add	r7, sp, #0
 8001210:	4603      	mov	r3, r0
 8001212:	60b9      	str	r1, [r7, #8]
 8001214:	607a      	str	r2, [r7, #4]
 8001216:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800121c:	f7ff ff5c 	bl	80010d8 <__NVIC_GetPriorityGrouping>
 8001220:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	68b9      	ldr	r1, [r7, #8]
 8001226:	6978      	ldr	r0, [r7, #20]
 8001228:	f7ff ff8e 	bl	8001148 <NVIC_EncodePriority>
 800122c:	4602      	mov	r2, r0
 800122e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001232:	4611      	mov	r1, r2
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff ff5d 	bl	80010f4 <__NVIC_SetPriority>
}
 800123a:	bf00      	nop
 800123c:	3718      	adds	r7, #24
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	b082      	sub	sp, #8
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f7ff ffb0 	bl	80011b0 <SysTick_Config>
 8001250:	4603      	mov	r3, r0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
	...

0800125c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800125c:	b480      	push	{r7}
 800125e:	b087      	sub	sp, #28
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001266:	2300      	movs	r3, #0
 8001268:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800126a:	e17f      	b.n	800156c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	2101      	movs	r1, #1
 8001272:	697b      	ldr	r3, [r7, #20]
 8001274:	fa01 f303 	lsl.w	r3, r1, r3
 8001278:	4013      	ands	r3, r2
 800127a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	2b00      	cmp	r3, #0
 8001280:	f000 8171 	beq.w	8001566 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f003 0303 	and.w	r3, r3, #3
 800128c:	2b01      	cmp	r3, #1
 800128e:	d005      	beq.n	800129c <HAL_GPIO_Init+0x40>
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f003 0303 	and.w	r3, r3, #3
 8001298:	2b02      	cmp	r3, #2
 800129a:	d130      	bne.n	80012fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	005b      	lsls	r3, r3, #1
 80012a6:	2203      	movs	r2, #3
 80012a8:	fa02 f303 	lsl.w	r3, r2, r3
 80012ac:	43db      	mvns	r3, r3
 80012ae:	693a      	ldr	r2, [r7, #16]
 80012b0:	4013      	ands	r3, r2
 80012b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	68da      	ldr	r2, [r3, #12]
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	693a      	ldr	r2, [r7, #16]
 80012c2:	4313      	orrs	r3, r2
 80012c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	693a      	ldr	r2, [r7, #16]
 80012ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012d2:	2201      	movs	r2, #1
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	fa02 f303 	lsl.w	r3, r2, r3
 80012da:	43db      	mvns	r3, r3
 80012dc:	693a      	ldr	r2, [r7, #16]
 80012de:	4013      	ands	r3, r2
 80012e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	091b      	lsrs	r3, r3, #4
 80012e8:	f003 0201 	and.w	r2, r3, #1
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f003 0303 	and.w	r3, r3, #3
 8001306:	2b03      	cmp	r3, #3
 8001308:	d118      	bne.n	800133c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800130e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001310:	2201      	movs	r2, #1
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	43db      	mvns	r3, r3
 800131a:	693a      	ldr	r2, [r7, #16]
 800131c:	4013      	ands	r3, r2
 800131e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	08db      	lsrs	r3, r3, #3
 8001326:	f003 0201 	and.w	r2, r3, #1
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	693a      	ldr	r2, [r7, #16]
 8001332:	4313      	orrs	r3, r2
 8001334:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	693a      	ldr	r2, [r7, #16]
 800133a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f003 0303 	and.w	r3, r3, #3
 8001344:	2b03      	cmp	r3, #3
 8001346:	d017      	beq.n	8001378 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	2203      	movs	r2, #3
 8001354:	fa02 f303 	lsl.w	r3, r2, r3
 8001358:	43db      	mvns	r3, r3
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	4013      	ands	r3, r2
 800135e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	689a      	ldr	r2, [r3, #8]
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	005b      	lsls	r3, r3, #1
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	693a      	ldr	r2, [r7, #16]
 800136e:	4313      	orrs	r3, r2
 8001370:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	693a      	ldr	r2, [r7, #16]
 8001376:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f003 0303 	and.w	r3, r3, #3
 8001380:	2b02      	cmp	r3, #2
 8001382:	d123      	bne.n	80013cc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	08da      	lsrs	r2, r3, #3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	3208      	adds	r2, #8
 800138c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001390:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	f003 0307 	and.w	r3, r3, #7
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	220f      	movs	r2, #15
 800139c:	fa02 f303 	lsl.w	r3, r2, r3
 80013a0:	43db      	mvns	r3, r3
 80013a2:	693a      	ldr	r2, [r7, #16]
 80013a4:	4013      	ands	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	691a      	ldr	r2, [r3, #16]
 80013ac:	697b      	ldr	r3, [r7, #20]
 80013ae:	f003 0307 	and.w	r3, r3, #7
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	fa02 f303 	lsl.w	r3, r2, r3
 80013b8:	693a      	ldr	r2, [r7, #16]
 80013ba:	4313      	orrs	r3, r2
 80013bc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	08da      	lsrs	r2, r3, #3
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	3208      	adds	r2, #8
 80013c6:	6939      	ldr	r1, [r7, #16]
 80013c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	2203      	movs	r2, #3
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	43db      	mvns	r3, r3
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	4013      	ands	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	f003 0203 	and.w	r2, r3, #3
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	fa02 f303 	lsl.w	r3, r2, r3
 80013f4:	693a      	ldr	r2, [r7, #16]
 80013f6:	4313      	orrs	r3, r2
 80013f8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	693a      	ldr	r2, [r7, #16]
 80013fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001408:	2b00      	cmp	r3, #0
 800140a:	f000 80ac 	beq.w	8001566 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800140e:	4b5f      	ldr	r3, [pc, #380]	; (800158c <HAL_GPIO_Init+0x330>)
 8001410:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001412:	4a5e      	ldr	r2, [pc, #376]	; (800158c <HAL_GPIO_Init+0x330>)
 8001414:	f043 0301 	orr.w	r3, r3, #1
 8001418:	6613      	str	r3, [r2, #96]	; 0x60
 800141a:	4b5c      	ldr	r3, [pc, #368]	; (800158c <HAL_GPIO_Init+0x330>)
 800141c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	60bb      	str	r3, [r7, #8]
 8001424:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001426:	4a5a      	ldr	r2, [pc, #360]	; (8001590 <HAL_GPIO_Init+0x334>)
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	089b      	lsrs	r3, r3, #2
 800142c:	3302      	adds	r3, #2
 800142e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001432:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	f003 0303 	and.w	r3, r3, #3
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	220f      	movs	r2, #15
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	43db      	mvns	r3, r3
 8001444:	693a      	ldr	r2, [r7, #16]
 8001446:	4013      	ands	r3, r2
 8001448:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001450:	d025      	beq.n	800149e <HAL_GPIO_Init+0x242>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a4f      	ldr	r2, [pc, #316]	; (8001594 <HAL_GPIO_Init+0x338>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d01f      	beq.n	800149a <HAL_GPIO_Init+0x23e>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a4e      	ldr	r2, [pc, #312]	; (8001598 <HAL_GPIO_Init+0x33c>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d019      	beq.n	8001496 <HAL_GPIO_Init+0x23a>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a4d      	ldr	r2, [pc, #308]	; (800159c <HAL_GPIO_Init+0x340>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d013      	beq.n	8001492 <HAL_GPIO_Init+0x236>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a4c      	ldr	r2, [pc, #304]	; (80015a0 <HAL_GPIO_Init+0x344>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d00d      	beq.n	800148e <HAL_GPIO_Init+0x232>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a4b      	ldr	r2, [pc, #300]	; (80015a4 <HAL_GPIO_Init+0x348>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d007      	beq.n	800148a <HAL_GPIO_Init+0x22e>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a4a      	ldr	r2, [pc, #296]	; (80015a8 <HAL_GPIO_Init+0x34c>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d101      	bne.n	8001486 <HAL_GPIO_Init+0x22a>
 8001482:	2306      	movs	r3, #6
 8001484:	e00c      	b.n	80014a0 <HAL_GPIO_Init+0x244>
 8001486:	2307      	movs	r3, #7
 8001488:	e00a      	b.n	80014a0 <HAL_GPIO_Init+0x244>
 800148a:	2305      	movs	r3, #5
 800148c:	e008      	b.n	80014a0 <HAL_GPIO_Init+0x244>
 800148e:	2304      	movs	r3, #4
 8001490:	e006      	b.n	80014a0 <HAL_GPIO_Init+0x244>
 8001492:	2303      	movs	r3, #3
 8001494:	e004      	b.n	80014a0 <HAL_GPIO_Init+0x244>
 8001496:	2302      	movs	r3, #2
 8001498:	e002      	b.n	80014a0 <HAL_GPIO_Init+0x244>
 800149a:	2301      	movs	r3, #1
 800149c:	e000      	b.n	80014a0 <HAL_GPIO_Init+0x244>
 800149e:	2300      	movs	r3, #0
 80014a0:	697a      	ldr	r2, [r7, #20]
 80014a2:	f002 0203 	and.w	r2, r2, #3
 80014a6:	0092      	lsls	r2, r2, #2
 80014a8:	4093      	lsls	r3, r2
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014b0:	4937      	ldr	r1, [pc, #220]	; (8001590 <HAL_GPIO_Init+0x334>)
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	089b      	lsrs	r3, r3, #2
 80014b6:	3302      	adds	r3, #2
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014be:	4b3b      	ldr	r3, [pc, #236]	; (80015ac <HAL_GPIO_Init+0x350>)
 80014c0:	689b      	ldr	r3, [r3, #8]
 80014c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	43db      	mvns	r3, r3
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	4013      	ands	r3, r2
 80014cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d003      	beq.n	80014e2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	4313      	orrs	r3, r2
 80014e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014e2:	4a32      	ldr	r2, [pc, #200]	; (80015ac <HAL_GPIO_Init+0x350>)
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80014e8:	4b30      	ldr	r3, [pc, #192]	; (80015ac <HAL_GPIO_Init+0x350>)
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	43db      	mvns	r3, r3
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	4013      	ands	r3, r2
 80014f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685b      	ldr	r3, [r3, #4]
 80014fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001500:	2b00      	cmp	r3, #0
 8001502:	d003      	beq.n	800150c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001504:	693a      	ldr	r2, [r7, #16]
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	4313      	orrs	r3, r2
 800150a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800150c:	4a27      	ldr	r2, [pc, #156]	; (80015ac <HAL_GPIO_Init+0x350>)
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001512:	4b26      	ldr	r3, [pc, #152]	; (80015ac <HAL_GPIO_Init+0x350>)
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	43db      	mvns	r3, r3
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	4013      	ands	r3, r2
 8001520:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d003      	beq.n	8001536 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	4313      	orrs	r3, r2
 8001534:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001536:	4a1d      	ldr	r2, [pc, #116]	; (80015ac <HAL_GPIO_Init+0x350>)
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800153c:	4b1b      	ldr	r3, [pc, #108]	; (80015ac <HAL_GPIO_Init+0x350>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	43db      	mvns	r3, r3
 8001546:	693a      	ldr	r2, [r7, #16]
 8001548:	4013      	ands	r3, r2
 800154a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001554:	2b00      	cmp	r3, #0
 8001556:	d003      	beq.n	8001560 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	4313      	orrs	r3, r2
 800155e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001560:	4a12      	ldr	r2, [pc, #72]	; (80015ac <HAL_GPIO_Init+0x350>)
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	3301      	adds	r3, #1
 800156a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	fa22 f303 	lsr.w	r3, r2, r3
 8001576:	2b00      	cmp	r3, #0
 8001578:	f47f ae78 	bne.w	800126c <HAL_GPIO_Init+0x10>
  }
}
 800157c:	bf00      	nop
 800157e:	bf00      	nop
 8001580:	371c      	adds	r7, #28
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	40021000 	.word	0x40021000
 8001590:	40010000 	.word	0x40010000
 8001594:	48000400 	.word	0x48000400
 8001598:	48000800 	.word	0x48000800
 800159c:	48000c00 	.word	0x48000c00
 80015a0:	48001000 	.word	0x48001000
 80015a4:	48001400 	.word	0x48001400
 80015a8:	48001800 	.word	0x48001800
 80015ac:	40010400 	.word	0x40010400

080015b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	460b      	mov	r3, r1
 80015ba:	807b      	strh	r3, [r7, #2]
 80015bc:	4613      	mov	r3, r2
 80015be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015c0:	787b      	ldrb	r3, [r7, #1]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d003      	beq.n	80015ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015c6:	887a      	ldrh	r2, [r7, #2]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015cc:	e002      	b.n	80015d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015ce:	887a      	ldrh	r2, [r7, #2]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015d4:	bf00      	nop
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80015e4:	4b04      	ldr	r3, [pc, #16]	; (80015f8 <HAL_PWREx_GetVoltageRange+0x18>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80015ec:	4618      	mov	r0, r3
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	40007000 	.word	0x40007000

080015fc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b085      	sub	sp, #20
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800160a:	d130      	bne.n	800166e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800160c:	4b23      	ldr	r3, [pc, #140]	; (800169c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001614:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001618:	d038      	beq.n	800168c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800161a:	4b20      	ldr	r3, [pc, #128]	; (800169c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001622:	4a1e      	ldr	r2, [pc, #120]	; (800169c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001624:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001628:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800162a:	4b1d      	ldr	r3, [pc, #116]	; (80016a0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2232      	movs	r2, #50	; 0x32
 8001630:	fb02 f303 	mul.w	r3, r2, r3
 8001634:	4a1b      	ldr	r2, [pc, #108]	; (80016a4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001636:	fba2 2303 	umull	r2, r3, r2, r3
 800163a:	0c9b      	lsrs	r3, r3, #18
 800163c:	3301      	adds	r3, #1
 800163e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001640:	e002      	b.n	8001648 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	3b01      	subs	r3, #1
 8001646:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001648:	4b14      	ldr	r3, [pc, #80]	; (800169c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800164a:	695b      	ldr	r3, [r3, #20]
 800164c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001650:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001654:	d102      	bne.n	800165c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001656:	68fb      	ldr	r3, [r7, #12]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d1f2      	bne.n	8001642 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800165c:	4b0f      	ldr	r3, [pc, #60]	; (800169c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800165e:	695b      	ldr	r3, [r3, #20]
 8001660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001664:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001668:	d110      	bne.n	800168c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e00f      	b.n	800168e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800166e:	4b0b      	ldr	r3, [pc, #44]	; (800169c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001676:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800167a:	d007      	beq.n	800168c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800167c:	4b07      	ldr	r3, [pc, #28]	; (800169c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001684:	4a05      	ldr	r2, [pc, #20]	; (800169c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001686:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800168a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800168c:	2300      	movs	r3, #0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3714      	adds	r7, #20
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
 800169a:	bf00      	nop
 800169c:	40007000 	.word	0x40007000
 80016a0:	20000000 	.word	0x20000000
 80016a4:	431bde83 	.word	0x431bde83

080016a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b088      	sub	sp, #32
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d101      	bne.n	80016ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e3ca      	b.n	8001e50 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80016ba:	4b97      	ldr	r3, [pc, #604]	; (8001918 <HAL_RCC_OscConfig+0x270>)
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	f003 030c 	and.w	r3, r3, #12
 80016c2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80016c4:	4b94      	ldr	r3, [pc, #592]	; (8001918 <HAL_RCC_OscConfig+0x270>)
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	f003 0303 	and.w	r3, r3, #3
 80016cc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f003 0310 	and.w	r3, r3, #16
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	f000 80e4 	beq.w	80018a4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80016dc:	69bb      	ldr	r3, [r7, #24]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d007      	beq.n	80016f2 <HAL_RCC_OscConfig+0x4a>
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	2b0c      	cmp	r3, #12
 80016e6:	f040 808b 	bne.w	8001800 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	f040 8087 	bne.w	8001800 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016f2:	4b89      	ldr	r3, [pc, #548]	; (8001918 <HAL_RCC_OscConfig+0x270>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d005      	beq.n	800170a <HAL_RCC_OscConfig+0x62>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	699b      	ldr	r3, [r3, #24]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d101      	bne.n	800170a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e3a2      	b.n	8001e50 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6a1a      	ldr	r2, [r3, #32]
 800170e:	4b82      	ldr	r3, [pc, #520]	; (8001918 <HAL_RCC_OscConfig+0x270>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0308 	and.w	r3, r3, #8
 8001716:	2b00      	cmp	r3, #0
 8001718:	d004      	beq.n	8001724 <HAL_RCC_OscConfig+0x7c>
 800171a:	4b7f      	ldr	r3, [pc, #508]	; (8001918 <HAL_RCC_OscConfig+0x270>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001722:	e005      	b.n	8001730 <HAL_RCC_OscConfig+0x88>
 8001724:	4b7c      	ldr	r3, [pc, #496]	; (8001918 <HAL_RCC_OscConfig+0x270>)
 8001726:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800172a:	091b      	lsrs	r3, r3, #4
 800172c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001730:	4293      	cmp	r3, r2
 8001732:	d223      	bcs.n	800177c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6a1b      	ldr	r3, [r3, #32]
 8001738:	4618      	mov	r0, r3
 800173a:	f000 fd55 	bl	80021e8 <RCC_SetFlashLatencyFromMSIRange>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e383      	b.n	8001e50 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001748:	4b73      	ldr	r3, [pc, #460]	; (8001918 <HAL_RCC_OscConfig+0x270>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a72      	ldr	r2, [pc, #456]	; (8001918 <HAL_RCC_OscConfig+0x270>)
 800174e:	f043 0308 	orr.w	r3, r3, #8
 8001752:	6013      	str	r3, [r2, #0]
 8001754:	4b70      	ldr	r3, [pc, #448]	; (8001918 <HAL_RCC_OscConfig+0x270>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6a1b      	ldr	r3, [r3, #32]
 8001760:	496d      	ldr	r1, [pc, #436]	; (8001918 <HAL_RCC_OscConfig+0x270>)
 8001762:	4313      	orrs	r3, r2
 8001764:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001766:	4b6c      	ldr	r3, [pc, #432]	; (8001918 <HAL_RCC_OscConfig+0x270>)
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	69db      	ldr	r3, [r3, #28]
 8001772:	021b      	lsls	r3, r3, #8
 8001774:	4968      	ldr	r1, [pc, #416]	; (8001918 <HAL_RCC_OscConfig+0x270>)
 8001776:	4313      	orrs	r3, r2
 8001778:	604b      	str	r3, [r1, #4]
 800177a:	e025      	b.n	80017c8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800177c:	4b66      	ldr	r3, [pc, #408]	; (8001918 <HAL_RCC_OscConfig+0x270>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a65      	ldr	r2, [pc, #404]	; (8001918 <HAL_RCC_OscConfig+0x270>)
 8001782:	f043 0308 	orr.w	r3, r3, #8
 8001786:	6013      	str	r3, [r2, #0]
 8001788:	4b63      	ldr	r3, [pc, #396]	; (8001918 <HAL_RCC_OscConfig+0x270>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6a1b      	ldr	r3, [r3, #32]
 8001794:	4960      	ldr	r1, [pc, #384]	; (8001918 <HAL_RCC_OscConfig+0x270>)
 8001796:	4313      	orrs	r3, r2
 8001798:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800179a:	4b5f      	ldr	r3, [pc, #380]	; (8001918 <HAL_RCC_OscConfig+0x270>)
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	69db      	ldr	r3, [r3, #28]
 80017a6:	021b      	lsls	r3, r3, #8
 80017a8:	495b      	ldr	r1, [pc, #364]	; (8001918 <HAL_RCC_OscConfig+0x270>)
 80017aa:	4313      	orrs	r3, r2
 80017ac:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d109      	bne.n	80017c8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6a1b      	ldr	r3, [r3, #32]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f000 fd15 	bl	80021e8 <RCC_SetFlashLatencyFromMSIRange>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e343      	b.n	8001e50 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80017c8:	f000 fc4a 	bl	8002060 <HAL_RCC_GetSysClockFreq>
 80017cc:	4602      	mov	r2, r0
 80017ce:	4b52      	ldr	r3, [pc, #328]	; (8001918 <HAL_RCC_OscConfig+0x270>)
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	091b      	lsrs	r3, r3, #4
 80017d4:	f003 030f 	and.w	r3, r3, #15
 80017d8:	4950      	ldr	r1, [pc, #320]	; (800191c <HAL_RCC_OscConfig+0x274>)
 80017da:	5ccb      	ldrb	r3, [r1, r3]
 80017dc:	f003 031f 	and.w	r3, r3, #31
 80017e0:	fa22 f303 	lsr.w	r3, r2, r3
 80017e4:	4a4e      	ldr	r2, [pc, #312]	; (8001920 <HAL_RCC_OscConfig+0x278>)
 80017e6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80017e8:	4b4e      	ldr	r3, [pc, #312]	; (8001924 <HAL_RCC_OscConfig+0x27c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4618      	mov	r0, r3
 80017ee:	f7ff fbf3 	bl	8000fd8 <HAL_InitTick>
 80017f2:	4603      	mov	r3, r0
 80017f4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80017f6:	7bfb      	ldrb	r3, [r7, #15]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d052      	beq.n	80018a2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80017fc:	7bfb      	ldrb	r3, [r7, #15]
 80017fe:	e327      	b.n	8001e50 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d032      	beq.n	800186e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001808:	4b43      	ldr	r3, [pc, #268]	; (8001918 <HAL_RCC_OscConfig+0x270>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a42      	ldr	r2, [pc, #264]	; (8001918 <HAL_RCC_OscConfig+0x270>)
 800180e:	f043 0301 	orr.w	r3, r3, #1
 8001812:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001814:	f7ff fc30 	bl	8001078 <HAL_GetTick>
 8001818:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800181a:	e008      	b.n	800182e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800181c:	f7ff fc2c 	bl	8001078 <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b02      	cmp	r3, #2
 8001828:	d901      	bls.n	800182e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800182a:	2303      	movs	r3, #3
 800182c:	e310      	b.n	8001e50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800182e:	4b3a      	ldr	r3, [pc, #232]	; (8001918 <HAL_RCC_OscConfig+0x270>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	2b00      	cmp	r3, #0
 8001838:	d0f0      	beq.n	800181c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800183a:	4b37      	ldr	r3, [pc, #220]	; (8001918 <HAL_RCC_OscConfig+0x270>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a36      	ldr	r2, [pc, #216]	; (8001918 <HAL_RCC_OscConfig+0x270>)
 8001840:	f043 0308 	orr.w	r3, r3, #8
 8001844:	6013      	str	r3, [r2, #0]
 8001846:	4b34      	ldr	r3, [pc, #208]	; (8001918 <HAL_RCC_OscConfig+0x270>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6a1b      	ldr	r3, [r3, #32]
 8001852:	4931      	ldr	r1, [pc, #196]	; (8001918 <HAL_RCC_OscConfig+0x270>)
 8001854:	4313      	orrs	r3, r2
 8001856:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001858:	4b2f      	ldr	r3, [pc, #188]	; (8001918 <HAL_RCC_OscConfig+0x270>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	69db      	ldr	r3, [r3, #28]
 8001864:	021b      	lsls	r3, r3, #8
 8001866:	492c      	ldr	r1, [pc, #176]	; (8001918 <HAL_RCC_OscConfig+0x270>)
 8001868:	4313      	orrs	r3, r2
 800186a:	604b      	str	r3, [r1, #4]
 800186c:	e01a      	b.n	80018a4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800186e:	4b2a      	ldr	r3, [pc, #168]	; (8001918 <HAL_RCC_OscConfig+0x270>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4a29      	ldr	r2, [pc, #164]	; (8001918 <HAL_RCC_OscConfig+0x270>)
 8001874:	f023 0301 	bic.w	r3, r3, #1
 8001878:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800187a:	f7ff fbfd 	bl	8001078 <HAL_GetTick>
 800187e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001880:	e008      	b.n	8001894 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001882:	f7ff fbf9 	bl	8001078 <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	2b02      	cmp	r3, #2
 800188e:	d901      	bls.n	8001894 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001890:	2303      	movs	r3, #3
 8001892:	e2dd      	b.n	8001e50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001894:	4b20      	ldr	r3, [pc, #128]	; (8001918 <HAL_RCC_OscConfig+0x270>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 0302 	and.w	r3, r3, #2
 800189c:	2b00      	cmp	r3, #0
 800189e:	d1f0      	bne.n	8001882 <HAL_RCC_OscConfig+0x1da>
 80018a0:	e000      	b.n	80018a4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80018a2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0301 	and.w	r3, r3, #1
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d074      	beq.n	800199a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	2b08      	cmp	r3, #8
 80018b4:	d005      	beq.n	80018c2 <HAL_RCC_OscConfig+0x21a>
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	2b0c      	cmp	r3, #12
 80018ba:	d10e      	bne.n	80018da <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	2b03      	cmp	r3, #3
 80018c0:	d10b      	bne.n	80018da <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018c2:	4b15      	ldr	r3, [pc, #84]	; (8001918 <HAL_RCC_OscConfig+0x270>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d064      	beq.n	8001998 <HAL_RCC_OscConfig+0x2f0>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d160      	bne.n	8001998 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e2ba      	b.n	8001e50 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018e2:	d106      	bne.n	80018f2 <HAL_RCC_OscConfig+0x24a>
 80018e4:	4b0c      	ldr	r3, [pc, #48]	; (8001918 <HAL_RCC_OscConfig+0x270>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a0b      	ldr	r2, [pc, #44]	; (8001918 <HAL_RCC_OscConfig+0x270>)
 80018ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018ee:	6013      	str	r3, [r2, #0]
 80018f0:	e026      	b.n	8001940 <HAL_RCC_OscConfig+0x298>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018fa:	d115      	bne.n	8001928 <HAL_RCC_OscConfig+0x280>
 80018fc:	4b06      	ldr	r3, [pc, #24]	; (8001918 <HAL_RCC_OscConfig+0x270>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a05      	ldr	r2, [pc, #20]	; (8001918 <HAL_RCC_OscConfig+0x270>)
 8001902:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001906:	6013      	str	r3, [r2, #0]
 8001908:	4b03      	ldr	r3, [pc, #12]	; (8001918 <HAL_RCC_OscConfig+0x270>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a02      	ldr	r2, [pc, #8]	; (8001918 <HAL_RCC_OscConfig+0x270>)
 800190e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001912:	6013      	str	r3, [r2, #0]
 8001914:	e014      	b.n	8001940 <HAL_RCC_OscConfig+0x298>
 8001916:	bf00      	nop
 8001918:	40021000 	.word	0x40021000
 800191c:	08004f08 	.word	0x08004f08
 8001920:	20000000 	.word	0x20000000
 8001924:	20000004 	.word	0x20000004
 8001928:	4ba0      	ldr	r3, [pc, #640]	; (8001bac <HAL_RCC_OscConfig+0x504>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a9f      	ldr	r2, [pc, #636]	; (8001bac <HAL_RCC_OscConfig+0x504>)
 800192e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001932:	6013      	str	r3, [r2, #0]
 8001934:	4b9d      	ldr	r3, [pc, #628]	; (8001bac <HAL_RCC_OscConfig+0x504>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a9c      	ldr	r2, [pc, #624]	; (8001bac <HAL_RCC_OscConfig+0x504>)
 800193a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800193e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d013      	beq.n	8001970 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001948:	f7ff fb96 	bl	8001078 <HAL_GetTick>
 800194c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800194e:	e008      	b.n	8001962 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001950:	f7ff fb92 	bl	8001078 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b64      	cmp	r3, #100	; 0x64
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e276      	b.n	8001e50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001962:	4b92      	ldr	r3, [pc, #584]	; (8001bac <HAL_RCC_OscConfig+0x504>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d0f0      	beq.n	8001950 <HAL_RCC_OscConfig+0x2a8>
 800196e:	e014      	b.n	800199a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001970:	f7ff fb82 	bl	8001078 <HAL_GetTick>
 8001974:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001976:	e008      	b.n	800198a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001978:	f7ff fb7e 	bl	8001078 <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b64      	cmp	r3, #100	; 0x64
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e262      	b.n	8001e50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800198a:	4b88      	ldr	r3, [pc, #544]	; (8001bac <HAL_RCC_OscConfig+0x504>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d1f0      	bne.n	8001978 <HAL_RCC_OscConfig+0x2d0>
 8001996:	e000      	b.n	800199a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001998:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d060      	beq.n	8001a68 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	2b04      	cmp	r3, #4
 80019aa:	d005      	beq.n	80019b8 <HAL_RCC_OscConfig+0x310>
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	2b0c      	cmp	r3, #12
 80019b0:	d119      	bne.n	80019e6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d116      	bne.n	80019e6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019b8:	4b7c      	ldr	r3, [pc, #496]	; (8001bac <HAL_RCC_OscConfig+0x504>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d005      	beq.n	80019d0 <HAL_RCC_OscConfig+0x328>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d101      	bne.n	80019d0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e23f      	b.n	8001e50 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019d0:	4b76      	ldr	r3, [pc, #472]	; (8001bac <HAL_RCC_OscConfig+0x504>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	691b      	ldr	r3, [r3, #16]
 80019dc:	061b      	lsls	r3, r3, #24
 80019de:	4973      	ldr	r1, [pc, #460]	; (8001bac <HAL_RCC_OscConfig+0x504>)
 80019e0:	4313      	orrs	r3, r2
 80019e2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80019e4:	e040      	b.n	8001a68 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	68db      	ldr	r3, [r3, #12]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d023      	beq.n	8001a36 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019ee:	4b6f      	ldr	r3, [pc, #444]	; (8001bac <HAL_RCC_OscConfig+0x504>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a6e      	ldr	r2, [pc, #440]	; (8001bac <HAL_RCC_OscConfig+0x504>)
 80019f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019fa:	f7ff fb3d 	bl	8001078 <HAL_GetTick>
 80019fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a00:	e008      	b.n	8001a14 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a02:	f7ff fb39 	bl	8001078 <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e21d      	b.n	8001e50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a14:	4b65      	ldr	r3, [pc, #404]	; (8001bac <HAL_RCC_OscConfig+0x504>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d0f0      	beq.n	8001a02 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a20:	4b62      	ldr	r3, [pc, #392]	; (8001bac <HAL_RCC_OscConfig+0x504>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	691b      	ldr	r3, [r3, #16]
 8001a2c:	061b      	lsls	r3, r3, #24
 8001a2e:	495f      	ldr	r1, [pc, #380]	; (8001bac <HAL_RCC_OscConfig+0x504>)
 8001a30:	4313      	orrs	r3, r2
 8001a32:	604b      	str	r3, [r1, #4]
 8001a34:	e018      	b.n	8001a68 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a36:	4b5d      	ldr	r3, [pc, #372]	; (8001bac <HAL_RCC_OscConfig+0x504>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4a5c      	ldr	r2, [pc, #368]	; (8001bac <HAL_RCC_OscConfig+0x504>)
 8001a3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a42:	f7ff fb19 	bl	8001078 <HAL_GetTick>
 8001a46:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a48:	e008      	b.n	8001a5c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a4a:	f7ff fb15 	bl	8001078 <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d901      	bls.n	8001a5c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e1f9      	b.n	8001e50 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001a5c:	4b53      	ldr	r3, [pc, #332]	; (8001bac <HAL_RCC_OscConfig+0x504>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d1f0      	bne.n	8001a4a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0308 	and.w	r3, r3, #8
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d03c      	beq.n	8001aee <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	695b      	ldr	r3, [r3, #20]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d01c      	beq.n	8001ab6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a7c:	4b4b      	ldr	r3, [pc, #300]	; (8001bac <HAL_RCC_OscConfig+0x504>)
 8001a7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a82:	4a4a      	ldr	r2, [pc, #296]	; (8001bac <HAL_RCC_OscConfig+0x504>)
 8001a84:	f043 0301 	orr.w	r3, r3, #1
 8001a88:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a8c:	f7ff faf4 	bl	8001078 <HAL_GetTick>
 8001a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a92:	e008      	b.n	8001aa6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a94:	f7ff faf0 	bl	8001078 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e1d4      	b.n	8001e50 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001aa6:	4b41      	ldr	r3, [pc, #260]	; (8001bac <HAL_RCC_OscConfig+0x504>)
 8001aa8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001aac:	f003 0302 	and.w	r3, r3, #2
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d0ef      	beq.n	8001a94 <HAL_RCC_OscConfig+0x3ec>
 8001ab4:	e01b      	b.n	8001aee <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ab6:	4b3d      	ldr	r3, [pc, #244]	; (8001bac <HAL_RCC_OscConfig+0x504>)
 8001ab8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001abc:	4a3b      	ldr	r2, [pc, #236]	; (8001bac <HAL_RCC_OscConfig+0x504>)
 8001abe:	f023 0301 	bic.w	r3, r3, #1
 8001ac2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac6:	f7ff fad7 	bl	8001078 <HAL_GetTick>
 8001aca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001acc:	e008      	b.n	8001ae0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ace:	f7ff fad3 	bl	8001078 <HAL_GetTick>
 8001ad2:	4602      	mov	r2, r0
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	1ad3      	subs	r3, r2, r3
 8001ad8:	2b02      	cmp	r3, #2
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e1b7      	b.n	8001e50 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ae0:	4b32      	ldr	r3, [pc, #200]	; (8001bac <HAL_RCC_OscConfig+0x504>)
 8001ae2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d1ef      	bne.n	8001ace <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0304 	and.w	r3, r3, #4
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	f000 80a6 	beq.w	8001c48 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001afc:	2300      	movs	r3, #0
 8001afe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001b00:	4b2a      	ldr	r3, [pc, #168]	; (8001bac <HAL_RCC_OscConfig+0x504>)
 8001b02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d10d      	bne.n	8001b28 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b0c:	4b27      	ldr	r3, [pc, #156]	; (8001bac <HAL_RCC_OscConfig+0x504>)
 8001b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b10:	4a26      	ldr	r2, [pc, #152]	; (8001bac <HAL_RCC_OscConfig+0x504>)
 8001b12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b16:	6593      	str	r3, [r2, #88]	; 0x58
 8001b18:	4b24      	ldr	r3, [pc, #144]	; (8001bac <HAL_RCC_OscConfig+0x504>)
 8001b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b20:	60bb      	str	r3, [r7, #8]
 8001b22:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b24:	2301      	movs	r3, #1
 8001b26:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b28:	4b21      	ldr	r3, [pc, #132]	; (8001bb0 <HAL_RCC_OscConfig+0x508>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d118      	bne.n	8001b66 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b34:	4b1e      	ldr	r3, [pc, #120]	; (8001bb0 <HAL_RCC_OscConfig+0x508>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a1d      	ldr	r2, [pc, #116]	; (8001bb0 <HAL_RCC_OscConfig+0x508>)
 8001b3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b3e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b40:	f7ff fa9a 	bl	8001078 <HAL_GetTick>
 8001b44:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b48:	f7ff fa96 	bl	8001078 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e17a      	b.n	8001e50 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b5a:	4b15      	ldr	r3, [pc, #84]	; (8001bb0 <HAL_RCC_OscConfig+0x508>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d0f0      	beq.n	8001b48 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	689b      	ldr	r3, [r3, #8]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d108      	bne.n	8001b80 <HAL_RCC_OscConfig+0x4d8>
 8001b6e:	4b0f      	ldr	r3, [pc, #60]	; (8001bac <HAL_RCC_OscConfig+0x504>)
 8001b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b74:	4a0d      	ldr	r2, [pc, #52]	; (8001bac <HAL_RCC_OscConfig+0x504>)
 8001b76:	f043 0301 	orr.w	r3, r3, #1
 8001b7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b7e:	e029      	b.n	8001bd4 <HAL_RCC_OscConfig+0x52c>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	2b05      	cmp	r3, #5
 8001b86:	d115      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x50c>
 8001b88:	4b08      	ldr	r3, [pc, #32]	; (8001bac <HAL_RCC_OscConfig+0x504>)
 8001b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b8e:	4a07      	ldr	r2, [pc, #28]	; (8001bac <HAL_RCC_OscConfig+0x504>)
 8001b90:	f043 0304 	orr.w	r3, r3, #4
 8001b94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b98:	4b04      	ldr	r3, [pc, #16]	; (8001bac <HAL_RCC_OscConfig+0x504>)
 8001b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b9e:	4a03      	ldr	r2, [pc, #12]	; (8001bac <HAL_RCC_OscConfig+0x504>)
 8001ba0:	f043 0301 	orr.w	r3, r3, #1
 8001ba4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ba8:	e014      	b.n	8001bd4 <HAL_RCC_OscConfig+0x52c>
 8001baa:	bf00      	nop
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	40007000 	.word	0x40007000
 8001bb4:	4b9c      	ldr	r3, [pc, #624]	; (8001e28 <HAL_RCC_OscConfig+0x780>)
 8001bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bba:	4a9b      	ldr	r2, [pc, #620]	; (8001e28 <HAL_RCC_OscConfig+0x780>)
 8001bbc:	f023 0301 	bic.w	r3, r3, #1
 8001bc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bc4:	4b98      	ldr	r3, [pc, #608]	; (8001e28 <HAL_RCC_OscConfig+0x780>)
 8001bc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bca:	4a97      	ldr	r2, [pc, #604]	; (8001e28 <HAL_RCC_OscConfig+0x780>)
 8001bcc:	f023 0304 	bic.w	r3, r3, #4
 8001bd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d016      	beq.n	8001c0a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bdc:	f7ff fa4c 	bl	8001078 <HAL_GetTick>
 8001be0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001be2:	e00a      	b.n	8001bfa <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001be4:	f7ff fa48 	bl	8001078 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e12a      	b.n	8001e50 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bfa:	4b8b      	ldr	r3, [pc, #556]	; (8001e28 <HAL_RCC_OscConfig+0x780>)
 8001bfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d0ed      	beq.n	8001be4 <HAL_RCC_OscConfig+0x53c>
 8001c08:	e015      	b.n	8001c36 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c0a:	f7ff fa35 	bl	8001078 <HAL_GetTick>
 8001c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c10:	e00a      	b.n	8001c28 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c12:	f7ff fa31 	bl	8001078 <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d901      	bls.n	8001c28 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001c24:	2303      	movs	r3, #3
 8001c26:	e113      	b.n	8001e50 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c28:	4b7f      	ldr	r3, [pc, #508]	; (8001e28 <HAL_RCC_OscConfig+0x780>)
 8001c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d1ed      	bne.n	8001c12 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c36:	7ffb      	ldrb	r3, [r7, #31]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d105      	bne.n	8001c48 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c3c:	4b7a      	ldr	r3, [pc, #488]	; (8001e28 <HAL_RCC_OscConfig+0x780>)
 8001c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c40:	4a79      	ldr	r2, [pc, #484]	; (8001e28 <HAL_RCC_OscConfig+0x780>)
 8001c42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c46:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	f000 80fe 	beq.w	8001e4e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	f040 80d0 	bne.w	8001dfc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001c5c:	4b72      	ldr	r3, [pc, #456]	; (8001e28 <HAL_RCC_OscConfig+0x780>)
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	f003 0203 	and.w	r2, r3, #3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d130      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	3b01      	subs	r3, #1
 8001c7c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	d127      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c8c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d11f      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c9c:	2a07      	cmp	r2, #7
 8001c9e:	bf14      	ite	ne
 8001ca0:	2201      	movne	r2, #1
 8001ca2:	2200      	moveq	r2, #0
 8001ca4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d113      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cb4:	085b      	lsrs	r3, r3, #1
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d109      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc8:	085b      	lsrs	r3, r3, #1
 8001cca:	3b01      	subs	r3, #1
 8001ccc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d06e      	beq.n	8001db0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	2b0c      	cmp	r3, #12
 8001cd6:	d069      	beq.n	8001dac <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001cd8:	4b53      	ldr	r3, [pc, #332]	; (8001e28 <HAL_RCC_OscConfig+0x780>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d105      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001ce4:	4b50      	ldr	r3, [pc, #320]	; (8001e28 <HAL_RCC_OscConfig+0x780>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d001      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e0ad      	b.n	8001e50 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001cf4:	4b4c      	ldr	r3, [pc, #304]	; (8001e28 <HAL_RCC_OscConfig+0x780>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a4b      	ldr	r2, [pc, #300]	; (8001e28 <HAL_RCC_OscConfig+0x780>)
 8001cfa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cfe:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d00:	f7ff f9ba 	bl	8001078 <HAL_GetTick>
 8001d04:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d06:	e008      	b.n	8001d1a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d08:	f7ff f9b6 	bl	8001078 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e09a      	b.n	8001e50 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d1a:	4b43      	ldr	r3, [pc, #268]	; (8001e28 <HAL_RCC_OscConfig+0x780>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1f0      	bne.n	8001d08 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d26:	4b40      	ldr	r3, [pc, #256]	; (8001e28 <HAL_RCC_OscConfig+0x780>)
 8001d28:	68da      	ldr	r2, [r3, #12]
 8001d2a:	4b40      	ldr	r3, [pc, #256]	; (8001e2c <HAL_RCC_OscConfig+0x784>)
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d36:	3a01      	subs	r2, #1
 8001d38:	0112      	lsls	r2, r2, #4
 8001d3a:	4311      	orrs	r1, r2
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d40:	0212      	lsls	r2, r2, #8
 8001d42:	4311      	orrs	r1, r2
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d48:	0852      	lsrs	r2, r2, #1
 8001d4a:	3a01      	subs	r2, #1
 8001d4c:	0552      	lsls	r2, r2, #21
 8001d4e:	4311      	orrs	r1, r2
 8001d50:	687a      	ldr	r2, [r7, #4]
 8001d52:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d54:	0852      	lsrs	r2, r2, #1
 8001d56:	3a01      	subs	r2, #1
 8001d58:	0652      	lsls	r2, r2, #25
 8001d5a:	4311      	orrs	r1, r2
 8001d5c:	687a      	ldr	r2, [r7, #4]
 8001d5e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d60:	0912      	lsrs	r2, r2, #4
 8001d62:	0452      	lsls	r2, r2, #17
 8001d64:	430a      	orrs	r2, r1
 8001d66:	4930      	ldr	r1, [pc, #192]	; (8001e28 <HAL_RCC_OscConfig+0x780>)
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001d6c:	4b2e      	ldr	r3, [pc, #184]	; (8001e28 <HAL_RCC_OscConfig+0x780>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a2d      	ldr	r2, [pc, #180]	; (8001e28 <HAL_RCC_OscConfig+0x780>)
 8001d72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d76:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d78:	4b2b      	ldr	r3, [pc, #172]	; (8001e28 <HAL_RCC_OscConfig+0x780>)
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	4a2a      	ldr	r2, [pc, #168]	; (8001e28 <HAL_RCC_OscConfig+0x780>)
 8001d7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d82:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d84:	f7ff f978 	bl	8001078 <HAL_GetTick>
 8001d88:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d8a:	e008      	b.n	8001d9e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d8c:	f7ff f974 	bl	8001078 <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e058      	b.n	8001e50 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d9e:	4b22      	ldr	r3, [pc, #136]	; (8001e28 <HAL_RCC_OscConfig+0x780>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d0f0      	beq.n	8001d8c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001daa:	e050      	b.n	8001e4e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e04f      	b.n	8001e50 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001db0:	4b1d      	ldr	r3, [pc, #116]	; (8001e28 <HAL_RCC_OscConfig+0x780>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d148      	bne.n	8001e4e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001dbc:	4b1a      	ldr	r3, [pc, #104]	; (8001e28 <HAL_RCC_OscConfig+0x780>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a19      	ldr	r2, [pc, #100]	; (8001e28 <HAL_RCC_OscConfig+0x780>)
 8001dc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dc6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001dc8:	4b17      	ldr	r3, [pc, #92]	; (8001e28 <HAL_RCC_OscConfig+0x780>)
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	4a16      	ldr	r2, [pc, #88]	; (8001e28 <HAL_RCC_OscConfig+0x780>)
 8001dce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dd2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001dd4:	f7ff f950 	bl	8001078 <HAL_GetTick>
 8001dd8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dda:	e008      	b.n	8001dee <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ddc:	f7ff f94c 	bl	8001078 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e030      	b.n	8001e50 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dee:	4b0e      	ldr	r3, [pc, #56]	; (8001e28 <HAL_RCC_OscConfig+0x780>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d0f0      	beq.n	8001ddc <HAL_RCC_OscConfig+0x734>
 8001dfa:	e028      	b.n	8001e4e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	2b0c      	cmp	r3, #12
 8001e00:	d023      	beq.n	8001e4a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e02:	4b09      	ldr	r3, [pc, #36]	; (8001e28 <HAL_RCC_OscConfig+0x780>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a08      	ldr	r2, [pc, #32]	; (8001e28 <HAL_RCC_OscConfig+0x780>)
 8001e08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e0e:	f7ff f933 	bl	8001078 <HAL_GetTick>
 8001e12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e14:	e00c      	b.n	8001e30 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e16:	f7ff f92f 	bl	8001078 <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d905      	bls.n	8001e30 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e013      	b.n	8001e50 <HAL_RCC_OscConfig+0x7a8>
 8001e28:	40021000 	.word	0x40021000
 8001e2c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e30:	4b09      	ldr	r3, [pc, #36]	; (8001e58 <HAL_RCC_OscConfig+0x7b0>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d1ec      	bne.n	8001e16 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001e3c:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <HAL_RCC_OscConfig+0x7b0>)
 8001e3e:	68da      	ldr	r2, [r3, #12]
 8001e40:	4905      	ldr	r1, [pc, #20]	; (8001e58 <HAL_RCC_OscConfig+0x7b0>)
 8001e42:	4b06      	ldr	r3, [pc, #24]	; (8001e5c <HAL_RCC_OscConfig+0x7b4>)
 8001e44:	4013      	ands	r3, r2
 8001e46:	60cb      	str	r3, [r1, #12]
 8001e48:	e001      	b.n	8001e4e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e4a:	2301      	movs	r3, #1
 8001e4c:	e000      	b.n	8001e50 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001e4e:	2300      	movs	r3, #0
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	3720      	adds	r7, #32
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	feeefffc 	.word	0xfeeefffc

08001e60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b084      	sub	sp, #16
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d101      	bne.n	8001e74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e0e7      	b.n	8002044 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e74:	4b75      	ldr	r3, [pc, #468]	; (800204c <HAL_RCC_ClockConfig+0x1ec>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0307 	and.w	r3, r3, #7
 8001e7c:	683a      	ldr	r2, [r7, #0]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d910      	bls.n	8001ea4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e82:	4b72      	ldr	r3, [pc, #456]	; (800204c <HAL_RCC_ClockConfig+0x1ec>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f023 0207 	bic.w	r2, r3, #7
 8001e8a:	4970      	ldr	r1, [pc, #448]	; (800204c <HAL_RCC_ClockConfig+0x1ec>)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e92:	4b6e      	ldr	r3, [pc, #440]	; (800204c <HAL_RCC_ClockConfig+0x1ec>)
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0307 	and.w	r3, r3, #7
 8001e9a:	683a      	ldr	r2, [r7, #0]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d001      	beq.n	8001ea4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e0cf      	b.n	8002044 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0302 	and.w	r3, r3, #2
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d010      	beq.n	8001ed2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	689a      	ldr	r2, [r3, #8]
 8001eb4:	4b66      	ldr	r3, [pc, #408]	; (8002050 <HAL_RCC_ClockConfig+0x1f0>)
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d908      	bls.n	8001ed2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ec0:	4b63      	ldr	r3, [pc, #396]	; (8002050 <HAL_RCC_ClockConfig+0x1f0>)
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	4960      	ldr	r1, [pc, #384]	; (8002050 <HAL_RCC_ClockConfig+0x1f0>)
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0301 	and.w	r3, r3, #1
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d04c      	beq.n	8001f78 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	2b03      	cmp	r3, #3
 8001ee4:	d107      	bne.n	8001ef6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ee6:	4b5a      	ldr	r3, [pc, #360]	; (8002050 <HAL_RCC_ClockConfig+0x1f0>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d121      	bne.n	8001f36 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e0a6      	b.n	8002044 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d107      	bne.n	8001f0e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001efe:	4b54      	ldr	r3, [pc, #336]	; (8002050 <HAL_RCC_ClockConfig+0x1f0>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d115      	bne.n	8001f36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e09a      	b.n	8002044 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d107      	bne.n	8001f26 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f16:	4b4e      	ldr	r3, [pc, #312]	; (8002050 <HAL_RCC_ClockConfig+0x1f0>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d109      	bne.n	8001f36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e08e      	b.n	8002044 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f26:	4b4a      	ldr	r3, [pc, #296]	; (8002050 <HAL_RCC_ClockConfig+0x1f0>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d101      	bne.n	8001f36 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e086      	b.n	8002044 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f36:	4b46      	ldr	r3, [pc, #280]	; (8002050 <HAL_RCC_ClockConfig+0x1f0>)
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f023 0203 	bic.w	r2, r3, #3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	4943      	ldr	r1, [pc, #268]	; (8002050 <HAL_RCC_ClockConfig+0x1f0>)
 8001f44:	4313      	orrs	r3, r2
 8001f46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f48:	f7ff f896 	bl	8001078 <HAL_GetTick>
 8001f4c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f4e:	e00a      	b.n	8001f66 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f50:	f7ff f892 	bl	8001078 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e06e      	b.n	8002044 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f66:	4b3a      	ldr	r3, [pc, #232]	; (8002050 <HAL_RCC_ClockConfig+0x1f0>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	f003 020c 	and.w	r2, r3, #12
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d1eb      	bne.n	8001f50 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0302 	and.w	r3, r3, #2
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d010      	beq.n	8001fa6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	689a      	ldr	r2, [r3, #8]
 8001f88:	4b31      	ldr	r3, [pc, #196]	; (8002050 <HAL_RCC_ClockConfig+0x1f0>)
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d208      	bcs.n	8001fa6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f94:	4b2e      	ldr	r3, [pc, #184]	; (8002050 <HAL_RCC_ClockConfig+0x1f0>)
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	492b      	ldr	r1, [pc, #172]	; (8002050 <HAL_RCC_ClockConfig+0x1f0>)
 8001fa2:	4313      	orrs	r3, r2
 8001fa4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fa6:	4b29      	ldr	r3, [pc, #164]	; (800204c <HAL_RCC_ClockConfig+0x1ec>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0307 	and.w	r3, r3, #7
 8001fae:	683a      	ldr	r2, [r7, #0]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d210      	bcs.n	8001fd6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fb4:	4b25      	ldr	r3, [pc, #148]	; (800204c <HAL_RCC_ClockConfig+0x1ec>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f023 0207 	bic.w	r2, r3, #7
 8001fbc:	4923      	ldr	r1, [pc, #140]	; (800204c <HAL_RCC_ClockConfig+0x1ec>)
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fc4:	4b21      	ldr	r3, [pc, #132]	; (800204c <HAL_RCC_ClockConfig+0x1ec>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0307 	and.w	r3, r3, #7
 8001fcc:	683a      	ldr	r2, [r7, #0]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d001      	beq.n	8001fd6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e036      	b.n	8002044 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0304 	and.w	r3, r3, #4
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d008      	beq.n	8001ff4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fe2:	4b1b      	ldr	r3, [pc, #108]	; (8002050 <HAL_RCC_ClockConfig+0x1f0>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	4918      	ldr	r1, [pc, #96]	; (8002050 <HAL_RCC_ClockConfig+0x1f0>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0308 	and.w	r3, r3, #8
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d009      	beq.n	8002014 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002000:	4b13      	ldr	r3, [pc, #76]	; (8002050 <HAL_RCC_ClockConfig+0x1f0>)
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	691b      	ldr	r3, [r3, #16]
 800200c:	00db      	lsls	r3, r3, #3
 800200e:	4910      	ldr	r1, [pc, #64]	; (8002050 <HAL_RCC_ClockConfig+0x1f0>)
 8002010:	4313      	orrs	r3, r2
 8002012:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002014:	f000 f824 	bl	8002060 <HAL_RCC_GetSysClockFreq>
 8002018:	4602      	mov	r2, r0
 800201a:	4b0d      	ldr	r3, [pc, #52]	; (8002050 <HAL_RCC_ClockConfig+0x1f0>)
 800201c:	689b      	ldr	r3, [r3, #8]
 800201e:	091b      	lsrs	r3, r3, #4
 8002020:	f003 030f 	and.w	r3, r3, #15
 8002024:	490b      	ldr	r1, [pc, #44]	; (8002054 <HAL_RCC_ClockConfig+0x1f4>)
 8002026:	5ccb      	ldrb	r3, [r1, r3]
 8002028:	f003 031f 	and.w	r3, r3, #31
 800202c:	fa22 f303 	lsr.w	r3, r2, r3
 8002030:	4a09      	ldr	r2, [pc, #36]	; (8002058 <HAL_RCC_ClockConfig+0x1f8>)
 8002032:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002034:	4b09      	ldr	r3, [pc, #36]	; (800205c <HAL_RCC_ClockConfig+0x1fc>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4618      	mov	r0, r3
 800203a:	f7fe ffcd 	bl	8000fd8 <HAL_InitTick>
 800203e:	4603      	mov	r3, r0
 8002040:	72fb      	strb	r3, [r7, #11]

  return status;
 8002042:	7afb      	ldrb	r3, [r7, #11]
}
 8002044:	4618      	mov	r0, r3
 8002046:	3710      	adds	r7, #16
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	40022000 	.word	0x40022000
 8002050:	40021000 	.word	0x40021000
 8002054:	08004f08 	.word	0x08004f08
 8002058:	20000000 	.word	0x20000000
 800205c:	20000004 	.word	0x20000004

08002060 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002060:	b480      	push	{r7}
 8002062:	b089      	sub	sp, #36	; 0x24
 8002064:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002066:	2300      	movs	r3, #0
 8002068:	61fb      	str	r3, [r7, #28]
 800206a:	2300      	movs	r3, #0
 800206c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800206e:	4b3e      	ldr	r3, [pc, #248]	; (8002168 <HAL_RCC_GetSysClockFreq+0x108>)
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	f003 030c 	and.w	r3, r3, #12
 8002076:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002078:	4b3b      	ldr	r3, [pc, #236]	; (8002168 <HAL_RCC_GetSysClockFreq+0x108>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	f003 0303 	and.w	r3, r3, #3
 8002080:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d005      	beq.n	8002094 <HAL_RCC_GetSysClockFreq+0x34>
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	2b0c      	cmp	r3, #12
 800208c:	d121      	bne.n	80020d2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	2b01      	cmp	r3, #1
 8002092:	d11e      	bne.n	80020d2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002094:	4b34      	ldr	r3, [pc, #208]	; (8002168 <HAL_RCC_GetSysClockFreq+0x108>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0308 	and.w	r3, r3, #8
 800209c:	2b00      	cmp	r3, #0
 800209e:	d107      	bne.n	80020b0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80020a0:	4b31      	ldr	r3, [pc, #196]	; (8002168 <HAL_RCC_GetSysClockFreq+0x108>)
 80020a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020a6:	0a1b      	lsrs	r3, r3, #8
 80020a8:	f003 030f 	and.w	r3, r3, #15
 80020ac:	61fb      	str	r3, [r7, #28]
 80020ae:	e005      	b.n	80020bc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80020b0:	4b2d      	ldr	r3, [pc, #180]	; (8002168 <HAL_RCC_GetSysClockFreq+0x108>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	091b      	lsrs	r3, r3, #4
 80020b6:	f003 030f 	and.w	r3, r3, #15
 80020ba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80020bc:	4a2b      	ldr	r2, [pc, #172]	; (800216c <HAL_RCC_GetSysClockFreq+0x10c>)
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020c4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d10d      	bne.n	80020e8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020d0:	e00a      	b.n	80020e8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	2b04      	cmp	r3, #4
 80020d6:	d102      	bne.n	80020de <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80020d8:	4b25      	ldr	r3, [pc, #148]	; (8002170 <HAL_RCC_GetSysClockFreq+0x110>)
 80020da:	61bb      	str	r3, [r7, #24]
 80020dc:	e004      	b.n	80020e8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	2b08      	cmp	r3, #8
 80020e2:	d101      	bne.n	80020e8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80020e4:	4b23      	ldr	r3, [pc, #140]	; (8002174 <HAL_RCC_GetSysClockFreq+0x114>)
 80020e6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	2b0c      	cmp	r3, #12
 80020ec:	d134      	bne.n	8002158 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80020ee:	4b1e      	ldr	r3, [pc, #120]	; (8002168 <HAL_RCC_GetSysClockFreq+0x108>)
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	f003 0303 	and.w	r3, r3, #3
 80020f6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d003      	beq.n	8002106 <HAL_RCC_GetSysClockFreq+0xa6>
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	2b03      	cmp	r3, #3
 8002102:	d003      	beq.n	800210c <HAL_RCC_GetSysClockFreq+0xac>
 8002104:	e005      	b.n	8002112 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002106:	4b1a      	ldr	r3, [pc, #104]	; (8002170 <HAL_RCC_GetSysClockFreq+0x110>)
 8002108:	617b      	str	r3, [r7, #20]
      break;
 800210a:	e005      	b.n	8002118 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800210c:	4b19      	ldr	r3, [pc, #100]	; (8002174 <HAL_RCC_GetSysClockFreq+0x114>)
 800210e:	617b      	str	r3, [r7, #20]
      break;
 8002110:	e002      	b.n	8002118 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	617b      	str	r3, [r7, #20]
      break;
 8002116:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002118:	4b13      	ldr	r3, [pc, #76]	; (8002168 <HAL_RCC_GetSysClockFreq+0x108>)
 800211a:	68db      	ldr	r3, [r3, #12]
 800211c:	091b      	lsrs	r3, r3, #4
 800211e:	f003 0307 	and.w	r3, r3, #7
 8002122:	3301      	adds	r3, #1
 8002124:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002126:	4b10      	ldr	r3, [pc, #64]	; (8002168 <HAL_RCC_GetSysClockFreq+0x108>)
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	0a1b      	lsrs	r3, r3, #8
 800212c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002130:	697a      	ldr	r2, [r7, #20]
 8002132:	fb03 f202 	mul.w	r2, r3, r2
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	fbb2 f3f3 	udiv	r3, r2, r3
 800213c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800213e:	4b0a      	ldr	r3, [pc, #40]	; (8002168 <HAL_RCC_GetSysClockFreq+0x108>)
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	0e5b      	lsrs	r3, r3, #25
 8002144:	f003 0303 	and.w	r3, r3, #3
 8002148:	3301      	adds	r3, #1
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800214e:	697a      	ldr	r2, [r7, #20]
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	fbb2 f3f3 	udiv	r3, r2, r3
 8002156:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002158:	69bb      	ldr	r3, [r7, #24]
}
 800215a:	4618      	mov	r0, r3
 800215c:	3724      	adds	r7, #36	; 0x24
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	40021000 	.word	0x40021000
 800216c:	08004f20 	.word	0x08004f20
 8002170:	00f42400 	.word	0x00f42400
 8002174:	007a1200 	.word	0x007a1200

08002178 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800217c:	4b03      	ldr	r3, [pc, #12]	; (800218c <HAL_RCC_GetHCLKFreq+0x14>)
 800217e:	681b      	ldr	r3, [r3, #0]
}
 8002180:	4618      	mov	r0, r3
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	20000000 	.word	0x20000000

08002190 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002194:	f7ff fff0 	bl	8002178 <HAL_RCC_GetHCLKFreq>
 8002198:	4602      	mov	r2, r0
 800219a:	4b06      	ldr	r3, [pc, #24]	; (80021b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	0a1b      	lsrs	r3, r3, #8
 80021a0:	f003 0307 	and.w	r3, r3, #7
 80021a4:	4904      	ldr	r1, [pc, #16]	; (80021b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80021a6:	5ccb      	ldrb	r3, [r1, r3]
 80021a8:	f003 031f 	and.w	r3, r3, #31
 80021ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	40021000 	.word	0x40021000
 80021b8:	08004f18 	.word	0x08004f18

080021bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80021c0:	f7ff ffda 	bl	8002178 <HAL_RCC_GetHCLKFreq>
 80021c4:	4602      	mov	r2, r0
 80021c6:	4b06      	ldr	r3, [pc, #24]	; (80021e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	0adb      	lsrs	r3, r3, #11
 80021cc:	f003 0307 	and.w	r3, r3, #7
 80021d0:	4904      	ldr	r1, [pc, #16]	; (80021e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80021d2:	5ccb      	ldrb	r3, [r1, r3]
 80021d4:	f003 031f 	and.w	r3, r3, #31
 80021d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021dc:	4618      	mov	r0, r3
 80021de:	bd80      	pop	{r7, pc}
 80021e0:	40021000 	.word	0x40021000
 80021e4:	08004f18 	.word	0x08004f18

080021e8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80021f0:	2300      	movs	r3, #0
 80021f2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80021f4:	4b2a      	ldr	r3, [pc, #168]	; (80022a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d003      	beq.n	8002208 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002200:	f7ff f9ee 	bl	80015e0 <HAL_PWREx_GetVoltageRange>
 8002204:	6178      	str	r0, [r7, #20]
 8002206:	e014      	b.n	8002232 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002208:	4b25      	ldr	r3, [pc, #148]	; (80022a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800220a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800220c:	4a24      	ldr	r2, [pc, #144]	; (80022a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800220e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002212:	6593      	str	r3, [r2, #88]	; 0x58
 8002214:	4b22      	ldr	r3, [pc, #136]	; (80022a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002218:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800221c:	60fb      	str	r3, [r7, #12]
 800221e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002220:	f7ff f9de 	bl	80015e0 <HAL_PWREx_GetVoltageRange>
 8002224:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002226:	4b1e      	ldr	r3, [pc, #120]	; (80022a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800222a:	4a1d      	ldr	r2, [pc, #116]	; (80022a0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800222c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002230:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002238:	d10b      	bne.n	8002252 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2b80      	cmp	r3, #128	; 0x80
 800223e:	d919      	bls.n	8002274 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2ba0      	cmp	r3, #160	; 0xa0
 8002244:	d902      	bls.n	800224c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002246:	2302      	movs	r3, #2
 8002248:	613b      	str	r3, [r7, #16]
 800224a:	e013      	b.n	8002274 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800224c:	2301      	movs	r3, #1
 800224e:	613b      	str	r3, [r7, #16]
 8002250:	e010      	b.n	8002274 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2b80      	cmp	r3, #128	; 0x80
 8002256:	d902      	bls.n	800225e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002258:	2303      	movs	r3, #3
 800225a:	613b      	str	r3, [r7, #16]
 800225c:	e00a      	b.n	8002274 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2b80      	cmp	r3, #128	; 0x80
 8002262:	d102      	bne.n	800226a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002264:	2302      	movs	r3, #2
 8002266:	613b      	str	r3, [r7, #16]
 8002268:	e004      	b.n	8002274 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2b70      	cmp	r3, #112	; 0x70
 800226e:	d101      	bne.n	8002274 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002270:	2301      	movs	r3, #1
 8002272:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002274:	4b0b      	ldr	r3, [pc, #44]	; (80022a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f023 0207 	bic.w	r2, r3, #7
 800227c:	4909      	ldr	r1, [pc, #36]	; (80022a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	4313      	orrs	r3, r2
 8002282:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002284:	4b07      	ldr	r3, [pc, #28]	; (80022a4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0307 	and.w	r3, r3, #7
 800228c:	693a      	ldr	r2, [r7, #16]
 800228e:	429a      	cmp	r2, r3
 8002290:	d001      	beq.n	8002296 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e000      	b.n	8002298 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002296:	2300      	movs	r3, #0
}
 8002298:	4618      	mov	r0, r3
 800229a:	3718      	adds	r7, #24
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}
 80022a0:	40021000 	.word	0x40021000
 80022a4:	40022000 	.word	0x40022000

080022a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80022b0:	2300      	movs	r3, #0
 80022b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80022b4:	2300      	movs	r3, #0
 80022b6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d041      	beq.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022c8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80022cc:	d02a      	beq.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80022ce:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80022d2:	d824      	bhi.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80022d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80022d8:	d008      	beq.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x44>
 80022da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80022de:	d81e      	bhi.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d00a      	beq.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x52>
 80022e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022e8:	d010      	beq.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80022ea:	e018      	b.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80022ec:	4b86      	ldr	r3, [pc, #536]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	4a85      	ldr	r2, [pc, #532]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022f6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022f8:	e015      	b.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	3304      	adds	r3, #4
 80022fe:	2100      	movs	r1, #0
 8002300:	4618      	mov	r0, r3
 8002302:	f000 fabb 	bl	800287c <RCCEx_PLLSAI1_Config>
 8002306:	4603      	mov	r3, r0
 8002308:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800230a:	e00c      	b.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	3320      	adds	r3, #32
 8002310:	2100      	movs	r1, #0
 8002312:	4618      	mov	r0, r3
 8002314:	f000 fba6 	bl	8002a64 <RCCEx_PLLSAI2_Config>
 8002318:	4603      	mov	r3, r0
 800231a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800231c:	e003      	b.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	74fb      	strb	r3, [r7, #19]
      break;
 8002322:	e000      	b.n	8002326 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002324:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002326:	7cfb      	ldrb	r3, [r7, #19]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d10b      	bne.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800232c:	4b76      	ldr	r3, [pc, #472]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800232e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002332:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800233a:	4973      	ldr	r1, [pc, #460]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800233c:	4313      	orrs	r3, r2
 800233e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002342:	e001      	b.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002344:	7cfb      	ldrb	r3, [r7, #19]
 8002346:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d041      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002358:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800235c:	d02a      	beq.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800235e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002362:	d824      	bhi.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002364:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002368:	d008      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800236a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800236e:	d81e      	bhi.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002370:	2b00      	cmp	r3, #0
 8002372:	d00a      	beq.n	800238a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002374:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002378:	d010      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800237a:	e018      	b.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800237c:	4b62      	ldr	r3, [pc, #392]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	4a61      	ldr	r2, [pc, #388]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002382:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002386:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002388:	e015      	b.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	3304      	adds	r3, #4
 800238e:	2100      	movs	r1, #0
 8002390:	4618      	mov	r0, r3
 8002392:	f000 fa73 	bl	800287c <RCCEx_PLLSAI1_Config>
 8002396:	4603      	mov	r3, r0
 8002398:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800239a:	e00c      	b.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	3320      	adds	r3, #32
 80023a0:	2100      	movs	r1, #0
 80023a2:	4618      	mov	r0, r3
 80023a4:	f000 fb5e 	bl	8002a64 <RCCEx_PLLSAI2_Config>
 80023a8:	4603      	mov	r3, r0
 80023aa:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80023ac:	e003      	b.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	74fb      	strb	r3, [r7, #19]
      break;
 80023b2:	e000      	b.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80023b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80023b6:	7cfb      	ldrb	r3, [r7, #19]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d10b      	bne.n	80023d4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80023bc:	4b52      	ldr	r3, [pc, #328]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80023ca:	494f      	ldr	r1, [pc, #316]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80023d2:	e001      	b.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023d4:	7cfb      	ldrb	r3, [r7, #19]
 80023d6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f000 80a0 	beq.w	8002526 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023e6:	2300      	movs	r3, #0
 80023e8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80023ea:	4b47      	ldr	r3, [pc, #284]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d101      	bne.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x152>
 80023f6:	2301      	movs	r3, #1
 80023f8:	e000      	b.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x154>
 80023fa:	2300      	movs	r3, #0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d00d      	beq.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002400:	4b41      	ldr	r3, [pc, #260]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002404:	4a40      	ldr	r2, [pc, #256]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002406:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800240a:	6593      	str	r3, [r2, #88]	; 0x58
 800240c:	4b3e      	ldr	r3, [pc, #248]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800240e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002410:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002414:	60bb      	str	r3, [r7, #8]
 8002416:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002418:	2301      	movs	r3, #1
 800241a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800241c:	4b3b      	ldr	r3, [pc, #236]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a3a      	ldr	r2, [pc, #232]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002422:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002426:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002428:	f7fe fe26 	bl	8001078 <HAL_GetTick>
 800242c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800242e:	e009      	b.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002430:	f7fe fe22 	bl	8001078 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b02      	cmp	r3, #2
 800243c:	d902      	bls.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	74fb      	strb	r3, [r7, #19]
        break;
 8002442:	e005      	b.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002444:	4b31      	ldr	r3, [pc, #196]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800244c:	2b00      	cmp	r3, #0
 800244e:	d0ef      	beq.n	8002430 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002450:	7cfb      	ldrb	r3, [r7, #19]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d15c      	bne.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002456:	4b2c      	ldr	r3, [pc, #176]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002458:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800245c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002460:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d01f      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800246e:	697a      	ldr	r2, [r7, #20]
 8002470:	429a      	cmp	r2, r3
 8002472:	d019      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002474:	4b24      	ldr	r3, [pc, #144]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800247a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800247e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002480:	4b21      	ldr	r3, [pc, #132]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002486:	4a20      	ldr	r2, [pc, #128]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800248c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002490:	4b1d      	ldr	r3, [pc, #116]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002492:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002496:	4a1c      	ldr	r2, [pc, #112]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002498:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800249c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80024a0:	4a19      	ldr	r2, [pc, #100]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d016      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b2:	f7fe fde1 	bl	8001078 <HAL_GetTick>
 80024b6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024b8:	e00b      	b.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024ba:	f7fe fddd 	bl	8001078 <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d902      	bls.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80024cc:	2303      	movs	r3, #3
 80024ce:	74fb      	strb	r3, [r7, #19]
            break;
 80024d0:	e006      	b.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024d2:	4b0d      	ldr	r3, [pc, #52]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024d8:	f003 0302 	and.w	r3, r3, #2
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d0ec      	beq.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80024e0:	7cfb      	ldrb	r3, [r7, #19]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d10c      	bne.n	8002500 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024e6:	4b08      	ldr	r3, [pc, #32]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024f6:	4904      	ldr	r1, [pc, #16]	; (8002508 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80024fe:	e009      	b.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002500:	7cfb      	ldrb	r3, [r7, #19]
 8002502:	74bb      	strb	r3, [r7, #18]
 8002504:	e006      	b.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002506:	bf00      	nop
 8002508:	40021000 	.word	0x40021000
 800250c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002510:	7cfb      	ldrb	r3, [r7, #19]
 8002512:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002514:	7c7b      	ldrb	r3, [r7, #17]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d105      	bne.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800251a:	4b9e      	ldr	r3, [pc, #632]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800251c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800251e:	4a9d      	ldr	r2, [pc, #628]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002520:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002524:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00a      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002532:	4b98      	ldr	r3, [pc, #608]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002538:	f023 0203 	bic.w	r2, r3, #3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002540:	4994      	ldr	r1, [pc, #592]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002542:	4313      	orrs	r3, r2
 8002544:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0302 	and.w	r3, r3, #2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d00a      	beq.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002554:	4b8f      	ldr	r3, [pc, #572]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800255a:	f023 020c 	bic.w	r2, r3, #12
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002562:	498c      	ldr	r1, [pc, #560]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002564:	4313      	orrs	r3, r2
 8002566:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0304 	and.w	r3, r3, #4
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00a      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002576:	4b87      	ldr	r3, [pc, #540]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002578:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002584:	4983      	ldr	r1, [pc, #524]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002586:	4313      	orrs	r3, r2
 8002588:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0308 	and.w	r3, r3, #8
 8002594:	2b00      	cmp	r3, #0
 8002596:	d00a      	beq.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002598:	4b7e      	ldr	r3, [pc, #504]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800259a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800259e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a6:	497b      	ldr	r1, [pc, #492]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0310 	and.w	r3, r3, #16
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d00a      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80025ba:	4b76      	ldr	r3, [pc, #472]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025c8:	4972      	ldr	r1, [pc, #456]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0320 	and.w	r3, r3, #32
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d00a      	beq.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025dc:	4b6d      	ldr	r3, [pc, #436]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ea:	496a      	ldr	r1, [pc, #424]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d00a      	beq.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025fe:	4b65      	ldr	r3, [pc, #404]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002600:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002604:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800260c:	4961      	ldr	r1, [pc, #388]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800260e:	4313      	orrs	r3, r2
 8002610:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800261c:	2b00      	cmp	r3, #0
 800261e:	d00a      	beq.n	8002636 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002620:	4b5c      	ldr	r3, [pc, #368]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002626:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800262e:	4959      	ldr	r1, [pc, #356]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002630:	4313      	orrs	r3, r2
 8002632:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00a      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002642:	4b54      	ldr	r3, [pc, #336]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002648:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002650:	4950      	ldr	r1, [pc, #320]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002652:	4313      	orrs	r3, r2
 8002654:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002660:	2b00      	cmp	r3, #0
 8002662:	d00a      	beq.n	800267a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002664:	4b4b      	ldr	r3, [pc, #300]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800266a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002672:	4948      	ldr	r1, [pc, #288]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002674:	4313      	orrs	r3, r2
 8002676:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002682:	2b00      	cmp	r3, #0
 8002684:	d00a      	beq.n	800269c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002686:	4b43      	ldr	r3, [pc, #268]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002688:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800268c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002694:	493f      	ldr	r1, [pc, #252]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002696:	4313      	orrs	r3, r2
 8002698:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d028      	beq.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80026a8:	4b3a      	ldr	r3, [pc, #232]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026b6:	4937      	ldr	r1, [pc, #220]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026b8:	4313      	orrs	r3, r2
 80026ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026c6:	d106      	bne.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026c8:	4b32      	ldr	r3, [pc, #200]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	4a31      	ldr	r2, [pc, #196]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80026ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026d2:	60d3      	str	r3, [r2, #12]
 80026d4:	e011      	b.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026de:	d10c      	bne.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	3304      	adds	r3, #4
 80026e4:	2101      	movs	r1, #1
 80026e6:	4618      	mov	r0, r3
 80026e8:	f000 f8c8 	bl	800287c <RCCEx_PLLSAI1_Config>
 80026ec:	4603      	mov	r3, r0
 80026ee:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80026f0:	7cfb      	ldrb	r3, [r7, #19]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80026f6:	7cfb      	ldrb	r3, [r7, #19]
 80026f8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d028      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002706:	4b23      	ldr	r3, [pc, #140]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002708:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800270c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002714:	491f      	ldr	r1, [pc, #124]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002716:	4313      	orrs	r3, r2
 8002718:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002720:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002724:	d106      	bne.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002726:	4b1b      	ldr	r3, [pc, #108]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	4a1a      	ldr	r2, [pc, #104]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800272c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002730:	60d3      	str	r3, [r2, #12]
 8002732:	e011      	b.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002738:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800273c:	d10c      	bne.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	3304      	adds	r3, #4
 8002742:	2101      	movs	r1, #1
 8002744:	4618      	mov	r0, r3
 8002746:	f000 f899 	bl	800287c <RCCEx_PLLSAI1_Config>
 800274a:	4603      	mov	r3, r0
 800274c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800274e:	7cfb      	ldrb	r3, [r7, #19]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d001      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002754:	7cfb      	ldrb	r3, [r7, #19]
 8002756:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d02b      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002764:	4b0b      	ldr	r3, [pc, #44]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800276a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002772:	4908      	ldr	r1, [pc, #32]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002774:	4313      	orrs	r3, r2
 8002776:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800277e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002782:	d109      	bne.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002784:	4b03      	ldr	r3, [pc, #12]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	4a02      	ldr	r2, [pc, #8]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800278a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800278e:	60d3      	str	r3, [r2, #12]
 8002790:	e014      	b.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002792:	bf00      	nop
 8002794:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800279c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027a0:	d10c      	bne.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	3304      	adds	r3, #4
 80027a6:	2101      	movs	r1, #1
 80027a8:	4618      	mov	r0, r3
 80027aa:	f000 f867 	bl	800287c <RCCEx_PLLSAI1_Config>
 80027ae:	4603      	mov	r3, r0
 80027b0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027b2:	7cfb      	ldrb	r3, [r7, #19]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80027b8:	7cfb      	ldrb	r3, [r7, #19]
 80027ba:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d02f      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80027c8:	4b2b      	ldr	r3, [pc, #172]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027d6:	4928      	ldr	r1, [pc, #160]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027e6:	d10d      	bne.n	8002804 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	3304      	adds	r3, #4
 80027ec:	2102      	movs	r1, #2
 80027ee:	4618      	mov	r0, r3
 80027f0:	f000 f844 	bl	800287c <RCCEx_PLLSAI1_Config>
 80027f4:	4603      	mov	r3, r0
 80027f6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027f8:	7cfb      	ldrb	r3, [r7, #19]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d014      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80027fe:	7cfb      	ldrb	r3, [r7, #19]
 8002800:	74bb      	strb	r3, [r7, #18]
 8002802:	e011      	b.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002808:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800280c:	d10c      	bne.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	3320      	adds	r3, #32
 8002812:	2102      	movs	r1, #2
 8002814:	4618      	mov	r0, r3
 8002816:	f000 f925 	bl	8002a64 <RCCEx_PLLSAI2_Config>
 800281a:	4603      	mov	r3, r0
 800281c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800281e:	7cfb      	ldrb	r3, [r7, #19]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002824:	7cfb      	ldrb	r3, [r7, #19]
 8002826:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d00a      	beq.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002834:	4b10      	ldr	r3, [pc, #64]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800283a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002842:	490d      	ldr	r1, [pc, #52]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002844:	4313      	orrs	r3, r2
 8002846:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00b      	beq.n	800286e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002856:	4b08      	ldr	r3, [pc, #32]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800285c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002866:	4904      	ldr	r1, [pc, #16]	; (8002878 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002868:	4313      	orrs	r3, r2
 800286a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800286e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002870:	4618      	mov	r0, r3
 8002872:	3718      	adds	r7, #24
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	40021000 	.word	0x40021000

0800287c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002886:	2300      	movs	r3, #0
 8002888:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800288a:	4b75      	ldr	r3, [pc, #468]	; (8002a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	f003 0303 	and.w	r3, r3, #3
 8002892:	2b00      	cmp	r3, #0
 8002894:	d018      	beq.n	80028c8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002896:	4b72      	ldr	r3, [pc, #456]	; (8002a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	f003 0203 	and.w	r2, r3, #3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d10d      	bne.n	80028c2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
       ||
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d009      	beq.n	80028c2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80028ae:	4b6c      	ldr	r3, [pc, #432]	; (8002a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	091b      	lsrs	r3, r3, #4
 80028b4:	f003 0307 	and.w	r3, r3, #7
 80028b8:	1c5a      	adds	r2, r3, #1
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	685b      	ldr	r3, [r3, #4]
       ||
 80028be:	429a      	cmp	r2, r3
 80028c0:	d047      	beq.n	8002952 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	73fb      	strb	r3, [r7, #15]
 80028c6:	e044      	b.n	8002952 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2b03      	cmp	r3, #3
 80028ce:	d018      	beq.n	8002902 <RCCEx_PLLSAI1_Config+0x86>
 80028d0:	2b03      	cmp	r3, #3
 80028d2:	d825      	bhi.n	8002920 <RCCEx_PLLSAI1_Config+0xa4>
 80028d4:	2b01      	cmp	r3, #1
 80028d6:	d002      	beq.n	80028de <RCCEx_PLLSAI1_Config+0x62>
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d009      	beq.n	80028f0 <RCCEx_PLLSAI1_Config+0x74>
 80028dc:	e020      	b.n	8002920 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80028de:	4b60      	ldr	r3, [pc, #384]	; (8002a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d11d      	bne.n	8002926 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028ee:	e01a      	b.n	8002926 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80028f0:	4b5b      	ldr	r3, [pc, #364]	; (8002a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d116      	bne.n	800292a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002900:	e013      	b.n	800292a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002902:	4b57      	ldr	r3, [pc, #348]	; (8002a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d10f      	bne.n	800292e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800290e:	4b54      	ldr	r3, [pc, #336]	; (8002a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d109      	bne.n	800292e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800291a:	2301      	movs	r3, #1
 800291c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800291e:	e006      	b.n	800292e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	73fb      	strb	r3, [r7, #15]
      break;
 8002924:	e004      	b.n	8002930 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002926:	bf00      	nop
 8002928:	e002      	b.n	8002930 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800292a:	bf00      	nop
 800292c:	e000      	b.n	8002930 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800292e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002930:	7bfb      	ldrb	r3, [r7, #15]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d10d      	bne.n	8002952 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002936:	4b4a      	ldr	r3, [pc, #296]	; (8002a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6819      	ldr	r1, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	3b01      	subs	r3, #1
 8002948:	011b      	lsls	r3, r3, #4
 800294a:	430b      	orrs	r3, r1
 800294c:	4944      	ldr	r1, [pc, #272]	; (8002a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 800294e:	4313      	orrs	r3, r2
 8002950:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002952:	7bfb      	ldrb	r3, [r7, #15]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d17d      	bne.n	8002a54 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002958:	4b41      	ldr	r3, [pc, #260]	; (8002a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a40      	ldr	r2, [pc, #256]	; (8002a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 800295e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002962:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002964:	f7fe fb88 	bl	8001078 <HAL_GetTick>
 8002968:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800296a:	e009      	b.n	8002980 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800296c:	f7fe fb84 	bl	8001078 <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d902      	bls.n	8002980 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	73fb      	strb	r3, [r7, #15]
        break;
 800297e:	e005      	b.n	800298c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002980:	4b37      	ldr	r3, [pc, #220]	; (8002a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d1ef      	bne.n	800296c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800298c:	7bfb      	ldrb	r3, [r7, #15]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d160      	bne.n	8002a54 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d111      	bne.n	80029bc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002998:	4b31      	ldr	r3, [pc, #196]	; (8002a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 800299a:	691b      	ldr	r3, [r3, #16]
 800299c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80029a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	6892      	ldr	r2, [r2, #8]
 80029a8:	0211      	lsls	r1, r2, #8
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	68d2      	ldr	r2, [r2, #12]
 80029ae:	0912      	lsrs	r2, r2, #4
 80029b0:	0452      	lsls	r2, r2, #17
 80029b2:	430a      	orrs	r2, r1
 80029b4:	492a      	ldr	r1, [pc, #168]	; (8002a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029b6:	4313      	orrs	r3, r2
 80029b8:	610b      	str	r3, [r1, #16]
 80029ba:	e027      	b.n	8002a0c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d112      	bne.n	80029e8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029c2:	4b27      	ldr	r3, [pc, #156]	; (8002a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029c4:	691b      	ldr	r3, [r3, #16]
 80029c6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80029ca:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	6892      	ldr	r2, [r2, #8]
 80029d2:	0211      	lsls	r1, r2, #8
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	6912      	ldr	r2, [r2, #16]
 80029d8:	0852      	lsrs	r2, r2, #1
 80029da:	3a01      	subs	r2, #1
 80029dc:	0552      	lsls	r2, r2, #21
 80029de:	430a      	orrs	r2, r1
 80029e0:	491f      	ldr	r1, [pc, #124]	; (8002a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	610b      	str	r3, [r1, #16]
 80029e6:	e011      	b.n	8002a0c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029e8:	4b1d      	ldr	r3, [pc, #116]	; (8002a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 80029ea:	691b      	ldr	r3, [r3, #16]
 80029ec:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80029f0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80029f4:	687a      	ldr	r2, [r7, #4]
 80029f6:	6892      	ldr	r2, [r2, #8]
 80029f8:	0211      	lsls	r1, r2, #8
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	6952      	ldr	r2, [r2, #20]
 80029fe:	0852      	lsrs	r2, r2, #1
 8002a00:	3a01      	subs	r2, #1
 8002a02:	0652      	lsls	r2, r2, #25
 8002a04:	430a      	orrs	r2, r1
 8002a06:	4916      	ldr	r1, [pc, #88]	; (8002a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002a0c:	4b14      	ldr	r3, [pc, #80]	; (8002a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4a13      	ldr	r2, [pc, #76]	; (8002a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a12:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a16:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a18:	f7fe fb2e 	bl	8001078 <HAL_GetTick>
 8002a1c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a1e:	e009      	b.n	8002a34 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a20:	f7fe fb2a 	bl	8001078 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d902      	bls.n	8002a34 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	73fb      	strb	r3, [r7, #15]
          break;
 8002a32:	e005      	b.n	8002a40 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a34:	4b0a      	ldr	r3, [pc, #40]	; (8002a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d0ef      	beq.n	8002a20 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002a40:	7bfb      	ldrb	r3, [r7, #15]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d106      	bne.n	8002a54 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002a46:	4b06      	ldr	r3, [pc, #24]	; (8002a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a48:	691a      	ldr	r2, [r3, #16]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	4904      	ldr	r1, [pc, #16]	; (8002a60 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002a54:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3710      	adds	r7, #16
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	40021000 	.word	0x40021000

08002a64 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a72:	4b6a      	ldr	r3, [pc, #424]	; (8002c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	f003 0303 	and.w	r3, r3, #3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d018      	beq.n	8002ab0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002a7e:	4b67      	ldr	r3, [pc, #412]	; (8002c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	f003 0203 	and.w	r2, r3, #3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d10d      	bne.n	8002aaa <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
       ||
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d009      	beq.n	8002aaa <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002a96:	4b61      	ldr	r3, [pc, #388]	; (8002c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	091b      	lsrs	r3, r3, #4
 8002a9c:	f003 0307 	and.w	r3, r3, #7
 8002aa0:	1c5a      	adds	r2, r3, #1
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	685b      	ldr	r3, [r3, #4]
       ||
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d047      	beq.n	8002b3a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	73fb      	strb	r3, [r7, #15]
 8002aae:	e044      	b.n	8002b3a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2b03      	cmp	r3, #3
 8002ab6:	d018      	beq.n	8002aea <RCCEx_PLLSAI2_Config+0x86>
 8002ab8:	2b03      	cmp	r3, #3
 8002aba:	d825      	bhi.n	8002b08 <RCCEx_PLLSAI2_Config+0xa4>
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d002      	beq.n	8002ac6 <RCCEx_PLLSAI2_Config+0x62>
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d009      	beq.n	8002ad8 <RCCEx_PLLSAI2_Config+0x74>
 8002ac4:	e020      	b.n	8002b08 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ac6:	4b55      	ldr	r3, [pc, #340]	; (8002c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d11d      	bne.n	8002b0e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ad6:	e01a      	b.n	8002b0e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ad8:	4b50      	ldr	r3, [pc, #320]	; (8002c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d116      	bne.n	8002b12 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ae8:	e013      	b.n	8002b12 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002aea:	4b4c      	ldr	r3, [pc, #304]	; (8002c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d10f      	bne.n	8002b16 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002af6:	4b49      	ldr	r3, [pc, #292]	; (8002c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d109      	bne.n	8002b16 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b06:	e006      	b.n	8002b16 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002b08:	2301      	movs	r3, #1
 8002b0a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b0c:	e004      	b.n	8002b18 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b0e:	bf00      	nop
 8002b10:	e002      	b.n	8002b18 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b12:	bf00      	nop
 8002b14:	e000      	b.n	8002b18 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002b16:	bf00      	nop
    }

    if(status == HAL_OK)
 8002b18:	7bfb      	ldrb	r3, [r7, #15]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d10d      	bne.n	8002b3a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002b1e:	4b3f      	ldr	r3, [pc, #252]	; (8002c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6819      	ldr	r1, [r3, #0]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	011b      	lsls	r3, r3, #4
 8002b32:	430b      	orrs	r3, r1
 8002b34:	4939      	ldr	r1, [pc, #228]	; (8002c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b3a:	7bfb      	ldrb	r3, [r7, #15]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d167      	bne.n	8002c10 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002b40:	4b36      	ldr	r3, [pc, #216]	; (8002c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a35      	ldr	r2, [pc, #212]	; (8002c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b4a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b4c:	f7fe fa94 	bl	8001078 <HAL_GetTick>
 8002b50:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b52:	e009      	b.n	8002b68 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b54:	f7fe fa90 	bl	8001078 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d902      	bls.n	8002b68 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002b62:	2303      	movs	r3, #3
 8002b64:	73fb      	strb	r3, [r7, #15]
        break;
 8002b66:	e005      	b.n	8002b74 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b68:	4b2c      	ldr	r3, [pc, #176]	; (8002c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d1ef      	bne.n	8002b54 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002b74:	7bfb      	ldrb	r3, [r7, #15]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d14a      	bne.n	8002c10 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d111      	bne.n	8002ba4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b80:	4b26      	ldr	r3, [pc, #152]	; (8002c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b82:	695b      	ldr	r3, [r3, #20]
 8002b84:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002b88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	6892      	ldr	r2, [r2, #8]
 8002b90:	0211      	lsls	r1, r2, #8
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	68d2      	ldr	r2, [r2, #12]
 8002b96:	0912      	lsrs	r2, r2, #4
 8002b98:	0452      	lsls	r2, r2, #17
 8002b9a:	430a      	orrs	r2, r1
 8002b9c:	491f      	ldr	r1, [pc, #124]	; (8002c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	614b      	str	r3, [r1, #20]
 8002ba2:	e011      	b.n	8002bc8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002ba4:	4b1d      	ldr	r3, [pc, #116]	; (8002c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ba6:	695b      	ldr	r3, [r3, #20]
 8002ba8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002bac:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	6892      	ldr	r2, [r2, #8]
 8002bb4:	0211      	lsls	r1, r2, #8
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	6912      	ldr	r2, [r2, #16]
 8002bba:	0852      	lsrs	r2, r2, #1
 8002bbc:	3a01      	subs	r2, #1
 8002bbe:	0652      	lsls	r2, r2, #25
 8002bc0:	430a      	orrs	r2, r1
 8002bc2:	4916      	ldr	r1, [pc, #88]	; (8002c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002bc8:	4b14      	ldr	r3, [pc, #80]	; (8002c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a13      	ldr	r2, [pc, #76]	; (8002c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bd2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bd4:	f7fe fa50 	bl	8001078 <HAL_GetTick>
 8002bd8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002bda:	e009      	b.n	8002bf0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002bdc:	f7fe fa4c 	bl	8001078 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d902      	bls.n	8002bf0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002bea:	2303      	movs	r3, #3
 8002bec:	73fb      	strb	r3, [r7, #15]
          break;
 8002bee:	e005      	b.n	8002bfc <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002bf0:	4b0a      	ldr	r3, [pc, #40]	; (8002c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d0ef      	beq.n	8002bdc <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002bfc:	7bfb      	ldrb	r3, [r7, #15]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d106      	bne.n	8002c10 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002c02:	4b06      	ldr	r3, [pc, #24]	; (8002c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c04:	695a      	ldr	r2, [r3, #20]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	4904      	ldr	r1, [pc, #16]	; (8002c1c <RCCEx_PLLSAI2_Config+0x1b8>)
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002c10:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	3710      	adds	r7, #16
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	40021000 	.word	0x40021000

08002c20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b084      	sub	sp, #16
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d101      	bne.n	8002c32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e095      	b.n	8002d5e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d108      	bne.n	8002c4c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002c42:	d009      	beq.n	8002c58 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	61da      	str	r2, [r3, #28]
 8002c4a:	e005      	b.n	8002c58 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2200      	movs	r2, #0
 8002c56:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d106      	bne.n	8002c78 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c72:	6878      	ldr	r0, [r7, #4]
 8002c74:	f7fe f856 	bl	8000d24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002c8e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c98:	d902      	bls.n	8002ca0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	60fb      	str	r3, [r7, #12]
 8002c9e:	e002      	b.n	8002ca6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002ca0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ca4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002cae:	d007      	beq.n	8002cc0 <HAL_SPI_Init+0xa0>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002cb8:	d002      	beq.n	8002cc0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002cd0:	431a      	orrs	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	691b      	ldr	r3, [r3, #16]
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	431a      	orrs	r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	695b      	ldr	r3, [r3, #20]
 8002ce0:	f003 0301 	and.w	r3, r3, #1
 8002ce4:	431a      	orrs	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	699b      	ldr	r3, [r3, #24]
 8002cea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002cee:	431a      	orrs	r2, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	69db      	ldr	r3, [r3, #28]
 8002cf4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002cf8:	431a      	orrs	r2, r3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a1b      	ldr	r3, [r3, #32]
 8002cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d02:	ea42 0103 	orr.w	r1, r2, r3
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d0a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	430a      	orrs	r2, r1
 8002d14:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	0c1b      	lsrs	r3, r3, #16
 8002d1c:	f003 0204 	and.w	r2, r3, #4
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d24:	f003 0310 	and.w	r3, r3, #16
 8002d28:	431a      	orrs	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d2e:	f003 0308 	and.w	r3, r3, #8
 8002d32:	431a      	orrs	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002d3c:	ea42 0103 	orr.w	r1, r2, r3
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2201      	movs	r2, #1
 8002d58:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	3710      	adds	r7, #16
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b088      	sub	sp, #32
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	60f8      	str	r0, [r7, #12]
 8002d6e:	60b9      	str	r1, [r7, #8]
 8002d70:	603b      	str	r3, [r7, #0]
 8002d72:	4613      	mov	r3, r2
 8002d74:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d76:	2300      	movs	r3, #0
 8002d78:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d101      	bne.n	8002d88 <HAL_SPI_Transmit+0x22>
 8002d84:	2302      	movs	r3, #2
 8002d86:	e158      	b.n	800303a <HAL_SPI_Transmit+0x2d4>
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d90:	f7fe f972 	bl	8001078 <HAL_GetTick>
 8002d94:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002d96:	88fb      	ldrh	r3, [r7, #6]
 8002d98:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d002      	beq.n	8002dac <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002da6:	2302      	movs	r3, #2
 8002da8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002daa:	e13d      	b.n	8003028 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d002      	beq.n	8002db8 <HAL_SPI_Transmit+0x52>
 8002db2:	88fb      	ldrh	r3, [r7, #6]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d102      	bne.n	8002dbe <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002dbc:	e134      	b.n	8003028 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2203      	movs	r2, #3
 8002dc2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	68ba      	ldr	r2, [r7, #8]
 8002dd0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	88fa      	ldrh	r2, [r7, #6]
 8002dd6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	88fa      	ldrh	r2, [r7, #6]
 8002ddc:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2200      	movs	r2, #0
 8002de2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2200      	movs	r2, #0
 8002df8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e08:	d10f      	bne.n	8002e2a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e18:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681a      	ldr	r2, [r3, #0]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e28:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e34:	2b40      	cmp	r3, #64	; 0x40
 8002e36:	d007      	beq.n	8002e48 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681a      	ldr	r2, [r3, #0]
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e46:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002e50:	d94b      	bls.n	8002eea <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d002      	beq.n	8002e60 <HAL_SPI_Transmit+0xfa>
 8002e5a:	8afb      	ldrh	r3, [r7, #22]
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d13e      	bne.n	8002ede <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e64:	881a      	ldrh	r2, [r3, #0]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e70:	1c9a      	adds	r2, r3, #2
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e7a:	b29b      	uxth	r3, r3
 8002e7c:	3b01      	subs	r3, #1
 8002e7e:	b29a      	uxth	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002e84:	e02b      	b.n	8002ede <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f003 0302 	and.w	r3, r3, #2
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d112      	bne.n	8002eba <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e98:	881a      	ldrh	r2, [r3, #0]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea4:	1c9a      	adds	r2, r3, #2
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	3b01      	subs	r3, #1
 8002eb2:	b29a      	uxth	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002eb8:	e011      	b.n	8002ede <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002eba:	f7fe f8dd 	bl	8001078 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	683a      	ldr	r2, [r7, #0]
 8002ec6:	429a      	cmp	r2, r3
 8002ec8:	d803      	bhi.n	8002ed2 <HAL_SPI_Transmit+0x16c>
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed0:	d102      	bne.n	8002ed8 <HAL_SPI_Transmit+0x172>
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d102      	bne.n	8002ede <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002edc:	e0a4      	b.n	8003028 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ee2:	b29b      	uxth	r3, r3
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d1ce      	bne.n	8002e86 <HAL_SPI_Transmit+0x120>
 8002ee8:	e07c      	b.n	8002fe4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d002      	beq.n	8002ef8 <HAL_SPI_Transmit+0x192>
 8002ef2:	8afb      	ldrh	r3, [r7, #22]
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d170      	bne.n	8002fda <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d912      	bls.n	8002f28 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f06:	881a      	ldrh	r2, [r3, #0]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f12:	1c9a      	adds	r2, r3, #2
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	3b02      	subs	r3, #2
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f26:	e058      	b.n	8002fda <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	330c      	adds	r3, #12
 8002f32:	7812      	ldrb	r2, [r2, #0]
 8002f34:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f3a:	1c5a      	adds	r2, r3, #1
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	3b01      	subs	r3, #1
 8002f48:	b29a      	uxth	r2, r3
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002f4e:	e044      	b.n	8002fda <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d12b      	bne.n	8002fb6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d912      	bls.n	8002f8e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f6c:	881a      	ldrh	r2, [r3, #0]
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f78:	1c9a      	adds	r2, r3, #2
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	3b02      	subs	r3, #2
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002f8c:	e025      	b.n	8002fda <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	330c      	adds	r3, #12
 8002f98:	7812      	ldrb	r2, [r2, #0]
 8002f9a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa0:	1c5a      	adds	r2, r3, #1
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	3b01      	subs	r3, #1
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002fb4:	e011      	b.n	8002fda <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fb6:	f7fe f85f 	bl	8001078 <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	683a      	ldr	r2, [r7, #0]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d803      	bhi.n	8002fce <HAL_SPI_Transmit+0x268>
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fcc:	d102      	bne.n	8002fd4 <HAL_SPI_Transmit+0x26e>
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d102      	bne.n	8002fda <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002fd8:	e026      	b.n	8003028 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d1b5      	bne.n	8002f50 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002fe4:	69ba      	ldr	r2, [r7, #24]
 8002fe6:	6839      	ldr	r1, [r7, #0]
 8002fe8:	68f8      	ldr	r0, [r7, #12]
 8002fea:	f000 fce3 	bl	80039b4 <SPI_EndRxTxTransaction>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d002      	beq.n	8002ffa <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2220      	movs	r2, #32
 8002ff8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d10a      	bne.n	8003018 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003002:	2300      	movs	r3, #0
 8003004:	613b      	str	r3, [r7, #16]
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	613b      	str	r3, [r7, #16]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	613b      	str	r3, [r7, #16]
 8003016:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800301c:	2b00      	cmp	r3, #0
 800301e:	d002      	beq.n	8003026 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	77fb      	strb	r3, [r7, #31]
 8003024:	e000      	b.n	8003028 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8003026:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2200      	movs	r2, #0
 8003034:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003038:	7ffb      	ldrb	r3, [r7, #31]
}
 800303a:	4618      	mov	r0, r3
 800303c:	3720      	adds	r7, #32
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003042:	b580      	push	{r7, lr}
 8003044:	b088      	sub	sp, #32
 8003046:	af02      	add	r7, sp, #8
 8003048:	60f8      	str	r0, [r7, #12]
 800304a:	60b9      	str	r1, [r7, #8]
 800304c:	603b      	str	r3, [r7, #0]
 800304e:	4613      	mov	r3, r2
 8003050:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003052:	2300      	movs	r3, #0
 8003054:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800305e:	d112      	bne.n	8003086 <HAL_SPI_Receive+0x44>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d10e      	bne.n	8003086 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2204      	movs	r2, #4
 800306c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003070:	88fa      	ldrh	r2, [r7, #6]
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	9300      	str	r3, [sp, #0]
 8003076:	4613      	mov	r3, r2
 8003078:	68ba      	ldr	r2, [r7, #8]
 800307a:	68b9      	ldr	r1, [r7, #8]
 800307c:	68f8      	ldr	r0, [r7, #12]
 800307e:	f000 f910 	bl	80032a2 <HAL_SPI_TransmitReceive>
 8003082:	4603      	mov	r3, r0
 8003084:	e109      	b.n	800329a <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800308c:	2b01      	cmp	r3, #1
 800308e:	d101      	bne.n	8003094 <HAL_SPI_Receive+0x52>
 8003090:	2302      	movs	r3, #2
 8003092:	e102      	b.n	800329a <HAL_SPI_Receive+0x258>
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800309c:	f7fd ffec 	bl	8001078 <HAL_GetTick>
 80030a0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d002      	beq.n	80030b4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80030ae:	2302      	movs	r3, #2
 80030b0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80030b2:	e0e9      	b.n	8003288 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d002      	beq.n	80030c0 <HAL_SPI_Receive+0x7e>
 80030ba:	88fb      	ldrh	r3, [r7, #6]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d102      	bne.n	80030c6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80030c4:	e0e0      	b.n	8003288 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2204      	movs	r2, #4
 80030ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	68ba      	ldr	r2, [r7, #8]
 80030d8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	88fa      	ldrh	r2, [r7, #6]
 80030de:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	88fa      	ldrh	r2, [r7, #6]
 80030e6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2200      	movs	r2, #0
 80030ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2200      	movs	r2, #0
 80030f4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2200      	movs	r2, #0
 80030fa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2200      	movs	r2, #0
 8003100:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2200      	movs	r2, #0
 8003106:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003110:	d908      	bls.n	8003124 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	685a      	ldr	r2, [r3, #4]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003120:	605a      	str	r2, [r3, #4]
 8003122:	e007      	b.n	8003134 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	685a      	ldr	r2, [r3, #4]
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003132:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800313c:	d10f      	bne.n	800315e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800314c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681a      	ldr	r2, [r3, #0]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800315c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003168:	2b40      	cmp	r3, #64	; 0x40
 800316a:	d007      	beq.n	800317c <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800317a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003184:	d867      	bhi.n	8003256 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003186:	e030      	b.n	80031ea <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	f003 0301 	and.w	r3, r3, #1
 8003192:	2b01      	cmp	r3, #1
 8003194:	d117      	bne.n	80031c6 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f103 020c 	add.w	r2, r3, #12
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a2:	7812      	ldrb	r2, [r2, #0]
 80031a4:	b2d2      	uxtb	r2, r2
 80031a6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ac:	1c5a      	adds	r2, r3, #1
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	3b01      	subs	r3, #1
 80031bc:	b29a      	uxth	r2, r3
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80031c4:	e011      	b.n	80031ea <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031c6:	f7fd ff57 	bl	8001078 <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	683a      	ldr	r2, [r7, #0]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d803      	bhi.n	80031de <HAL_SPI_Receive+0x19c>
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031dc:	d102      	bne.n	80031e4 <HAL_SPI_Receive+0x1a2>
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d102      	bne.n	80031ea <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80031e8:	e04e      	b.n	8003288 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d1c8      	bne.n	8003188 <HAL_SPI_Receive+0x146>
 80031f6:	e034      	b.n	8003262 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	f003 0301 	and.w	r3, r3, #1
 8003202:	2b01      	cmp	r3, #1
 8003204:	d115      	bne.n	8003232 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68da      	ldr	r2, [r3, #12]
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003210:	b292      	uxth	r2, r2
 8003212:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003218:	1c9a      	adds	r2, r3, #2
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003224:	b29b      	uxth	r3, r3
 8003226:	3b01      	subs	r3, #1
 8003228:	b29a      	uxth	r2, r3
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003230:	e011      	b.n	8003256 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003232:	f7fd ff21 	bl	8001078 <HAL_GetTick>
 8003236:	4602      	mov	r2, r0
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	1ad3      	subs	r3, r2, r3
 800323c:	683a      	ldr	r2, [r7, #0]
 800323e:	429a      	cmp	r2, r3
 8003240:	d803      	bhi.n	800324a <HAL_SPI_Receive+0x208>
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003248:	d102      	bne.n	8003250 <HAL_SPI_Receive+0x20e>
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d102      	bne.n	8003256 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8003250:	2303      	movs	r3, #3
 8003252:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003254:	e018      	b.n	8003288 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800325c:	b29b      	uxth	r3, r3
 800325e:	2b00      	cmp	r3, #0
 8003260:	d1ca      	bne.n	80031f8 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003262:	693a      	ldr	r2, [r7, #16]
 8003264:	6839      	ldr	r1, [r7, #0]
 8003266:	68f8      	ldr	r0, [r7, #12]
 8003268:	f000 fb4c 	bl	8003904 <SPI_EndRxTransaction>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d002      	beq.n	8003278 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2220      	movs	r2, #32
 8003276:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800327c:	2b00      	cmp	r3, #0
 800327e:	d002      	beq.n	8003286 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	75fb      	strb	r3, [r7, #23]
 8003284:	e000      	b.n	8003288 <HAL_SPI_Receive+0x246>
  }

error :
 8003286:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003298:	7dfb      	ldrb	r3, [r7, #23]
}
 800329a:	4618      	mov	r0, r3
 800329c:	3718      	adds	r7, #24
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b08a      	sub	sp, #40	; 0x28
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	60f8      	str	r0, [r7, #12]
 80032aa:	60b9      	str	r1, [r7, #8]
 80032ac:	607a      	str	r2, [r7, #4]
 80032ae:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80032b0:	2301      	movs	r3, #1
 80032b2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80032b4:	2300      	movs	r3, #0
 80032b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d101      	bne.n	80032c8 <HAL_SPI_TransmitReceive+0x26>
 80032c4:	2302      	movs	r3, #2
 80032c6:	e1fb      	b.n	80036c0 <HAL_SPI_TransmitReceive+0x41e>
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032d0:	f7fd fed2 	bl	8001078 <HAL_GetTick>
 80032d4:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80032dc:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80032e4:	887b      	ldrh	r3, [r7, #2]
 80032e6:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80032e8:	887b      	ldrh	r3, [r7, #2]
 80032ea:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80032ec:	7efb      	ldrb	r3, [r7, #27]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d00e      	beq.n	8003310 <HAL_SPI_TransmitReceive+0x6e>
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032f8:	d106      	bne.n	8003308 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d102      	bne.n	8003308 <HAL_SPI_TransmitReceive+0x66>
 8003302:	7efb      	ldrb	r3, [r7, #27]
 8003304:	2b04      	cmp	r3, #4
 8003306:	d003      	beq.n	8003310 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003308:	2302      	movs	r3, #2
 800330a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800330e:	e1cd      	b.n	80036ac <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d005      	beq.n	8003322 <HAL_SPI_TransmitReceive+0x80>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d002      	beq.n	8003322 <HAL_SPI_TransmitReceive+0x80>
 800331c:	887b      	ldrh	r3, [r7, #2]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d103      	bne.n	800332a <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003322:	2301      	movs	r3, #1
 8003324:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003328:	e1c0      	b.n	80036ac <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b04      	cmp	r3, #4
 8003334:	d003      	beq.n	800333e <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	2205      	movs	r2, #5
 800333a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2200      	movs	r2, #0
 8003342:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	887a      	ldrh	r2, [r7, #2]
 800334e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	887a      	ldrh	r2, [r7, #2]
 8003356:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	68ba      	ldr	r2, [r7, #8]
 800335e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	887a      	ldrh	r2, [r7, #2]
 8003364:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	887a      	ldrh	r2, [r7, #2]
 800336a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2200      	movs	r2, #0
 8003370:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2200      	movs	r2, #0
 8003376:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003380:	d802      	bhi.n	8003388 <HAL_SPI_TransmitReceive+0xe6>
 8003382:	8a3b      	ldrh	r3, [r7, #16]
 8003384:	2b01      	cmp	r3, #1
 8003386:	d908      	bls.n	800339a <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	685a      	ldr	r2, [r3, #4]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003396:	605a      	str	r2, [r3, #4]
 8003398:	e007      	b.n	80033aa <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	685a      	ldr	r2, [r3, #4]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80033a8:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033b4:	2b40      	cmp	r3, #64	; 0x40
 80033b6:	d007      	beq.n	80033c8 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	68db      	ldr	r3, [r3, #12]
 80033cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80033d0:	d97c      	bls.n	80034cc <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d002      	beq.n	80033e0 <HAL_SPI_TransmitReceive+0x13e>
 80033da:	8a7b      	ldrh	r3, [r7, #18]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d169      	bne.n	80034b4 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033e4:	881a      	ldrh	r2, [r3, #0]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033f0:	1c9a      	adds	r2, r3, #2
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	3b01      	subs	r3, #1
 80033fe:	b29a      	uxth	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003404:	e056      	b.n	80034b4 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	2b02      	cmp	r3, #2
 8003412:	d11b      	bne.n	800344c <HAL_SPI_TransmitReceive+0x1aa>
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003418:	b29b      	uxth	r3, r3
 800341a:	2b00      	cmp	r3, #0
 800341c:	d016      	beq.n	800344c <HAL_SPI_TransmitReceive+0x1aa>
 800341e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003420:	2b01      	cmp	r3, #1
 8003422:	d113      	bne.n	800344c <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003428:	881a      	ldrh	r2, [r3, #0]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003434:	1c9a      	adds	r2, r3, #2
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800343e:	b29b      	uxth	r3, r3
 8003440:	3b01      	subs	r3, #1
 8003442:	b29a      	uxth	r2, r3
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003448:	2300      	movs	r3, #0
 800344a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f003 0301 	and.w	r3, r3, #1
 8003456:	2b01      	cmp	r3, #1
 8003458:	d11c      	bne.n	8003494 <HAL_SPI_TransmitReceive+0x1f2>
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003460:	b29b      	uxth	r3, r3
 8003462:	2b00      	cmp	r3, #0
 8003464:	d016      	beq.n	8003494 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68da      	ldr	r2, [r3, #12]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003470:	b292      	uxth	r2, r2
 8003472:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003478:	1c9a      	adds	r2, r3, #2
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003484:	b29b      	uxth	r3, r3
 8003486:	3b01      	subs	r3, #1
 8003488:	b29a      	uxth	r2, r3
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003490:	2301      	movs	r3, #1
 8003492:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003494:	f7fd fdf0 	bl	8001078 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d807      	bhi.n	80034b4 <HAL_SPI_TransmitReceive+0x212>
 80034a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034aa:	d003      	beq.n	80034b4 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80034ac:	2303      	movs	r3, #3
 80034ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80034b2:	e0fb      	b.n	80036ac <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034b8:	b29b      	uxth	r3, r3
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1a3      	bne.n	8003406 <HAL_SPI_TransmitReceive+0x164>
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d19d      	bne.n	8003406 <HAL_SPI_TransmitReceive+0x164>
 80034ca:	e0df      	b.n	800368c <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d003      	beq.n	80034dc <HAL_SPI_TransmitReceive+0x23a>
 80034d4:	8a7b      	ldrh	r3, [r7, #18]
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	f040 80cb 	bne.w	8003672 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034e0:	b29b      	uxth	r3, r3
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d912      	bls.n	800350c <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ea:	881a      	ldrh	r2, [r3, #0]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034f6:	1c9a      	adds	r2, r3, #2
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003500:	b29b      	uxth	r3, r3
 8003502:	3b02      	subs	r3, #2
 8003504:	b29a      	uxth	r2, r3
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	87da      	strh	r2, [r3, #62]	; 0x3e
 800350a:	e0b2      	b.n	8003672 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	330c      	adds	r3, #12
 8003516:	7812      	ldrb	r2, [r2, #0]
 8003518:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800351e:	1c5a      	adds	r2, r3, #1
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003528:	b29b      	uxth	r3, r3
 800352a:	3b01      	subs	r3, #1
 800352c:	b29a      	uxth	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003532:	e09e      	b.n	8003672 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	2b02      	cmp	r3, #2
 8003540:	d134      	bne.n	80035ac <HAL_SPI_TransmitReceive+0x30a>
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003546:	b29b      	uxth	r3, r3
 8003548:	2b00      	cmp	r3, #0
 800354a:	d02f      	beq.n	80035ac <HAL_SPI_TransmitReceive+0x30a>
 800354c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354e:	2b01      	cmp	r3, #1
 8003550:	d12c      	bne.n	80035ac <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003556:	b29b      	uxth	r3, r3
 8003558:	2b01      	cmp	r3, #1
 800355a:	d912      	bls.n	8003582 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003560:	881a      	ldrh	r2, [r3, #0]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800356c:	1c9a      	adds	r2, r3, #2
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003576:	b29b      	uxth	r3, r3
 8003578:	3b02      	subs	r3, #2
 800357a:	b29a      	uxth	r2, r3
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003580:	e012      	b.n	80035a8 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	330c      	adds	r3, #12
 800358c:	7812      	ldrb	r2, [r2, #0]
 800358e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003594:	1c5a      	adds	r2, r3, #1
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800359e:	b29b      	uxth	r3, r3
 80035a0:	3b01      	subs	r3, #1
 80035a2:	b29a      	uxth	r2, r3
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80035a8:	2300      	movs	r3, #0
 80035aa:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f003 0301 	and.w	r3, r3, #1
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d148      	bne.n	800364c <HAL_SPI_TransmitReceive+0x3aa>
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d042      	beq.n	800364c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d923      	bls.n	800361a <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	68da      	ldr	r2, [r3, #12]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035dc:	b292      	uxth	r2, r2
 80035de:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e4:	1c9a      	adds	r2, r3, #2
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	3b02      	subs	r3, #2
 80035f4:	b29a      	uxth	r2, r3
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003602:	b29b      	uxth	r3, r3
 8003604:	2b01      	cmp	r3, #1
 8003606:	d81f      	bhi.n	8003648 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	685a      	ldr	r2, [r3, #4]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003616:	605a      	str	r2, [r3, #4]
 8003618:	e016      	b.n	8003648 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f103 020c 	add.w	r2, r3, #12
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003626:	7812      	ldrb	r2, [r2, #0]
 8003628:	b2d2      	uxtb	r2, r2
 800362a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003630:	1c5a      	adds	r2, r3, #1
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800363c:	b29b      	uxth	r3, r3
 800363e:	3b01      	subs	r3, #1
 8003640:	b29a      	uxth	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003648:	2301      	movs	r3, #1
 800364a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800364c:	f7fd fd14 	bl	8001078 <HAL_GetTick>
 8003650:	4602      	mov	r2, r0
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	1ad3      	subs	r3, r2, r3
 8003656:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003658:	429a      	cmp	r2, r3
 800365a:	d803      	bhi.n	8003664 <HAL_SPI_TransmitReceive+0x3c2>
 800365c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800365e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003662:	d102      	bne.n	800366a <HAL_SPI_TransmitReceive+0x3c8>
 8003664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003666:	2b00      	cmp	r3, #0
 8003668:	d103      	bne.n	8003672 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800366a:	2303      	movs	r3, #3
 800366c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003670:	e01c      	b.n	80036ac <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003676:	b29b      	uxth	r3, r3
 8003678:	2b00      	cmp	r3, #0
 800367a:	f47f af5b 	bne.w	8003534 <HAL_SPI_TransmitReceive+0x292>
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003684:	b29b      	uxth	r3, r3
 8003686:	2b00      	cmp	r3, #0
 8003688:	f47f af54 	bne.w	8003534 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800368c:	69fa      	ldr	r2, [r7, #28]
 800368e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003690:	68f8      	ldr	r0, [r7, #12]
 8003692:	f000 f98f 	bl	80039b4 <SPI_EndRxTxTransaction>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d006      	beq.n	80036aa <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 800369c:	2301      	movs	r3, #1
 800369e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2220      	movs	r2, #32
 80036a6:	661a      	str	r2, [r3, #96]	; 0x60
 80036a8:	e000      	b.n	80036ac <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80036aa:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80036bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	3728      	adds	r7, #40	; 0x28
 80036c4:	46bd      	mov	sp, r7
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b088      	sub	sp, #32
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	603b      	str	r3, [r7, #0]
 80036d4:	4613      	mov	r3, r2
 80036d6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80036d8:	f7fd fcce 	bl	8001078 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e0:	1a9b      	subs	r3, r3, r2
 80036e2:	683a      	ldr	r2, [r7, #0]
 80036e4:	4413      	add	r3, r2
 80036e6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80036e8:	f7fd fcc6 	bl	8001078 <HAL_GetTick>
 80036ec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80036ee:	4b39      	ldr	r3, [pc, #228]	; (80037d4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	015b      	lsls	r3, r3, #5
 80036f4:	0d1b      	lsrs	r3, r3, #20
 80036f6:	69fa      	ldr	r2, [r7, #28]
 80036f8:	fb02 f303 	mul.w	r3, r2, r3
 80036fc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036fe:	e054      	b.n	80037aa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003706:	d050      	beq.n	80037aa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003708:	f7fd fcb6 	bl	8001078 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	69fa      	ldr	r2, [r7, #28]
 8003714:	429a      	cmp	r2, r3
 8003716:	d902      	bls.n	800371e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d13d      	bne.n	800379a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	685a      	ldr	r2, [r3, #4]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800372c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003736:	d111      	bne.n	800375c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003740:	d004      	beq.n	800374c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	689b      	ldr	r3, [r3, #8]
 8003746:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800374a:	d107      	bne.n	800375c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800375a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003760:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003764:	d10f      	bne.n	8003786 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003774:	601a      	str	r2, [r3, #0]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003784:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2201      	movs	r2, #1
 800378a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e017      	b.n	80037ca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d101      	bne.n	80037a4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80037a0:	2300      	movs	r3, #0
 80037a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	3b01      	subs	r3, #1
 80037a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	689a      	ldr	r2, [r3, #8]
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	4013      	ands	r3, r2
 80037b4:	68ba      	ldr	r2, [r7, #8]
 80037b6:	429a      	cmp	r2, r3
 80037b8:	bf0c      	ite	eq
 80037ba:	2301      	moveq	r3, #1
 80037bc:	2300      	movne	r3, #0
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	461a      	mov	r2, r3
 80037c2:	79fb      	ldrb	r3, [r7, #7]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d19b      	bne.n	8003700 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80037c8:	2300      	movs	r3, #0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3720      	adds	r7, #32
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
 80037d2:	bf00      	nop
 80037d4:	20000000 	.word	0x20000000

080037d8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b08a      	sub	sp, #40	; 0x28
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	607a      	str	r2, [r7, #4]
 80037e4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80037e6:	2300      	movs	r3, #0
 80037e8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80037ea:	f7fd fc45 	bl	8001078 <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f2:	1a9b      	subs	r3, r3, r2
 80037f4:	683a      	ldr	r2, [r7, #0]
 80037f6:	4413      	add	r3, r2
 80037f8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80037fa:	f7fd fc3d 	bl	8001078 <HAL_GetTick>
 80037fe:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	330c      	adds	r3, #12
 8003806:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003808:	4b3d      	ldr	r3, [pc, #244]	; (8003900 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	4613      	mov	r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	4413      	add	r3, r2
 8003812:	00da      	lsls	r2, r3, #3
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	0d1b      	lsrs	r3, r3, #20
 8003818:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800381a:	fb02 f303 	mul.w	r3, r2, r3
 800381e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003820:	e060      	b.n	80038e4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003828:	d107      	bne.n	800383a <SPI_WaitFifoStateUntilTimeout+0x62>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d104      	bne.n	800383a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003830:	69fb      	ldr	r3, [r7, #28]
 8003832:	781b      	ldrb	r3, [r3, #0]
 8003834:	b2db      	uxtb	r3, r3
 8003836:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003838:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003840:	d050      	beq.n	80038e4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003842:	f7fd fc19 	bl	8001078 <HAL_GetTick>
 8003846:	4602      	mov	r2, r0
 8003848:	6a3b      	ldr	r3, [r7, #32]
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800384e:	429a      	cmp	r2, r3
 8003850:	d902      	bls.n	8003858 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003854:	2b00      	cmp	r3, #0
 8003856:	d13d      	bne.n	80038d4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	685a      	ldr	r2, [r3, #4]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003866:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003870:	d111      	bne.n	8003896 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800387a:	d004      	beq.n	8003886 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003884:	d107      	bne.n	8003896 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003894:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800389a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800389e:	d10f      	bne.n	80038c0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038ae:	601a      	str	r2, [r3, #0]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681a      	ldr	r2, [r3, #0]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038be:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80038d0:	2303      	movs	r3, #3
 80038d2:	e010      	b.n	80038f6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80038d4:	69bb      	ldr	r3, [r7, #24]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d101      	bne.n	80038de <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80038da:	2300      	movs	r3, #0
 80038dc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	3b01      	subs	r3, #1
 80038e2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	689a      	ldr	r2, [r3, #8]
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	4013      	ands	r3, r2
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d196      	bne.n	8003822 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3728      	adds	r7, #40	; 0x28
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	20000000 	.word	0x20000000

08003904 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003904:	b580      	push	{r7, lr}
 8003906:	b086      	sub	sp, #24
 8003908:	af02      	add	r7, sp, #8
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003918:	d111      	bne.n	800393e <SPI_EndRxTransaction+0x3a>
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003922:	d004      	beq.n	800392e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800392c:	d107      	bne.n	800393e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800393c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	9300      	str	r3, [sp, #0]
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	2200      	movs	r2, #0
 8003946:	2180      	movs	r1, #128	; 0x80
 8003948:	68f8      	ldr	r0, [r7, #12]
 800394a:	f7ff febd 	bl	80036c8 <SPI_WaitFlagStateUntilTimeout>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d007      	beq.n	8003964 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003958:	f043 0220 	orr.w	r2, r3, #32
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003960:	2303      	movs	r3, #3
 8003962:	e023      	b.n	80039ac <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800396c:	d11d      	bne.n	80039aa <SPI_EndRxTransaction+0xa6>
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003976:	d004      	beq.n	8003982 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003980:	d113      	bne.n	80039aa <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	9300      	str	r3, [sp, #0]
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	2200      	movs	r2, #0
 800398a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800398e:	68f8      	ldr	r0, [r7, #12]
 8003990:	f7ff ff22 	bl	80037d8 <SPI_WaitFifoStateUntilTimeout>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d007      	beq.n	80039aa <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800399e:	f043 0220 	orr.w	r2, r3, #32
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e000      	b.n	80039ac <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80039aa:	2300      	movs	r3, #0
}
 80039ac:	4618      	mov	r0, r3
 80039ae:	3710      	adds	r7, #16
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bd80      	pop	{r7, pc}

080039b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b086      	sub	sp, #24
 80039b8:	af02      	add	r7, sp, #8
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	9300      	str	r3, [sp, #0]
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	2200      	movs	r2, #0
 80039c8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80039cc:	68f8      	ldr	r0, [r7, #12]
 80039ce:	f7ff ff03 	bl	80037d8 <SPI_WaitFifoStateUntilTimeout>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d007      	beq.n	80039e8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039dc:	f043 0220 	orr.w	r2, r3, #32
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
 80039e6:	e027      	b.n	8003a38 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	9300      	str	r3, [sp, #0]
 80039ec:	68bb      	ldr	r3, [r7, #8]
 80039ee:	2200      	movs	r2, #0
 80039f0:	2180      	movs	r1, #128	; 0x80
 80039f2:	68f8      	ldr	r0, [r7, #12]
 80039f4:	f7ff fe68 	bl	80036c8 <SPI_WaitFlagStateUntilTimeout>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d007      	beq.n	8003a0e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a02:	f043 0220 	orr.w	r2, r3, #32
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003a0a:	2303      	movs	r3, #3
 8003a0c:	e014      	b.n	8003a38 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	9300      	str	r3, [sp, #0]
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003a1a:	68f8      	ldr	r0, [r7, #12]
 8003a1c:	f7ff fedc 	bl	80037d8 <SPI_WaitFifoStateUntilTimeout>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d007      	beq.n	8003a36 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a2a:	f043 0220 	orr.w	r2, r3, #32
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e000      	b.n	8003a38 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003a36:	2300      	movs	r3, #0
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3710      	adds	r7, #16
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d101      	bne.n	8003a52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e040      	b.n	8003ad4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d106      	bne.n	8003a68 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f7fd f9a0 	bl	8000da8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2224      	movs	r2, #36	; 0x24
 8003a6c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f022 0201 	bic.w	r2, r2, #1
 8003a7c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 f8c0 	bl	8003c04 <UART_SetConfig>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d101      	bne.n	8003a8e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e022      	b.n	8003ad4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d002      	beq.n	8003a9c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f000 fb6c 	bl	8004174 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	685a      	ldr	r2, [r3, #4]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003aaa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	689a      	ldr	r2, [r3, #8]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003aba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f042 0201 	orr.w	r2, r2, #1
 8003aca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f000 fbf3 	bl	80042b8 <UART_CheckIdleState>
 8003ad2:	4603      	mov	r3, r0
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	3708      	adds	r7, #8
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}

08003adc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b08a      	sub	sp, #40	; 0x28
 8003ae0:	af02      	add	r7, sp, #8
 8003ae2:	60f8      	str	r0, [r7, #12]
 8003ae4:	60b9      	str	r1, [r7, #8]
 8003ae6:	603b      	str	r3, [r7, #0]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003af0:	2b20      	cmp	r3, #32
 8003af2:	f040 8082 	bne.w	8003bfa <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d002      	beq.n	8003b02 <HAL_UART_Transmit+0x26>
 8003afc:	88fb      	ldrh	r3, [r7, #6]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d101      	bne.n	8003b06 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e07a      	b.n	8003bfc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d101      	bne.n	8003b14 <HAL_UART_Transmit+0x38>
 8003b10:	2302      	movs	r3, #2
 8003b12:	e073      	b.n	8003bfc <HAL_UART_Transmit+0x120>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2221      	movs	r2, #33	; 0x21
 8003b28:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b2a:	f7fd faa5 	bl	8001078 <HAL_GetTick>
 8003b2e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	88fa      	ldrh	r2, [r7, #6]
 8003b34:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	88fa      	ldrh	r2, [r7, #6]
 8003b3c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b48:	d108      	bne.n	8003b5c <HAL_UART_Transmit+0x80>
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d104      	bne.n	8003b5c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003b52:	2300      	movs	r3, #0
 8003b54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	61bb      	str	r3, [r7, #24]
 8003b5a:	e003      	b.n	8003b64 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b60:	2300      	movs	r3, #0
 8003b62:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2200      	movs	r2, #0
 8003b68:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003b6c:	e02d      	b.n	8003bca <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	9300      	str	r3, [sp, #0]
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	2200      	movs	r2, #0
 8003b76:	2180      	movs	r1, #128	; 0x80
 8003b78:	68f8      	ldr	r0, [r7, #12]
 8003b7a:	f000 fbe6 	bl	800434a <UART_WaitOnFlagUntilTimeout>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d001      	beq.n	8003b88 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003b84:	2303      	movs	r3, #3
 8003b86:	e039      	b.n	8003bfc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d10b      	bne.n	8003ba6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	881a      	ldrh	r2, [r3, #0]
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b9a:	b292      	uxth	r2, r2
 8003b9c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003b9e:	69bb      	ldr	r3, [r7, #24]
 8003ba0:	3302      	adds	r3, #2
 8003ba2:	61bb      	str	r3, [r7, #24]
 8003ba4:	e008      	b.n	8003bb8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ba6:	69fb      	ldr	r3, [r7, #28]
 8003ba8:	781a      	ldrb	r2, [r3, #0]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	b292      	uxth	r2, r2
 8003bb0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	3301      	adds	r3, #1
 8003bb6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003bbe:	b29b      	uxth	r3, r3
 8003bc0:	3b01      	subs	r3, #1
 8003bc2:	b29a      	uxth	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003bd0:	b29b      	uxth	r3, r3
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d1cb      	bne.n	8003b6e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	9300      	str	r3, [sp, #0]
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	2140      	movs	r1, #64	; 0x40
 8003be0:	68f8      	ldr	r0, [r7, #12]
 8003be2:	f000 fbb2 	bl	800434a <UART_WaitOnFlagUntilTimeout>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d001      	beq.n	8003bf0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e005      	b.n	8003bfc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2220      	movs	r2, #32
 8003bf4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	e000      	b.n	8003bfc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003bfa:	2302      	movs	r3, #2
  }
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3720      	adds	r7, #32
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c08:	b08a      	sub	sp, #40	; 0x28
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	689a      	ldr	r2, [r3, #8]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	691b      	ldr	r3, [r3, #16]
 8003c1c:	431a      	orrs	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	431a      	orrs	r2, r3
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	69db      	ldr	r3, [r3, #28]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681a      	ldr	r2, [r3, #0]
 8003c32:	4ba4      	ldr	r3, [pc, #656]	; (8003ec4 <UART_SetConfig+0x2c0>)
 8003c34:	4013      	ands	r3, r2
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	6812      	ldr	r2, [r2, #0]
 8003c3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c3c:	430b      	orrs	r3, r1
 8003c3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	68da      	ldr	r2, [r3, #12]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	430a      	orrs	r2, r1
 8003c54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	699b      	ldr	r3, [r3, #24]
 8003c5a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a99      	ldr	r2, [pc, #612]	; (8003ec8 <UART_SetConfig+0x2c4>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d004      	beq.n	8003c70 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	6a1b      	ldr	r3, [r3, #32]
 8003c6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c80:	430a      	orrs	r2, r1
 8003c82:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a90      	ldr	r2, [pc, #576]	; (8003ecc <UART_SetConfig+0x2c8>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d126      	bne.n	8003cdc <UART_SetConfig+0xd8>
 8003c8e:	4b90      	ldr	r3, [pc, #576]	; (8003ed0 <UART_SetConfig+0x2cc>)
 8003c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c94:	f003 0303 	and.w	r3, r3, #3
 8003c98:	2b03      	cmp	r3, #3
 8003c9a:	d81b      	bhi.n	8003cd4 <UART_SetConfig+0xd0>
 8003c9c:	a201      	add	r2, pc, #4	; (adr r2, 8003ca4 <UART_SetConfig+0xa0>)
 8003c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca2:	bf00      	nop
 8003ca4:	08003cb5 	.word	0x08003cb5
 8003ca8:	08003cc5 	.word	0x08003cc5
 8003cac:	08003cbd 	.word	0x08003cbd
 8003cb0:	08003ccd 	.word	0x08003ccd
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cba:	e116      	b.n	8003eea <UART_SetConfig+0x2e6>
 8003cbc:	2302      	movs	r3, #2
 8003cbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cc2:	e112      	b.n	8003eea <UART_SetConfig+0x2e6>
 8003cc4:	2304      	movs	r3, #4
 8003cc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cca:	e10e      	b.n	8003eea <UART_SetConfig+0x2e6>
 8003ccc:	2308      	movs	r3, #8
 8003cce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cd2:	e10a      	b.n	8003eea <UART_SetConfig+0x2e6>
 8003cd4:	2310      	movs	r3, #16
 8003cd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003cda:	e106      	b.n	8003eea <UART_SetConfig+0x2e6>
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a7c      	ldr	r2, [pc, #496]	; (8003ed4 <UART_SetConfig+0x2d0>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d138      	bne.n	8003d58 <UART_SetConfig+0x154>
 8003ce6:	4b7a      	ldr	r3, [pc, #488]	; (8003ed0 <UART_SetConfig+0x2cc>)
 8003ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cec:	f003 030c 	and.w	r3, r3, #12
 8003cf0:	2b0c      	cmp	r3, #12
 8003cf2:	d82d      	bhi.n	8003d50 <UART_SetConfig+0x14c>
 8003cf4:	a201      	add	r2, pc, #4	; (adr r2, 8003cfc <UART_SetConfig+0xf8>)
 8003cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cfa:	bf00      	nop
 8003cfc:	08003d31 	.word	0x08003d31
 8003d00:	08003d51 	.word	0x08003d51
 8003d04:	08003d51 	.word	0x08003d51
 8003d08:	08003d51 	.word	0x08003d51
 8003d0c:	08003d41 	.word	0x08003d41
 8003d10:	08003d51 	.word	0x08003d51
 8003d14:	08003d51 	.word	0x08003d51
 8003d18:	08003d51 	.word	0x08003d51
 8003d1c:	08003d39 	.word	0x08003d39
 8003d20:	08003d51 	.word	0x08003d51
 8003d24:	08003d51 	.word	0x08003d51
 8003d28:	08003d51 	.word	0x08003d51
 8003d2c:	08003d49 	.word	0x08003d49
 8003d30:	2300      	movs	r3, #0
 8003d32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d36:	e0d8      	b.n	8003eea <UART_SetConfig+0x2e6>
 8003d38:	2302      	movs	r3, #2
 8003d3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d3e:	e0d4      	b.n	8003eea <UART_SetConfig+0x2e6>
 8003d40:	2304      	movs	r3, #4
 8003d42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d46:	e0d0      	b.n	8003eea <UART_SetConfig+0x2e6>
 8003d48:	2308      	movs	r3, #8
 8003d4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d4e:	e0cc      	b.n	8003eea <UART_SetConfig+0x2e6>
 8003d50:	2310      	movs	r3, #16
 8003d52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d56:	e0c8      	b.n	8003eea <UART_SetConfig+0x2e6>
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a5e      	ldr	r2, [pc, #376]	; (8003ed8 <UART_SetConfig+0x2d4>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d125      	bne.n	8003dae <UART_SetConfig+0x1aa>
 8003d62:	4b5b      	ldr	r3, [pc, #364]	; (8003ed0 <UART_SetConfig+0x2cc>)
 8003d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d68:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003d6c:	2b30      	cmp	r3, #48	; 0x30
 8003d6e:	d016      	beq.n	8003d9e <UART_SetConfig+0x19a>
 8003d70:	2b30      	cmp	r3, #48	; 0x30
 8003d72:	d818      	bhi.n	8003da6 <UART_SetConfig+0x1a2>
 8003d74:	2b20      	cmp	r3, #32
 8003d76:	d00a      	beq.n	8003d8e <UART_SetConfig+0x18a>
 8003d78:	2b20      	cmp	r3, #32
 8003d7a:	d814      	bhi.n	8003da6 <UART_SetConfig+0x1a2>
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d002      	beq.n	8003d86 <UART_SetConfig+0x182>
 8003d80:	2b10      	cmp	r3, #16
 8003d82:	d008      	beq.n	8003d96 <UART_SetConfig+0x192>
 8003d84:	e00f      	b.n	8003da6 <UART_SetConfig+0x1a2>
 8003d86:	2300      	movs	r3, #0
 8003d88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d8c:	e0ad      	b.n	8003eea <UART_SetConfig+0x2e6>
 8003d8e:	2302      	movs	r3, #2
 8003d90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d94:	e0a9      	b.n	8003eea <UART_SetConfig+0x2e6>
 8003d96:	2304      	movs	r3, #4
 8003d98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003d9c:	e0a5      	b.n	8003eea <UART_SetConfig+0x2e6>
 8003d9e:	2308      	movs	r3, #8
 8003da0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003da4:	e0a1      	b.n	8003eea <UART_SetConfig+0x2e6>
 8003da6:	2310      	movs	r3, #16
 8003da8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dac:	e09d      	b.n	8003eea <UART_SetConfig+0x2e6>
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a4a      	ldr	r2, [pc, #296]	; (8003edc <UART_SetConfig+0x2d8>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d125      	bne.n	8003e04 <UART_SetConfig+0x200>
 8003db8:	4b45      	ldr	r3, [pc, #276]	; (8003ed0 <UART_SetConfig+0x2cc>)
 8003dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dbe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003dc2:	2bc0      	cmp	r3, #192	; 0xc0
 8003dc4:	d016      	beq.n	8003df4 <UART_SetConfig+0x1f0>
 8003dc6:	2bc0      	cmp	r3, #192	; 0xc0
 8003dc8:	d818      	bhi.n	8003dfc <UART_SetConfig+0x1f8>
 8003dca:	2b80      	cmp	r3, #128	; 0x80
 8003dcc:	d00a      	beq.n	8003de4 <UART_SetConfig+0x1e0>
 8003dce:	2b80      	cmp	r3, #128	; 0x80
 8003dd0:	d814      	bhi.n	8003dfc <UART_SetConfig+0x1f8>
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d002      	beq.n	8003ddc <UART_SetConfig+0x1d8>
 8003dd6:	2b40      	cmp	r3, #64	; 0x40
 8003dd8:	d008      	beq.n	8003dec <UART_SetConfig+0x1e8>
 8003dda:	e00f      	b.n	8003dfc <UART_SetConfig+0x1f8>
 8003ddc:	2300      	movs	r3, #0
 8003dde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003de2:	e082      	b.n	8003eea <UART_SetConfig+0x2e6>
 8003de4:	2302      	movs	r3, #2
 8003de6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dea:	e07e      	b.n	8003eea <UART_SetConfig+0x2e6>
 8003dec:	2304      	movs	r3, #4
 8003dee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003df2:	e07a      	b.n	8003eea <UART_SetConfig+0x2e6>
 8003df4:	2308      	movs	r3, #8
 8003df6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003dfa:	e076      	b.n	8003eea <UART_SetConfig+0x2e6>
 8003dfc:	2310      	movs	r3, #16
 8003dfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e02:	e072      	b.n	8003eea <UART_SetConfig+0x2e6>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a35      	ldr	r2, [pc, #212]	; (8003ee0 <UART_SetConfig+0x2dc>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d12a      	bne.n	8003e64 <UART_SetConfig+0x260>
 8003e0e:	4b30      	ldr	r3, [pc, #192]	; (8003ed0 <UART_SetConfig+0x2cc>)
 8003e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e1c:	d01a      	beq.n	8003e54 <UART_SetConfig+0x250>
 8003e1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e22:	d81b      	bhi.n	8003e5c <UART_SetConfig+0x258>
 8003e24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e28:	d00c      	beq.n	8003e44 <UART_SetConfig+0x240>
 8003e2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e2e:	d815      	bhi.n	8003e5c <UART_SetConfig+0x258>
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d003      	beq.n	8003e3c <UART_SetConfig+0x238>
 8003e34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e38:	d008      	beq.n	8003e4c <UART_SetConfig+0x248>
 8003e3a:	e00f      	b.n	8003e5c <UART_SetConfig+0x258>
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e42:	e052      	b.n	8003eea <UART_SetConfig+0x2e6>
 8003e44:	2302      	movs	r3, #2
 8003e46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e4a:	e04e      	b.n	8003eea <UART_SetConfig+0x2e6>
 8003e4c:	2304      	movs	r3, #4
 8003e4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e52:	e04a      	b.n	8003eea <UART_SetConfig+0x2e6>
 8003e54:	2308      	movs	r3, #8
 8003e56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e5a:	e046      	b.n	8003eea <UART_SetConfig+0x2e6>
 8003e5c:	2310      	movs	r3, #16
 8003e5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003e62:	e042      	b.n	8003eea <UART_SetConfig+0x2e6>
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a17      	ldr	r2, [pc, #92]	; (8003ec8 <UART_SetConfig+0x2c4>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d13a      	bne.n	8003ee4 <UART_SetConfig+0x2e0>
 8003e6e:	4b18      	ldr	r3, [pc, #96]	; (8003ed0 <UART_SetConfig+0x2cc>)
 8003e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e74:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003e78:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e7c:	d01a      	beq.n	8003eb4 <UART_SetConfig+0x2b0>
 8003e7e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e82:	d81b      	bhi.n	8003ebc <UART_SetConfig+0x2b8>
 8003e84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e88:	d00c      	beq.n	8003ea4 <UART_SetConfig+0x2a0>
 8003e8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e8e:	d815      	bhi.n	8003ebc <UART_SetConfig+0x2b8>
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d003      	beq.n	8003e9c <UART_SetConfig+0x298>
 8003e94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e98:	d008      	beq.n	8003eac <UART_SetConfig+0x2a8>
 8003e9a:	e00f      	b.n	8003ebc <UART_SetConfig+0x2b8>
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ea2:	e022      	b.n	8003eea <UART_SetConfig+0x2e6>
 8003ea4:	2302      	movs	r3, #2
 8003ea6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003eaa:	e01e      	b.n	8003eea <UART_SetConfig+0x2e6>
 8003eac:	2304      	movs	r3, #4
 8003eae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003eb2:	e01a      	b.n	8003eea <UART_SetConfig+0x2e6>
 8003eb4:	2308      	movs	r3, #8
 8003eb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003eba:	e016      	b.n	8003eea <UART_SetConfig+0x2e6>
 8003ebc:	2310      	movs	r3, #16
 8003ebe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ec2:	e012      	b.n	8003eea <UART_SetConfig+0x2e6>
 8003ec4:	efff69f3 	.word	0xefff69f3
 8003ec8:	40008000 	.word	0x40008000
 8003ecc:	40013800 	.word	0x40013800
 8003ed0:	40021000 	.word	0x40021000
 8003ed4:	40004400 	.word	0x40004400
 8003ed8:	40004800 	.word	0x40004800
 8003edc:	40004c00 	.word	0x40004c00
 8003ee0:	40005000 	.word	0x40005000
 8003ee4:	2310      	movs	r3, #16
 8003ee6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a9f      	ldr	r2, [pc, #636]	; (800416c <UART_SetConfig+0x568>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d17a      	bne.n	8003fea <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ef4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ef8:	2b08      	cmp	r3, #8
 8003efa:	d824      	bhi.n	8003f46 <UART_SetConfig+0x342>
 8003efc:	a201      	add	r2, pc, #4	; (adr r2, 8003f04 <UART_SetConfig+0x300>)
 8003efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f02:	bf00      	nop
 8003f04:	08003f29 	.word	0x08003f29
 8003f08:	08003f47 	.word	0x08003f47
 8003f0c:	08003f31 	.word	0x08003f31
 8003f10:	08003f47 	.word	0x08003f47
 8003f14:	08003f37 	.word	0x08003f37
 8003f18:	08003f47 	.word	0x08003f47
 8003f1c:	08003f47 	.word	0x08003f47
 8003f20:	08003f47 	.word	0x08003f47
 8003f24:	08003f3f 	.word	0x08003f3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f28:	f7fe f932 	bl	8002190 <HAL_RCC_GetPCLK1Freq>
 8003f2c:	61f8      	str	r0, [r7, #28]
        break;
 8003f2e:	e010      	b.n	8003f52 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f30:	4b8f      	ldr	r3, [pc, #572]	; (8004170 <UART_SetConfig+0x56c>)
 8003f32:	61fb      	str	r3, [r7, #28]
        break;
 8003f34:	e00d      	b.n	8003f52 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f36:	f7fe f893 	bl	8002060 <HAL_RCC_GetSysClockFreq>
 8003f3a:	61f8      	str	r0, [r7, #28]
        break;
 8003f3c:	e009      	b.n	8003f52 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f42:	61fb      	str	r3, [r7, #28]
        break;
 8003f44:	e005      	b.n	8003f52 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003f46:	2300      	movs	r3, #0
 8003f48:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003f50:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	f000 80fb 	beq.w	8004150 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	685a      	ldr	r2, [r3, #4]
 8003f5e:	4613      	mov	r3, r2
 8003f60:	005b      	lsls	r3, r3, #1
 8003f62:	4413      	add	r3, r2
 8003f64:	69fa      	ldr	r2, [r7, #28]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d305      	bcc.n	8003f76 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003f70:	69fa      	ldr	r2, [r7, #28]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d903      	bls.n	8003f7e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003f7c:	e0e8      	b.n	8004150 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	2200      	movs	r2, #0
 8003f82:	461c      	mov	r4, r3
 8003f84:	4615      	mov	r5, r2
 8003f86:	f04f 0200 	mov.w	r2, #0
 8003f8a:	f04f 0300 	mov.w	r3, #0
 8003f8e:	022b      	lsls	r3, r5, #8
 8003f90:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003f94:	0222      	lsls	r2, r4, #8
 8003f96:	68f9      	ldr	r1, [r7, #12]
 8003f98:	6849      	ldr	r1, [r1, #4]
 8003f9a:	0849      	lsrs	r1, r1, #1
 8003f9c:	2000      	movs	r0, #0
 8003f9e:	4688      	mov	r8, r1
 8003fa0:	4681      	mov	r9, r0
 8003fa2:	eb12 0a08 	adds.w	sl, r2, r8
 8003fa6:	eb43 0b09 	adc.w	fp, r3, r9
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	603b      	str	r3, [r7, #0]
 8003fb2:	607a      	str	r2, [r7, #4]
 8003fb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003fb8:	4650      	mov	r0, sl
 8003fba:	4659      	mov	r1, fp
 8003fbc:	f7fc f958 	bl	8000270 <__aeabi_uldivmod>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	460b      	mov	r3, r1
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fce:	d308      	bcc.n	8003fe2 <UART_SetConfig+0x3de>
 8003fd0:	69bb      	ldr	r3, [r7, #24]
 8003fd2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003fd6:	d204      	bcs.n	8003fe2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	69ba      	ldr	r2, [r7, #24]
 8003fde:	60da      	str	r2, [r3, #12]
 8003fe0:	e0b6      	b.n	8004150 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003fe8:	e0b2      	b.n	8004150 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	69db      	ldr	r3, [r3, #28]
 8003fee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ff2:	d15e      	bne.n	80040b2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003ff4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ff8:	2b08      	cmp	r3, #8
 8003ffa:	d828      	bhi.n	800404e <UART_SetConfig+0x44a>
 8003ffc:	a201      	add	r2, pc, #4	; (adr r2, 8004004 <UART_SetConfig+0x400>)
 8003ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004002:	bf00      	nop
 8004004:	08004029 	.word	0x08004029
 8004008:	08004031 	.word	0x08004031
 800400c:	08004039 	.word	0x08004039
 8004010:	0800404f 	.word	0x0800404f
 8004014:	0800403f 	.word	0x0800403f
 8004018:	0800404f 	.word	0x0800404f
 800401c:	0800404f 	.word	0x0800404f
 8004020:	0800404f 	.word	0x0800404f
 8004024:	08004047 	.word	0x08004047
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004028:	f7fe f8b2 	bl	8002190 <HAL_RCC_GetPCLK1Freq>
 800402c:	61f8      	str	r0, [r7, #28]
        break;
 800402e:	e014      	b.n	800405a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004030:	f7fe f8c4 	bl	80021bc <HAL_RCC_GetPCLK2Freq>
 8004034:	61f8      	str	r0, [r7, #28]
        break;
 8004036:	e010      	b.n	800405a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004038:	4b4d      	ldr	r3, [pc, #308]	; (8004170 <UART_SetConfig+0x56c>)
 800403a:	61fb      	str	r3, [r7, #28]
        break;
 800403c:	e00d      	b.n	800405a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800403e:	f7fe f80f 	bl	8002060 <HAL_RCC_GetSysClockFreq>
 8004042:	61f8      	str	r0, [r7, #28]
        break;
 8004044:	e009      	b.n	800405a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004046:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800404a:	61fb      	str	r3, [r7, #28]
        break;
 800404c:	e005      	b.n	800405a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800404e:	2300      	movs	r3, #0
 8004050:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004058:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800405a:	69fb      	ldr	r3, [r7, #28]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d077      	beq.n	8004150 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004060:	69fb      	ldr	r3, [r7, #28]
 8004062:	005a      	lsls	r2, r3, #1
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	085b      	lsrs	r3, r3, #1
 800406a:	441a      	add	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	fbb2 f3f3 	udiv	r3, r2, r3
 8004074:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	2b0f      	cmp	r3, #15
 800407a:	d916      	bls.n	80040aa <UART_SetConfig+0x4a6>
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004082:	d212      	bcs.n	80040aa <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	b29b      	uxth	r3, r3
 8004088:	f023 030f 	bic.w	r3, r3, #15
 800408c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	085b      	lsrs	r3, r3, #1
 8004092:	b29b      	uxth	r3, r3
 8004094:	f003 0307 	and.w	r3, r3, #7
 8004098:	b29a      	uxth	r2, r3
 800409a:	8afb      	ldrh	r3, [r7, #22]
 800409c:	4313      	orrs	r3, r2
 800409e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	8afa      	ldrh	r2, [r7, #22]
 80040a6:	60da      	str	r2, [r3, #12]
 80040a8:	e052      	b.n	8004150 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80040b0:	e04e      	b.n	8004150 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80040b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80040b6:	2b08      	cmp	r3, #8
 80040b8:	d827      	bhi.n	800410a <UART_SetConfig+0x506>
 80040ba:	a201      	add	r2, pc, #4	; (adr r2, 80040c0 <UART_SetConfig+0x4bc>)
 80040bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c0:	080040e5 	.word	0x080040e5
 80040c4:	080040ed 	.word	0x080040ed
 80040c8:	080040f5 	.word	0x080040f5
 80040cc:	0800410b 	.word	0x0800410b
 80040d0:	080040fb 	.word	0x080040fb
 80040d4:	0800410b 	.word	0x0800410b
 80040d8:	0800410b 	.word	0x0800410b
 80040dc:	0800410b 	.word	0x0800410b
 80040e0:	08004103 	.word	0x08004103
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040e4:	f7fe f854 	bl	8002190 <HAL_RCC_GetPCLK1Freq>
 80040e8:	61f8      	str	r0, [r7, #28]
        break;
 80040ea:	e014      	b.n	8004116 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040ec:	f7fe f866 	bl	80021bc <HAL_RCC_GetPCLK2Freq>
 80040f0:	61f8      	str	r0, [r7, #28]
        break;
 80040f2:	e010      	b.n	8004116 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040f4:	4b1e      	ldr	r3, [pc, #120]	; (8004170 <UART_SetConfig+0x56c>)
 80040f6:	61fb      	str	r3, [r7, #28]
        break;
 80040f8:	e00d      	b.n	8004116 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040fa:	f7fd ffb1 	bl	8002060 <HAL_RCC_GetSysClockFreq>
 80040fe:	61f8      	str	r0, [r7, #28]
        break;
 8004100:	e009      	b.n	8004116 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004102:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004106:	61fb      	str	r3, [r7, #28]
        break;
 8004108:	e005      	b.n	8004116 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800410a:	2300      	movs	r3, #0
 800410c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004114:	bf00      	nop
    }

    if (pclk != 0U)
 8004116:	69fb      	ldr	r3, [r7, #28]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d019      	beq.n	8004150 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	085a      	lsrs	r2, r3, #1
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	441a      	add	r2, r3
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	fbb2 f3f3 	udiv	r3, r2, r3
 800412e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	2b0f      	cmp	r3, #15
 8004134:	d909      	bls.n	800414a <UART_SetConfig+0x546>
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800413c:	d205      	bcs.n	800414a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	b29a      	uxth	r2, r3
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	60da      	str	r2, [r3, #12]
 8004148:	e002      	b.n	8004150 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	2200      	movs	r2, #0
 8004154:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2200      	movs	r2, #0
 800415a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800415c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004160:	4618      	mov	r0, r3
 8004162:	3728      	adds	r7, #40	; 0x28
 8004164:	46bd      	mov	sp, r7
 8004166:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800416a:	bf00      	nop
 800416c:	40008000 	.word	0x40008000
 8004170:	00f42400 	.word	0x00f42400

08004174 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004180:	f003 0301 	and.w	r3, r3, #1
 8004184:	2b00      	cmp	r3, #0
 8004186:	d00a      	beq.n	800419e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	430a      	orrs	r2, r1
 800419c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a2:	f003 0302 	and.w	r3, r3, #2
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00a      	beq.n	80041c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	430a      	orrs	r2, r1
 80041be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c4:	f003 0304 	and.w	r3, r3, #4
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d00a      	beq.n	80041e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	430a      	orrs	r2, r1
 80041e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e6:	f003 0308 	and.w	r3, r3, #8
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d00a      	beq.n	8004204 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	430a      	orrs	r2, r1
 8004202:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004208:	f003 0310 	and.w	r3, r3, #16
 800420c:	2b00      	cmp	r3, #0
 800420e:	d00a      	beq.n	8004226 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	430a      	orrs	r2, r1
 8004224:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422a:	f003 0320 	and.w	r3, r3, #32
 800422e:	2b00      	cmp	r3, #0
 8004230:	d00a      	beq.n	8004248 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	430a      	orrs	r2, r1
 8004246:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004250:	2b00      	cmp	r3, #0
 8004252:	d01a      	beq.n	800428a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	430a      	orrs	r2, r1
 8004268:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004272:	d10a      	bne.n	800428a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	430a      	orrs	r2, r1
 8004288:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00a      	beq.n	80042ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	430a      	orrs	r2, r1
 80042aa:	605a      	str	r2, [r3, #4]
  }
}
 80042ac:	bf00      	nop
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b086      	sub	sp, #24
 80042bc:	af02      	add	r7, sp, #8
 80042be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80042c8:	f7fc fed6 	bl	8001078 <HAL_GetTick>
 80042cc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 0308 	and.w	r3, r3, #8
 80042d8:	2b08      	cmp	r3, #8
 80042da:	d10e      	bne.n	80042fa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042e0:	9300      	str	r3, [sp, #0]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 f82d 	bl	800434a <UART_WaitOnFlagUntilTimeout>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d001      	beq.n	80042fa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e023      	b.n	8004342 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0304 	and.w	r3, r3, #4
 8004304:	2b04      	cmp	r3, #4
 8004306:	d10e      	bne.n	8004326 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004308:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800430c:	9300      	str	r3, [sp, #0]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2200      	movs	r2, #0
 8004312:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004316:	6878      	ldr	r0, [r7, #4]
 8004318:	f000 f817 	bl	800434a <UART_WaitOnFlagUntilTimeout>
 800431c:	4603      	mov	r3, r0
 800431e:	2b00      	cmp	r3, #0
 8004320:	d001      	beq.n	8004326 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e00d      	b.n	8004342 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2220      	movs	r2, #32
 800432a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2220      	movs	r2, #32
 8004330:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2200      	movs	r2, #0
 8004336:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004340:	2300      	movs	r3, #0
}
 8004342:	4618      	mov	r0, r3
 8004344:	3710      	adds	r7, #16
 8004346:	46bd      	mov	sp, r7
 8004348:	bd80      	pop	{r7, pc}

0800434a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800434a:	b580      	push	{r7, lr}
 800434c:	b09c      	sub	sp, #112	; 0x70
 800434e:	af00      	add	r7, sp, #0
 8004350:	60f8      	str	r0, [r7, #12]
 8004352:	60b9      	str	r1, [r7, #8]
 8004354:	603b      	str	r3, [r7, #0]
 8004356:	4613      	mov	r3, r2
 8004358:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800435a:	e0a5      	b.n	80044a8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800435c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800435e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004362:	f000 80a1 	beq.w	80044a8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004366:	f7fc fe87 	bl	8001078 <HAL_GetTick>
 800436a:	4602      	mov	r2, r0
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	1ad3      	subs	r3, r2, r3
 8004370:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004372:	429a      	cmp	r2, r3
 8004374:	d302      	bcc.n	800437c <UART_WaitOnFlagUntilTimeout+0x32>
 8004376:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004378:	2b00      	cmp	r3, #0
 800437a:	d13e      	bne.n	80043fa <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004382:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004384:	e853 3f00 	ldrex	r3, [r3]
 8004388:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800438a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800438c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004390:	667b      	str	r3, [r7, #100]	; 0x64
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	461a      	mov	r2, r3
 8004398:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800439a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800439c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800439e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80043a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80043a2:	e841 2300 	strex	r3, r2, [r1]
 80043a6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80043a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d1e6      	bne.n	800437c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	3308      	adds	r3, #8
 80043b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043b8:	e853 3f00 	ldrex	r3, [r3]
 80043bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80043be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043c0:	f023 0301 	bic.w	r3, r3, #1
 80043c4:	663b      	str	r3, [r7, #96]	; 0x60
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	3308      	adds	r3, #8
 80043cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80043ce:	64ba      	str	r2, [r7, #72]	; 0x48
 80043d0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80043d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043d6:	e841 2300 	strex	r3, r2, [r1]
 80043da:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80043dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d1e5      	bne.n	80043ae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2220      	movs	r2, #32
 80043e6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	2220      	movs	r2, #32
 80043ec:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e067      	b.n	80044ca <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f003 0304 	and.w	r3, r3, #4
 8004404:	2b00      	cmp	r3, #0
 8004406:	d04f      	beq.n	80044a8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	69db      	ldr	r3, [r3, #28]
 800440e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004412:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004416:	d147      	bne.n	80044a8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004420:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800442a:	e853 3f00 	ldrex	r3, [r3]
 800442e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004432:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004436:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	461a      	mov	r2, r3
 800443e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004440:	637b      	str	r3, [r7, #52]	; 0x34
 8004442:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004444:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004446:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004448:	e841 2300 	strex	r3, r2, [r1]
 800444c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800444e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004450:	2b00      	cmp	r3, #0
 8004452:	d1e6      	bne.n	8004422 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	3308      	adds	r3, #8
 800445a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800445c:	697b      	ldr	r3, [r7, #20]
 800445e:	e853 3f00 	ldrex	r3, [r3]
 8004462:	613b      	str	r3, [r7, #16]
   return(result);
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	f023 0301 	bic.w	r3, r3, #1
 800446a:	66bb      	str	r3, [r7, #104]	; 0x68
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	3308      	adds	r3, #8
 8004472:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004474:	623a      	str	r2, [r7, #32]
 8004476:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004478:	69f9      	ldr	r1, [r7, #28]
 800447a:	6a3a      	ldr	r2, [r7, #32]
 800447c:	e841 2300 	strex	r3, r2, [r1]
 8004480:	61bb      	str	r3, [r7, #24]
   return(result);
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d1e5      	bne.n	8004454 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2220      	movs	r2, #32
 800448c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	2220      	movs	r2, #32
 8004492:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2220      	movs	r2, #32
 8004498:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e010      	b.n	80044ca <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	69da      	ldr	r2, [r3, #28]
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	4013      	ands	r3, r2
 80044b2:	68ba      	ldr	r2, [r7, #8]
 80044b4:	429a      	cmp	r2, r3
 80044b6:	bf0c      	ite	eq
 80044b8:	2301      	moveq	r3, #1
 80044ba:	2300      	movne	r3, #0
 80044bc:	b2db      	uxtb	r3, r3
 80044be:	461a      	mov	r2, r3
 80044c0:	79fb      	ldrb	r3, [r7, #7]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	f43f af4a 	beq.w	800435c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044c8:	2300      	movs	r3, #0
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3770      	adds	r7, #112	; 0x70
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
	...

080044d4 <__errno>:
 80044d4:	4b01      	ldr	r3, [pc, #4]	; (80044dc <__errno+0x8>)
 80044d6:	6818      	ldr	r0, [r3, #0]
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	2000000c 	.word	0x2000000c

080044e0 <__libc_init_array>:
 80044e0:	b570      	push	{r4, r5, r6, lr}
 80044e2:	4d0d      	ldr	r5, [pc, #52]	; (8004518 <__libc_init_array+0x38>)
 80044e4:	4c0d      	ldr	r4, [pc, #52]	; (800451c <__libc_init_array+0x3c>)
 80044e6:	1b64      	subs	r4, r4, r5
 80044e8:	10a4      	asrs	r4, r4, #2
 80044ea:	2600      	movs	r6, #0
 80044ec:	42a6      	cmp	r6, r4
 80044ee:	d109      	bne.n	8004504 <__libc_init_array+0x24>
 80044f0:	4d0b      	ldr	r5, [pc, #44]	; (8004520 <__libc_init_array+0x40>)
 80044f2:	4c0c      	ldr	r4, [pc, #48]	; (8004524 <__libc_init_array+0x44>)
 80044f4:	f000 fc8e 	bl	8004e14 <_init>
 80044f8:	1b64      	subs	r4, r4, r5
 80044fa:	10a4      	asrs	r4, r4, #2
 80044fc:	2600      	movs	r6, #0
 80044fe:	42a6      	cmp	r6, r4
 8004500:	d105      	bne.n	800450e <__libc_init_array+0x2e>
 8004502:	bd70      	pop	{r4, r5, r6, pc}
 8004504:	f855 3b04 	ldr.w	r3, [r5], #4
 8004508:	4798      	blx	r3
 800450a:	3601      	adds	r6, #1
 800450c:	e7ee      	b.n	80044ec <__libc_init_array+0xc>
 800450e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004512:	4798      	blx	r3
 8004514:	3601      	adds	r6, #1
 8004516:	e7f2      	b.n	80044fe <__libc_init_array+0x1e>
 8004518:	08004f8c 	.word	0x08004f8c
 800451c:	08004f8c 	.word	0x08004f8c
 8004520:	08004f8c 	.word	0x08004f8c
 8004524:	08004f90 	.word	0x08004f90

08004528 <memset>:
 8004528:	4402      	add	r2, r0
 800452a:	4603      	mov	r3, r0
 800452c:	4293      	cmp	r3, r2
 800452e:	d100      	bne.n	8004532 <memset+0xa>
 8004530:	4770      	bx	lr
 8004532:	f803 1b01 	strb.w	r1, [r3], #1
 8004536:	e7f9      	b.n	800452c <memset+0x4>

08004538 <siprintf>:
 8004538:	b40e      	push	{r1, r2, r3}
 800453a:	b500      	push	{lr}
 800453c:	b09c      	sub	sp, #112	; 0x70
 800453e:	ab1d      	add	r3, sp, #116	; 0x74
 8004540:	9002      	str	r0, [sp, #8]
 8004542:	9006      	str	r0, [sp, #24]
 8004544:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004548:	4809      	ldr	r0, [pc, #36]	; (8004570 <siprintf+0x38>)
 800454a:	9107      	str	r1, [sp, #28]
 800454c:	9104      	str	r1, [sp, #16]
 800454e:	4909      	ldr	r1, [pc, #36]	; (8004574 <siprintf+0x3c>)
 8004550:	f853 2b04 	ldr.w	r2, [r3], #4
 8004554:	9105      	str	r1, [sp, #20]
 8004556:	6800      	ldr	r0, [r0, #0]
 8004558:	9301      	str	r3, [sp, #4]
 800455a:	a902      	add	r1, sp, #8
 800455c:	f000 f868 	bl	8004630 <_svfiprintf_r>
 8004560:	9b02      	ldr	r3, [sp, #8]
 8004562:	2200      	movs	r2, #0
 8004564:	701a      	strb	r2, [r3, #0]
 8004566:	b01c      	add	sp, #112	; 0x70
 8004568:	f85d eb04 	ldr.w	lr, [sp], #4
 800456c:	b003      	add	sp, #12
 800456e:	4770      	bx	lr
 8004570:	2000000c 	.word	0x2000000c
 8004574:	ffff0208 	.word	0xffff0208

08004578 <__ssputs_r>:
 8004578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800457c:	688e      	ldr	r6, [r1, #8]
 800457e:	429e      	cmp	r6, r3
 8004580:	4682      	mov	sl, r0
 8004582:	460c      	mov	r4, r1
 8004584:	4690      	mov	r8, r2
 8004586:	461f      	mov	r7, r3
 8004588:	d838      	bhi.n	80045fc <__ssputs_r+0x84>
 800458a:	898a      	ldrh	r2, [r1, #12]
 800458c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004590:	d032      	beq.n	80045f8 <__ssputs_r+0x80>
 8004592:	6825      	ldr	r5, [r4, #0]
 8004594:	6909      	ldr	r1, [r1, #16]
 8004596:	eba5 0901 	sub.w	r9, r5, r1
 800459a:	6965      	ldr	r5, [r4, #20]
 800459c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80045a0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80045a4:	3301      	adds	r3, #1
 80045a6:	444b      	add	r3, r9
 80045a8:	106d      	asrs	r5, r5, #1
 80045aa:	429d      	cmp	r5, r3
 80045ac:	bf38      	it	cc
 80045ae:	461d      	movcc	r5, r3
 80045b0:	0553      	lsls	r3, r2, #21
 80045b2:	d531      	bpl.n	8004618 <__ssputs_r+0xa0>
 80045b4:	4629      	mov	r1, r5
 80045b6:	f000 fb63 	bl	8004c80 <_malloc_r>
 80045ba:	4606      	mov	r6, r0
 80045bc:	b950      	cbnz	r0, 80045d4 <__ssputs_r+0x5c>
 80045be:	230c      	movs	r3, #12
 80045c0:	f8ca 3000 	str.w	r3, [sl]
 80045c4:	89a3      	ldrh	r3, [r4, #12]
 80045c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045ca:	81a3      	strh	r3, [r4, #12]
 80045cc:	f04f 30ff 	mov.w	r0, #4294967295
 80045d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045d4:	6921      	ldr	r1, [r4, #16]
 80045d6:	464a      	mov	r2, r9
 80045d8:	f000 fabe 	bl	8004b58 <memcpy>
 80045dc:	89a3      	ldrh	r3, [r4, #12]
 80045de:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80045e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045e6:	81a3      	strh	r3, [r4, #12]
 80045e8:	6126      	str	r6, [r4, #16]
 80045ea:	6165      	str	r5, [r4, #20]
 80045ec:	444e      	add	r6, r9
 80045ee:	eba5 0509 	sub.w	r5, r5, r9
 80045f2:	6026      	str	r6, [r4, #0]
 80045f4:	60a5      	str	r5, [r4, #8]
 80045f6:	463e      	mov	r6, r7
 80045f8:	42be      	cmp	r6, r7
 80045fa:	d900      	bls.n	80045fe <__ssputs_r+0x86>
 80045fc:	463e      	mov	r6, r7
 80045fe:	6820      	ldr	r0, [r4, #0]
 8004600:	4632      	mov	r2, r6
 8004602:	4641      	mov	r1, r8
 8004604:	f000 fab6 	bl	8004b74 <memmove>
 8004608:	68a3      	ldr	r3, [r4, #8]
 800460a:	1b9b      	subs	r3, r3, r6
 800460c:	60a3      	str	r3, [r4, #8]
 800460e:	6823      	ldr	r3, [r4, #0]
 8004610:	4433      	add	r3, r6
 8004612:	6023      	str	r3, [r4, #0]
 8004614:	2000      	movs	r0, #0
 8004616:	e7db      	b.n	80045d0 <__ssputs_r+0x58>
 8004618:	462a      	mov	r2, r5
 800461a:	f000 fba5 	bl	8004d68 <_realloc_r>
 800461e:	4606      	mov	r6, r0
 8004620:	2800      	cmp	r0, #0
 8004622:	d1e1      	bne.n	80045e8 <__ssputs_r+0x70>
 8004624:	6921      	ldr	r1, [r4, #16]
 8004626:	4650      	mov	r0, sl
 8004628:	f000 fabe 	bl	8004ba8 <_free_r>
 800462c:	e7c7      	b.n	80045be <__ssputs_r+0x46>
	...

08004630 <_svfiprintf_r>:
 8004630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004634:	4698      	mov	r8, r3
 8004636:	898b      	ldrh	r3, [r1, #12]
 8004638:	061b      	lsls	r3, r3, #24
 800463a:	b09d      	sub	sp, #116	; 0x74
 800463c:	4607      	mov	r7, r0
 800463e:	460d      	mov	r5, r1
 8004640:	4614      	mov	r4, r2
 8004642:	d50e      	bpl.n	8004662 <_svfiprintf_r+0x32>
 8004644:	690b      	ldr	r3, [r1, #16]
 8004646:	b963      	cbnz	r3, 8004662 <_svfiprintf_r+0x32>
 8004648:	2140      	movs	r1, #64	; 0x40
 800464a:	f000 fb19 	bl	8004c80 <_malloc_r>
 800464e:	6028      	str	r0, [r5, #0]
 8004650:	6128      	str	r0, [r5, #16]
 8004652:	b920      	cbnz	r0, 800465e <_svfiprintf_r+0x2e>
 8004654:	230c      	movs	r3, #12
 8004656:	603b      	str	r3, [r7, #0]
 8004658:	f04f 30ff 	mov.w	r0, #4294967295
 800465c:	e0d1      	b.n	8004802 <_svfiprintf_r+0x1d2>
 800465e:	2340      	movs	r3, #64	; 0x40
 8004660:	616b      	str	r3, [r5, #20]
 8004662:	2300      	movs	r3, #0
 8004664:	9309      	str	r3, [sp, #36]	; 0x24
 8004666:	2320      	movs	r3, #32
 8004668:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800466c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004670:	2330      	movs	r3, #48	; 0x30
 8004672:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800481c <_svfiprintf_r+0x1ec>
 8004676:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800467a:	f04f 0901 	mov.w	r9, #1
 800467e:	4623      	mov	r3, r4
 8004680:	469a      	mov	sl, r3
 8004682:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004686:	b10a      	cbz	r2, 800468c <_svfiprintf_r+0x5c>
 8004688:	2a25      	cmp	r2, #37	; 0x25
 800468a:	d1f9      	bne.n	8004680 <_svfiprintf_r+0x50>
 800468c:	ebba 0b04 	subs.w	fp, sl, r4
 8004690:	d00b      	beq.n	80046aa <_svfiprintf_r+0x7a>
 8004692:	465b      	mov	r3, fp
 8004694:	4622      	mov	r2, r4
 8004696:	4629      	mov	r1, r5
 8004698:	4638      	mov	r0, r7
 800469a:	f7ff ff6d 	bl	8004578 <__ssputs_r>
 800469e:	3001      	adds	r0, #1
 80046a0:	f000 80aa 	beq.w	80047f8 <_svfiprintf_r+0x1c8>
 80046a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80046a6:	445a      	add	r2, fp
 80046a8:	9209      	str	r2, [sp, #36]	; 0x24
 80046aa:	f89a 3000 	ldrb.w	r3, [sl]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	f000 80a2 	beq.w	80047f8 <_svfiprintf_r+0x1c8>
 80046b4:	2300      	movs	r3, #0
 80046b6:	f04f 32ff 	mov.w	r2, #4294967295
 80046ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80046be:	f10a 0a01 	add.w	sl, sl, #1
 80046c2:	9304      	str	r3, [sp, #16]
 80046c4:	9307      	str	r3, [sp, #28]
 80046c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80046ca:	931a      	str	r3, [sp, #104]	; 0x68
 80046cc:	4654      	mov	r4, sl
 80046ce:	2205      	movs	r2, #5
 80046d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046d4:	4851      	ldr	r0, [pc, #324]	; (800481c <_svfiprintf_r+0x1ec>)
 80046d6:	f7fb fd7b 	bl	80001d0 <memchr>
 80046da:	9a04      	ldr	r2, [sp, #16]
 80046dc:	b9d8      	cbnz	r0, 8004716 <_svfiprintf_r+0xe6>
 80046de:	06d0      	lsls	r0, r2, #27
 80046e0:	bf44      	itt	mi
 80046e2:	2320      	movmi	r3, #32
 80046e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80046e8:	0711      	lsls	r1, r2, #28
 80046ea:	bf44      	itt	mi
 80046ec:	232b      	movmi	r3, #43	; 0x2b
 80046ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80046f2:	f89a 3000 	ldrb.w	r3, [sl]
 80046f6:	2b2a      	cmp	r3, #42	; 0x2a
 80046f8:	d015      	beq.n	8004726 <_svfiprintf_r+0xf6>
 80046fa:	9a07      	ldr	r2, [sp, #28]
 80046fc:	4654      	mov	r4, sl
 80046fe:	2000      	movs	r0, #0
 8004700:	f04f 0c0a 	mov.w	ip, #10
 8004704:	4621      	mov	r1, r4
 8004706:	f811 3b01 	ldrb.w	r3, [r1], #1
 800470a:	3b30      	subs	r3, #48	; 0x30
 800470c:	2b09      	cmp	r3, #9
 800470e:	d94e      	bls.n	80047ae <_svfiprintf_r+0x17e>
 8004710:	b1b0      	cbz	r0, 8004740 <_svfiprintf_r+0x110>
 8004712:	9207      	str	r2, [sp, #28]
 8004714:	e014      	b.n	8004740 <_svfiprintf_r+0x110>
 8004716:	eba0 0308 	sub.w	r3, r0, r8
 800471a:	fa09 f303 	lsl.w	r3, r9, r3
 800471e:	4313      	orrs	r3, r2
 8004720:	9304      	str	r3, [sp, #16]
 8004722:	46a2      	mov	sl, r4
 8004724:	e7d2      	b.n	80046cc <_svfiprintf_r+0x9c>
 8004726:	9b03      	ldr	r3, [sp, #12]
 8004728:	1d19      	adds	r1, r3, #4
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	9103      	str	r1, [sp, #12]
 800472e:	2b00      	cmp	r3, #0
 8004730:	bfbb      	ittet	lt
 8004732:	425b      	neglt	r3, r3
 8004734:	f042 0202 	orrlt.w	r2, r2, #2
 8004738:	9307      	strge	r3, [sp, #28]
 800473a:	9307      	strlt	r3, [sp, #28]
 800473c:	bfb8      	it	lt
 800473e:	9204      	strlt	r2, [sp, #16]
 8004740:	7823      	ldrb	r3, [r4, #0]
 8004742:	2b2e      	cmp	r3, #46	; 0x2e
 8004744:	d10c      	bne.n	8004760 <_svfiprintf_r+0x130>
 8004746:	7863      	ldrb	r3, [r4, #1]
 8004748:	2b2a      	cmp	r3, #42	; 0x2a
 800474a:	d135      	bne.n	80047b8 <_svfiprintf_r+0x188>
 800474c:	9b03      	ldr	r3, [sp, #12]
 800474e:	1d1a      	adds	r2, r3, #4
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	9203      	str	r2, [sp, #12]
 8004754:	2b00      	cmp	r3, #0
 8004756:	bfb8      	it	lt
 8004758:	f04f 33ff 	movlt.w	r3, #4294967295
 800475c:	3402      	adds	r4, #2
 800475e:	9305      	str	r3, [sp, #20]
 8004760:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800482c <_svfiprintf_r+0x1fc>
 8004764:	7821      	ldrb	r1, [r4, #0]
 8004766:	2203      	movs	r2, #3
 8004768:	4650      	mov	r0, sl
 800476a:	f7fb fd31 	bl	80001d0 <memchr>
 800476e:	b140      	cbz	r0, 8004782 <_svfiprintf_r+0x152>
 8004770:	2340      	movs	r3, #64	; 0x40
 8004772:	eba0 000a 	sub.w	r0, r0, sl
 8004776:	fa03 f000 	lsl.w	r0, r3, r0
 800477a:	9b04      	ldr	r3, [sp, #16]
 800477c:	4303      	orrs	r3, r0
 800477e:	3401      	adds	r4, #1
 8004780:	9304      	str	r3, [sp, #16]
 8004782:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004786:	4826      	ldr	r0, [pc, #152]	; (8004820 <_svfiprintf_r+0x1f0>)
 8004788:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800478c:	2206      	movs	r2, #6
 800478e:	f7fb fd1f 	bl	80001d0 <memchr>
 8004792:	2800      	cmp	r0, #0
 8004794:	d038      	beq.n	8004808 <_svfiprintf_r+0x1d8>
 8004796:	4b23      	ldr	r3, [pc, #140]	; (8004824 <_svfiprintf_r+0x1f4>)
 8004798:	bb1b      	cbnz	r3, 80047e2 <_svfiprintf_r+0x1b2>
 800479a:	9b03      	ldr	r3, [sp, #12]
 800479c:	3307      	adds	r3, #7
 800479e:	f023 0307 	bic.w	r3, r3, #7
 80047a2:	3308      	adds	r3, #8
 80047a4:	9303      	str	r3, [sp, #12]
 80047a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80047a8:	4433      	add	r3, r6
 80047aa:	9309      	str	r3, [sp, #36]	; 0x24
 80047ac:	e767      	b.n	800467e <_svfiprintf_r+0x4e>
 80047ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80047b2:	460c      	mov	r4, r1
 80047b4:	2001      	movs	r0, #1
 80047b6:	e7a5      	b.n	8004704 <_svfiprintf_r+0xd4>
 80047b8:	2300      	movs	r3, #0
 80047ba:	3401      	adds	r4, #1
 80047bc:	9305      	str	r3, [sp, #20]
 80047be:	4619      	mov	r1, r3
 80047c0:	f04f 0c0a 	mov.w	ip, #10
 80047c4:	4620      	mov	r0, r4
 80047c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80047ca:	3a30      	subs	r2, #48	; 0x30
 80047cc:	2a09      	cmp	r2, #9
 80047ce:	d903      	bls.n	80047d8 <_svfiprintf_r+0x1a8>
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d0c5      	beq.n	8004760 <_svfiprintf_r+0x130>
 80047d4:	9105      	str	r1, [sp, #20]
 80047d6:	e7c3      	b.n	8004760 <_svfiprintf_r+0x130>
 80047d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80047dc:	4604      	mov	r4, r0
 80047de:	2301      	movs	r3, #1
 80047e0:	e7f0      	b.n	80047c4 <_svfiprintf_r+0x194>
 80047e2:	ab03      	add	r3, sp, #12
 80047e4:	9300      	str	r3, [sp, #0]
 80047e6:	462a      	mov	r2, r5
 80047e8:	4b0f      	ldr	r3, [pc, #60]	; (8004828 <_svfiprintf_r+0x1f8>)
 80047ea:	a904      	add	r1, sp, #16
 80047ec:	4638      	mov	r0, r7
 80047ee:	f3af 8000 	nop.w
 80047f2:	1c42      	adds	r2, r0, #1
 80047f4:	4606      	mov	r6, r0
 80047f6:	d1d6      	bne.n	80047a6 <_svfiprintf_r+0x176>
 80047f8:	89ab      	ldrh	r3, [r5, #12]
 80047fa:	065b      	lsls	r3, r3, #25
 80047fc:	f53f af2c 	bmi.w	8004658 <_svfiprintf_r+0x28>
 8004800:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004802:	b01d      	add	sp, #116	; 0x74
 8004804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004808:	ab03      	add	r3, sp, #12
 800480a:	9300      	str	r3, [sp, #0]
 800480c:	462a      	mov	r2, r5
 800480e:	4b06      	ldr	r3, [pc, #24]	; (8004828 <_svfiprintf_r+0x1f8>)
 8004810:	a904      	add	r1, sp, #16
 8004812:	4638      	mov	r0, r7
 8004814:	f000 f87a 	bl	800490c <_printf_i>
 8004818:	e7eb      	b.n	80047f2 <_svfiprintf_r+0x1c2>
 800481a:	bf00      	nop
 800481c:	08004f50 	.word	0x08004f50
 8004820:	08004f5a 	.word	0x08004f5a
 8004824:	00000000 	.word	0x00000000
 8004828:	08004579 	.word	0x08004579
 800482c:	08004f56 	.word	0x08004f56

08004830 <_printf_common>:
 8004830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004834:	4616      	mov	r6, r2
 8004836:	4699      	mov	r9, r3
 8004838:	688a      	ldr	r2, [r1, #8]
 800483a:	690b      	ldr	r3, [r1, #16]
 800483c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004840:	4293      	cmp	r3, r2
 8004842:	bfb8      	it	lt
 8004844:	4613      	movlt	r3, r2
 8004846:	6033      	str	r3, [r6, #0]
 8004848:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800484c:	4607      	mov	r7, r0
 800484e:	460c      	mov	r4, r1
 8004850:	b10a      	cbz	r2, 8004856 <_printf_common+0x26>
 8004852:	3301      	adds	r3, #1
 8004854:	6033      	str	r3, [r6, #0]
 8004856:	6823      	ldr	r3, [r4, #0]
 8004858:	0699      	lsls	r1, r3, #26
 800485a:	bf42      	ittt	mi
 800485c:	6833      	ldrmi	r3, [r6, #0]
 800485e:	3302      	addmi	r3, #2
 8004860:	6033      	strmi	r3, [r6, #0]
 8004862:	6825      	ldr	r5, [r4, #0]
 8004864:	f015 0506 	ands.w	r5, r5, #6
 8004868:	d106      	bne.n	8004878 <_printf_common+0x48>
 800486a:	f104 0a19 	add.w	sl, r4, #25
 800486e:	68e3      	ldr	r3, [r4, #12]
 8004870:	6832      	ldr	r2, [r6, #0]
 8004872:	1a9b      	subs	r3, r3, r2
 8004874:	42ab      	cmp	r3, r5
 8004876:	dc26      	bgt.n	80048c6 <_printf_common+0x96>
 8004878:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800487c:	1e13      	subs	r3, r2, #0
 800487e:	6822      	ldr	r2, [r4, #0]
 8004880:	bf18      	it	ne
 8004882:	2301      	movne	r3, #1
 8004884:	0692      	lsls	r2, r2, #26
 8004886:	d42b      	bmi.n	80048e0 <_printf_common+0xb0>
 8004888:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800488c:	4649      	mov	r1, r9
 800488e:	4638      	mov	r0, r7
 8004890:	47c0      	blx	r8
 8004892:	3001      	adds	r0, #1
 8004894:	d01e      	beq.n	80048d4 <_printf_common+0xa4>
 8004896:	6823      	ldr	r3, [r4, #0]
 8004898:	68e5      	ldr	r5, [r4, #12]
 800489a:	6832      	ldr	r2, [r6, #0]
 800489c:	f003 0306 	and.w	r3, r3, #6
 80048a0:	2b04      	cmp	r3, #4
 80048a2:	bf08      	it	eq
 80048a4:	1aad      	subeq	r5, r5, r2
 80048a6:	68a3      	ldr	r3, [r4, #8]
 80048a8:	6922      	ldr	r2, [r4, #16]
 80048aa:	bf0c      	ite	eq
 80048ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80048b0:	2500      	movne	r5, #0
 80048b2:	4293      	cmp	r3, r2
 80048b4:	bfc4      	itt	gt
 80048b6:	1a9b      	subgt	r3, r3, r2
 80048b8:	18ed      	addgt	r5, r5, r3
 80048ba:	2600      	movs	r6, #0
 80048bc:	341a      	adds	r4, #26
 80048be:	42b5      	cmp	r5, r6
 80048c0:	d11a      	bne.n	80048f8 <_printf_common+0xc8>
 80048c2:	2000      	movs	r0, #0
 80048c4:	e008      	b.n	80048d8 <_printf_common+0xa8>
 80048c6:	2301      	movs	r3, #1
 80048c8:	4652      	mov	r2, sl
 80048ca:	4649      	mov	r1, r9
 80048cc:	4638      	mov	r0, r7
 80048ce:	47c0      	blx	r8
 80048d0:	3001      	adds	r0, #1
 80048d2:	d103      	bne.n	80048dc <_printf_common+0xac>
 80048d4:	f04f 30ff 	mov.w	r0, #4294967295
 80048d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048dc:	3501      	adds	r5, #1
 80048de:	e7c6      	b.n	800486e <_printf_common+0x3e>
 80048e0:	18e1      	adds	r1, r4, r3
 80048e2:	1c5a      	adds	r2, r3, #1
 80048e4:	2030      	movs	r0, #48	; 0x30
 80048e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80048ea:	4422      	add	r2, r4
 80048ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80048f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80048f4:	3302      	adds	r3, #2
 80048f6:	e7c7      	b.n	8004888 <_printf_common+0x58>
 80048f8:	2301      	movs	r3, #1
 80048fa:	4622      	mov	r2, r4
 80048fc:	4649      	mov	r1, r9
 80048fe:	4638      	mov	r0, r7
 8004900:	47c0      	blx	r8
 8004902:	3001      	adds	r0, #1
 8004904:	d0e6      	beq.n	80048d4 <_printf_common+0xa4>
 8004906:	3601      	adds	r6, #1
 8004908:	e7d9      	b.n	80048be <_printf_common+0x8e>
	...

0800490c <_printf_i>:
 800490c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004910:	7e0f      	ldrb	r7, [r1, #24]
 8004912:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004914:	2f78      	cmp	r7, #120	; 0x78
 8004916:	4691      	mov	r9, r2
 8004918:	4680      	mov	r8, r0
 800491a:	460c      	mov	r4, r1
 800491c:	469a      	mov	sl, r3
 800491e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004922:	d807      	bhi.n	8004934 <_printf_i+0x28>
 8004924:	2f62      	cmp	r7, #98	; 0x62
 8004926:	d80a      	bhi.n	800493e <_printf_i+0x32>
 8004928:	2f00      	cmp	r7, #0
 800492a:	f000 80d8 	beq.w	8004ade <_printf_i+0x1d2>
 800492e:	2f58      	cmp	r7, #88	; 0x58
 8004930:	f000 80a3 	beq.w	8004a7a <_printf_i+0x16e>
 8004934:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004938:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800493c:	e03a      	b.n	80049b4 <_printf_i+0xa8>
 800493e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004942:	2b15      	cmp	r3, #21
 8004944:	d8f6      	bhi.n	8004934 <_printf_i+0x28>
 8004946:	a101      	add	r1, pc, #4	; (adr r1, 800494c <_printf_i+0x40>)
 8004948:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800494c:	080049a5 	.word	0x080049a5
 8004950:	080049b9 	.word	0x080049b9
 8004954:	08004935 	.word	0x08004935
 8004958:	08004935 	.word	0x08004935
 800495c:	08004935 	.word	0x08004935
 8004960:	08004935 	.word	0x08004935
 8004964:	080049b9 	.word	0x080049b9
 8004968:	08004935 	.word	0x08004935
 800496c:	08004935 	.word	0x08004935
 8004970:	08004935 	.word	0x08004935
 8004974:	08004935 	.word	0x08004935
 8004978:	08004ac5 	.word	0x08004ac5
 800497c:	080049e9 	.word	0x080049e9
 8004980:	08004aa7 	.word	0x08004aa7
 8004984:	08004935 	.word	0x08004935
 8004988:	08004935 	.word	0x08004935
 800498c:	08004ae7 	.word	0x08004ae7
 8004990:	08004935 	.word	0x08004935
 8004994:	080049e9 	.word	0x080049e9
 8004998:	08004935 	.word	0x08004935
 800499c:	08004935 	.word	0x08004935
 80049a0:	08004aaf 	.word	0x08004aaf
 80049a4:	682b      	ldr	r3, [r5, #0]
 80049a6:	1d1a      	adds	r2, r3, #4
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	602a      	str	r2, [r5, #0]
 80049ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80049b4:	2301      	movs	r3, #1
 80049b6:	e0a3      	b.n	8004b00 <_printf_i+0x1f4>
 80049b8:	6820      	ldr	r0, [r4, #0]
 80049ba:	6829      	ldr	r1, [r5, #0]
 80049bc:	0606      	lsls	r6, r0, #24
 80049be:	f101 0304 	add.w	r3, r1, #4
 80049c2:	d50a      	bpl.n	80049da <_printf_i+0xce>
 80049c4:	680e      	ldr	r6, [r1, #0]
 80049c6:	602b      	str	r3, [r5, #0]
 80049c8:	2e00      	cmp	r6, #0
 80049ca:	da03      	bge.n	80049d4 <_printf_i+0xc8>
 80049cc:	232d      	movs	r3, #45	; 0x2d
 80049ce:	4276      	negs	r6, r6
 80049d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049d4:	485e      	ldr	r0, [pc, #376]	; (8004b50 <_printf_i+0x244>)
 80049d6:	230a      	movs	r3, #10
 80049d8:	e019      	b.n	8004a0e <_printf_i+0x102>
 80049da:	680e      	ldr	r6, [r1, #0]
 80049dc:	602b      	str	r3, [r5, #0]
 80049de:	f010 0f40 	tst.w	r0, #64	; 0x40
 80049e2:	bf18      	it	ne
 80049e4:	b236      	sxthne	r6, r6
 80049e6:	e7ef      	b.n	80049c8 <_printf_i+0xbc>
 80049e8:	682b      	ldr	r3, [r5, #0]
 80049ea:	6820      	ldr	r0, [r4, #0]
 80049ec:	1d19      	adds	r1, r3, #4
 80049ee:	6029      	str	r1, [r5, #0]
 80049f0:	0601      	lsls	r1, r0, #24
 80049f2:	d501      	bpl.n	80049f8 <_printf_i+0xec>
 80049f4:	681e      	ldr	r6, [r3, #0]
 80049f6:	e002      	b.n	80049fe <_printf_i+0xf2>
 80049f8:	0646      	lsls	r6, r0, #25
 80049fa:	d5fb      	bpl.n	80049f4 <_printf_i+0xe8>
 80049fc:	881e      	ldrh	r6, [r3, #0]
 80049fe:	4854      	ldr	r0, [pc, #336]	; (8004b50 <_printf_i+0x244>)
 8004a00:	2f6f      	cmp	r7, #111	; 0x6f
 8004a02:	bf0c      	ite	eq
 8004a04:	2308      	moveq	r3, #8
 8004a06:	230a      	movne	r3, #10
 8004a08:	2100      	movs	r1, #0
 8004a0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a0e:	6865      	ldr	r5, [r4, #4]
 8004a10:	60a5      	str	r5, [r4, #8]
 8004a12:	2d00      	cmp	r5, #0
 8004a14:	bfa2      	ittt	ge
 8004a16:	6821      	ldrge	r1, [r4, #0]
 8004a18:	f021 0104 	bicge.w	r1, r1, #4
 8004a1c:	6021      	strge	r1, [r4, #0]
 8004a1e:	b90e      	cbnz	r6, 8004a24 <_printf_i+0x118>
 8004a20:	2d00      	cmp	r5, #0
 8004a22:	d04d      	beq.n	8004ac0 <_printf_i+0x1b4>
 8004a24:	4615      	mov	r5, r2
 8004a26:	fbb6 f1f3 	udiv	r1, r6, r3
 8004a2a:	fb03 6711 	mls	r7, r3, r1, r6
 8004a2e:	5dc7      	ldrb	r7, [r0, r7]
 8004a30:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004a34:	4637      	mov	r7, r6
 8004a36:	42bb      	cmp	r3, r7
 8004a38:	460e      	mov	r6, r1
 8004a3a:	d9f4      	bls.n	8004a26 <_printf_i+0x11a>
 8004a3c:	2b08      	cmp	r3, #8
 8004a3e:	d10b      	bne.n	8004a58 <_printf_i+0x14c>
 8004a40:	6823      	ldr	r3, [r4, #0]
 8004a42:	07de      	lsls	r6, r3, #31
 8004a44:	d508      	bpl.n	8004a58 <_printf_i+0x14c>
 8004a46:	6923      	ldr	r3, [r4, #16]
 8004a48:	6861      	ldr	r1, [r4, #4]
 8004a4a:	4299      	cmp	r1, r3
 8004a4c:	bfde      	ittt	le
 8004a4e:	2330      	movle	r3, #48	; 0x30
 8004a50:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004a54:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004a58:	1b52      	subs	r2, r2, r5
 8004a5a:	6122      	str	r2, [r4, #16]
 8004a5c:	f8cd a000 	str.w	sl, [sp]
 8004a60:	464b      	mov	r3, r9
 8004a62:	aa03      	add	r2, sp, #12
 8004a64:	4621      	mov	r1, r4
 8004a66:	4640      	mov	r0, r8
 8004a68:	f7ff fee2 	bl	8004830 <_printf_common>
 8004a6c:	3001      	adds	r0, #1
 8004a6e:	d14c      	bne.n	8004b0a <_printf_i+0x1fe>
 8004a70:	f04f 30ff 	mov.w	r0, #4294967295
 8004a74:	b004      	add	sp, #16
 8004a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a7a:	4835      	ldr	r0, [pc, #212]	; (8004b50 <_printf_i+0x244>)
 8004a7c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004a80:	6829      	ldr	r1, [r5, #0]
 8004a82:	6823      	ldr	r3, [r4, #0]
 8004a84:	f851 6b04 	ldr.w	r6, [r1], #4
 8004a88:	6029      	str	r1, [r5, #0]
 8004a8a:	061d      	lsls	r5, r3, #24
 8004a8c:	d514      	bpl.n	8004ab8 <_printf_i+0x1ac>
 8004a8e:	07df      	lsls	r7, r3, #31
 8004a90:	bf44      	itt	mi
 8004a92:	f043 0320 	orrmi.w	r3, r3, #32
 8004a96:	6023      	strmi	r3, [r4, #0]
 8004a98:	b91e      	cbnz	r6, 8004aa2 <_printf_i+0x196>
 8004a9a:	6823      	ldr	r3, [r4, #0]
 8004a9c:	f023 0320 	bic.w	r3, r3, #32
 8004aa0:	6023      	str	r3, [r4, #0]
 8004aa2:	2310      	movs	r3, #16
 8004aa4:	e7b0      	b.n	8004a08 <_printf_i+0xfc>
 8004aa6:	6823      	ldr	r3, [r4, #0]
 8004aa8:	f043 0320 	orr.w	r3, r3, #32
 8004aac:	6023      	str	r3, [r4, #0]
 8004aae:	2378      	movs	r3, #120	; 0x78
 8004ab0:	4828      	ldr	r0, [pc, #160]	; (8004b54 <_printf_i+0x248>)
 8004ab2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004ab6:	e7e3      	b.n	8004a80 <_printf_i+0x174>
 8004ab8:	0659      	lsls	r1, r3, #25
 8004aba:	bf48      	it	mi
 8004abc:	b2b6      	uxthmi	r6, r6
 8004abe:	e7e6      	b.n	8004a8e <_printf_i+0x182>
 8004ac0:	4615      	mov	r5, r2
 8004ac2:	e7bb      	b.n	8004a3c <_printf_i+0x130>
 8004ac4:	682b      	ldr	r3, [r5, #0]
 8004ac6:	6826      	ldr	r6, [r4, #0]
 8004ac8:	6961      	ldr	r1, [r4, #20]
 8004aca:	1d18      	adds	r0, r3, #4
 8004acc:	6028      	str	r0, [r5, #0]
 8004ace:	0635      	lsls	r5, r6, #24
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	d501      	bpl.n	8004ad8 <_printf_i+0x1cc>
 8004ad4:	6019      	str	r1, [r3, #0]
 8004ad6:	e002      	b.n	8004ade <_printf_i+0x1d2>
 8004ad8:	0670      	lsls	r0, r6, #25
 8004ada:	d5fb      	bpl.n	8004ad4 <_printf_i+0x1c8>
 8004adc:	8019      	strh	r1, [r3, #0]
 8004ade:	2300      	movs	r3, #0
 8004ae0:	6123      	str	r3, [r4, #16]
 8004ae2:	4615      	mov	r5, r2
 8004ae4:	e7ba      	b.n	8004a5c <_printf_i+0x150>
 8004ae6:	682b      	ldr	r3, [r5, #0]
 8004ae8:	1d1a      	adds	r2, r3, #4
 8004aea:	602a      	str	r2, [r5, #0]
 8004aec:	681d      	ldr	r5, [r3, #0]
 8004aee:	6862      	ldr	r2, [r4, #4]
 8004af0:	2100      	movs	r1, #0
 8004af2:	4628      	mov	r0, r5
 8004af4:	f7fb fb6c 	bl	80001d0 <memchr>
 8004af8:	b108      	cbz	r0, 8004afe <_printf_i+0x1f2>
 8004afa:	1b40      	subs	r0, r0, r5
 8004afc:	6060      	str	r0, [r4, #4]
 8004afe:	6863      	ldr	r3, [r4, #4]
 8004b00:	6123      	str	r3, [r4, #16]
 8004b02:	2300      	movs	r3, #0
 8004b04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b08:	e7a8      	b.n	8004a5c <_printf_i+0x150>
 8004b0a:	6923      	ldr	r3, [r4, #16]
 8004b0c:	462a      	mov	r2, r5
 8004b0e:	4649      	mov	r1, r9
 8004b10:	4640      	mov	r0, r8
 8004b12:	47d0      	blx	sl
 8004b14:	3001      	adds	r0, #1
 8004b16:	d0ab      	beq.n	8004a70 <_printf_i+0x164>
 8004b18:	6823      	ldr	r3, [r4, #0]
 8004b1a:	079b      	lsls	r3, r3, #30
 8004b1c:	d413      	bmi.n	8004b46 <_printf_i+0x23a>
 8004b1e:	68e0      	ldr	r0, [r4, #12]
 8004b20:	9b03      	ldr	r3, [sp, #12]
 8004b22:	4298      	cmp	r0, r3
 8004b24:	bfb8      	it	lt
 8004b26:	4618      	movlt	r0, r3
 8004b28:	e7a4      	b.n	8004a74 <_printf_i+0x168>
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	4632      	mov	r2, r6
 8004b2e:	4649      	mov	r1, r9
 8004b30:	4640      	mov	r0, r8
 8004b32:	47d0      	blx	sl
 8004b34:	3001      	adds	r0, #1
 8004b36:	d09b      	beq.n	8004a70 <_printf_i+0x164>
 8004b38:	3501      	adds	r5, #1
 8004b3a:	68e3      	ldr	r3, [r4, #12]
 8004b3c:	9903      	ldr	r1, [sp, #12]
 8004b3e:	1a5b      	subs	r3, r3, r1
 8004b40:	42ab      	cmp	r3, r5
 8004b42:	dcf2      	bgt.n	8004b2a <_printf_i+0x21e>
 8004b44:	e7eb      	b.n	8004b1e <_printf_i+0x212>
 8004b46:	2500      	movs	r5, #0
 8004b48:	f104 0619 	add.w	r6, r4, #25
 8004b4c:	e7f5      	b.n	8004b3a <_printf_i+0x22e>
 8004b4e:	bf00      	nop
 8004b50:	08004f61 	.word	0x08004f61
 8004b54:	08004f72 	.word	0x08004f72

08004b58 <memcpy>:
 8004b58:	440a      	add	r2, r1
 8004b5a:	4291      	cmp	r1, r2
 8004b5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b60:	d100      	bne.n	8004b64 <memcpy+0xc>
 8004b62:	4770      	bx	lr
 8004b64:	b510      	push	{r4, lr}
 8004b66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b6e:	4291      	cmp	r1, r2
 8004b70:	d1f9      	bne.n	8004b66 <memcpy+0xe>
 8004b72:	bd10      	pop	{r4, pc}

08004b74 <memmove>:
 8004b74:	4288      	cmp	r0, r1
 8004b76:	b510      	push	{r4, lr}
 8004b78:	eb01 0402 	add.w	r4, r1, r2
 8004b7c:	d902      	bls.n	8004b84 <memmove+0x10>
 8004b7e:	4284      	cmp	r4, r0
 8004b80:	4623      	mov	r3, r4
 8004b82:	d807      	bhi.n	8004b94 <memmove+0x20>
 8004b84:	1e43      	subs	r3, r0, #1
 8004b86:	42a1      	cmp	r1, r4
 8004b88:	d008      	beq.n	8004b9c <memmove+0x28>
 8004b8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004b92:	e7f8      	b.n	8004b86 <memmove+0x12>
 8004b94:	4402      	add	r2, r0
 8004b96:	4601      	mov	r1, r0
 8004b98:	428a      	cmp	r2, r1
 8004b9a:	d100      	bne.n	8004b9e <memmove+0x2a>
 8004b9c:	bd10      	pop	{r4, pc}
 8004b9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004ba2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004ba6:	e7f7      	b.n	8004b98 <memmove+0x24>

08004ba8 <_free_r>:
 8004ba8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004baa:	2900      	cmp	r1, #0
 8004bac:	d044      	beq.n	8004c38 <_free_r+0x90>
 8004bae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004bb2:	9001      	str	r0, [sp, #4]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	f1a1 0404 	sub.w	r4, r1, #4
 8004bba:	bfb8      	it	lt
 8004bbc:	18e4      	addlt	r4, r4, r3
 8004bbe:	f000 f913 	bl	8004de8 <__malloc_lock>
 8004bc2:	4a1e      	ldr	r2, [pc, #120]	; (8004c3c <_free_r+0x94>)
 8004bc4:	9801      	ldr	r0, [sp, #4]
 8004bc6:	6813      	ldr	r3, [r2, #0]
 8004bc8:	b933      	cbnz	r3, 8004bd8 <_free_r+0x30>
 8004bca:	6063      	str	r3, [r4, #4]
 8004bcc:	6014      	str	r4, [r2, #0]
 8004bce:	b003      	add	sp, #12
 8004bd0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004bd4:	f000 b90e 	b.w	8004df4 <__malloc_unlock>
 8004bd8:	42a3      	cmp	r3, r4
 8004bda:	d908      	bls.n	8004bee <_free_r+0x46>
 8004bdc:	6825      	ldr	r5, [r4, #0]
 8004bde:	1961      	adds	r1, r4, r5
 8004be0:	428b      	cmp	r3, r1
 8004be2:	bf01      	itttt	eq
 8004be4:	6819      	ldreq	r1, [r3, #0]
 8004be6:	685b      	ldreq	r3, [r3, #4]
 8004be8:	1949      	addeq	r1, r1, r5
 8004bea:	6021      	streq	r1, [r4, #0]
 8004bec:	e7ed      	b.n	8004bca <_free_r+0x22>
 8004bee:	461a      	mov	r2, r3
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	b10b      	cbz	r3, 8004bf8 <_free_r+0x50>
 8004bf4:	42a3      	cmp	r3, r4
 8004bf6:	d9fa      	bls.n	8004bee <_free_r+0x46>
 8004bf8:	6811      	ldr	r1, [r2, #0]
 8004bfa:	1855      	adds	r5, r2, r1
 8004bfc:	42a5      	cmp	r5, r4
 8004bfe:	d10b      	bne.n	8004c18 <_free_r+0x70>
 8004c00:	6824      	ldr	r4, [r4, #0]
 8004c02:	4421      	add	r1, r4
 8004c04:	1854      	adds	r4, r2, r1
 8004c06:	42a3      	cmp	r3, r4
 8004c08:	6011      	str	r1, [r2, #0]
 8004c0a:	d1e0      	bne.n	8004bce <_free_r+0x26>
 8004c0c:	681c      	ldr	r4, [r3, #0]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	6053      	str	r3, [r2, #4]
 8004c12:	4421      	add	r1, r4
 8004c14:	6011      	str	r1, [r2, #0]
 8004c16:	e7da      	b.n	8004bce <_free_r+0x26>
 8004c18:	d902      	bls.n	8004c20 <_free_r+0x78>
 8004c1a:	230c      	movs	r3, #12
 8004c1c:	6003      	str	r3, [r0, #0]
 8004c1e:	e7d6      	b.n	8004bce <_free_r+0x26>
 8004c20:	6825      	ldr	r5, [r4, #0]
 8004c22:	1961      	adds	r1, r4, r5
 8004c24:	428b      	cmp	r3, r1
 8004c26:	bf04      	itt	eq
 8004c28:	6819      	ldreq	r1, [r3, #0]
 8004c2a:	685b      	ldreq	r3, [r3, #4]
 8004c2c:	6063      	str	r3, [r4, #4]
 8004c2e:	bf04      	itt	eq
 8004c30:	1949      	addeq	r1, r1, r5
 8004c32:	6021      	streq	r1, [r4, #0]
 8004c34:	6054      	str	r4, [r2, #4]
 8004c36:	e7ca      	b.n	8004bce <_free_r+0x26>
 8004c38:	b003      	add	sp, #12
 8004c3a:	bd30      	pop	{r4, r5, pc}
 8004c3c:	2000017c 	.word	0x2000017c

08004c40 <sbrk_aligned>:
 8004c40:	b570      	push	{r4, r5, r6, lr}
 8004c42:	4e0e      	ldr	r6, [pc, #56]	; (8004c7c <sbrk_aligned+0x3c>)
 8004c44:	460c      	mov	r4, r1
 8004c46:	6831      	ldr	r1, [r6, #0]
 8004c48:	4605      	mov	r5, r0
 8004c4a:	b911      	cbnz	r1, 8004c52 <sbrk_aligned+0x12>
 8004c4c:	f000 f8bc 	bl	8004dc8 <_sbrk_r>
 8004c50:	6030      	str	r0, [r6, #0]
 8004c52:	4621      	mov	r1, r4
 8004c54:	4628      	mov	r0, r5
 8004c56:	f000 f8b7 	bl	8004dc8 <_sbrk_r>
 8004c5a:	1c43      	adds	r3, r0, #1
 8004c5c:	d00a      	beq.n	8004c74 <sbrk_aligned+0x34>
 8004c5e:	1cc4      	adds	r4, r0, #3
 8004c60:	f024 0403 	bic.w	r4, r4, #3
 8004c64:	42a0      	cmp	r0, r4
 8004c66:	d007      	beq.n	8004c78 <sbrk_aligned+0x38>
 8004c68:	1a21      	subs	r1, r4, r0
 8004c6a:	4628      	mov	r0, r5
 8004c6c:	f000 f8ac 	bl	8004dc8 <_sbrk_r>
 8004c70:	3001      	adds	r0, #1
 8004c72:	d101      	bne.n	8004c78 <sbrk_aligned+0x38>
 8004c74:	f04f 34ff 	mov.w	r4, #4294967295
 8004c78:	4620      	mov	r0, r4
 8004c7a:	bd70      	pop	{r4, r5, r6, pc}
 8004c7c:	20000180 	.word	0x20000180

08004c80 <_malloc_r>:
 8004c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c84:	1ccd      	adds	r5, r1, #3
 8004c86:	f025 0503 	bic.w	r5, r5, #3
 8004c8a:	3508      	adds	r5, #8
 8004c8c:	2d0c      	cmp	r5, #12
 8004c8e:	bf38      	it	cc
 8004c90:	250c      	movcc	r5, #12
 8004c92:	2d00      	cmp	r5, #0
 8004c94:	4607      	mov	r7, r0
 8004c96:	db01      	blt.n	8004c9c <_malloc_r+0x1c>
 8004c98:	42a9      	cmp	r1, r5
 8004c9a:	d905      	bls.n	8004ca8 <_malloc_r+0x28>
 8004c9c:	230c      	movs	r3, #12
 8004c9e:	603b      	str	r3, [r7, #0]
 8004ca0:	2600      	movs	r6, #0
 8004ca2:	4630      	mov	r0, r6
 8004ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ca8:	4e2e      	ldr	r6, [pc, #184]	; (8004d64 <_malloc_r+0xe4>)
 8004caa:	f000 f89d 	bl	8004de8 <__malloc_lock>
 8004cae:	6833      	ldr	r3, [r6, #0]
 8004cb0:	461c      	mov	r4, r3
 8004cb2:	bb34      	cbnz	r4, 8004d02 <_malloc_r+0x82>
 8004cb4:	4629      	mov	r1, r5
 8004cb6:	4638      	mov	r0, r7
 8004cb8:	f7ff ffc2 	bl	8004c40 <sbrk_aligned>
 8004cbc:	1c43      	adds	r3, r0, #1
 8004cbe:	4604      	mov	r4, r0
 8004cc0:	d14d      	bne.n	8004d5e <_malloc_r+0xde>
 8004cc2:	6834      	ldr	r4, [r6, #0]
 8004cc4:	4626      	mov	r6, r4
 8004cc6:	2e00      	cmp	r6, #0
 8004cc8:	d140      	bne.n	8004d4c <_malloc_r+0xcc>
 8004cca:	6823      	ldr	r3, [r4, #0]
 8004ccc:	4631      	mov	r1, r6
 8004cce:	4638      	mov	r0, r7
 8004cd0:	eb04 0803 	add.w	r8, r4, r3
 8004cd4:	f000 f878 	bl	8004dc8 <_sbrk_r>
 8004cd8:	4580      	cmp	r8, r0
 8004cda:	d13a      	bne.n	8004d52 <_malloc_r+0xd2>
 8004cdc:	6821      	ldr	r1, [r4, #0]
 8004cde:	3503      	adds	r5, #3
 8004ce0:	1a6d      	subs	r5, r5, r1
 8004ce2:	f025 0503 	bic.w	r5, r5, #3
 8004ce6:	3508      	adds	r5, #8
 8004ce8:	2d0c      	cmp	r5, #12
 8004cea:	bf38      	it	cc
 8004cec:	250c      	movcc	r5, #12
 8004cee:	4629      	mov	r1, r5
 8004cf0:	4638      	mov	r0, r7
 8004cf2:	f7ff ffa5 	bl	8004c40 <sbrk_aligned>
 8004cf6:	3001      	adds	r0, #1
 8004cf8:	d02b      	beq.n	8004d52 <_malloc_r+0xd2>
 8004cfa:	6823      	ldr	r3, [r4, #0]
 8004cfc:	442b      	add	r3, r5
 8004cfe:	6023      	str	r3, [r4, #0]
 8004d00:	e00e      	b.n	8004d20 <_malloc_r+0xa0>
 8004d02:	6822      	ldr	r2, [r4, #0]
 8004d04:	1b52      	subs	r2, r2, r5
 8004d06:	d41e      	bmi.n	8004d46 <_malloc_r+0xc6>
 8004d08:	2a0b      	cmp	r2, #11
 8004d0a:	d916      	bls.n	8004d3a <_malloc_r+0xba>
 8004d0c:	1961      	adds	r1, r4, r5
 8004d0e:	42a3      	cmp	r3, r4
 8004d10:	6025      	str	r5, [r4, #0]
 8004d12:	bf18      	it	ne
 8004d14:	6059      	strne	r1, [r3, #4]
 8004d16:	6863      	ldr	r3, [r4, #4]
 8004d18:	bf08      	it	eq
 8004d1a:	6031      	streq	r1, [r6, #0]
 8004d1c:	5162      	str	r2, [r4, r5]
 8004d1e:	604b      	str	r3, [r1, #4]
 8004d20:	4638      	mov	r0, r7
 8004d22:	f104 060b 	add.w	r6, r4, #11
 8004d26:	f000 f865 	bl	8004df4 <__malloc_unlock>
 8004d2a:	f026 0607 	bic.w	r6, r6, #7
 8004d2e:	1d23      	adds	r3, r4, #4
 8004d30:	1af2      	subs	r2, r6, r3
 8004d32:	d0b6      	beq.n	8004ca2 <_malloc_r+0x22>
 8004d34:	1b9b      	subs	r3, r3, r6
 8004d36:	50a3      	str	r3, [r4, r2]
 8004d38:	e7b3      	b.n	8004ca2 <_malloc_r+0x22>
 8004d3a:	6862      	ldr	r2, [r4, #4]
 8004d3c:	42a3      	cmp	r3, r4
 8004d3e:	bf0c      	ite	eq
 8004d40:	6032      	streq	r2, [r6, #0]
 8004d42:	605a      	strne	r2, [r3, #4]
 8004d44:	e7ec      	b.n	8004d20 <_malloc_r+0xa0>
 8004d46:	4623      	mov	r3, r4
 8004d48:	6864      	ldr	r4, [r4, #4]
 8004d4a:	e7b2      	b.n	8004cb2 <_malloc_r+0x32>
 8004d4c:	4634      	mov	r4, r6
 8004d4e:	6876      	ldr	r6, [r6, #4]
 8004d50:	e7b9      	b.n	8004cc6 <_malloc_r+0x46>
 8004d52:	230c      	movs	r3, #12
 8004d54:	603b      	str	r3, [r7, #0]
 8004d56:	4638      	mov	r0, r7
 8004d58:	f000 f84c 	bl	8004df4 <__malloc_unlock>
 8004d5c:	e7a1      	b.n	8004ca2 <_malloc_r+0x22>
 8004d5e:	6025      	str	r5, [r4, #0]
 8004d60:	e7de      	b.n	8004d20 <_malloc_r+0xa0>
 8004d62:	bf00      	nop
 8004d64:	2000017c 	.word	0x2000017c

08004d68 <_realloc_r>:
 8004d68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d6c:	4680      	mov	r8, r0
 8004d6e:	4614      	mov	r4, r2
 8004d70:	460e      	mov	r6, r1
 8004d72:	b921      	cbnz	r1, 8004d7e <_realloc_r+0x16>
 8004d74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004d78:	4611      	mov	r1, r2
 8004d7a:	f7ff bf81 	b.w	8004c80 <_malloc_r>
 8004d7e:	b92a      	cbnz	r2, 8004d8c <_realloc_r+0x24>
 8004d80:	f7ff ff12 	bl	8004ba8 <_free_r>
 8004d84:	4625      	mov	r5, r4
 8004d86:	4628      	mov	r0, r5
 8004d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d8c:	f000 f838 	bl	8004e00 <_malloc_usable_size_r>
 8004d90:	4284      	cmp	r4, r0
 8004d92:	4607      	mov	r7, r0
 8004d94:	d802      	bhi.n	8004d9c <_realloc_r+0x34>
 8004d96:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004d9a:	d812      	bhi.n	8004dc2 <_realloc_r+0x5a>
 8004d9c:	4621      	mov	r1, r4
 8004d9e:	4640      	mov	r0, r8
 8004da0:	f7ff ff6e 	bl	8004c80 <_malloc_r>
 8004da4:	4605      	mov	r5, r0
 8004da6:	2800      	cmp	r0, #0
 8004da8:	d0ed      	beq.n	8004d86 <_realloc_r+0x1e>
 8004daa:	42bc      	cmp	r4, r7
 8004dac:	4622      	mov	r2, r4
 8004dae:	4631      	mov	r1, r6
 8004db0:	bf28      	it	cs
 8004db2:	463a      	movcs	r2, r7
 8004db4:	f7ff fed0 	bl	8004b58 <memcpy>
 8004db8:	4631      	mov	r1, r6
 8004dba:	4640      	mov	r0, r8
 8004dbc:	f7ff fef4 	bl	8004ba8 <_free_r>
 8004dc0:	e7e1      	b.n	8004d86 <_realloc_r+0x1e>
 8004dc2:	4635      	mov	r5, r6
 8004dc4:	e7df      	b.n	8004d86 <_realloc_r+0x1e>
	...

08004dc8 <_sbrk_r>:
 8004dc8:	b538      	push	{r3, r4, r5, lr}
 8004dca:	4d06      	ldr	r5, [pc, #24]	; (8004de4 <_sbrk_r+0x1c>)
 8004dcc:	2300      	movs	r3, #0
 8004dce:	4604      	mov	r4, r0
 8004dd0:	4608      	mov	r0, r1
 8004dd2:	602b      	str	r3, [r5, #0]
 8004dd4:	f7fc f86e 	bl	8000eb4 <_sbrk>
 8004dd8:	1c43      	adds	r3, r0, #1
 8004dda:	d102      	bne.n	8004de2 <_sbrk_r+0x1a>
 8004ddc:	682b      	ldr	r3, [r5, #0]
 8004dde:	b103      	cbz	r3, 8004de2 <_sbrk_r+0x1a>
 8004de0:	6023      	str	r3, [r4, #0]
 8004de2:	bd38      	pop	{r3, r4, r5, pc}
 8004de4:	20000184 	.word	0x20000184

08004de8 <__malloc_lock>:
 8004de8:	4801      	ldr	r0, [pc, #4]	; (8004df0 <__malloc_lock+0x8>)
 8004dea:	f000 b811 	b.w	8004e10 <__retarget_lock_acquire_recursive>
 8004dee:	bf00      	nop
 8004df0:	20000188 	.word	0x20000188

08004df4 <__malloc_unlock>:
 8004df4:	4801      	ldr	r0, [pc, #4]	; (8004dfc <__malloc_unlock+0x8>)
 8004df6:	f000 b80c 	b.w	8004e12 <__retarget_lock_release_recursive>
 8004dfa:	bf00      	nop
 8004dfc:	20000188 	.word	0x20000188

08004e00 <_malloc_usable_size_r>:
 8004e00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e04:	1f18      	subs	r0, r3, #4
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	bfbc      	itt	lt
 8004e0a:	580b      	ldrlt	r3, [r1, r0]
 8004e0c:	18c0      	addlt	r0, r0, r3
 8004e0e:	4770      	bx	lr

08004e10 <__retarget_lock_acquire_recursive>:
 8004e10:	4770      	bx	lr

08004e12 <__retarget_lock_release_recursive>:
 8004e12:	4770      	bx	lr

08004e14 <_init>:
 8004e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e16:	bf00      	nop
 8004e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e1a:	bc08      	pop	{r3}
 8004e1c:	469e      	mov	lr, r3
 8004e1e:	4770      	bx	lr

08004e20 <_fini>:
 8004e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e22:	bf00      	nop
 8004e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e26:	bc08      	pop	{r3}
 8004e28:	469e      	mov	lr, r3
 8004e2a:	4770      	bx	lr
