
SKM_cli_try.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000482c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  080049bc  080049bc  000149bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a60  08004a60  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004a60  08004a60  00014a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a68  08004a68  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a68  08004a68  00014a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a6c  08004a6c  00014a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004a70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000070  08004ae0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000012c  08004ae0  0002012c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c7bd  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d20  00000000  00000000  0002c85d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009c0  00000000  00000000  0002e580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000908  00000000  00000000  0002ef40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000256dd  00000000  00000000  0002f848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c218  00000000  00000000  00054f25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7a1a  00000000  00000000  0006113d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00148b57  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002acc  00000000  00000000  00148ba8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080049a4 	.word	0x080049a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080049a4 	.word	0x080049a4

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr
	...

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <HAL_UART_RxCpltCallback>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000594:	b580      	push	{r7, lr}
 8000596:	b090      	sub	sp, #64	; 0x40
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]

	if ( strcmp(Received,"on1") == 0 ){
 800059c:	491e      	ldr	r1, [pc, #120]	; (8000618 <HAL_UART_RxCpltCallback+0x84>)
 800059e:	481f      	ldr	r0, [pc, #124]	; (800061c <HAL_UART_RxCpltCallback+0x88>)
 80005a0:	f7ff fe16 	bl	80001d0 <strcmp>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d105      	bne.n	80005b6 <HAL_UART_RxCpltCallback+0x22>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 80005aa:	2201      	movs	r2, #1
 80005ac:	2120      	movs	r1, #32
 80005ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005b2:	f000 fe21 	bl	80011f8 <HAL_GPIO_WritePin>
	}

	if ( strcmp(Received,"of1") == 0 ){
 80005b6:	491a      	ldr	r1, [pc, #104]	; (8000620 <HAL_UART_RxCpltCallback+0x8c>)
 80005b8:	4818      	ldr	r0, [pc, #96]	; (800061c <HAL_UART_RxCpltCallback+0x88>)
 80005ba:	f7ff fe09 	bl	80001d0 <strcmp>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d105      	bne.n	80005d0 <HAL_UART_RxCpltCallback+0x3c>
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005c4:	2200      	movs	r2, #0
 80005c6:	2120      	movs	r1, #32
 80005c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005cc:	f000 fe14 	bl	80011f8 <HAL_GPIO_WritePin>
	}
	uint8_t Data[50]; 		//Tablica przechowujaca wysylana wiadomosc.
	uint16_t size = 0; 		// Rozmiar wyslanej wiadomosci
 80005d0:	2300      	movs	r3, #0
 80005d2:	87fb      	strh	r3, [r7, #62]	; 0x3e

	size = sprintf(Data, "Odebrano nieznany znak:  %s\n\r", Received); //zwraca ilość zapisanych znaków
 80005d4:	f107 030c 	add.w	r3, r7, #12
 80005d8:	4a10      	ldr	r2, [pc, #64]	; (800061c <HAL_UART_RxCpltCallback+0x88>)
 80005da:	4912      	ldr	r1, [pc, #72]	; (8000624 <HAL_UART_RxCpltCallback+0x90>)
 80005dc:	4618      	mov	r0, r3
 80005de:	f003 fd73 	bl	80040c8 <siprintf>
 80005e2:	4603      	mov	r3, r0
 80005e4:	87fb      	strh	r3, [r7, #62]	; 0x3e
//Znak \n oznacza LF - Line Feed i wymusza przejście kursora do nowej linii. Znak \r to CR - Carriage Return, czyli znak powrotu karetki
	Received[0] = 0;
 80005e6:	4b0d      	ldr	r3, [pc, #52]	; (800061c <HAL_UART_RxCpltCallback+0x88>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	701a      	strb	r2, [r3, #0]
	Received[1] = 0;
 80005ec:	4b0b      	ldr	r3, [pc, #44]	; (800061c <HAL_UART_RxCpltCallback+0x88>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	705a      	strb	r2, [r3, #1]
	Received[2] = 0;
 80005f2:	4b0a      	ldr	r3, [pc, #40]	; (800061c <HAL_UART_RxCpltCallback+0x88>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	709a      	strb	r2, [r3, #2]

	HAL_UART_Transmit_IT(&huart2,Data,size); //Rozpoczecie nadawania danych z wykorzysatniem przerwan
 80005f8:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80005fa:	f107 030c 	add.w	r3, r7, #12
 80005fe:	4619      	mov	r1, r3
 8000600:	4809      	ldr	r0, [pc, #36]	; (8000628 <HAL_UART_RxCpltCallback+0x94>)
 8000602:	f002 f96d 	bl	80028e0 <HAL_UART_Transmit_IT>

	HAL_UART_Receive_IT(&huart2,Received,3); //Ponowne właczenie nasłuchiwania
 8000606:	2203      	movs	r2, #3
 8000608:	4904      	ldr	r1, [pc, #16]	; (800061c <HAL_UART_RxCpltCallback+0x88>)
 800060a:	4807      	ldr	r0, [pc, #28]	; (8000628 <HAL_UART_RxCpltCallback+0x94>)
 800060c:	f002 f9d6 	bl	80029bc <HAL_UART_Receive_IT>

}
 8000610:	bf00      	nop
 8000612:	3740      	adds	r7, #64	; 0x40
 8000614:	46bd      	mov	sp, r7
 8000616:	bd80      	pop	{r7, pc}
 8000618:	080049bc 	.word	0x080049bc
 800061c:	20000110 	.word	0x20000110
 8000620:	080049c0 	.word	0x080049c0
 8000624:	080049c4 	.word	0x080049c4
 8000628:	2000008c 	.word	0x2000008c

0800062c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000630:	f000 fa2c 	bl	8000a8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000634:	f000 f80e 	bl	8000654 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000638:	f000 f88e 	bl	8000758 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800063c:	f000 f85c 	bl	80006f8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2,Received,3); //Ponowne właczenie nasłuchiwania
 8000640:	2203      	movs	r2, #3
 8000642:	4902      	ldr	r1, [pc, #8]	; (800064c <main+0x20>)
 8000644:	4802      	ldr	r0, [pc, #8]	; (8000650 <main+0x24>)
 8000646:	f002 f9b9 	bl	80029bc <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800064a:	e7fe      	b.n	800064a <main+0x1e>
 800064c:	20000110 	.word	0x20000110
 8000650:	2000008c 	.word	0x2000008c

08000654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b096      	sub	sp, #88	; 0x58
 8000658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065a:	f107 0314 	add.w	r3, r7, #20
 800065e:	2244      	movs	r2, #68	; 0x44
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f003 fd28 	bl	80040b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000668:	463b      	mov	r3, r7
 800066a:	2200      	movs	r2, #0
 800066c:	601a      	str	r2, [r3, #0]
 800066e:	605a      	str	r2, [r3, #4]
 8000670:	609a      	str	r2, [r3, #8]
 8000672:	60da      	str	r2, [r3, #12]
 8000674:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000676:	f44f 7000 	mov.w	r0, #512	; 0x200
 800067a:	f000 fde3 	bl	8001244 <HAL_PWREx_ControlVoltageScaling>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000684:	f000 f8ce 	bl	8000824 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000688:	2302      	movs	r3, #2
 800068a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800068c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000690:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000692:	2310      	movs	r3, #16
 8000694:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000696:	2302      	movs	r3, #2
 8000698:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800069a:	2302      	movs	r3, #2
 800069c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800069e:	2301      	movs	r3, #1
 80006a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80006a2:	230a      	movs	r3, #10
 80006a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006a6:	2307      	movs	r3, #7
 80006a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006aa:	2302      	movs	r3, #2
 80006ac:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006ae:	2302      	movs	r3, #2
 80006b0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b2:	f107 0314 	add.w	r3, r7, #20
 80006b6:	4618      	mov	r0, r3
 80006b8:	f000 fe1a 	bl	80012f0 <HAL_RCC_OscConfig>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0x72>
  {
    Error_Handler();
 80006c2:	f000 f8af 	bl	8000824 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c6:	230f      	movs	r3, #15
 80006c8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ca:	2303      	movs	r3, #3
 80006cc:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ce:	2300      	movs	r3, #0
 80006d0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006d2:	2300      	movs	r3, #0
 80006d4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d6:	2300      	movs	r3, #0
 80006d8:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006da:	463b      	mov	r3, r7
 80006dc:	2104      	movs	r1, #4
 80006de:	4618      	mov	r0, r3
 80006e0:	f001 f9ee 	bl	8001ac0 <HAL_RCC_ClockConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006ea:	f000 f89b 	bl	8000824 <Error_Handler>
  }
}
 80006ee:	bf00      	nop
 80006f0:	3758      	adds	r7, #88	; 0x58
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
	...

080006f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006fc:	4b14      	ldr	r3, [pc, #80]	; (8000750 <MX_USART2_UART_Init+0x58>)
 80006fe:	4a15      	ldr	r2, [pc, #84]	; (8000754 <MX_USART2_UART_Init+0x5c>)
 8000700:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000702:	4b13      	ldr	r3, [pc, #76]	; (8000750 <MX_USART2_UART_Init+0x58>)
 8000704:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000708:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800070a:	4b11      	ldr	r3, [pc, #68]	; (8000750 <MX_USART2_UART_Init+0x58>)
 800070c:	2200      	movs	r2, #0
 800070e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000710:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <MX_USART2_UART_Init+0x58>)
 8000712:	2200      	movs	r2, #0
 8000714:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000716:	4b0e      	ldr	r3, [pc, #56]	; (8000750 <MX_USART2_UART_Init+0x58>)
 8000718:	2200      	movs	r2, #0
 800071a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800071c:	4b0c      	ldr	r3, [pc, #48]	; (8000750 <MX_USART2_UART_Init+0x58>)
 800071e:	220c      	movs	r2, #12
 8000720:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000722:	4b0b      	ldr	r3, [pc, #44]	; (8000750 <MX_USART2_UART_Init+0x58>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000728:	4b09      	ldr	r3, [pc, #36]	; (8000750 <MX_USART2_UART_Init+0x58>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800072e:	4b08      	ldr	r3, [pc, #32]	; (8000750 <MX_USART2_UART_Init+0x58>)
 8000730:	2200      	movs	r2, #0
 8000732:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <MX_USART2_UART_Init+0x58>)
 8000736:	2200      	movs	r2, #0
 8000738:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800073a:	4805      	ldr	r0, [pc, #20]	; (8000750 <MX_USART2_UART_Init+0x58>)
 800073c:	f002 f882 	bl	8002844 <HAL_UART_Init>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000746:	f000 f86d 	bl	8000824 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800074a:	bf00      	nop
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	2000008c 	.word	0x2000008c
 8000754:	40004400 	.word	0x40004400

08000758 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b08a      	sub	sp, #40	; 0x28
 800075c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075e:	f107 0314 	add.w	r3, r7, #20
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]
 800076c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800076e:	4b2b      	ldr	r3, [pc, #172]	; (800081c <MX_GPIO_Init+0xc4>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000772:	4a2a      	ldr	r2, [pc, #168]	; (800081c <MX_GPIO_Init+0xc4>)
 8000774:	f043 0304 	orr.w	r3, r3, #4
 8000778:	64d3      	str	r3, [r2, #76]	; 0x4c
 800077a:	4b28      	ldr	r3, [pc, #160]	; (800081c <MX_GPIO_Init+0xc4>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077e:	f003 0304 	and.w	r3, r3, #4
 8000782:	613b      	str	r3, [r7, #16]
 8000784:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000786:	4b25      	ldr	r3, [pc, #148]	; (800081c <MX_GPIO_Init+0xc4>)
 8000788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800078a:	4a24      	ldr	r2, [pc, #144]	; (800081c <MX_GPIO_Init+0xc4>)
 800078c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000790:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000792:	4b22      	ldr	r3, [pc, #136]	; (800081c <MX_GPIO_Init+0xc4>)
 8000794:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800079a:	60fb      	str	r3, [r7, #12]
 800079c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800079e:	4b1f      	ldr	r3, [pc, #124]	; (800081c <MX_GPIO_Init+0xc4>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a2:	4a1e      	ldr	r2, [pc, #120]	; (800081c <MX_GPIO_Init+0xc4>)
 80007a4:	f043 0301 	orr.w	r3, r3, #1
 80007a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007aa:	4b1c      	ldr	r3, [pc, #112]	; (800081c <MX_GPIO_Init+0xc4>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ae:	f003 0301 	and.w	r3, r3, #1
 80007b2:	60bb      	str	r3, [r7, #8]
 80007b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b6:	4b19      	ldr	r3, [pc, #100]	; (800081c <MX_GPIO_Init+0xc4>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ba:	4a18      	ldr	r2, [pc, #96]	; (800081c <MX_GPIO_Init+0xc4>)
 80007bc:	f043 0302 	orr.w	r3, r3, #2
 80007c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007c2:	4b16      	ldr	r3, [pc, #88]	; (800081c <MX_GPIO_Init+0xc4>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c6:	f003 0302 	and.w	r3, r3, #2
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2120      	movs	r1, #32
 80007d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007d6:	f000 fd0f 	bl	80011f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007e0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007ea:	f107 0314 	add.w	r3, r7, #20
 80007ee:	4619      	mov	r1, r3
 80007f0:	480b      	ldr	r0, [pc, #44]	; (8000820 <MX_GPIO_Init+0xc8>)
 80007f2:	f000 fb57 	bl	8000ea4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007f6:	2320      	movs	r3, #32
 80007f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fa:	2301      	movs	r3, #1
 80007fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000802:	2300      	movs	r3, #0
 8000804:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000806:	f107 0314 	add.w	r3, r7, #20
 800080a:	4619      	mov	r1, r3
 800080c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000810:	f000 fb48 	bl	8000ea4 <HAL_GPIO_Init>

}
 8000814:	bf00      	nop
 8000816:	3728      	adds	r7, #40	; 0x28
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40021000 	.word	0x40021000
 8000820:	48000800 	.word	0x48000800

08000824 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000828:	b672      	cpsid	i
}
 800082a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800082c:	e7fe      	b.n	800082c <Error_Handler+0x8>
	...

08000830 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000836:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <HAL_MspInit+0x44>)
 8000838:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800083a:	4a0e      	ldr	r2, [pc, #56]	; (8000874 <HAL_MspInit+0x44>)
 800083c:	f043 0301 	orr.w	r3, r3, #1
 8000840:	6613      	str	r3, [r2, #96]	; 0x60
 8000842:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <HAL_MspInit+0x44>)
 8000844:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800084e:	4b09      	ldr	r3, [pc, #36]	; (8000874 <HAL_MspInit+0x44>)
 8000850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000852:	4a08      	ldr	r2, [pc, #32]	; (8000874 <HAL_MspInit+0x44>)
 8000854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000858:	6593      	str	r3, [r2, #88]	; 0x58
 800085a:	4b06      	ldr	r3, [pc, #24]	; (8000874 <HAL_MspInit+0x44>)
 800085c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800085e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000862:	603b      	str	r3, [r7, #0]
 8000864:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000866:	bf00      	nop
 8000868:	370c      	adds	r7, #12
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	40021000 	.word	0x40021000

08000878 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b0ac      	sub	sp, #176	; 0xb0
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000880:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000884:	2200      	movs	r2, #0
 8000886:	601a      	str	r2, [r3, #0]
 8000888:	605a      	str	r2, [r3, #4]
 800088a:	609a      	str	r2, [r3, #8]
 800088c:	60da      	str	r2, [r3, #12]
 800088e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000890:	f107 0314 	add.w	r3, r7, #20
 8000894:	2288      	movs	r2, #136	; 0x88
 8000896:	2100      	movs	r1, #0
 8000898:	4618      	mov	r0, r3
 800089a:	f003 fc0d 	bl	80040b8 <memset>
  if(huart->Instance==USART2)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	4a25      	ldr	r2, [pc, #148]	; (8000938 <HAL_UART_MspInit+0xc0>)
 80008a4:	4293      	cmp	r3, r2
 80008a6:	d143      	bne.n	8000930 <HAL_UART_MspInit+0xb8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80008a8:	2302      	movs	r3, #2
 80008aa:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008ac:	2300      	movs	r3, #0
 80008ae:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	4618      	mov	r0, r3
 80008b6:	f001 fb09 	bl	8001ecc <HAL_RCCEx_PeriphCLKConfig>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80008c0:	f7ff ffb0 	bl	8000824 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008c4:	4b1d      	ldr	r3, [pc, #116]	; (800093c <HAL_UART_MspInit+0xc4>)
 80008c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008c8:	4a1c      	ldr	r2, [pc, #112]	; (800093c <HAL_UART_MspInit+0xc4>)
 80008ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008ce:	6593      	str	r3, [r2, #88]	; 0x58
 80008d0:	4b1a      	ldr	r3, [pc, #104]	; (800093c <HAL_UART_MspInit+0xc4>)
 80008d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008d8:	613b      	str	r3, [r7, #16]
 80008da:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008dc:	4b17      	ldr	r3, [pc, #92]	; (800093c <HAL_UART_MspInit+0xc4>)
 80008de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e0:	4a16      	ldr	r2, [pc, #88]	; (800093c <HAL_UART_MspInit+0xc4>)
 80008e2:	f043 0301 	orr.w	r3, r3, #1
 80008e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008e8:	4b14      	ldr	r3, [pc, #80]	; (800093c <HAL_UART_MspInit+0xc4>)
 80008ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ec:	f003 0301 	and.w	r3, r3, #1
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008f4:	230c      	movs	r3, #12
 80008f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fa:	2302      	movs	r3, #2
 80008fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000906:	2303      	movs	r3, #3
 8000908:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800090c:	2307      	movs	r3, #7
 800090e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000912:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000916:	4619      	mov	r1, r3
 8000918:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800091c:	f000 fac2 	bl	8000ea4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000920:	2200      	movs	r2, #0
 8000922:	2100      	movs	r1, #0
 8000924:	2026      	movs	r0, #38	; 0x26
 8000926:	f000 fa08 	bl	8000d3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800092a:	2026      	movs	r0, #38	; 0x26
 800092c:	f000 fa21 	bl	8000d72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000930:	bf00      	nop
 8000932:	37b0      	adds	r7, #176	; 0xb0
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	40004400 	.word	0x40004400
 800093c:	40021000 	.word	0x40021000

08000940 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000940:	b480      	push	{r7}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000944:	e7fe      	b.n	8000944 <NMI_Handler+0x4>

08000946 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000946:	b480      	push	{r7}
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800094a:	e7fe      	b.n	800094a <HardFault_Handler+0x4>

0800094c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000950:	e7fe      	b.n	8000950 <MemManage_Handler+0x4>

08000952 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000956:	e7fe      	b.n	8000956 <BusFault_Handler+0x4>

08000958 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800095c:	e7fe      	b.n	800095c <UsageFault_Handler+0x4>

0800095e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800095e:	b480      	push	{r7}
 8000960:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000962:	bf00      	nop
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr

0800096c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800096c:	b480      	push	{r7}
 800096e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000970:	bf00      	nop
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr

0800097a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800097a:	b480      	push	{r7}
 800097c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800097e:	bf00      	nop
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr

08000988 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800098c:	f000 f8da 	bl	8000b44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000990:	bf00      	nop
 8000992:	bd80      	pop	{r7, pc}

08000994 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000998:	4802      	ldr	r0, [pc, #8]	; (80009a4 <USART2_IRQHandler+0x10>)
 800099a:	f002 f865 	bl	8002a68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	2000008c 	.word	0x2000008c

080009a8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b086      	sub	sp, #24
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009b0:	4a14      	ldr	r2, [pc, #80]	; (8000a04 <_sbrk+0x5c>)
 80009b2:	4b15      	ldr	r3, [pc, #84]	; (8000a08 <_sbrk+0x60>)
 80009b4:	1ad3      	subs	r3, r2, r3
 80009b6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009bc:	4b13      	ldr	r3, [pc, #76]	; (8000a0c <_sbrk+0x64>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d102      	bne.n	80009ca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009c4:	4b11      	ldr	r3, [pc, #68]	; (8000a0c <_sbrk+0x64>)
 80009c6:	4a12      	ldr	r2, [pc, #72]	; (8000a10 <_sbrk+0x68>)
 80009c8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009ca:	4b10      	ldr	r3, [pc, #64]	; (8000a0c <_sbrk+0x64>)
 80009cc:	681a      	ldr	r2, [r3, #0]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4413      	add	r3, r2
 80009d2:	693a      	ldr	r2, [r7, #16]
 80009d4:	429a      	cmp	r2, r3
 80009d6:	d207      	bcs.n	80009e8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009d8:	f003 fb44 	bl	8004064 <__errno>
 80009dc:	4603      	mov	r3, r0
 80009de:	220c      	movs	r2, #12
 80009e0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009e2:	f04f 33ff 	mov.w	r3, #4294967295
 80009e6:	e009      	b.n	80009fc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009e8:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <_sbrk+0x64>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009ee:	4b07      	ldr	r3, [pc, #28]	; (8000a0c <_sbrk+0x64>)
 80009f0:	681a      	ldr	r2, [r3, #0]
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	4413      	add	r3, r2
 80009f6:	4a05      	ldr	r2, [pc, #20]	; (8000a0c <_sbrk+0x64>)
 80009f8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009fa:	68fb      	ldr	r3, [r7, #12]
}
 80009fc:	4618      	mov	r0, r3
 80009fe:	3718      	adds	r7, #24
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	20018000 	.word	0x20018000
 8000a08:	00000400 	.word	0x00000400
 8000a0c:	20000114 	.word	0x20000114
 8000a10:	20000130 	.word	0x20000130

08000a14 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <SystemInit+0x20>)
 8000a1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a1e:	4a05      	ldr	r2, [pc, #20]	; (8000a34 <SystemInit+0x20>)
 8000a20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	e000ed00 	.word	0xe000ed00

08000a38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a70 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a3c:	f7ff ffea 	bl	8000a14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a40:	480c      	ldr	r0, [pc, #48]	; (8000a74 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a42:	490d      	ldr	r1, [pc, #52]	; (8000a78 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a44:	4a0d      	ldr	r2, [pc, #52]	; (8000a7c <LoopForever+0xe>)
  movs r3, #0
 8000a46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a48:	e002      	b.n	8000a50 <LoopCopyDataInit>

08000a4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a4e:	3304      	adds	r3, #4

08000a50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a54:	d3f9      	bcc.n	8000a4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a56:	4a0a      	ldr	r2, [pc, #40]	; (8000a80 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a58:	4c0a      	ldr	r4, [pc, #40]	; (8000a84 <LoopForever+0x16>)
  movs r3, #0
 8000a5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a5c:	e001      	b.n	8000a62 <LoopFillZerobss>

08000a5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a60:	3204      	adds	r2, #4

08000a62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a64:	d3fb      	bcc.n	8000a5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a66:	f003 fb03 	bl	8004070 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a6a:	f7ff fddf 	bl	800062c <main>

08000a6e <LoopForever>:

LoopForever:
    b LoopForever
 8000a6e:	e7fe      	b.n	8000a6e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a70:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a78:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a7c:	08004a70 	.word	0x08004a70
  ldr r2, =_sbss
 8000a80:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000a84:	2000012c 	.word	0x2000012c

08000a88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a88:	e7fe      	b.n	8000a88 <ADC1_2_IRQHandler>
	...

08000a8c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a92:	2300      	movs	r3, #0
 8000a94:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a96:	4b0c      	ldr	r3, [pc, #48]	; (8000ac8 <HAL_Init+0x3c>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4a0b      	ldr	r2, [pc, #44]	; (8000ac8 <HAL_Init+0x3c>)
 8000a9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aa0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000aa2:	2003      	movs	r0, #3
 8000aa4:	f000 f93e 	bl	8000d24 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000aa8:	2000      	movs	r0, #0
 8000aaa:	f000 f80f 	bl	8000acc <HAL_InitTick>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d002      	beq.n	8000aba <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000ab4:	2301      	movs	r3, #1
 8000ab6:	71fb      	strb	r3, [r7, #7]
 8000ab8:	e001      	b.n	8000abe <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000aba:	f7ff feb9 	bl	8000830 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000abe:	79fb      	ldrb	r3, [r7, #7]
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3708      	adds	r7, #8
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40022000 	.word	0x40022000

08000acc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ad8:	4b17      	ldr	r3, [pc, #92]	; (8000b38 <HAL_InitTick+0x6c>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d023      	beq.n	8000b28 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000ae0:	4b16      	ldr	r3, [pc, #88]	; (8000b3c <HAL_InitTick+0x70>)
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	4b14      	ldr	r3, [pc, #80]	; (8000b38 <HAL_InitTick+0x6c>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	4619      	mov	r1, r3
 8000aea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000af6:	4618      	mov	r0, r3
 8000af8:	f000 f949 	bl	8000d8e <HAL_SYSTICK_Config>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d10f      	bne.n	8000b22 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	2b0f      	cmp	r3, #15
 8000b06:	d809      	bhi.n	8000b1c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	6879      	ldr	r1, [r7, #4]
 8000b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b10:	f000 f913 	bl	8000d3a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b14:	4a0a      	ldr	r2, [pc, #40]	; (8000b40 <HAL_InitTick+0x74>)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	6013      	str	r3, [r2, #0]
 8000b1a:	e007      	b.n	8000b2c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	73fb      	strb	r3, [r7, #15]
 8000b20:	e004      	b.n	8000b2c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b22:	2301      	movs	r3, #1
 8000b24:	73fb      	strb	r3, [r7, #15]
 8000b26:	e001      	b.n	8000b2c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3710      	adds	r7, #16
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20000008 	.word	0x20000008
 8000b3c:	20000000 	.word	0x20000000
 8000b40:	20000004 	.word	0x20000004

08000b44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b48:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <HAL_IncTick+0x20>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	461a      	mov	r2, r3
 8000b4e:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <HAL_IncTick+0x24>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4413      	add	r3, r2
 8000b54:	4a04      	ldr	r2, [pc, #16]	; (8000b68 <HAL_IncTick+0x24>)
 8000b56:	6013      	str	r3, [r2, #0]
}
 8000b58:	bf00      	nop
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop
 8000b64:	20000008 	.word	0x20000008
 8000b68:	20000118 	.word	0x20000118

08000b6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b70:	4b03      	ldr	r3, [pc, #12]	; (8000b80 <HAL_GetTick+0x14>)
 8000b72:	681b      	ldr	r3, [r3, #0]
}
 8000b74:	4618      	mov	r0, r3
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	20000118 	.word	0x20000118

08000b84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	f003 0307 	and.w	r3, r3, #7
 8000b92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b94:	4b0c      	ldr	r3, [pc, #48]	; (8000bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000b96:	68db      	ldr	r3, [r3, #12]
 8000b98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b9a:	68ba      	ldr	r2, [r7, #8]
 8000b9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bb6:	4a04      	ldr	r2, [pc, #16]	; (8000bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000bb8:	68bb      	ldr	r3, [r7, #8]
 8000bba:	60d3      	str	r3, [r2, #12]
}
 8000bbc:	bf00      	nop
 8000bbe:	3714      	adds	r7, #20
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bd0:	4b04      	ldr	r3, [pc, #16]	; (8000be4 <__NVIC_GetPriorityGrouping+0x18>)
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	0a1b      	lsrs	r3, r3, #8
 8000bd6:	f003 0307 	and.w	r3, r3, #7
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	db0b      	blt.n	8000c12 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bfa:	79fb      	ldrb	r3, [r7, #7]
 8000bfc:	f003 021f 	and.w	r2, r3, #31
 8000c00:	4907      	ldr	r1, [pc, #28]	; (8000c20 <__NVIC_EnableIRQ+0x38>)
 8000c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c06:	095b      	lsrs	r3, r3, #5
 8000c08:	2001      	movs	r0, #1
 8000c0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000c12:	bf00      	nop
 8000c14:	370c      	adds	r7, #12
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	e000e100 	.word	0xe000e100

08000c24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	6039      	str	r1, [r7, #0]
 8000c2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	db0a      	blt.n	8000c4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	b2da      	uxtb	r2, r3
 8000c3c:	490c      	ldr	r1, [pc, #48]	; (8000c70 <__NVIC_SetPriority+0x4c>)
 8000c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c42:	0112      	lsls	r2, r2, #4
 8000c44:	b2d2      	uxtb	r2, r2
 8000c46:	440b      	add	r3, r1
 8000c48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c4c:	e00a      	b.n	8000c64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	b2da      	uxtb	r2, r3
 8000c52:	4908      	ldr	r1, [pc, #32]	; (8000c74 <__NVIC_SetPriority+0x50>)
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	f003 030f 	and.w	r3, r3, #15
 8000c5a:	3b04      	subs	r3, #4
 8000c5c:	0112      	lsls	r2, r2, #4
 8000c5e:	b2d2      	uxtb	r2, r2
 8000c60:	440b      	add	r3, r1
 8000c62:	761a      	strb	r2, [r3, #24]
}
 8000c64:	bf00      	nop
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr
 8000c70:	e000e100 	.word	0xe000e100
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b089      	sub	sp, #36	; 0x24
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	60f8      	str	r0, [r7, #12]
 8000c80:	60b9      	str	r1, [r7, #8]
 8000c82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	f003 0307 	and.w	r3, r3, #7
 8000c8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c8c:	69fb      	ldr	r3, [r7, #28]
 8000c8e:	f1c3 0307 	rsb	r3, r3, #7
 8000c92:	2b04      	cmp	r3, #4
 8000c94:	bf28      	it	cs
 8000c96:	2304      	movcs	r3, #4
 8000c98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	3304      	adds	r3, #4
 8000c9e:	2b06      	cmp	r3, #6
 8000ca0:	d902      	bls.n	8000ca8 <NVIC_EncodePriority+0x30>
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	3b03      	subs	r3, #3
 8000ca6:	e000      	b.n	8000caa <NVIC_EncodePriority+0x32>
 8000ca8:	2300      	movs	r3, #0
 8000caa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cac:	f04f 32ff 	mov.w	r2, #4294967295
 8000cb0:	69bb      	ldr	r3, [r7, #24]
 8000cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb6:	43da      	mvns	r2, r3
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	401a      	ands	r2, r3
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cca:	43d9      	mvns	r1, r3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd0:	4313      	orrs	r3, r2
         );
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3724      	adds	r7, #36	; 0x24
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
	...

08000ce0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	3b01      	subs	r3, #1
 8000cec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cf0:	d301      	bcc.n	8000cf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	e00f      	b.n	8000d16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cf6:	4a0a      	ldr	r2, [pc, #40]	; (8000d20 <SysTick_Config+0x40>)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	3b01      	subs	r3, #1
 8000cfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cfe:	210f      	movs	r1, #15
 8000d00:	f04f 30ff 	mov.w	r0, #4294967295
 8000d04:	f7ff ff8e 	bl	8000c24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d08:	4b05      	ldr	r3, [pc, #20]	; (8000d20 <SysTick_Config+0x40>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d0e:	4b04      	ldr	r3, [pc, #16]	; (8000d20 <SysTick_Config+0x40>)
 8000d10:	2207      	movs	r2, #7
 8000d12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d14:	2300      	movs	r3, #0
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	e000e010 	.word	0xe000e010

08000d24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d2c:	6878      	ldr	r0, [r7, #4]
 8000d2e:	f7ff ff29 	bl	8000b84 <__NVIC_SetPriorityGrouping>
}
 8000d32:	bf00      	nop
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b086      	sub	sp, #24
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	4603      	mov	r3, r0
 8000d42:	60b9      	str	r1, [r7, #8]
 8000d44:	607a      	str	r2, [r7, #4]
 8000d46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d4c:	f7ff ff3e 	bl	8000bcc <__NVIC_GetPriorityGrouping>
 8000d50:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d52:	687a      	ldr	r2, [r7, #4]
 8000d54:	68b9      	ldr	r1, [r7, #8]
 8000d56:	6978      	ldr	r0, [r7, #20]
 8000d58:	f7ff ff8e 	bl	8000c78 <NVIC_EncodePriority>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d62:	4611      	mov	r1, r2
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff ff5d 	bl	8000c24 <__NVIC_SetPriority>
}
 8000d6a:	bf00      	nop
 8000d6c:	3718      	adds	r7, #24
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b082      	sub	sp, #8
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	4603      	mov	r3, r0
 8000d7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff ff31 	bl	8000be8 <__NVIC_EnableIRQ>
}
 8000d86:	bf00      	nop
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}

08000d8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b082      	sub	sp, #8
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d96:	6878      	ldr	r0, [r7, #4]
 8000d98:	f7ff ffa2 	bl	8000ce0 <SysTick_Config>
 8000d9c:	4603      	mov	r3, r0
}
 8000d9e:	4618      	mov	r0, r3
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000da6:	b480      	push	{r7}
 8000da8:	b085      	sub	sp, #20
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000dae:	2300      	movs	r3, #0
 8000db0:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	2b02      	cmp	r3, #2
 8000dbc:	d008      	beq.n	8000dd0 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2204      	movs	r2, #4
 8000dc2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	e022      	b.n	8000e16 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f022 020e 	bic.w	r2, r2, #14
 8000dde:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f022 0201 	bic.w	r2, r2, #1
 8000dee:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df4:	f003 021c 	and.w	r2, r3, #28
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfc:	2101      	movs	r1, #1
 8000dfe:	fa01 f202 	lsl.w	r2, r1, r2
 8000e02:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2201      	movs	r2, #1
 8000e08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	2200      	movs	r2, #0
 8000e10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8000e14:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000e16:	4618      	mov	r0, r3
 8000e18:	3714      	adds	r7, #20
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr

08000e22 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b084      	sub	sp, #16
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	2b02      	cmp	r3, #2
 8000e38:	d005      	beq.n	8000e46 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	2204      	movs	r2, #4
 8000e3e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000e40:	2301      	movs	r3, #1
 8000e42:	73fb      	strb	r3, [r7, #15]
 8000e44:	e029      	b.n	8000e9a <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f022 020e 	bic.w	r2, r2, #14
 8000e54:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f022 0201 	bic.w	r2, r2, #1
 8000e64:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6a:	f003 021c 	and.w	r2, r3, #28
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e72:	2101      	movs	r1, #1
 8000e74:	fa01 f202 	lsl.w	r2, r1, r2
 8000e78:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2200      	movs	r2, #0
 8000e86:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d003      	beq.n	8000e9a <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	4798      	blx	r3
    }
  }
  return status;
 8000e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3710      	adds	r7, #16
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b087      	sub	sp, #28
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eb2:	e17f      	b.n	80011b4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	2101      	movs	r1, #1
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	f000 8171 	beq.w	80011ae <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f003 0303 	and.w	r3, r3, #3
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d005      	beq.n	8000ee4 <HAL_GPIO_Init+0x40>
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f003 0303 	and.w	r3, r3, #3
 8000ee0:	2b02      	cmp	r3, #2
 8000ee2:	d130      	bne.n	8000f46 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	689b      	ldr	r3, [r3, #8]
 8000ee8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	005b      	lsls	r3, r3, #1
 8000eee:	2203      	movs	r2, #3
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	68da      	ldr	r2, [r3, #12]
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	693a      	ldr	r2, [r7, #16]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	693a      	ldr	r2, [r7, #16]
 8000f12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	685b      	ldr	r3, [r3, #4]
 8000f18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	43db      	mvns	r3, r3
 8000f24:	693a      	ldr	r2, [r7, #16]
 8000f26:	4013      	ands	r3, r2
 8000f28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	091b      	lsrs	r3, r3, #4
 8000f30:	f003 0201 	and.w	r2, r3, #1
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	693a      	ldr	r2, [r7, #16]
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	693a      	ldr	r2, [r7, #16]
 8000f44:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	f003 0303 	and.w	r3, r3, #3
 8000f4e:	2b03      	cmp	r3, #3
 8000f50:	d118      	bne.n	8000f84 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000f58:	2201      	movs	r2, #1
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	43db      	mvns	r3, r3
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	4013      	ands	r3, r2
 8000f66:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	08db      	lsrs	r3, r3, #3
 8000f6e:	f003 0201 	and.w	r2, r3, #1
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	693a      	ldr	r2, [r7, #16]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f003 0303 	and.w	r3, r3, #3
 8000f8c:	2b03      	cmp	r3, #3
 8000f8e:	d017      	beq.n	8000fc0 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	68db      	ldr	r3, [r3, #12]
 8000f94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	005b      	lsls	r3, r3, #1
 8000f9a:	2203      	movs	r2, #3
 8000f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	689a      	ldr	r2, [r3, #8]
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	4313      	orrs	r3, r2
 8000fb8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	693a      	ldr	r2, [r7, #16]
 8000fbe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f003 0303 	and.w	r3, r3, #3
 8000fc8:	2b02      	cmp	r3, #2
 8000fca:	d123      	bne.n	8001014 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	08da      	lsrs	r2, r3, #3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3208      	adds	r2, #8
 8000fd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000fd8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	f003 0307 	and.w	r3, r3, #7
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	220f      	movs	r2, #15
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	693a      	ldr	r2, [r7, #16]
 8000fec:	4013      	ands	r3, r2
 8000fee:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	691a      	ldr	r2, [r3, #16]
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	f003 0307 	and.w	r3, r3, #7
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	693a      	ldr	r2, [r7, #16]
 8001002:	4313      	orrs	r3, r2
 8001004:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	08da      	lsrs	r2, r3, #3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	3208      	adds	r2, #8
 800100e:	6939      	ldr	r1, [r7, #16]
 8001010:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	005b      	lsls	r3, r3, #1
 800101e:	2203      	movs	r2, #3
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	43db      	mvns	r3, r3
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	4013      	ands	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f003 0203 	and.w	r2, r3, #3
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	693a      	ldr	r2, [r7, #16]
 800103e:	4313      	orrs	r3, r2
 8001040:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001050:	2b00      	cmp	r3, #0
 8001052:	f000 80ac 	beq.w	80011ae <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001056:	4b5f      	ldr	r3, [pc, #380]	; (80011d4 <HAL_GPIO_Init+0x330>)
 8001058:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800105a:	4a5e      	ldr	r2, [pc, #376]	; (80011d4 <HAL_GPIO_Init+0x330>)
 800105c:	f043 0301 	orr.w	r3, r3, #1
 8001060:	6613      	str	r3, [r2, #96]	; 0x60
 8001062:	4b5c      	ldr	r3, [pc, #368]	; (80011d4 <HAL_GPIO_Init+0x330>)
 8001064:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	60bb      	str	r3, [r7, #8]
 800106c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800106e:	4a5a      	ldr	r2, [pc, #360]	; (80011d8 <HAL_GPIO_Init+0x334>)
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	089b      	lsrs	r3, r3, #2
 8001074:	3302      	adds	r3, #2
 8001076:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800107a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	f003 0303 	and.w	r3, r3, #3
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	220f      	movs	r2, #15
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	43db      	mvns	r3, r3
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	4013      	ands	r3, r2
 8001090:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001098:	d025      	beq.n	80010e6 <HAL_GPIO_Init+0x242>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a4f      	ldr	r2, [pc, #316]	; (80011dc <HAL_GPIO_Init+0x338>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d01f      	beq.n	80010e2 <HAL_GPIO_Init+0x23e>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4a4e      	ldr	r2, [pc, #312]	; (80011e0 <HAL_GPIO_Init+0x33c>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d019      	beq.n	80010de <HAL_GPIO_Init+0x23a>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a4d      	ldr	r2, [pc, #308]	; (80011e4 <HAL_GPIO_Init+0x340>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d013      	beq.n	80010da <HAL_GPIO_Init+0x236>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a4c      	ldr	r2, [pc, #304]	; (80011e8 <HAL_GPIO_Init+0x344>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d00d      	beq.n	80010d6 <HAL_GPIO_Init+0x232>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a4b      	ldr	r2, [pc, #300]	; (80011ec <HAL_GPIO_Init+0x348>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d007      	beq.n	80010d2 <HAL_GPIO_Init+0x22e>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a4a      	ldr	r2, [pc, #296]	; (80011f0 <HAL_GPIO_Init+0x34c>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d101      	bne.n	80010ce <HAL_GPIO_Init+0x22a>
 80010ca:	2306      	movs	r3, #6
 80010cc:	e00c      	b.n	80010e8 <HAL_GPIO_Init+0x244>
 80010ce:	2307      	movs	r3, #7
 80010d0:	e00a      	b.n	80010e8 <HAL_GPIO_Init+0x244>
 80010d2:	2305      	movs	r3, #5
 80010d4:	e008      	b.n	80010e8 <HAL_GPIO_Init+0x244>
 80010d6:	2304      	movs	r3, #4
 80010d8:	e006      	b.n	80010e8 <HAL_GPIO_Init+0x244>
 80010da:	2303      	movs	r3, #3
 80010dc:	e004      	b.n	80010e8 <HAL_GPIO_Init+0x244>
 80010de:	2302      	movs	r3, #2
 80010e0:	e002      	b.n	80010e8 <HAL_GPIO_Init+0x244>
 80010e2:	2301      	movs	r3, #1
 80010e4:	e000      	b.n	80010e8 <HAL_GPIO_Init+0x244>
 80010e6:	2300      	movs	r3, #0
 80010e8:	697a      	ldr	r2, [r7, #20]
 80010ea:	f002 0203 	and.w	r2, r2, #3
 80010ee:	0092      	lsls	r2, r2, #2
 80010f0:	4093      	lsls	r3, r2
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80010f8:	4937      	ldr	r1, [pc, #220]	; (80011d8 <HAL_GPIO_Init+0x334>)
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	089b      	lsrs	r3, r3, #2
 80010fe:	3302      	adds	r3, #2
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001106:	4b3b      	ldr	r3, [pc, #236]	; (80011f4 <HAL_GPIO_Init+0x350>)
 8001108:	689b      	ldr	r3, [r3, #8]
 800110a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	43db      	mvns	r3, r3
 8001110:	693a      	ldr	r2, [r7, #16]
 8001112:	4013      	ands	r3, r2
 8001114:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d003      	beq.n	800112a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	4313      	orrs	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800112a:	4a32      	ldr	r2, [pc, #200]	; (80011f4 <HAL_GPIO_Init+0x350>)
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001130:	4b30      	ldr	r3, [pc, #192]	; (80011f4 <HAL_GPIO_Init+0x350>)
 8001132:	68db      	ldr	r3, [r3, #12]
 8001134:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	43db      	mvns	r3, r3
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	4013      	ands	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d003      	beq.n	8001154 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	4313      	orrs	r3, r2
 8001152:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001154:	4a27      	ldr	r2, [pc, #156]	; (80011f4 <HAL_GPIO_Init+0x350>)
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800115a:	4b26      	ldr	r3, [pc, #152]	; (80011f4 <HAL_GPIO_Init+0x350>)
 800115c:	685b      	ldr	r3, [r3, #4]
 800115e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	43db      	mvns	r3, r3
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	4013      	ands	r3, r2
 8001168:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	685b      	ldr	r3, [r3, #4]
 800116e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d003      	beq.n	800117e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	4313      	orrs	r3, r2
 800117c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800117e:	4a1d      	ldr	r2, [pc, #116]	; (80011f4 <HAL_GPIO_Init+0x350>)
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001184:	4b1b      	ldr	r3, [pc, #108]	; (80011f4 <HAL_GPIO_Init+0x350>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	43db      	mvns	r3, r3
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	4013      	ands	r3, r2
 8001192:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800119c:	2b00      	cmp	r3, #0
 800119e:	d003      	beq.n	80011a8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011a8:	4a12      	ldr	r2, [pc, #72]	; (80011f4 <HAL_GPIO_Init+0x350>)
 80011aa:	693b      	ldr	r3, [r7, #16]
 80011ac:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80011ae:	697b      	ldr	r3, [r7, #20]
 80011b0:	3301      	adds	r3, #1
 80011b2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	fa22 f303 	lsr.w	r3, r2, r3
 80011be:	2b00      	cmp	r3, #0
 80011c0:	f47f ae78 	bne.w	8000eb4 <HAL_GPIO_Init+0x10>
  }
}
 80011c4:	bf00      	nop
 80011c6:	bf00      	nop
 80011c8:	371c      	adds	r7, #28
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	40021000 	.word	0x40021000
 80011d8:	40010000 	.word	0x40010000
 80011dc:	48000400 	.word	0x48000400
 80011e0:	48000800 	.word	0x48000800
 80011e4:	48000c00 	.word	0x48000c00
 80011e8:	48001000 	.word	0x48001000
 80011ec:	48001400 	.word	0x48001400
 80011f0:	48001800 	.word	0x48001800
 80011f4:	40010400 	.word	0x40010400

080011f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	460b      	mov	r3, r1
 8001202:	807b      	strh	r3, [r7, #2]
 8001204:	4613      	mov	r3, r2
 8001206:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001208:	787b      	ldrb	r3, [r7, #1]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d003      	beq.n	8001216 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800120e:	887a      	ldrh	r2, [r7, #2]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001214:	e002      	b.n	800121c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001216:	887a      	ldrh	r2, [r7, #2]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800121c:	bf00      	nop
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800122c:	4b04      	ldr	r3, [pc, #16]	; (8001240 <HAL_PWREx_GetVoltageRange+0x18>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001234:	4618      	mov	r0, r3
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	40007000 	.word	0x40007000

08001244 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001252:	d130      	bne.n	80012b6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001254:	4b23      	ldr	r3, [pc, #140]	; (80012e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800125c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001260:	d038      	beq.n	80012d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001262:	4b20      	ldr	r3, [pc, #128]	; (80012e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800126a:	4a1e      	ldr	r2, [pc, #120]	; (80012e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800126c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001270:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001272:	4b1d      	ldr	r3, [pc, #116]	; (80012e8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	2232      	movs	r2, #50	; 0x32
 8001278:	fb02 f303 	mul.w	r3, r2, r3
 800127c:	4a1b      	ldr	r2, [pc, #108]	; (80012ec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800127e:	fba2 2303 	umull	r2, r3, r2, r3
 8001282:	0c9b      	lsrs	r3, r3, #18
 8001284:	3301      	adds	r3, #1
 8001286:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001288:	e002      	b.n	8001290 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	3b01      	subs	r3, #1
 800128e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001290:	4b14      	ldr	r3, [pc, #80]	; (80012e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001292:	695b      	ldr	r3, [r3, #20]
 8001294:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001298:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800129c:	d102      	bne.n	80012a4 <HAL_PWREx_ControlVoltageScaling+0x60>
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d1f2      	bne.n	800128a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012a4:	4b0f      	ldr	r3, [pc, #60]	; (80012e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012a6:	695b      	ldr	r3, [r3, #20]
 80012a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012b0:	d110      	bne.n	80012d4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e00f      	b.n	80012d6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80012b6:	4b0b      	ldr	r3, [pc, #44]	; (80012e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012c2:	d007      	beq.n	80012d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80012c4:	4b07      	ldr	r3, [pc, #28]	; (80012e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012cc:	4a05      	ldr	r2, [pc, #20]	; (80012e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012d2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3714      	adds	r7, #20
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	40007000 	.word	0x40007000
 80012e8:	20000000 	.word	0x20000000
 80012ec:	431bde83 	.word	0x431bde83

080012f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b088      	sub	sp, #32
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d101      	bne.n	8001302 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e3d8      	b.n	8001ab4 <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001302:	4b97      	ldr	r3, [pc, #604]	; (8001560 <HAL_RCC_OscConfig+0x270>)
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	f003 030c 	and.w	r3, r3, #12
 800130a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800130c:	4b94      	ldr	r3, [pc, #592]	; (8001560 <HAL_RCC_OscConfig+0x270>)
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	f003 0303 	and.w	r3, r3, #3
 8001314:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0310 	and.w	r3, r3, #16
 800131e:	2b00      	cmp	r3, #0
 8001320:	f000 80e4 	beq.w	80014ec <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d007      	beq.n	800133a <HAL_RCC_OscConfig+0x4a>
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	2b0c      	cmp	r3, #12
 800132e:	f040 808b 	bne.w	8001448 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	2b01      	cmp	r3, #1
 8001336:	f040 8087 	bne.w	8001448 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800133a:	4b89      	ldr	r3, [pc, #548]	; (8001560 <HAL_RCC_OscConfig+0x270>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0302 	and.w	r3, r3, #2
 8001342:	2b00      	cmp	r3, #0
 8001344:	d005      	beq.n	8001352 <HAL_RCC_OscConfig+0x62>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	699b      	ldr	r3, [r3, #24]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d101      	bne.n	8001352 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e3b0      	b.n	8001ab4 <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6a1a      	ldr	r2, [r3, #32]
 8001356:	4b82      	ldr	r3, [pc, #520]	; (8001560 <HAL_RCC_OscConfig+0x270>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0308 	and.w	r3, r3, #8
 800135e:	2b00      	cmp	r3, #0
 8001360:	d004      	beq.n	800136c <HAL_RCC_OscConfig+0x7c>
 8001362:	4b7f      	ldr	r3, [pc, #508]	; (8001560 <HAL_RCC_OscConfig+0x270>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800136a:	e005      	b.n	8001378 <HAL_RCC_OscConfig+0x88>
 800136c:	4b7c      	ldr	r3, [pc, #496]	; (8001560 <HAL_RCC_OscConfig+0x270>)
 800136e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001372:	091b      	lsrs	r3, r3, #4
 8001374:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001378:	4293      	cmp	r3, r2
 800137a:	d223      	bcs.n	80013c4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6a1b      	ldr	r3, [r3, #32]
 8001380:	4618      	mov	r0, r3
 8001382:	f000 fd43 	bl	8001e0c <RCC_SetFlashLatencyFromMSIRange>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d001      	beq.n	8001390 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	e391      	b.n	8001ab4 <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001390:	4b73      	ldr	r3, [pc, #460]	; (8001560 <HAL_RCC_OscConfig+0x270>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	4a72      	ldr	r2, [pc, #456]	; (8001560 <HAL_RCC_OscConfig+0x270>)
 8001396:	f043 0308 	orr.w	r3, r3, #8
 800139a:	6013      	str	r3, [r2, #0]
 800139c:	4b70      	ldr	r3, [pc, #448]	; (8001560 <HAL_RCC_OscConfig+0x270>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	6a1b      	ldr	r3, [r3, #32]
 80013a8:	496d      	ldr	r1, [pc, #436]	; (8001560 <HAL_RCC_OscConfig+0x270>)
 80013aa:	4313      	orrs	r3, r2
 80013ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013ae:	4b6c      	ldr	r3, [pc, #432]	; (8001560 <HAL_RCC_OscConfig+0x270>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	69db      	ldr	r3, [r3, #28]
 80013ba:	021b      	lsls	r3, r3, #8
 80013bc:	4968      	ldr	r1, [pc, #416]	; (8001560 <HAL_RCC_OscConfig+0x270>)
 80013be:	4313      	orrs	r3, r2
 80013c0:	604b      	str	r3, [r1, #4]
 80013c2:	e025      	b.n	8001410 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013c4:	4b66      	ldr	r3, [pc, #408]	; (8001560 <HAL_RCC_OscConfig+0x270>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a65      	ldr	r2, [pc, #404]	; (8001560 <HAL_RCC_OscConfig+0x270>)
 80013ca:	f043 0308 	orr.w	r3, r3, #8
 80013ce:	6013      	str	r3, [r2, #0]
 80013d0:	4b63      	ldr	r3, [pc, #396]	; (8001560 <HAL_RCC_OscConfig+0x270>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6a1b      	ldr	r3, [r3, #32]
 80013dc:	4960      	ldr	r1, [pc, #384]	; (8001560 <HAL_RCC_OscConfig+0x270>)
 80013de:	4313      	orrs	r3, r2
 80013e0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013e2:	4b5f      	ldr	r3, [pc, #380]	; (8001560 <HAL_RCC_OscConfig+0x270>)
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	69db      	ldr	r3, [r3, #28]
 80013ee:	021b      	lsls	r3, r3, #8
 80013f0:	495b      	ldr	r1, [pc, #364]	; (8001560 <HAL_RCC_OscConfig+0x270>)
 80013f2:	4313      	orrs	r3, r2
 80013f4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013f6:	69bb      	ldr	r3, [r7, #24]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d109      	bne.n	8001410 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6a1b      	ldr	r3, [r3, #32]
 8001400:	4618      	mov	r0, r3
 8001402:	f000 fd03 	bl	8001e0c <RCC_SetFlashLatencyFromMSIRange>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e351      	b.n	8001ab4 <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001410:	f000 fc38 	bl	8001c84 <HAL_RCC_GetSysClockFreq>
 8001414:	4602      	mov	r2, r0
 8001416:	4b52      	ldr	r3, [pc, #328]	; (8001560 <HAL_RCC_OscConfig+0x270>)
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	091b      	lsrs	r3, r3, #4
 800141c:	f003 030f 	and.w	r3, r3, #15
 8001420:	4950      	ldr	r1, [pc, #320]	; (8001564 <HAL_RCC_OscConfig+0x274>)
 8001422:	5ccb      	ldrb	r3, [r1, r3]
 8001424:	f003 031f 	and.w	r3, r3, #31
 8001428:	fa22 f303 	lsr.w	r3, r2, r3
 800142c:	4a4e      	ldr	r2, [pc, #312]	; (8001568 <HAL_RCC_OscConfig+0x278>)
 800142e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001430:	4b4e      	ldr	r3, [pc, #312]	; (800156c <HAL_RCC_OscConfig+0x27c>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff fb49 	bl	8000acc <HAL_InitTick>
 800143a:	4603      	mov	r3, r0
 800143c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800143e:	7bfb      	ldrb	r3, [r7, #15]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d052      	beq.n	80014ea <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001444:	7bfb      	ldrb	r3, [r7, #15]
 8001446:	e335      	b.n	8001ab4 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d032      	beq.n	80014b6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001450:	4b43      	ldr	r3, [pc, #268]	; (8001560 <HAL_RCC_OscConfig+0x270>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a42      	ldr	r2, [pc, #264]	; (8001560 <HAL_RCC_OscConfig+0x270>)
 8001456:	f043 0301 	orr.w	r3, r3, #1
 800145a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800145c:	f7ff fb86 	bl	8000b6c <HAL_GetTick>
 8001460:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001462:	e008      	b.n	8001476 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001464:	f7ff fb82 	bl	8000b6c <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b02      	cmp	r3, #2
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e31e      	b.n	8001ab4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001476:	4b3a      	ldr	r3, [pc, #232]	; (8001560 <HAL_RCC_OscConfig+0x270>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d0f0      	beq.n	8001464 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001482:	4b37      	ldr	r3, [pc, #220]	; (8001560 <HAL_RCC_OscConfig+0x270>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4a36      	ldr	r2, [pc, #216]	; (8001560 <HAL_RCC_OscConfig+0x270>)
 8001488:	f043 0308 	orr.w	r3, r3, #8
 800148c:	6013      	str	r3, [r2, #0]
 800148e:	4b34      	ldr	r3, [pc, #208]	; (8001560 <HAL_RCC_OscConfig+0x270>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a1b      	ldr	r3, [r3, #32]
 800149a:	4931      	ldr	r1, [pc, #196]	; (8001560 <HAL_RCC_OscConfig+0x270>)
 800149c:	4313      	orrs	r3, r2
 800149e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014a0:	4b2f      	ldr	r3, [pc, #188]	; (8001560 <HAL_RCC_OscConfig+0x270>)
 80014a2:	685b      	ldr	r3, [r3, #4]
 80014a4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	69db      	ldr	r3, [r3, #28]
 80014ac:	021b      	lsls	r3, r3, #8
 80014ae:	492c      	ldr	r1, [pc, #176]	; (8001560 <HAL_RCC_OscConfig+0x270>)
 80014b0:	4313      	orrs	r3, r2
 80014b2:	604b      	str	r3, [r1, #4]
 80014b4:	e01a      	b.n	80014ec <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80014b6:	4b2a      	ldr	r3, [pc, #168]	; (8001560 <HAL_RCC_OscConfig+0x270>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a29      	ldr	r2, [pc, #164]	; (8001560 <HAL_RCC_OscConfig+0x270>)
 80014bc:	f023 0301 	bic.w	r3, r3, #1
 80014c0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014c2:	f7ff fb53 	bl	8000b6c <HAL_GetTick>
 80014c6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014c8:	e008      	b.n	80014dc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014ca:	f7ff fb4f 	bl	8000b6c <HAL_GetTick>
 80014ce:	4602      	mov	r2, r0
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d901      	bls.n	80014dc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80014d8:	2303      	movs	r3, #3
 80014da:	e2eb      	b.n	8001ab4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80014dc:	4b20      	ldr	r3, [pc, #128]	; (8001560 <HAL_RCC_OscConfig+0x270>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f003 0302 	and.w	r3, r3, #2
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d1f0      	bne.n	80014ca <HAL_RCC_OscConfig+0x1da>
 80014e8:	e000      	b.n	80014ec <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014ea:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0301 	and.w	r3, r3, #1
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d074      	beq.n	80015e2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	2b08      	cmp	r3, #8
 80014fc:	d005      	beq.n	800150a <HAL_RCC_OscConfig+0x21a>
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	2b0c      	cmp	r3, #12
 8001502:	d10e      	bne.n	8001522 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	2b03      	cmp	r3, #3
 8001508:	d10b      	bne.n	8001522 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800150a:	4b15      	ldr	r3, [pc, #84]	; (8001560 <HAL_RCC_OscConfig+0x270>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d064      	beq.n	80015e0 <HAL_RCC_OscConfig+0x2f0>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d160      	bne.n	80015e0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e2c8      	b.n	8001ab4 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685b      	ldr	r3, [r3, #4]
 8001526:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800152a:	d106      	bne.n	800153a <HAL_RCC_OscConfig+0x24a>
 800152c:	4b0c      	ldr	r3, [pc, #48]	; (8001560 <HAL_RCC_OscConfig+0x270>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a0b      	ldr	r2, [pc, #44]	; (8001560 <HAL_RCC_OscConfig+0x270>)
 8001532:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001536:	6013      	str	r3, [r2, #0]
 8001538:	e026      	b.n	8001588 <HAL_RCC_OscConfig+0x298>
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001542:	d115      	bne.n	8001570 <HAL_RCC_OscConfig+0x280>
 8001544:	4b06      	ldr	r3, [pc, #24]	; (8001560 <HAL_RCC_OscConfig+0x270>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a05      	ldr	r2, [pc, #20]	; (8001560 <HAL_RCC_OscConfig+0x270>)
 800154a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800154e:	6013      	str	r3, [r2, #0]
 8001550:	4b03      	ldr	r3, [pc, #12]	; (8001560 <HAL_RCC_OscConfig+0x270>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a02      	ldr	r2, [pc, #8]	; (8001560 <HAL_RCC_OscConfig+0x270>)
 8001556:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800155a:	6013      	str	r3, [r2, #0]
 800155c:	e014      	b.n	8001588 <HAL_RCC_OscConfig+0x298>
 800155e:	bf00      	nop
 8001560:	40021000 	.word	0x40021000
 8001564:	080049e4 	.word	0x080049e4
 8001568:	20000000 	.word	0x20000000
 800156c:	20000004 	.word	0x20000004
 8001570:	4ba0      	ldr	r3, [pc, #640]	; (80017f4 <HAL_RCC_OscConfig+0x504>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a9f      	ldr	r2, [pc, #636]	; (80017f4 <HAL_RCC_OscConfig+0x504>)
 8001576:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800157a:	6013      	str	r3, [r2, #0]
 800157c:	4b9d      	ldr	r3, [pc, #628]	; (80017f4 <HAL_RCC_OscConfig+0x504>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a9c      	ldr	r2, [pc, #624]	; (80017f4 <HAL_RCC_OscConfig+0x504>)
 8001582:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001586:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d013      	beq.n	80015b8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001590:	f7ff faec 	bl	8000b6c <HAL_GetTick>
 8001594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001596:	e008      	b.n	80015aa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001598:	f7ff fae8 	bl	8000b6c <HAL_GetTick>
 800159c:	4602      	mov	r2, r0
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	2b64      	cmp	r3, #100	; 0x64
 80015a4:	d901      	bls.n	80015aa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80015a6:	2303      	movs	r3, #3
 80015a8:	e284      	b.n	8001ab4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015aa:	4b92      	ldr	r3, [pc, #584]	; (80017f4 <HAL_RCC_OscConfig+0x504>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d0f0      	beq.n	8001598 <HAL_RCC_OscConfig+0x2a8>
 80015b6:	e014      	b.n	80015e2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015b8:	f7ff fad8 	bl	8000b6c <HAL_GetTick>
 80015bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015be:	e008      	b.n	80015d2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015c0:	f7ff fad4 	bl	8000b6c <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b64      	cmp	r3, #100	; 0x64
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e270      	b.n	8001ab4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80015d2:	4b88      	ldr	r3, [pc, #544]	; (80017f4 <HAL_RCC_OscConfig+0x504>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d1f0      	bne.n	80015c0 <HAL_RCC_OscConfig+0x2d0>
 80015de:	e000      	b.n	80015e2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d060      	beq.n	80016b0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	2b04      	cmp	r3, #4
 80015f2:	d005      	beq.n	8001600 <HAL_RCC_OscConfig+0x310>
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	2b0c      	cmp	r3, #12
 80015f8:	d119      	bne.n	800162e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d116      	bne.n	800162e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001600:	4b7c      	ldr	r3, [pc, #496]	; (80017f4 <HAL_RCC_OscConfig+0x504>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001608:	2b00      	cmp	r3, #0
 800160a:	d005      	beq.n	8001618 <HAL_RCC_OscConfig+0x328>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d101      	bne.n	8001618 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e24d      	b.n	8001ab4 <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001618:	4b76      	ldr	r3, [pc, #472]	; (80017f4 <HAL_RCC_OscConfig+0x504>)
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	691b      	ldr	r3, [r3, #16]
 8001624:	061b      	lsls	r3, r3, #24
 8001626:	4973      	ldr	r1, [pc, #460]	; (80017f4 <HAL_RCC_OscConfig+0x504>)
 8001628:	4313      	orrs	r3, r2
 800162a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800162c:	e040      	b.n	80016b0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	68db      	ldr	r3, [r3, #12]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d023      	beq.n	800167e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001636:	4b6f      	ldr	r3, [pc, #444]	; (80017f4 <HAL_RCC_OscConfig+0x504>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a6e      	ldr	r2, [pc, #440]	; (80017f4 <HAL_RCC_OscConfig+0x504>)
 800163c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001640:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001642:	f7ff fa93 	bl	8000b6c <HAL_GetTick>
 8001646:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001648:	e008      	b.n	800165c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800164a:	f7ff fa8f 	bl	8000b6c <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	2b02      	cmp	r3, #2
 8001656:	d901      	bls.n	800165c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e22b      	b.n	8001ab4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800165c:	4b65      	ldr	r3, [pc, #404]	; (80017f4 <HAL_RCC_OscConfig+0x504>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001664:	2b00      	cmp	r3, #0
 8001666:	d0f0      	beq.n	800164a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001668:	4b62      	ldr	r3, [pc, #392]	; (80017f4 <HAL_RCC_OscConfig+0x504>)
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	691b      	ldr	r3, [r3, #16]
 8001674:	061b      	lsls	r3, r3, #24
 8001676:	495f      	ldr	r1, [pc, #380]	; (80017f4 <HAL_RCC_OscConfig+0x504>)
 8001678:	4313      	orrs	r3, r2
 800167a:	604b      	str	r3, [r1, #4]
 800167c:	e018      	b.n	80016b0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800167e:	4b5d      	ldr	r3, [pc, #372]	; (80017f4 <HAL_RCC_OscConfig+0x504>)
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	4a5c      	ldr	r2, [pc, #368]	; (80017f4 <HAL_RCC_OscConfig+0x504>)
 8001684:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001688:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800168a:	f7ff fa6f 	bl	8000b6c <HAL_GetTick>
 800168e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001690:	e008      	b.n	80016a4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001692:	f7ff fa6b 	bl	8000b6c <HAL_GetTick>
 8001696:	4602      	mov	r2, r0
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	1ad3      	subs	r3, r2, r3
 800169c:	2b02      	cmp	r3, #2
 800169e:	d901      	bls.n	80016a4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80016a0:	2303      	movs	r3, #3
 80016a2:	e207      	b.n	8001ab4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016a4:	4b53      	ldr	r3, [pc, #332]	; (80017f4 <HAL_RCC_OscConfig+0x504>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d1f0      	bne.n	8001692 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0308 	and.w	r3, r3, #8
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d03c      	beq.n	8001736 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	695b      	ldr	r3, [r3, #20]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d01c      	beq.n	80016fe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016c4:	4b4b      	ldr	r3, [pc, #300]	; (80017f4 <HAL_RCC_OscConfig+0x504>)
 80016c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016ca:	4a4a      	ldr	r2, [pc, #296]	; (80017f4 <HAL_RCC_OscConfig+0x504>)
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d4:	f7ff fa4a 	bl	8000b6c <HAL_GetTick>
 80016d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016da:	e008      	b.n	80016ee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016dc:	f7ff fa46 	bl	8000b6c <HAL_GetTick>
 80016e0:	4602      	mov	r2, r0
 80016e2:	693b      	ldr	r3, [r7, #16]
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	2b02      	cmp	r3, #2
 80016e8:	d901      	bls.n	80016ee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80016ea:	2303      	movs	r3, #3
 80016ec:	e1e2      	b.n	8001ab4 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80016ee:	4b41      	ldr	r3, [pc, #260]	; (80017f4 <HAL_RCC_OscConfig+0x504>)
 80016f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016f4:	f003 0302 	and.w	r3, r3, #2
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d0ef      	beq.n	80016dc <HAL_RCC_OscConfig+0x3ec>
 80016fc:	e01b      	b.n	8001736 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016fe:	4b3d      	ldr	r3, [pc, #244]	; (80017f4 <HAL_RCC_OscConfig+0x504>)
 8001700:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001704:	4a3b      	ldr	r2, [pc, #236]	; (80017f4 <HAL_RCC_OscConfig+0x504>)
 8001706:	f023 0301 	bic.w	r3, r3, #1
 800170a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800170e:	f7ff fa2d 	bl	8000b6c <HAL_GetTick>
 8001712:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001714:	e008      	b.n	8001728 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001716:	f7ff fa29 	bl	8000b6c <HAL_GetTick>
 800171a:	4602      	mov	r2, r0
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	2b02      	cmp	r3, #2
 8001722:	d901      	bls.n	8001728 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001724:	2303      	movs	r3, #3
 8001726:	e1c5      	b.n	8001ab4 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001728:	4b32      	ldr	r3, [pc, #200]	; (80017f4 <HAL_RCC_OscConfig+0x504>)
 800172a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d1ef      	bne.n	8001716 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0304 	and.w	r3, r3, #4
 800173e:	2b00      	cmp	r3, #0
 8001740:	f000 80a6 	beq.w	8001890 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001744:	2300      	movs	r3, #0
 8001746:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001748:	4b2a      	ldr	r3, [pc, #168]	; (80017f4 <HAL_RCC_OscConfig+0x504>)
 800174a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800174c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d10d      	bne.n	8001770 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001754:	4b27      	ldr	r3, [pc, #156]	; (80017f4 <HAL_RCC_OscConfig+0x504>)
 8001756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001758:	4a26      	ldr	r2, [pc, #152]	; (80017f4 <HAL_RCC_OscConfig+0x504>)
 800175a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800175e:	6593      	str	r3, [r2, #88]	; 0x58
 8001760:	4b24      	ldr	r3, [pc, #144]	; (80017f4 <HAL_RCC_OscConfig+0x504>)
 8001762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001764:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001768:	60bb      	str	r3, [r7, #8]
 800176a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800176c:	2301      	movs	r3, #1
 800176e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001770:	4b21      	ldr	r3, [pc, #132]	; (80017f8 <HAL_RCC_OscConfig+0x508>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001778:	2b00      	cmp	r3, #0
 800177a:	d118      	bne.n	80017ae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800177c:	4b1e      	ldr	r3, [pc, #120]	; (80017f8 <HAL_RCC_OscConfig+0x508>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a1d      	ldr	r2, [pc, #116]	; (80017f8 <HAL_RCC_OscConfig+0x508>)
 8001782:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001786:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001788:	f7ff f9f0 	bl	8000b6c <HAL_GetTick>
 800178c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800178e:	e008      	b.n	80017a2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001790:	f7ff f9ec 	bl	8000b6c <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b02      	cmp	r3, #2
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e188      	b.n	8001ab4 <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017a2:	4b15      	ldr	r3, [pc, #84]	; (80017f8 <HAL_RCC_OscConfig+0x508>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d0f0      	beq.n	8001790 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	689b      	ldr	r3, [r3, #8]
 80017b2:	2b01      	cmp	r3, #1
 80017b4:	d108      	bne.n	80017c8 <HAL_RCC_OscConfig+0x4d8>
 80017b6:	4b0f      	ldr	r3, [pc, #60]	; (80017f4 <HAL_RCC_OscConfig+0x504>)
 80017b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017bc:	4a0d      	ldr	r2, [pc, #52]	; (80017f4 <HAL_RCC_OscConfig+0x504>)
 80017be:	f043 0301 	orr.w	r3, r3, #1
 80017c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017c6:	e029      	b.n	800181c <HAL_RCC_OscConfig+0x52c>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	2b05      	cmp	r3, #5
 80017ce:	d115      	bne.n	80017fc <HAL_RCC_OscConfig+0x50c>
 80017d0:	4b08      	ldr	r3, [pc, #32]	; (80017f4 <HAL_RCC_OscConfig+0x504>)
 80017d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017d6:	4a07      	ldr	r2, [pc, #28]	; (80017f4 <HAL_RCC_OscConfig+0x504>)
 80017d8:	f043 0304 	orr.w	r3, r3, #4
 80017dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017e0:	4b04      	ldr	r3, [pc, #16]	; (80017f4 <HAL_RCC_OscConfig+0x504>)
 80017e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017e6:	4a03      	ldr	r2, [pc, #12]	; (80017f4 <HAL_RCC_OscConfig+0x504>)
 80017e8:	f043 0301 	orr.w	r3, r3, #1
 80017ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017f0:	e014      	b.n	800181c <HAL_RCC_OscConfig+0x52c>
 80017f2:	bf00      	nop
 80017f4:	40021000 	.word	0x40021000
 80017f8:	40007000 	.word	0x40007000
 80017fc:	4b91      	ldr	r3, [pc, #580]	; (8001a44 <HAL_RCC_OscConfig+0x754>)
 80017fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001802:	4a90      	ldr	r2, [pc, #576]	; (8001a44 <HAL_RCC_OscConfig+0x754>)
 8001804:	f023 0301 	bic.w	r3, r3, #1
 8001808:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800180c:	4b8d      	ldr	r3, [pc, #564]	; (8001a44 <HAL_RCC_OscConfig+0x754>)
 800180e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001812:	4a8c      	ldr	r2, [pc, #560]	; (8001a44 <HAL_RCC_OscConfig+0x754>)
 8001814:	f023 0304 	bic.w	r3, r3, #4
 8001818:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d016      	beq.n	8001852 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001824:	f7ff f9a2 	bl	8000b6c <HAL_GetTick>
 8001828:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800182a:	e00a      	b.n	8001842 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800182c:	f7ff f99e 	bl	8000b6c <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	f241 3288 	movw	r2, #5000	; 0x1388
 800183a:	4293      	cmp	r3, r2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e138      	b.n	8001ab4 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001842:	4b80      	ldr	r3, [pc, #512]	; (8001a44 <HAL_RCC_OscConfig+0x754>)
 8001844:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001848:	f003 0302 	and.w	r3, r3, #2
 800184c:	2b00      	cmp	r3, #0
 800184e:	d0ed      	beq.n	800182c <HAL_RCC_OscConfig+0x53c>
 8001850:	e015      	b.n	800187e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001852:	f7ff f98b 	bl	8000b6c <HAL_GetTick>
 8001856:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001858:	e00a      	b.n	8001870 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800185a:	f7ff f987 	bl	8000b6c <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	f241 3288 	movw	r2, #5000	; 0x1388
 8001868:	4293      	cmp	r3, r2
 800186a:	d901      	bls.n	8001870 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	e121      	b.n	8001ab4 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001870:	4b74      	ldr	r3, [pc, #464]	; (8001a44 <HAL_RCC_OscConfig+0x754>)
 8001872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d1ed      	bne.n	800185a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800187e:	7ffb      	ldrb	r3, [r7, #31]
 8001880:	2b01      	cmp	r3, #1
 8001882:	d105      	bne.n	8001890 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001884:	4b6f      	ldr	r3, [pc, #444]	; (8001a44 <HAL_RCC_OscConfig+0x754>)
 8001886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001888:	4a6e      	ldr	r2, [pc, #440]	; (8001a44 <HAL_RCC_OscConfig+0x754>)
 800188a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800188e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001894:	2b00      	cmp	r3, #0
 8001896:	f000 810c 	beq.w	8001ab2 <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800189e:	2b02      	cmp	r3, #2
 80018a0:	f040 80d4 	bne.w	8001a4c <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80018a4:	4b67      	ldr	r3, [pc, #412]	; (8001a44 <HAL_RCC_OscConfig+0x754>)
 80018a6:	68db      	ldr	r3, [r3, #12]
 80018a8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	f003 0203 	and.w	r2, r3, #3
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d130      	bne.n	800191a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	3b01      	subs	r3, #1
 80018c4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d127      	bne.n	800191a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018d4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d11f      	bne.n	800191a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80018e4:	2a07      	cmp	r2, #7
 80018e6:	bf14      	ite	ne
 80018e8:	2201      	movne	r2, #1
 80018ea:	2200      	moveq	r2, #0
 80018ec:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d113      	bne.n	800191a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018fc:	085b      	lsrs	r3, r3, #1
 80018fe:	3b01      	subs	r3, #1
 8001900:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001902:	429a      	cmp	r2, r3
 8001904:	d109      	bne.n	800191a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001910:	085b      	lsrs	r3, r3, #1
 8001912:	3b01      	subs	r3, #1
 8001914:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001916:	429a      	cmp	r2, r3
 8001918:	d06e      	beq.n	80019f8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800191a:	69bb      	ldr	r3, [r7, #24]
 800191c:	2b0c      	cmp	r3, #12
 800191e:	d069      	beq.n	80019f4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001920:	4b48      	ldr	r3, [pc, #288]	; (8001a44 <HAL_RCC_OscConfig+0x754>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001928:	2b00      	cmp	r3, #0
 800192a:	d105      	bne.n	8001938 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800192c:	4b45      	ldr	r3, [pc, #276]	; (8001a44 <HAL_RCC_OscConfig+0x754>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e0bb      	b.n	8001ab4 <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800193c:	4b41      	ldr	r3, [pc, #260]	; (8001a44 <HAL_RCC_OscConfig+0x754>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a40      	ldr	r2, [pc, #256]	; (8001a44 <HAL_RCC_OscConfig+0x754>)
 8001942:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001946:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001948:	f7ff f910 	bl	8000b6c <HAL_GetTick>
 800194c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800194e:	e008      	b.n	8001962 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001950:	f7ff f90c 	bl	8000b6c <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	693b      	ldr	r3, [r7, #16]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	2b02      	cmp	r3, #2
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e0a8      	b.n	8001ab4 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001962:	4b38      	ldr	r3, [pc, #224]	; (8001a44 <HAL_RCC_OscConfig+0x754>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d1f0      	bne.n	8001950 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800196e:	4b35      	ldr	r3, [pc, #212]	; (8001a44 <HAL_RCC_OscConfig+0x754>)
 8001970:	68da      	ldr	r2, [r3, #12]
 8001972:	4b35      	ldr	r3, [pc, #212]	; (8001a48 <HAL_RCC_OscConfig+0x758>)
 8001974:	4013      	ands	r3, r2
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800197e:	3a01      	subs	r2, #1
 8001980:	0112      	lsls	r2, r2, #4
 8001982:	4311      	orrs	r1, r2
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001988:	0212      	lsls	r2, r2, #8
 800198a:	4311      	orrs	r1, r2
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001990:	0852      	lsrs	r2, r2, #1
 8001992:	3a01      	subs	r2, #1
 8001994:	0552      	lsls	r2, r2, #21
 8001996:	4311      	orrs	r1, r2
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800199c:	0852      	lsrs	r2, r2, #1
 800199e:	3a01      	subs	r2, #1
 80019a0:	0652      	lsls	r2, r2, #25
 80019a2:	4311      	orrs	r1, r2
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80019a8:	0912      	lsrs	r2, r2, #4
 80019aa:	0452      	lsls	r2, r2, #17
 80019ac:	430a      	orrs	r2, r1
 80019ae:	4925      	ldr	r1, [pc, #148]	; (8001a44 <HAL_RCC_OscConfig+0x754>)
 80019b0:	4313      	orrs	r3, r2
 80019b2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80019b4:	4b23      	ldr	r3, [pc, #140]	; (8001a44 <HAL_RCC_OscConfig+0x754>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a22      	ldr	r2, [pc, #136]	; (8001a44 <HAL_RCC_OscConfig+0x754>)
 80019ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019be:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019c0:	4b20      	ldr	r3, [pc, #128]	; (8001a44 <HAL_RCC_OscConfig+0x754>)
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	4a1f      	ldr	r2, [pc, #124]	; (8001a44 <HAL_RCC_OscConfig+0x754>)
 80019c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019ca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019cc:	f7ff f8ce 	bl	8000b6c <HAL_GetTick>
 80019d0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019d2:	e008      	b.n	80019e6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019d4:	f7ff f8ca 	bl	8000b6c <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	1ad3      	subs	r3, r2, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e066      	b.n	8001ab4 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019e6:	4b17      	ldr	r3, [pc, #92]	; (8001a44 <HAL_RCC_OscConfig+0x754>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d0f0      	beq.n	80019d4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019f2:	e05e      	b.n	8001ab2 <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e05d      	b.n	8001ab4 <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019f8:	4b12      	ldr	r3, [pc, #72]	; (8001a44 <HAL_RCC_OscConfig+0x754>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d156      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a04:	4b0f      	ldr	r3, [pc, #60]	; (8001a44 <HAL_RCC_OscConfig+0x754>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a0e      	ldr	r2, [pc, #56]	; (8001a44 <HAL_RCC_OscConfig+0x754>)
 8001a0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a0e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a10:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <HAL_RCC_OscConfig+0x754>)
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	4a0b      	ldr	r2, [pc, #44]	; (8001a44 <HAL_RCC_OscConfig+0x754>)
 8001a16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a1a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a1c:	f7ff f8a6 	bl	8000b6c <HAL_GetTick>
 8001a20:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a22:	e008      	b.n	8001a36 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a24:	f7ff f8a2 	bl	8000b6c <HAL_GetTick>
 8001a28:	4602      	mov	r2, r0
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	1ad3      	subs	r3, r2, r3
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d901      	bls.n	8001a36 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001a32:	2303      	movs	r3, #3
 8001a34:	e03e      	b.n	8001ab4 <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a36:	4b03      	ldr	r3, [pc, #12]	; (8001a44 <HAL_RCC_OscConfig+0x754>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d0f0      	beq.n	8001a24 <HAL_RCC_OscConfig+0x734>
 8001a42:	e036      	b.n	8001ab2 <HAL_RCC_OscConfig+0x7c2>
 8001a44:	40021000 	.word	0x40021000
 8001a48:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	2b0c      	cmp	r3, #12
 8001a50:	d02d      	beq.n	8001aae <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a52:	4b1a      	ldr	r3, [pc, #104]	; (8001abc <HAL_RCC_OscConfig+0x7cc>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a19      	ldr	r2, [pc, #100]	; (8001abc <HAL_RCC_OscConfig+0x7cc>)
 8001a58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a5c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001a5e:	4b17      	ldr	r3, [pc, #92]	; (8001abc <HAL_RCC_OscConfig+0x7cc>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d105      	bne.n	8001a76 <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001a6a:	4b14      	ldr	r3, [pc, #80]	; (8001abc <HAL_RCC_OscConfig+0x7cc>)
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	4a13      	ldr	r2, [pc, #76]	; (8001abc <HAL_RCC_OscConfig+0x7cc>)
 8001a70:	f023 0303 	bic.w	r3, r3, #3
 8001a74:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001a76:	4b11      	ldr	r3, [pc, #68]	; (8001abc <HAL_RCC_OscConfig+0x7cc>)
 8001a78:	68db      	ldr	r3, [r3, #12]
 8001a7a:	4a10      	ldr	r2, [pc, #64]	; (8001abc <HAL_RCC_OscConfig+0x7cc>)
 8001a7c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001a80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a84:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a86:	f7ff f871 	bl	8000b6c <HAL_GetTick>
 8001a8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a8c:	e008      	b.n	8001aa0 <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a8e:	f7ff f86d 	bl	8000b6c <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d901      	bls.n	8001aa0 <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e009      	b.n	8001ab4 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001aa0:	4b06      	ldr	r3, [pc, #24]	; (8001abc <HAL_RCC_OscConfig+0x7cc>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d1f0      	bne.n	8001a8e <HAL_RCC_OscConfig+0x79e>
 8001aac:	e001      	b.n	8001ab2 <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e000      	b.n	8001ab4 <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 8001ab2:	2300      	movs	r3, #0
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3720      	adds	r7, #32
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40021000 	.word	0x40021000

08001ac0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d101      	bne.n	8001ad4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e0c8      	b.n	8001c66 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ad4:	4b66      	ldr	r3, [pc, #408]	; (8001c70 <HAL_RCC_ClockConfig+0x1b0>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0307 	and.w	r3, r3, #7
 8001adc:	683a      	ldr	r2, [r7, #0]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d910      	bls.n	8001b04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ae2:	4b63      	ldr	r3, [pc, #396]	; (8001c70 <HAL_RCC_ClockConfig+0x1b0>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f023 0207 	bic.w	r2, r3, #7
 8001aea:	4961      	ldr	r1, [pc, #388]	; (8001c70 <HAL_RCC_ClockConfig+0x1b0>)
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	4313      	orrs	r3, r2
 8001af0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001af2:	4b5f      	ldr	r3, [pc, #380]	; (8001c70 <HAL_RCC_ClockConfig+0x1b0>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 0307 	and.w	r3, r3, #7
 8001afa:	683a      	ldr	r2, [r7, #0]
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d001      	beq.n	8001b04 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e0b0      	b.n	8001c66 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f003 0301 	and.w	r3, r3, #1
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d04c      	beq.n	8001baa <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	2b03      	cmp	r3, #3
 8001b16:	d107      	bne.n	8001b28 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b18:	4b56      	ldr	r3, [pc, #344]	; (8001c74 <HAL_RCC_ClockConfig+0x1b4>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d121      	bne.n	8001b68 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e09e      	b.n	8001c66 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d107      	bne.n	8001b40 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b30:	4b50      	ldr	r3, [pc, #320]	; (8001c74 <HAL_RCC_ClockConfig+0x1b4>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d115      	bne.n	8001b68 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e092      	b.n	8001c66 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d107      	bne.n	8001b58 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b48:	4b4a      	ldr	r3, [pc, #296]	; (8001c74 <HAL_RCC_ClockConfig+0x1b4>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0302 	and.w	r3, r3, #2
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d109      	bne.n	8001b68 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e086      	b.n	8001c66 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b58:	4b46      	ldr	r3, [pc, #280]	; (8001c74 <HAL_RCC_ClockConfig+0x1b4>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d101      	bne.n	8001b68 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001b64:	2301      	movs	r3, #1
 8001b66:	e07e      	b.n	8001c66 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b68:	4b42      	ldr	r3, [pc, #264]	; (8001c74 <HAL_RCC_ClockConfig+0x1b4>)
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	f023 0203 	bic.w	r2, r3, #3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	493f      	ldr	r1, [pc, #252]	; (8001c74 <HAL_RCC_ClockConfig+0x1b4>)
 8001b76:	4313      	orrs	r3, r2
 8001b78:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b7a:	f7fe fff7 	bl	8000b6c <HAL_GetTick>
 8001b7e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b80:	e00a      	b.n	8001b98 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b82:	f7fe fff3 	bl	8000b6c <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d901      	bls.n	8001b98 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001b94:	2303      	movs	r3, #3
 8001b96:	e066      	b.n	8001c66 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b98:	4b36      	ldr	r3, [pc, #216]	; (8001c74 <HAL_RCC_ClockConfig+0x1b4>)
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	f003 020c 	and.w	r2, r3, #12
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d1eb      	bne.n	8001b82 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d008      	beq.n	8001bc8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bb6:	4b2f      	ldr	r3, [pc, #188]	; (8001c74 <HAL_RCC_ClockConfig+0x1b4>)
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	492c      	ldr	r1, [pc, #176]	; (8001c74 <HAL_RCC_ClockConfig+0x1b4>)
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001bc8:	4b29      	ldr	r3, [pc, #164]	; (8001c70 <HAL_RCC_ClockConfig+0x1b0>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0307 	and.w	r3, r3, #7
 8001bd0:	683a      	ldr	r2, [r7, #0]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	d210      	bcs.n	8001bf8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bd6:	4b26      	ldr	r3, [pc, #152]	; (8001c70 <HAL_RCC_ClockConfig+0x1b0>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f023 0207 	bic.w	r2, r3, #7
 8001bde:	4924      	ldr	r1, [pc, #144]	; (8001c70 <HAL_RCC_ClockConfig+0x1b0>)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001be6:	4b22      	ldr	r3, [pc, #136]	; (8001c70 <HAL_RCC_ClockConfig+0x1b0>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0307 	and.w	r3, r3, #7
 8001bee:	683a      	ldr	r2, [r7, #0]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d001      	beq.n	8001bf8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e036      	b.n	8001c66 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0304 	and.w	r3, r3, #4
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d008      	beq.n	8001c16 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c04:	4b1b      	ldr	r3, [pc, #108]	; (8001c74 <HAL_RCC_ClockConfig+0x1b4>)
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	4918      	ldr	r1, [pc, #96]	; (8001c74 <HAL_RCC_ClockConfig+0x1b4>)
 8001c12:	4313      	orrs	r3, r2
 8001c14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0308 	and.w	r3, r3, #8
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d009      	beq.n	8001c36 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c22:	4b14      	ldr	r3, [pc, #80]	; (8001c74 <HAL_RCC_ClockConfig+0x1b4>)
 8001c24:	689b      	ldr	r3, [r3, #8]
 8001c26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	691b      	ldr	r3, [r3, #16]
 8001c2e:	00db      	lsls	r3, r3, #3
 8001c30:	4910      	ldr	r1, [pc, #64]	; (8001c74 <HAL_RCC_ClockConfig+0x1b4>)
 8001c32:	4313      	orrs	r3, r2
 8001c34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c36:	f000 f825 	bl	8001c84 <HAL_RCC_GetSysClockFreq>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	4b0d      	ldr	r3, [pc, #52]	; (8001c74 <HAL_RCC_ClockConfig+0x1b4>)
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	091b      	lsrs	r3, r3, #4
 8001c42:	f003 030f 	and.w	r3, r3, #15
 8001c46:	490c      	ldr	r1, [pc, #48]	; (8001c78 <HAL_RCC_ClockConfig+0x1b8>)
 8001c48:	5ccb      	ldrb	r3, [r1, r3]
 8001c4a:	f003 031f 	and.w	r3, r3, #31
 8001c4e:	fa22 f303 	lsr.w	r3, r2, r3
 8001c52:	4a0a      	ldr	r2, [pc, #40]	; (8001c7c <HAL_RCC_ClockConfig+0x1bc>)
 8001c54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c56:	4b0a      	ldr	r3, [pc, #40]	; (8001c80 <HAL_RCC_ClockConfig+0x1c0>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7fe ff36 	bl	8000acc <HAL_InitTick>
 8001c60:	4603      	mov	r3, r0
 8001c62:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c64:	7afb      	ldrb	r3, [r7, #11]
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3710      	adds	r7, #16
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	40022000 	.word	0x40022000
 8001c74:	40021000 	.word	0x40021000
 8001c78:	080049e4 	.word	0x080049e4
 8001c7c:	20000000 	.word	0x20000000
 8001c80:	20000004 	.word	0x20000004

08001c84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b089      	sub	sp, #36	; 0x24
 8001c88:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	61fb      	str	r3, [r7, #28]
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c92:	4b3e      	ldr	r3, [pc, #248]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f003 030c 	and.w	r3, r3, #12
 8001c9a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c9c:	4b3b      	ldr	r3, [pc, #236]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	f003 0303 	and.w	r3, r3, #3
 8001ca4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d005      	beq.n	8001cb8 <HAL_RCC_GetSysClockFreq+0x34>
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	2b0c      	cmp	r3, #12
 8001cb0:	d121      	bne.n	8001cf6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d11e      	bne.n	8001cf6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001cb8:	4b34      	ldr	r3, [pc, #208]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0308 	and.w	r3, r3, #8
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d107      	bne.n	8001cd4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001cc4:	4b31      	ldr	r3, [pc, #196]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001cc6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cca:	0a1b      	lsrs	r3, r3, #8
 8001ccc:	f003 030f 	and.w	r3, r3, #15
 8001cd0:	61fb      	str	r3, [r7, #28]
 8001cd2:	e005      	b.n	8001ce0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001cd4:	4b2d      	ldr	r3, [pc, #180]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	091b      	lsrs	r3, r3, #4
 8001cda:	f003 030f 	and.w	r3, r3, #15
 8001cde:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ce0:	4a2b      	ldr	r2, [pc, #172]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ce8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d10d      	bne.n	8001d0c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cf4:	e00a      	b.n	8001d0c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	2b04      	cmp	r3, #4
 8001cfa:	d102      	bne.n	8001d02 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001cfc:	4b25      	ldr	r3, [pc, #148]	; (8001d94 <HAL_RCC_GetSysClockFreq+0x110>)
 8001cfe:	61bb      	str	r3, [r7, #24]
 8001d00:	e004      	b.n	8001d0c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	2b08      	cmp	r3, #8
 8001d06:	d101      	bne.n	8001d0c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d08:	4b23      	ldr	r3, [pc, #140]	; (8001d98 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d0a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	2b0c      	cmp	r3, #12
 8001d10:	d134      	bne.n	8001d7c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d12:	4b1e      	ldr	r3, [pc, #120]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	f003 0303 	and.w	r3, r3, #3
 8001d1a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d003      	beq.n	8001d2a <HAL_RCC_GetSysClockFreq+0xa6>
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	2b03      	cmp	r3, #3
 8001d26:	d003      	beq.n	8001d30 <HAL_RCC_GetSysClockFreq+0xac>
 8001d28:	e005      	b.n	8001d36 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d2a:	4b1a      	ldr	r3, [pc, #104]	; (8001d94 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d2c:	617b      	str	r3, [r7, #20]
      break;
 8001d2e:	e005      	b.n	8001d3c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d30:	4b19      	ldr	r3, [pc, #100]	; (8001d98 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d32:	617b      	str	r3, [r7, #20]
      break;
 8001d34:	e002      	b.n	8001d3c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	617b      	str	r3, [r7, #20]
      break;
 8001d3a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d3c:	4b13      	ldr	r3, [pc, #76]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	091b      	lsrs	r3, r3, #4
 8001d42:	f003 0307 	and.w	r3, r3, #7
 8001d46:	3301      	adds	r3, #1
 8001d48:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d4a:	4b10      	ldr	r3, [pc, #64]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	0a1b      	lsrs	r3, r3, #8
 8001d50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d54:	697a      	ldr	r2, [r7, #20]
 8001d56:	fb03 f202 	mul.w	r2, r3, r2
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d60:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d62:	4b0a      	ldr	r3, [pc, #40]	; (8001d8c <HAL_RCC_GetSysClockFreq+0x108>)
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	0e5b      	lsrs	r3, r3, #25
 8001d68:	f003 0303 	and.w	r3, r3, #3
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d72:	697a      	ldr	r2, [r7, #20]
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d7a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d7c:	69bb      	ldr	r3, [r7, #24]
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3724      	adds	r7, #36	; 0x24
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
 8001d8a:	bf00      	nop
 8001d8c:	40021000 	.word	0x40021000
 8001d90:	080049fc 	.word	0x080049fc
 8001d94:	00f42400 	.word	0x00f42400
 8001d98:	007a1200 	.word	0x007a1200

08001d9c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001da0:	4b03      	ldr	r3, [pc, #12]	; (8001db0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001da2:	681b      	ldr	r3, [r3, #0]
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	20000000 	.word	0x20000000

08001db4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001db8:	f7ff fff0 	bl	8001d9c <HAL_RCC_GetHCLKFreq>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	0a1b      	lsrs	r3, r3, #8
 8001dc4:	f003 0307 	and.w	r3, r3, #7
 8001dc8:	4904      	ldr	r1, [pc, #16]	; (8001ddc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001dca:	5ccb      	ldrb	r3, [r1, r3]
 8001dcc:	f003 031f 	and.w	r3, r3, #31
 8001dd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	080049f4 	.word	0x080049f4

08001de0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001de4:	f7ff ffda 	bl	8001d9c <HAL_RCC_GetHCLKFreq>
 8001de8:	4602      	mov	r2, r0
 8001dea:	4b06      	ldr	r3, [pc, #24]	; (8001e04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	0adb      	lsrs	r3, r3, #11
 8001df0:	f003 0307 	and.w	r3, r3, #7
 8001df4:	4904      	ldr	r1, [pc, #16]	; (8001e08 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001df6:	5ccb      	ldrb	r3, [r1, r3]
 8001df8:	f003 031f 	and.w	r3, r3, #31
 8001dfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40021000 	.word	0x40021000
 8001e08:	080049f4 	.word	0x080049f4

08001e0c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b086      	sub	sp, #24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e14:	2300      	movs	r3, #0
 8001e16:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e18:	4b2a      	ldr	r3, [pc, #168]	; (8001ec4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d003      	beq.n	8001e2c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e24:	f7ff fa00 	bl	8001228 <HAL_PWREx_GetVoltageRange>
 8001e28:	6178      	str	r0, [r7, #20]
 8001e2a:	e014      	b.n	8001e56 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e2c:	4b25      	ldr	r3, [pc, #148]	; (8001ec4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e30:	4a24      	ldr	r2, [pc, #144]	; (8001ec4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e36:	6593      	str	r3, [r2, #88]	; 0x58
 8001e38:	4b22      	ldr	r3, [pc, #136]	; (8001ec4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e40:	60fb      	str	r3, [r7, #12]
 8001e42:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e44:	f7ff f9f0 	bl	8001228 <HAL_PWREx_GetVoltageRange>
 8001e48:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e4a:	4b1e      	ldr	r3, [pc, #120]	; (8001ec4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e4e:	4a1d      	ldr	r2, [pc, #116]	; (8001ec4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e54:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e5c:	d10b      	bne.n	8001e76 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2b80      	cmp	r3, #128	; 0x80
 8001e62:	d919      	bls.n	8001e98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2ba0      	cmp	r3, #160	; 0xa0
 8001e68:	d902      	bls.n	8001e70 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	613b      	str	r3, [r7, #16]
 8001e6e:	e013      	b.n	8001e98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e70:	2301      	movs	r3, #1
 8001e72:	613b      	str	r3, [r7, #16]
 8001e74:	e010      	b.n	8001e98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2b80      	cmp	r3, #128	; 0x80
 8001e7a:	d902      	bls.n	8001e82 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	613b      	str	r3, [r7, #16]
 8001e80:	e00a      	b.n	8001e98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2b80      	cmp	r3, #128	; 0x80
 8001e86:	d102      	bne.n	8001e8e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e88:	2302      	movs	r3, #2
 8001e8a:	613b      	str	r3, [r7, #16]
 8001e8c:	e004      	b.n	8001e98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2b70      	cmp	r3, #112	; 0x70
 8001e92:	d101      	bne.n	8001e98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e94:	2301      	movs	r3, #1
 8001e96:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e98:	4b0b      	ldr	r3, [pc, #44]	; (8001ec8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f023 0207 	bic.w	r2, r3, #7
 8001ea0:	4909      	ldr	r1, [pc, #36]	; (8001ec8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ea8:	4b07      	ldr	r3, [pc, #28]	; (8001ec8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0307 	and.w	r3, r3, #7
 8001eb0:	693a      	ldr	r2, [r7, #16]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d001      	beq.n	8001eba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e000      	b.n	8001ebc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001eba:	2300      	movs	r3, #0
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3718      	adds	r7, #24
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	40022000 	.word	0x40022000

08001ecc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b086      	sub	sp, #24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ed8:	2300      	movs	r3, #0
 8001eda:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d041      	beq.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001eec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001ef0:	d02a      	beq.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001ef2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001ef6:	d824      	bhi.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001ef8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001efc:	d008      	beq.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001efe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f02:	d81e      	bhi.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d00a      	beq.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001f08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f0c:	d010      	beq.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001f0e:	e018      	b.n	8001f42 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001f10:	4b86      	ldr	r3, [pc, #536]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	4a85      	ldr	r2, [pc, #532]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f1a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f1c:	e015      	b.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	3304      	adds	r3, #4
 8001f22:	2100      	movs	r1, #0
 8001f24:	4618      	mov	r0, r3
 8001f26:	f000 fabb 	bl	80024a0 <RCCEx_PLLSAI1_Config>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f2e:	e00c      	b.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	3320      	adds	r3, #32
 8001f34:	2100      	movs	r1, #0
 8001f36:	4618      	mov	r0, r3
 8001f38:	f000 fba6 	bl	8002688 <RCCEx_PLLSAI2_Config>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f40:	e003      	b.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	74fb      	strb	r3, [r7, #19]
      break;
 8001f46:	e000      	b.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001f48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f4a:	7cfb      	ldrb	r3, [r7, #19]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d10b      	bne.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f50:	4b76      	ldr	r3, [pc, #472]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f56:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f5e:	4973      	ldr	r1, [pc, #460]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f60:	4313      	orrs	r3, r2
 8001f62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001f66:	e001      	b.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f68:	7cfb      	ldrb	r3, [r7, #19]
 8001f6a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d041      	beq.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f7c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001f80:	d02a      	beq.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001f82:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001f86:	d824      	bhi.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f88:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f8c:	d008      	beq.n	8001fa0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001f8e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001f92:	d81e      	bhi.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d00a      	beq.n	8001fae <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001f98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f9c:	d010      	beq.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001f9e:	e018      	b.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001fa0:	4b62      	ldr	r3, [pc, #392]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	4a61      	ldr	r2, [pc, #388]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001faa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fac:	e015      	b.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	3304      	adds	r3, #4
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f000 fa73 	bl	80024a0 <RCCEx_PLLSAI1_Config>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fbe:	e00c      	b.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	3320      	adds	r3, #32
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f000 fb5e 	bl	8002688 <RCCEx_PLLSAI2_Config>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001fd0:	e003      	b.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	74fb      	strb	r3, [r7, #19]
      break;
 8001fd6:	e000      	b.n	8001fda <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001fd8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001fda:	7cfb      	ldrb	r3, [r7, #19]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d10b      	bne.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001fe0:	4b52      	ldr	r3, [pc, #328]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fe6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001fee:	494f      	ldr	r1, [pc, #316]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001ff6:	e001      	b.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ff8:	7cfb      	ldrb	r3, [r7, #19]
 8001ffa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002004:	2b00      	cmp	r3, #0
 8002006:	f000 80a0 	beq.w	800214a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800200a:	2300      	movs	r3, #0
 800200c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800200e:	4b47      	ldr	r3, [pc, #284]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002010:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d101      	bne.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800201a:	2301      	movs	r3, #1
 800201c:	e000      	b.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800201e:	2300      	movs	r3, #0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d00d      	beq.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002024:	4b41      	ldr	r3, [pc, #260]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002028:	4a40      	ldr	r2, [pc, #256]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800202a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800202e:	6593      	str	r3, [r2, #88]	; 0x58
 8002030:	4b3e      	ldr	r3, [pc, #248]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002034:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002038:	60bb      	str	r3, [r7, #8]
 800203a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800203c:	2301      	movs	r3, #1
 800203e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002040:	4b3b      	ldr	r3, [pc, #236]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a3a      	ldr	r2, [pc, #232]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002046:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800204a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800204c:	f7fe fd8e 	bl	8000b6c <HAL_GetTick>
 8002050:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002052:	e009      	b.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002054:	f7fe fd8a 	bl	8000b6c <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d902      	bls.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	74fb      	strb	r3, [r7, #19]
        break;
 8002066:	e005      	b.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002068:	4b31      	ldr	r3, [pc, #196]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002070:	2b00      	cmp	r3, #0
 8002072:	d0ef      	beq.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002074:	7cfb      	ldrb	r3, [r7, #19]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d15c      	bne.n	8002134 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800207a:	4b2c      	ldr	r3, [pc, #176]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800207c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002080:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002084:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002086:	697b      	ldr	r3, [r7, #20]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d01f      	beq.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002092:	697a      	ldr	r2, [r7, #20]
 8002094:	429a      	cmp	r2, r3
 8002096:	d019      	beq.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002098:	4b24      	ldr	r3, [pc, #144]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800209a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800209e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80020a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80020a4:	4b21      	ldr	r3, [pc, #132]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020aa:	4a20      	ldr	r2, [pc, #128]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80020b4:	4b1d      	ldr	r3, [pc, #116]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ba:	4a1c      	ldr	r2, [pc, #112]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80020c4:	4a19      	ldr	r2, [pc, #100]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d016      	beq.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d6:	f7fe fd49 	bl	8000b6c <HAL_GetTick>
 80020da:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020dc:	e00b      	b.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020de:	f7fe fd45 	bl	8000b6c <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d902      	bls.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80020f0:	2303      	movs	r3, #3
 80020f2:	74fb      	strb	r3, [r7, #19]
            break;
 80020f4:	e006      	b.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020f6:	4b0d      	ldr	r3, [pc, #52]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80020f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	2b00      	cmp	r3, #0
 8002102:	d0ec      	beq.n	80020de <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002104:	7cfb      	ldrb	r3, [r7, #19]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d10c      	bne.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800210a:	4b08      	ldr	r3, [pc, #32]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800210c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002110:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800211a:	4904      	ldr	r1, [pc, #16]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800211c:	4313      	orrs	r3, r2
 800211e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002122:	e009      	b.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002124:	7cfb      	ldrb	r3, [r7, #19]
 8002126:	74bb      	strb	r3, [r7, #18]
 8002128:	e006      	b.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800212a:	bf00      	nop
 800212c:	40021000 	.word	0x40021000
 8002130:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002134:	7cfb      	ldrb	r3, [r7, #19]
 8002136:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002138:	7c7b      	ldrb	r3, [r7, #17]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d105      	bne.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800213e:	4b9e      	ldr	r3, [pc, #632]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002142:	4a9d      	ldr	r2, [pc, #628]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002144:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002148:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	2b00      	cmp	r3, #0
 8002154:	d00a      	beq.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002156:	4b98      	ldr	r3, [pc, #608]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800215c:	f023 0203 	bic.w	r2, r3, #3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002164:	4994      	ldr	r1, [pc, #592]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002166:	4313      	orrs	r3, r2
 8002168:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0302 	and.w	r3, r3, #2
 8002174:	2b00      	cmp	r3, #0
 8002176:	d00a      	beq.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002178:	4b8f      	ldr	r3, [pc, #572]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800217a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800217e:	f023 020c 	bic.w	r2, r3, #12
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002186:	498c      	ldr	r1, [pc, #560]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002188:	4313      	orrs	r3, r2
 800218a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0304 	and.w	r3, r3, #4
 8002196:	2b00      	cmp	r3, #0
 8002198:	d00a      	beq.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800219a:	4b87      	ldr	r3, [pc, #540]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800219c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021a0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a8:	4983      	ldr	r1, [pc, #524]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0308 	and.w	r3, r3, #8
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d00a      	beq.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80021bc:	4b7e      	ldr	r3, [pc, #504]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ca:	497b      	ldr	r1, [pc, #492]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0310 	and.w	r3, r3, #16
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00a      	beq.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80021de:	4b76      	ldr	r3, [pc, #472]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021ec:	4972      	ldr	r1, [pc, #456]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0320 	and.w	r3, r3, #32
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d00a      	beq.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002200:	4b6d      	ldr	r3, [pc, #436]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002206:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800220e:	496a      	ldr	r1, [pc, #424]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002210:	4313      	orrs	r3, r2
 8002212:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800221e:	2b00      	cmp	r3, #0
 8002220:	d00a      	beq.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002222:	4b65      	ldr	r3, [pc, #404]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002228:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002230:	4961      	ldr	r1, [pc, #388]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002232:	4313      	orrs	r3, r2
 8002234:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002240:	2b00      	cmp	r3, #0
 8002242:	d00a      	beq.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002244:	4b5c      	ldr	r3, [pc, #368]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800224a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002252:	4959      	ldr	r1, [pc, #356]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002254:	4313      	orrs	r3, r2
 8002256:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002262:	2b00      	cmp	r3, #0
 8002264:	d00a      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002266:	4b54      	ldr	r3, [pc, #336]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800226c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002274:	4950      	ldr	r1, [pc, #320]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002276:	4313      	orrs	r3, r2
 8002278:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002284:	2b00      	cmp	r3, #0
 8002286:	d00a      	beq.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002288:	4b4b      	ldr	r3, [pc, #300]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800228a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800228e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002296:	4948      	ldr	r1, [pc, #288]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002298:	4313      	orrs	r3, r2
 800229a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d00a      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022aa:	4b43      	ldr	r3, [pc, #268]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b8:	493f      	ldr	r1, [pc, #252]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d028      	beq.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022cc:	4b3a      	ldr	r3, [pc, #232]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022da:	4937      	ldr	r1, [pc, #220]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022ea:	d106      	bne.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022ec:	4b32      	ldr	r3, [pc, #200]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	4a31      	ldr	r2, [pc, #196]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022f6:	60d3      	str	r3, [r2, #12]
 80022f8:	e011      	b.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80022fe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002302:	d10c      	bne.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	3304      	adds	r3, #4
 8002308:	2101      	movs	r1, #1
 800230a:	4618      	mov	r0, r3
 800230c:	f000 f8c8 	bl	80024a0 <RCCEx_PLLSAI1_Config>
 8002310:	4603      	mov	r3, r0
 8002312:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002314:	7cfb      	ldrb	r3, [r7, #19]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d001      	beq.n	800231e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800231a:	7cfb      	ldrb	r3, [r7, #19]
 800231c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d028      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800232a:	4b23      	ldr	r3, [pc, #140]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800232c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002330:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002338:	491f      	ldr	r1, [pc, #124]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800233a:	4313      	orrs	r3, r2
 800233c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002344:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002348:	d106      	bne.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800234a:	4b1b      	ldr	r3, [pc, #108]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	4a1a      	ldr	r2, [pc, #104]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002350:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002354:	60d3      	str	r3, [r2, #12]
 8002356:	e011      	b.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800235c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002360:	d10c      	bne.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	3304      	adds	r3, #4
 8002366:	2101      	movs	r1, #1
 8002368:	4618      	mov	r0, r3
 800236a:	f000 f899 	bl	80024a0 <RCCEx_PLLSAI1_Config>
 800236e:	4603      	mov	r3, r0
 8002370:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002372:	7cfb      	ldrb	r3, [r7, #19]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d001      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002378:	7cfb      	ldrb	r3, [r7, #19]
 800237a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d02b      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002388:	4b0b      	ldr	r3, [pc, #44]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800238a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800238e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002396:	4908      	ldr	r1, [pc, #32]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002398:	4313      	orrs	r3, r2
 800239a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023a6:	d109      	bne.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023a8:	4b03      	ldr	r3, [pc, #12]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	4a02      	ldr	r2, [pc, #8]	; (80023b8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023ae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023b2:	60d3      	str	r3, [r2, #12]
 80023b4:	e014      	b.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80023b6:	bf00      	nop
 80023b8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023c4:	d10c      	bne.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	3304      	adds	r3, #4
 80023ca:	2101      	movs	r1, #1
 80023cc:	4618      	mov	r0, r3
 80023ce:	f000 f867 	bl	80024a0 <RCCEx_PLLSAI1_Config>
 80023d2:	4603      	mov	r3, r0
 80023d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023d6:	7cfb      	ldrb	r3, [r7, #19]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80023dc:	7cfb      	ldrb	r3, [r7, #19]
 80023de:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d02f      	beq.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80023ec:	4b2b      	ldr	r3, [pc, #172]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023f2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80023fa:	4928      	ldr	r1, [pc, #160]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002406:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800240a:	d10d      	bne.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	3304      	adds	r3, #4
 8002410:	2102      	movs	r1, #2
 8002412:	4618      	mov	r0, r3
 8002414:	f000 f844 	bl	80024a0 <RCCEx_PLLSAI1_Config>
 8002418:	4603      	mov	r3, r0
 800241a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800241c:	7cfb      	ldrb	r3, [r7, #19]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d014      	beq.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002422:	7cfb      	ldrb	r3, [r7, #19]
 8002424:	74bb      	strb	r3, [r7, #18]
 8002426:	e011      	b.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800242c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002430:	d10c      	bne.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	3320      	adds	r3, #32
 8002436:	2102      	movs	r1, #2
 8002438:	4618      	mov	r0, r3
 800243a:	f000 f925 	bl	8002688 <RCCEx_PLLSAI2_Config>
 800243e:	4603      	mov	r3, r0
 8002440:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002442:	7cfb      	ldrb	r3, [r7, #19]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d001      	beq.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002448:	7cfb      	ldrb	r3, [r7, #19]
 800244a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d00a      	beq.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002458:	4b10      	ldr	r3, [pc, #64]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800245a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800245e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002466:	490d      	ldr	r1, [pc, #52]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002468:	4313      	orrs	r3, r2
 800246a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d00b      	beq.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800247a:	4b08      	ldr	r3, [pc, #32]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800247c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002480:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800248a:	4904      	ldr	r1, [pc, #16]	; (800249c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800248c:	4313      	orrs	r3, r2
 800248e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002492:	7cbb      	ldrb	r3, [r7, #18]
}
 8002494:	4618      	mov	r0, r3
 8002496:	3718      	adds	r7, #24
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	40021000 	.word	0x40021000

080024a0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80024aa:	2300      	movs	r3, #0
 80024ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80024ae:	4b75      	ldr	r3, [pc, #468]	; (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	f003 0303 	and.w	r3, r3, #3
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d018      	beq.n	80024ec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80024ba:	4b72      	ldr	r3, [pc, #456]	; (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	f003 0203 	and.w	r2, r3, #3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d10d      	bne.n	80024e6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
       ||
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d009      	beq.n	80024e6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80024d2:	4b6c      	ldr	r3, [pc, #432]	; (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024d4:	68db      	ldr	r3, [r3, #12]
 80024d6:	091b      	lsrs	r3, r3, #4
 80024d8:	f003 0307 	and.w	r3, r3, #7
 80024dc:	1c5a      	adds	r2, r3, #1
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
       ||
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d047      	beq.n	8002576 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	73fb      	strb	r3, [r7, #15]
 80024ea:	e044      	b.n	8002576 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2b03      	cmp	r3, #3
 80024f2:	d018      	beq.n	8002526 <RCCEx_PLLSAI1_Config+0x86>
 80024f4:	2b03      	cmp	r3, #3
 80024f6:	d825      	bhi.n	8002544 <RCCEx_PLLSAI1_Config+0xa4>
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d002      	beq.n	8002502 <RCCEx_PLLSAI1_Config+0x62>
 80024fc:	2b02      	cmp	r3, #2
 80024fe:	d009      	beq.n	8002514 <RCCEx_PLLSAI1_Config+0x74>
 8002500:	e020      	b.n	8002544 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002502:	4b60      	ldr	r3, [pc, #384]	; (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d11d      	bne.n	800254a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002512:	e01a      	b.n	800254a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002514:	4b5b      	ldr	r3, [pc, #364]	; (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800251c:	2b00      	cmp	r3, #0
 800251e:	d116      	bne.n	800254e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002524:	e013      	b.n	800254e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002526:	4b57      	ldr	r3, [pc, #348]	; (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d10f      	bne.n	8002552 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002532:	4b54      	ldr	r3, [pc, #336]	; (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d109      	bne.n	8002552 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002542:	e006      	b.n	8002552 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	73fb      	strb	r3, [r7, #15]
      break;
 8002548:	e004      	b.n	8002554 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800254a:	bf00      	nop
 800254c:	e002      	b.n	8002554 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800254e:	bf00      	nop
 8002550:	e000      	b.n	8002554 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002552:	bf00      	nop
    }

    if(status == HAL_OK)
 8002554:	7bfb      	ldrb	r3, [r7, #15]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d10d      	bne.n	8002576 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800255a:	4b4a      	ldr	r3, [pc, #296]	; (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 800255c:	68db      	ldr	r3, [r3, #12]
 800255e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6819      	ldr	r1, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	3b01      	subs	r3, #1
 800256c:	011b      	lsls	r3, r3, #4
 800256e:	430b      	orrs	r3, r1
 8002570:	4944      	ldr	r1, [pc, #272]	; (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002572:	4313      	orrs	r3, r2
 8002574:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002576:	7bfb      	ldrb	r3, [r7, #15]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d17d      	bne.n	8002678 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800257c:	4b41      	ldr	r3, [pc, #260]	; (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a40      	ldr	r2, [pc, #256]	; (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002582:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002586:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002588:	f7fe faf0 	bl	8000b6c <HAL_GetTick>
 800258c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800258e:	e009      	b.n	80025a4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002590:	f7fe faec 	bl	8000b6c <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b02      	cmp	r3, #2
 800259c:	d902      	bls.n	80025a4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	73fb      	strb	r3, [r7, #15]
        break;
 80025a2:	e005      	b.n	80025b0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80025a4:	4b37      	ldr	r3, [pc, #220]	; (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d1ef      	bne.n	8002590 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80025b0:	7bfb      	ldrb	r3, [r7, #15]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d160      	bne.n	8002678 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d111      	bne.n	80025e0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025bc:	4b31      	ldr	r3, [pc, #196]	; (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80025c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	6892      	ldr	r2, [r2, #8]
 80025cc:	0211      	lsls	r1, r2, #8
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	68d2      	ldr	r2, [r2, #12]
 80025d2:	0912      	lsrs	r2, r2, #4
 80025d4:	0452      	lsls	r2, r2, #17
 80025d6:	430a      	orrs	r2, r1
 80025d8:	492a      	ldr	r1, [pc, #168]	; (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	610b      	str	r3, [r1, #16]
 80025de:	e027      	b.n	8002630 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d112      	bne.n	800260c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80025e6:	4b27      	ldr	r3, [pc, #156]	; (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 80025e8:	691b      	ldr	r3, [r3, #16]
 80025ea:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80025ee:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	6892      	ldr	r2, [r2, #8]
 80025f6:	0211      	lsls	r1, r2, #8
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	6912      	ldr	r2, [r2, #16]
 80025fc:	0852      	lsrs	r2, r2, #1
 80025fe:	3a01      	subs	r2, #1
 8002600:	0552      	lsls	r2, r2, #21
 8002602:	430a      	orrs	r2, r1
 8002604:	491f      	ldr	r1, [pc, #124]	; (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002606:	4313      	orrs	r3, r2
 8002608:	610b      	str	r3, [r1, #16]
 800260a:	e011      	b.n	8002630 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800260c:	4b1d      	ldr	r3, [pc, #116]	; (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002614:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	6892      	ldr	r2, [r2, #8]
 800261c:	0211      	lsls	r1, r2, #8
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	6952      	ldr	r2, [r2, #20]
 8002622:	0852      	lsrs	r2, r2, #1
 8002624:	3a01      	subs	r2, #1
 8002626:	0652      	lsls	r2, r2, #25
 8002628:	430a      	orrs	r2, r1
 800262a:	4916      	ldr	r1, [pc, #88]	; (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 800262c:	4313      	orrs	r3, r2
 800262e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002630:	4b14      	ldr	r3, [pc, #80]	; (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a13      	ldr	r2, [pc, #76]	; (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002636:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800263a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800263c:	f7fe fa96 	bl	8000b6c <HAL_GetTick>
 8002640:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002642:	e009      	b.n	8002658 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002644:	f7fe fa92 	bl	8000b6c <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d902      	bls.n	8002658 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	73fb      	strb	r3, [r7, #15]
          break;
 8002656:	e005      	b.n	8002664 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002658:	4b0a      	ldr	r3, [pc, #40]	; (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002660:	2b00      	cmp	r3, #0
 8002662:	d0ef      	beq.n	8002644 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002664:	7bfb      	ldrb	r3, [r7, #15]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d106      	bne.n	8002678 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800266a:	4b06      	ldr	r3, [pc, #24]	; (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 800266c:	691a      	ldr	r2, [r3, #16]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	4904      	ldr	r1, [pc, #16]	; (8002684 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002674:	4313      	orrs	r3, r2
 8002676:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002678:	7bfb      	ldrb	r3, [r7, #15]
}
 800267a:	4618      	mov	r0, r3
 800267c:	3710      	adds	r7, #16
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	40021000 	.word	0x40021000

08002688 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002692:	2300      	movs	r3, #0
 8002694:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002696:	4b6a      	ldr	r3, [pc, #424]	; (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	f003 0303 	and.w	r3, r3, #3
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d018      	beq.n	80026d4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80026a2:	4b67      	ldr	r3, [pc, #412]	; (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	f003 0203 	and.w	r2, r3, #3
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d10d      	bne.n	80026ce <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
       ||
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d009      	beq.n	80026ce <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80026ba:	4b61      	ldr	r3, [pc, #388]	; (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026bc:	68db      	ldr	r3, [r3, #12]
 80026be:	091b      	lsrs	r3, r3, #4
 80026c0:	f003 0307 	and.w	r3, r3, #7
 80026c4:	1c5a      	adds	r2, r3, #1
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	685b      	ldr	r3, [r3, #4]
       ||
 80026ca:	429a      	cmp	r2, r3
 80026cc:	d047      	beq.n	800275e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	73fb      	strb	r3, [r7, #15]
 80026d2:	e044      	b.n	800275e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2b03      	cmp	r3, #3
 80026da:	d018      	beq.n	800270e <RCCEx_PLLSAI2_Config+0x86>
 80026dc:	2b03      	cmp	r3, #3
 80026de:	d825      	bhi.n	800272c <RCCEx_PLLSAI2_Config+0xa4>
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d002      	beq.n	80026ea <RCCEx_PLLSAI2_Config+0x62>
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d009      	beq.n	80026fc <RCCEx_PLLSAI2_Config+0x74>
 80026e8:	e020      	b.n	800272c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80026ea:	4b55      	ldr	r3, [pc, #340]	; (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d11d      	bne.n	8002732 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026fa:	e01a      	b.n	8002732 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80026fc:	4b50      	ldr	r3, [pc, #320]	; (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002704:	2b00      	cmp	r3, #0
 8002706:	d116      	bne.n	8002736 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800270c:	e013      	b.n	8002736 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800270e:	4b4c      	ldr	r3, [pc, #304]	; (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d10f      	bne.n	800273a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800271a:	4b49      	ldr	r3, [pc, #292]	; (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d109      	bne.n	800273a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800272a:	e006      	b.n	800273a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	73fb      	strb	r3, [r7, #15]
      break;
 8002730:	e004      	b.n	800273c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002732:	bf00      	nop
 8002734:	e002      	b.n	800273c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002736:	bf00      	nop
 8002738:	e000      	b.n	800273c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800273a:	bf00      	nop
    }

    if(status == HAL_OK)
 800273c:	7bfb      	ldrb	r3, [r7, #15]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d10d      	bne.n	800275e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002742:	4b3f      	ldr	r3, [pc, #252]	; (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6819      	ldr	r1, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	3b01      	subs	r3, #1
 8002754:	011b      	lsls	r3, r3, #4
 8002756:	430b      	orrs	r3, r1
 8002758:	4939      	ldr	r1, [pc, #228]	; (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 800275a:	4313      	orrs	r3, r2
 800275c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800275e:	7bfb      	ldrb	r3, [r7, #15]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d167      	bne.n	8002834 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002764:	4b36      	ldr	r3, [pc, #216]	; (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a35      	ldr	r2, [pc, #212]	; (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 800276a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800276e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002770:	f7fe f9fc 	bl	8000b6c <HAL_GetTick>
 8002774:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002776:	e009      	b.n	800278c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002778:	f7fe f9f8 	bl	8000b6c <HAL_GetTick>
 800277c:	4602      	mov	r2, r0
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b02      	cmp	r3, #2
 8002784:	d902      	bls.n	800278c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	73fb      	strb	r3, [r7, #15]
        break;
 800278a:	e005      	b.n	8002798 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800278c:	4b2c      	ldr	r3, [pc, #176]	; (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d1ef      	bne.n	8002778 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002798:	7bfb      	ldrb	r3, [r7, #15]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d14a      	bne.n	8002834 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d111      	bne.n	80027c8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80027a4:	4b26      	ldr	r3, [pc, #152]	; (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027a6:	695b      	ldr	r3, [r3, #20]
 80027a8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80027ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	6892      	ldr	r2, [r2, #8]
 80027b4:	0211      	lsls	r1, r2, #8
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	68d2      	ldr	r2, [r2, #12]
 80027ba:	0912      	lsrs	r2, r2, #4
 80027bc:	0452      	lsls	r2, r2, #17
 80027be:	430a      	orrs	r2, r1
 80027c0:	491f      	ldr	r1, [pc, #124]	; (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	614b      	str	r3, [r1, #20]
 80027c6:	e011      	b.n	80027ec <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80027c8:	4b1d      	ldr	r3, [pc, #116]	; (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027ca:	695b      	ldr	r3, [r3, #20]
 80027cc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80027d0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027d4:	687a      	ldr	r2, [r7, #4]
 80027d6:	6892      	ldr	r2, [r2, #8]
 80027d8:	0211      	lsls	r1, r2, #8
 80027da:	687a      	ldr	r2, [r7, #4]
 80027dc:	6912      	ldr	r2, [r2, #16]
 80027de:	0852      	lsrs	r2, r2, #1
 80027e0:	3a01      	subs	r2, #1
 80027e2:	0652      	lsls	r2, r2, #25
 80027e4:	430a      	orrs	r2, r1
 80027e6:	4916      	ldr	r1, [pc, #88]	; (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027e8:	4313      	orrs	r3, r2
 80027ea:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80027ec:	4b14      	ldr	r3, [pc, #80]	; (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a13      	ldr	r2, [pc, #76]	; (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 80027f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f8:	f7fe f9b8 	bl	8000b6c <HAL_GetTick>
 80027fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80027fe:	e009      	b.n	8002814 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002800:	f7fe f9b4 	bl	8000b6c <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d902      	bls.n	8002814 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	73fb      	strb	r3, [r7, #15]
          break;
 8002812:	e005      	b.n	8002820 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002814:	4b0a      	ldr	r3, [pc, #40]	; (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d0ef      	beq.n	8002800 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002820:	7bfb      	ldrb	r3, [r7, #15]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d106      	bne.n	8002834 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002826:	4b06      	ldr	r3, [pc, #24]	; (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002828:	695a      	ldr	r2, [r3, #20]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	695b      	ldr	r3, [r3, #20]
 800282e:	4904      	ldr	r1, [pc, #16]	; (8002840 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002830:	4313      	orrs	r3, r2
 8002832:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002834:	7bfb      	ldrb	r3, [r7, #15]
}
 8002836:	4618      	mov	r0, r3
 8002838:	3710      	adds	r7, #16
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	40021000 	.word	0x40021000

08002844 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e040      	b.n	80028d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800285a:	2b00      	cmp	r3, #0
 800285c:	d106      	bne.n	800286c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f7fe f806 	bl	8000878 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2224      	movs	r2, #36	; 0x24
 8002870:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f022 0201 	bic.w	r2, r2, #1
 8002880:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f000 fbf2 	bl	800306c <UART_SetConfig>
 8002888:	4603      	mov	r3, r0
 800288a:	2b01      	cmp	r3, #1
 800288c:	d101      	bne.n	8002892 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800288e:	2301      	movs	r3, #1
 8002890:	e022      	b.n	80028d8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002896:	2b00      	cmp	r3, #0
 8002898:	d002      	beq.n	80028a0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 fe9e 	bl	80035dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	685a      	ldr	r2, [r3, #4]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80028ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	689a      	ldr	r2, [r3, #8]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80028be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f042 0201 	orr.w	r2, r2, #1
 80028ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f000 ff25 	bl	8003720 <UART_CheckIdleState>
 80028d6:	4603      	mov	r3, r0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3708      	adds	r7, #8
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b08b      	sub	sp, #44	; 0x2c
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	4613      	mov	r3, r2
 80028ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028f2:	2b20      	cmp	r3, #32
 80028f4:	d156      	bne.n	80029a4 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d002      	beq.n	8002902 <HAL_UART_Transmit_IT+0x22>
 80028fc:	88fb      	ldrh	r3, [r7, #6]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e04f      	b.n	80029a6 <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800290c:	2b01      	cmp	r3, #1
 800290e:	d101      	bne.n	8002914 <HAL_UART_Transmit_IT+0x34>
 8002910:	2302      	movs	r3, #2
 8002912:	e048      	b.n	80029a6 <HAL_UART_Transmit_IT+0xc6>
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	68ba      	ldr	r2, [r7, #8]
 8002920:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	88fa      	ldrh	r2, [r7, #6]
 8002926:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	88fa      	ldrh	r2, [r7, #6]
 800292e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2200      	movs	r2, #0
 8002936:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2200      	movs	r2, #0
 800293c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2221      	movs	r2, #33	; 0x21
 8002944:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800294e:	d107      	bne.n	8002960 <HAL_UART_Transmit_IT+0x80>
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	691b      	ldr	r3, [r3, #16]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d103      	bne.n	8002960 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	4a16      	ldr	r2, [pc, #88]	; (80029b4 <HAL_UART_Transmit_IT+0xd4>)
 800295c:	669a      	str	r2, [r3, #104]	; 0x68
 800295e:	e002      	b.n	8002966 <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	4a15      	ldr	r2, [pc, #84]	; (80029b8 <HAL_UART_Transmit_IT+0xd8>)
 8002964:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	e853 3f00 	ldrex	r3, [r3]
 800297a:	613b      	str	r3, [r7, #16]
   return(result);
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002982:	627b      	str	r3, [r7, #36]	; 0x24
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	461a      	mov	r2, r3
 800298a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298c:	623b      	str	r3, [r7, #32]
 800298e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002990:	69f9      	ldr	r1, [r7, #28]
 8002992:	6a3a      	ldr	r2, [r7, #32]
 8002994:	e841 2300 	strex	r3, r2, [r1]
 8002998:	61bb      	str	r3, [r7, #24]
   return(result);
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d1e6      	bne.n	800296e <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 80029a0:	2300      	movs	r3, #0
 80029a2:	e000      	b.n	80029a6 <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 80029a4:	2302      	movs	r3, #2
  }
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	372c      	adds	r7, #44	; 0x2c
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	08003c7b 	.word	0x08003c7b
 80029b8:	08003bc3 	.word	0x08003bc3

080029bc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b08a      	sub	sp, #40	; 0x28
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	4613      	mov	r3, r2
 80029c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029ce:	2b20      	cmp	r3, #32
 80029d0:	d142      	bne.n	8002a58 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d002      	beq.n	80029de <HAL_UART_Receive_IT+0x22>
 80029d8:	88fb      	ldrh	r3, [r7, #6]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d101      	bne.n	80029e2 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	e03b      	b.n	8002a5a <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d101      	bne.n	80029f0 <HAL_UART_Receive_IT+0x34>
 80029ec:	2302      	movs	r3, #2
 80029ee:	e034      	b.n	8002a5a <HAL_UART_Receive_IT+0x9e>
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a18      	ldr	r2, [pc, #96]	; (8002a64 <HAL_UART_Receive_IT+0xa8>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d01f      	beq.n	8002a48 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d018      	beq.n	8002a48 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	e853 3f00 	ldrex	r3, [r3]
 8002a22:	613b      	str	r3, [r7, #16]
   return(result);
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a2a:	627b      	str	r3, [r7, #36]	; 0x24
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	461a      	mov	r2, r3
 8002a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a34:	623b      	str	r3, [r7, #32]
 8002a36:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a38:	69f9      	ldr	r1, [r7, #28]
 8002a3a:	6a3a      	ldr	r2, [r7, #32]
 8002a3c:	e841 2300 	strex	r3, r2, [r1]
 8002a40:	61bb      	str	r3, [r7, #24]
   return(result);
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d1e6      	bne.n	8002a16 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002a48:	88fb      	ldrh	r3, [r7, #6]
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	68b9      	ldr	r1, [r7, #8]
 8002a4e:	68f8      	ldr	r0, [r7, #12]
 8002a50:	f000 ff74 	bl	800393c <UART_Start_Receive_IT>
 8002a54:	4603      	mov	r3, r0
 8002a56:	e000      	b.n	8002a5a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8002a58:	2302      	movs	r3, #2
  }
}
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	3728      	adds	r7, #40	; 0x28
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	bd80      	pop	{r7, pc}
 8002a62:	bf00      	nop
 8002a64:	40008000 	.word	0x40008000

08002a68 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b0ba      	sub	sp, #232	; 0xe8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	69db      	ldr	r3, [r3, #28]
 8002a76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002a8e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002a92:	f640 030f 	movw	r3, #2063	; 0x80f
 8002a96:	4013      	ands	r3, r2
 8002a98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002a9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d115      	bne.n	8002ad0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002aa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002aa8:	f003 0320 	and.w	r3, r3, #32
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d00f      	beq.n	8002ad0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002ab0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ab4:	f003 0320 	and.w	r3, r3, #32
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d009      	beq.n	8002ad0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	f000 82a6 	beq.w	8003012 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	4798      	blx	r3
      }
      return;
 8002ace:	e2a0      	b.n	8003012 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002ad0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	f000 8117 	beq.w	8002d08 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002ada:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d106      	bne.n	8002af4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002ae6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002aea:	4b85      	ldr	r3, [pc, #532]	; (8002d00 <HAL_UART_IRQHandler+0x298>)
 8002aec:	4013      	ands	r3, r2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	f000 810a 	beq.w	8002d08 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002af4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002af8:	f003 0301 	and.w	r3, r3, #1
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d011      	beq.n	8002b24 <HAL_UART_IRQHandler+0xbc>
 8002b00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d00b      	beq.n	8002b24 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	2201      	movs	r2, #1
 8002b12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b1a:	f043 0201 	orr.w	r2, r3, #1
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b28:	f003 0302 	and.w	r3, r3, #2
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d011      	beq.n	8002b54 <HAL_UART_IRQHandler+0xec>
 8002b30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b34:	f003 0301 	and.w	r3, r3, #1
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d00b      	beq.n	8002b54 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2202      	movs	r2, #2
 8002b42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b4a:	f043 0204 	orr.w	r2, r3, #4
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002b54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b58:	f003 0304 	and.w	r3, r3, #4
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d011      	beq.n	8002b84 <HAL_UART_IRQHandler+0x11c>
 8002b60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b64:	f003 0301 	and.w	r3, r3, #1
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d00b      	beq.n	8002b84 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2204      	movs	r2, #4
 8002b72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b7a:	f043 0202 	orr.w	r2, r3, #2
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002b84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b88:	f003 0308 	and.w	r3, r3, #8
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d017      	beq.n	8002bc0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002b90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b94:	f003 0320 	and.w	r3, r3, #32
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d105      	bne.n	8002ba8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002b9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ba0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d00b      	beq.n	8002bc0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	2208      	movs	r2, #8
 8002bae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bb6:	f043 0208 	orr.w	r2, r3, #8
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002bc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d012      	beq.n	8002bf2 <HAL_UART_IRQHandler+0x18a>
 8002bcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bd0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d00c      	beq.n	8002bf2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002be0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002be8:	f043 0220 	orr.w	r2, r3, #32
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	f000 820c 	beq.w	8003016 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002bfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c02:	f003 0320 	and.w	r3, r3, #32
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d00d      	beq.n	8002c26 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002c0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c0e:	f003 0320 	and.w	r3, r3, #32
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d007      	beq.n	8002c26 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d003      	beq.n	8002c26 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c2c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c3a:	2b40      	cmp	r3, #64	; 0x40
 8002c3c:	d005      	beq.n	8002c4a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002c3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c42:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d04f      	beq.n	8002cea <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 ff40 	bl	8003ad0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c5a:	2b40      	cmp	r3, #64	; 0x40
 8002c5c:	d141      	bne.n	8002ce2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	3308      	adds	r3, #8
 8002c64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002c6c:	e853 3f00 	ldrex	r3, [r3]
 8002c70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002c74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002c78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002c7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	3308      	adds	r3, #8
 8002c86:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002c8a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002c8e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c92:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002c96:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002c9a:	e841 2300 	strex	r3, r2, [r1]
 8002c9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002ca2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1d9      	bne.n	8002c5e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d013      	beq.n	8002cda <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb6:	4a13      	ldr	r2, [pc, #76]	; (8002d04 <HAL_UART_IRQHandler+0x29c>)
 8002cb8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7fe f8af 	bl	8000e22 <HAL_DMA_Abort_IT>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d017      	beq.n	8002cfa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8002cd4:	4610      	mov	r0, r2
 8002cd6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cd8:	e00f      	b.n	8002cfa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 f9b0 	bl	8003040 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ce0:	e00b      	b.n	8002cfa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 f9ac 	bl	8003040 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ce8:	e007      	b.n	8002cfa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 f9a8 	bl	8003040 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8002cf8:	e18d      	b.n	8003016 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cfa:	bf00      	nop
    return;
 8002cfc:	e18b      	b.n	8003016 <HAL_UART_IRQHandler+0x5ae>
 8002cfe:	bf00      	nop
 8002d00:	04000120 	.word	0x04000120
 8002d04:	08003b97 	.word	0x08003b97

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	f040 8146 	bne.w	8002f9e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002d12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d16:	f003 0310 	and.w	r3, r3, #16
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	f000 813f 	beq.w	8002f9e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002d20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d24:	f003 0310 	and.w	r3, r3, #16
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	f000 8138 	beq.w	8002f9e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2210      	movs	r2, #16
 8002d34:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d40:	2b40      	cmp	r3, #64	; 0x40
 8002d42:	f040 80b4 	bne.w	8002eae <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002d52:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	f000 815f 	beq.w	800301a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002d62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d66:	429a      	cmp	r2, r3
 8002d68:	f080 8157 	bcs.w	800301a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002d72:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0320 	and.w	r3, r3, #32
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	f040 8085 	bne.w	8002e92 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d90:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002d94:	e853 3f00 	ldrex	r3, [r3]
 8002d98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002d9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002da0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002da4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	461a      	mov	r2, r3
 8002dae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002db2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002db6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dba:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002dbe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002dc2:	e841 2300 	strex	r3, r2, [r1]
 8002dc6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002dca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1da      	bne.n	8002d88 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	3308      	adds	r3, #8
 8002dd8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dda:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ddc:	e853 3f00 	ldrex	r3, [r3]
 8002de0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002de2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002de4:	f023 0301 	bic.w	r3, r3, #1
 8002de8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	3308      	adds	r3, #8
 8002df2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002df6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002dfa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dfc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002dfe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002e02:	e841 2300 	strex	r3, r2, [r1]
 8002e06:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002e08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d1e1      	bne.n	8002dd2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	3308      	adds	r3, #8
 8002e14:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e18:	e853 3f00 	ldrex	r3, [r3]
 8002e1c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002e1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002e20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002e24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	3308      	adds	r3, #8
 8002e2e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002e32:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002e34:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e36:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002e38:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002e3a:	e841 2300 	strex	r3, r2, [r1]
 8002e3e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002e40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1e3      	bne.n	8002e0e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2220      	movs	r2, #32
 8002e4a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e5a:	e853 3f00 	ldrex	r3, [r3]
 8002e5e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002e60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002e62:	f023 0310 	bic.w	r3, r3, #16
 8002e66:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	461a      	mov	r2, r3
 8002e70:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e74:	65bb      	str	r3, [r7, #88]	; 0x58
 8002e76:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e78:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002e7a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e7c:	e841 2300 	strex	r3, r2, [r1]
 8002e80:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002e82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d1e4      	bne.n	8002e52 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7fd ff8a 	bl	8000da6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	4619      	mov	r1, r3
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 f8d4 	bl	8003054 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002eac:	e0b5      	b.n	800301a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	f000 80a7 	beq.w	800301e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8002ed0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	f000 80a2 	beq.w	800301e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ee2:	e853 3f00 	ldrex	r3, [r3]
 8002ee6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002ee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002eee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	461a      	mov	r2, r3
 8002ef8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002efc:	647b      	str	r3, [r7, #68]	; 0x44
 8002efe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f00:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002f02:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002f04:	e841 2300 	strex	r3, r2, [r1]
 8002f08:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002f0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d1e4      	bne.n	8002eda <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	3308      	adds	r3, #8
 8002f16:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1a:	e853 3f00 	ldrex	r3, [r3]
 8002f1e:	623b      	str	r3, [r7, #32]
   return(result);
 8002f20:	6a3b      	ldr	r3, [r7, #32]
 8002f22:	f023 0301 	bic.w	r3, r3, #1
 8002f26:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	3308      	adds	r3, #8
 8002f30:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002f34:	633a      	str	r2, [r7, #48]	; 0x30
 8002f36:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f38:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002f3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002f3c:	e841 2300 	strex	r3, r2, [r1]
 8002f40:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d1e3      	bne.n	8002f10 <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2220      	movs	r2, #32
 8002f4c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2200      	movs	r2, #0
 8002f52:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	e853 3f00 	ldrex	r3, [r3]
 8002f66:	60fb      	str	r3, [r7, #12]
   return(result);
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	f023 0310 	bic.w	r3, r3, #16
 8002f6e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	461a      	mov	r2, r3
 8002f78:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f7c:	61fb      	str	r3, [r7, #28]
 8002f7e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f80:	69b9      	ldr	r1, [r7, #24]
 8002f82:	69fa      	ldr	r2, [r7, #28]
 8002f84:	e841 2300 	strex	r3, r2, [r1]
 8002f88:	617b      	str	r3, [r7, #20]
   return(result);
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1e4      	bne.n	8002f5a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002f90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002f94:	4619      	mov	r1, r3
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f000 f85c 	bl	8003054 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002f9c:	e03f      	b.n	800301e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002f9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fa2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d00e      	beq.n	8002fc8 <HAL_UART_IRQHandler+0x560>
 8002faa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d008      	beq.n	8002fc8 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002fbe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f001 f844 	bl	800404e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002fc6:	e02d      	b.n	8003024 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002fc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d00e      	beq.n	8002ff2 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002fd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d008      	beq.n	8002ff2 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d01c      	beq.n	8003022 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	4798      	blx	r3
    }
    return;
 8002ff0:	e017      	b.n	8003022 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002ff2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d012      	beq.n	8003024 <HAL_UART_IRQHandler+0x5bc>
 8002ffe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003002:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003006:	2b00      	cmp	r3, #0
 8003008:	d00c      	beq.n	8003024 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 fe95 	bl	8003d3a <UART_EndTransmit_IT>
    return;
 8003010:	e008      	b.n	8003024 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003012:	bf00      	nop
 8003014:	e006      	b.n	8003024 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003016:	bf00      	nop
 8003018:	e004      	b.n	8003024 <HAL_UART_IRQHandler+0x5bc>
      return;
 800301a:	bf00      	nop
 800301c:	e002      	b.n	8003024 <HAL_UART_IRQHandler+0x5bc>
      return;
 800301e:	bf00      	nop
 8003020:	e000      	b.n	8003024 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003022:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003024:	37e8      	adds	r7, #232	; 0xe8
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop

0800302c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003034:	bf00      	nop
 8003036:	370c      	adds	r7, #12
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003040:	b480      	push	{r7}
 8003042:	b083      	sub	sp, #12
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003048:	bf00      	nop
 800304a:	370c      	adds	r7, #12
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	460b      	mov	r3, r1
 800305e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003060:	bf00      	nop
 8003062:	370c      	adds	r7, #12
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800306c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003070:	b08a      	sub	sp, #40	; 0x28
 8003072:	af00      	add	r7, sp, #0
 8003074:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003076:	2300      	movs	r3, #0
 8003078:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	689a      	ldr	r2, [r3, #8]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	431a      	orrs	r2, r3
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	695b      	ldr	r3, [r3, #20]
 800308a:	431a      	orrs	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	69db      	ldr	r3, [r3, #28]
 8003090:	4313      	orrs	r3, r2
 8003092:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	4ba4      	ldr	r3, [pc, #656]	; (800332c <UART_SetConfig+0x2c0>)
 800309c:	4013      	ands	r3, r2
 800309e:	68fa      	ldr	r2, [r7, #12]
 80030a0:	6812      	ldr	r2, [r2, #0]
 80030a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030a4:	430b      	orrs	r3, r1
 80030a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	68da      	ldr	r2, [r3, #12]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	430a      	orrs	r2, r1
 80030bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a99      	ldr	r2, [pc, #612]	; (8003330 <UART_SetConfig+0x2c4>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d004      	beq.n	80030d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6a1b      	ldr	r3, [r3, #32]
 80030d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030d4:	4313      	orrs	r3, r2
 80030d6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030e8:	430a      	orrs	r2, r1
 80030ea:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a90      	ldr	r2, [pc, #576]	; (8003334 <UART_SetConfig+0x2c8>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d126      	bne.n	8003144 <UART_SetConfig+0xd8>
 80030f6:	4b90      	ldr	r3, [pc, #576]	; (8003338 <UART_SetConfig+0x2cc>)
 80030f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030fc:	f003 0303 	and.w	r3, r3, #3
 8003100:	2b03      	cmp	r3, #3
 8003102:	d81b      	bhi.n	800313c <UART_SetConfig+0xd0>
 8003104:	a201      	add	r2, pc, #4	; (adr r2, 800310c <UART_SetConfig+0xa0>)
 8003106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800310a:	bf00      	nop
 800310c:	0800311d 	.word	0x0800311d
 8003110:	0800312d 	.word	0x0800312d
 8003114:	08003125 	.word	0x08003125
 8003118:	08003135 	.word	0x08003135
 800311c:	2301      	movs	r3, #1
 800311e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003122:	e116      	b.n	8003352 <UART_SetConfig+0x2e6>
 8003124:	2302      	movs	r3, #2
 8003126:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800312a:	e112      	b.n	8003352 <UART_SetConfig+0x2e6>
 800312c:	2304      	movs	r3, #4
 800312e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003132:	e10e      	b.n	8003352 <UART_SetConfig+0x2e6>
 8003134:	2308      	movs	r3, #8
 8003136:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800313a:	e10a      	b.n	8003352 <UART_SetConfig+0x2e6>
 800313c:	2310      	movs	r3, #16
 800313e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003142:	e106      	b.n	8003352 <UART_SetConfig+0x2e6>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a7c      	ldr	r2, [pc, #496]	; (800333c <UART_SetConfig+0x2d0>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d138      	bne.n	80031c0 <UART_SetConfig+0x154>
 800314e:	4b7a      	ldr	r3, [pc, #488]	; (8003338 <UART_SetConfig+0x2cc>)
 8003150:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003154:	f003 030c 	and.w	r3, r3, #12
 8003158:	2b0c      	cmp	r3, #12
 800315a:	d82d      	bhi.n	80031b8 <UART_SetConfig+0x14c>
 800315c:	a201      	add	r2, pc, #4	; (adr r2, 8003164 <UART_SetConfig+0xf8>)
 800315e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003162:	bf00      	nop
 8003164:	08003199 	.word	0x08003199
 8003168:	080031b9 	.word	0x080031b9
 800316c:	080031b9 	.word	0x080031b9
 8003170:	080031b9 	.word	0x080031b9
 8003174:	080031a9 	.word	0x080031a9
 8003178:	080031b9 	.word	0x080031b9
 800317c:	080031b9 	.word	0x080031b9
 8003180:	080031b9 	.word	0x080031b9
 8003184:	080031a1 	.word	0x080031a1
 8003188:	080031b9 	.word	0x080031b9
 800318c:	080031b9 	.word	0x080031b9
 8003190:	080031b9 	.word	0x080031b9
 8003194:	080031b1 	.word	0x080031b1
 8003198:	2300      	movs	r3, #0
 800319a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800319e:	e0d8      	b.n	8003352 <UART_SetConfig+0x2e6>
 80031a0:	2302      	movs	r3, #2
 80031a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031a6:	e0d4      	b.n	8003352 <UART_SetConfig+0x2e6>
 80031a8:	2304      	movs	r3, #4
 80031aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031ae:	e0d0      	b.n	8003352 <UART_SetConfig+0x2e6>
 80031b0:	2308      	movs	r3, #8
 80031b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031b6:	e0cc      	b.n	8003352 <UART_SetConfig+0x2e6>
 80031b8:	2310      	movs	r3, #16
 80031ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031be:	e0c8      	b.n	8003352 <UART_SetConfig+0x2e6>
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a5e      	ldr	r2, [pc, #376]	; (8003340 <UART_SetConfig+0x2d4>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d125      	bne.n	8003216 <UART_SetConfig+0x1aa>
 80031ca:	4b5b      	ldr	r3, [pc, #364]	; (8003338 <UART_SetConfig+0x2cc>)
 80031cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80031d4:	2b30      	cmp	r3, #48	; 0x30
 80031d6:	d016      	beq.n	8003206 <UART_SetConfig+0x19a>
 80031d8:	2b30      	cmp	r3, #48	; 0x30
 80031da:	d818      	bhi.n	800320e <UART_SetConfig+0x1a2>
 80031dc:	2b20      	cmp	r3, #32
 80031de:	d00a      	beq.n	80031f6 <UART_SetConfig+0x18a>
 80031e0:	2b20      	cmp	r3, #32
 80031e2:	d814      	bhi.n	800320e <UART_SetConfig+0x1a2>
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d002      	beq.n	80031ee <UART_SetConfig+0x182>
 80031e8:	2b10      	cmp	r3, #16
 80031ea:	d008      	beq.n	80031fe <UART_SetConfig+0x192>
 80031ec:	e00f      	b.n	800320e <UART_SetConfig+0x1a2>
 80031ee:	2300      	movs	r3, #0
 80031f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031f4:	e0ad      	b.n	8003352 <UART_SetConfig+0x2e6>
 80031f6:	2302      	movs	r3, #2
 80031f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80031fc:	e0a9      	b.n	8003352 <UART_SetConfig+0x2e6>
 80031fe:	2304      	movs	r3, #4
 8003200:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003204:	e0a5      	b.n	8003352 <UART_SetConfig+0x2e6>
 8003206:	2308      	movs	r3, #8
 8003208:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800320c:	e0a1      	b.n	8003352 <UART_SetConfig+0x2e6>
 800320e:	2310      	movs	r3, #16
 8003210:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003214:	e09d      	b.n	8003352 <UART_SetConfig+0x2e6>
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a4a      	ldr	r2, [pc, #296]	; (8003344 <UART_SetConfig+0x2d8>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d125      	bne.n	800326c <UART_SetConfig+0x200>
 8003220:	4b45      	ldr	r3, [pc, #276]	; (8003338 <UART_SetConfig+0x2cc>)
 8003222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003226:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800322a:	2bc0      	cmp	r3, #192	; 0xc0
 800322c:	d016      	beq.n	800325c <UART_SetConfig+0x1f0>
 800322e:	2bc0      	cmp	r3, #192	; 0xc0
 8003230:	d818      	bhi.n	8003264 <UART_SetConfig+0x1f8>
 8003232:	2b80      	cmp	r3, #128	; 0x80
 8003234:	d00a      	beq.n	800324c <UART_SetConfig+0x1e0>
 8003236:	2b80      	cmp	r3, #128	; 0x80
 8003238:	d814      	bhi.n	8003264 <UART_SetConfig+0x1f8>
 800323a:	2b00      	cmp	r3, #0
 800323c:	d002      	beq.n	8003244 <UART_SetConfig+0x1d8>
 800323e:	2b40      	cmp	r3, #64	; 0x40
 8003240:	d008      	beq.n	8003254 <UART_SetConfig+0x1e8>
 8003242:	e00f      	b.n	8003264 <UART_SetConfig+0x1f8>
 8003244:	2300      	movs	r3, #0
 8003246:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800324a:	e082      	b.n	8003352 <UART_SetConfig+0x2e6>
 800324c:	2302      	movs	r3, #2
 800324e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003252:	e07e      	b.n	8003352 <UART_SetConfig+0x2e6>
 8003254:	2304      	movs	r3, #4
 8003256:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800325a:	e07a      	b.n	8003352 <UART_SetConfig+0x2e6>
 800325c:	2308      	movs	r3, #8
 800325e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003262:	e076      	b.n	8003352 <UART_SetConfig+0x2e6>
 8003264:	2310      	movs	r3, #16
 8003266:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800326a:	e072      	b.n	8003352 <UART_SetConfig+0x2e6>
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a35      	ldr	r2, [pc, #212]	; (8003348 <UART_SetConfig+0x2dc>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d12a      	bne.n	80032cc <UART_SetConfig+0x260>
 8003276:	4b30      	ldr	r3, [pc, #192]	; (8003338 <UART_SetConfig+0x2cc>)
 8003278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800327c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003280:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003284:	d01a      	beq.n	80032bc <UART_SetConfig+0x250>
 8003286:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800328a:	d81b      	bhi.n	80032c4 <UART_SetConfig+0x258>
 800328c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003290:	d00c      	beq.n	80032ac <UART_SetConfig+0x240>
 8003292:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003296:	d815      	bhi.n	80032c4 <UART_SetConfig+0x258>
 8003298:	2b00      	cmp	r3, #0
 800329a:	d003      	beq.n	80032a4 <UART_SetConfig+0x238>
 800329c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032a0:	d008      	beq.n	80032b4 <UART_SetConfig+0x248>
 80032a2:	e00f      	b.n	80032c4 <UART_SetConfig+0x258>
 80032a4:	2300      	movs	r3, #0
 80032a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032aa:	e052      	b.n	8003352 <UART_SetConfig+0x2e6>
 80032ac:	2302      	movs	r3, #2
 80032ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032b2:	e04e      	b.n	8003352 <UART_SetConfig+0x2e6>
 80032b4:	2304      	movs	r3, #4
 80032b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032ba:	e04a      	b.n	8003352 <UART_SetConfig+0x2e6>
 80032bc:	2308      	movs	r3, #8
 80032be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032c2:	e046      	b.n	8003352 <UART_SetConfig+0x2e6>
 80032c4:	2310      	movs	r3, #16
 80032c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80032ca:	e042      	b.n	8003352 <UART_SetConfig+0x2e6>
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a17      	ldr	r2, [pc, #92]	; (8003330 <UART_SetConfig+0x2c4>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d13a      	bne.n	800334c <UART_SetConfig+0x2e0>
 80032d6:	4b18      	ldr	r3, [pc, #96]	; (8003338 <UART_SetConfig+0x2cc>)
 80032d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032dc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80032e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80032e4:	d01a      	beq.n	800331c <UART_SetConfig+0x2b0>
 80032e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80032ea:	d81b      	bhi.n	8003324 <UART_SetConfig+0x2b8>
 80032ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032f0:	d00c      	beq.n	800330c <UART_SetConfig+0x2a0>
 80032f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80032f6:	d815      	bhi.n	8003324 <UART_SetConfig+0x2b8>
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d003      	beq.n	8003304 <UART_SetConfig+0x298>
 80032fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003300:	d008      	beq.n	8003314 <UART_SetConfig+0x2a8>
 8003302:	e00f      	b.n	8003324 <UART_SetConfig+0x2b8>
 8003304:	2300      	movs	r3, #0
 8003306:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800330a:	e022      	b.n	8003352 <UART_SetConfig+0x2e6>
 800330c:	2302      	movs	r3, #2
 800330e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003312:	e01e      	b.n	8003352 <UART_SetConfig+0x2e6>
 8003314:	2304      	movs	r3, #4
 8003316:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800331a:	e01a      	b.n	8003352 <UART_SetConfig+0x2e6>
 800331c:	2308      	movs	r3, #8
 800331e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003322:	e016      	b.n	8003352 <UART_SetConfig+0x2e6>
 8003324:	2310      	movs	r3, #16
 8003326:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800332a:	e012      	b.n	8003352 <UART_SetConfig+0x2e6>
 800332c:	efff69f3 	.word	0xefff69f3
 8003330:	40008000 	.word	0x40008000
 8003334:	40013800 	.word	0x40013800
 8003338:	40021000 	.word	0x40021000
 800333c:	40004400 	.word	0x40004400
 8003340:	40004800 	.word	0x40004800
 8003344:	40004c00 	.word	0x40004c00
 8003348:	40005000 	.word	0x40005000
 800334c:	2310      	movs	r3, #16
 800334e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a9f      	ldr	r2, [pc, #636]	; (80035d4 <UART_SetConfig+0x568>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d17a      	bne.n	8003452 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800335c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003360:	2b08      	cmp	r3, #8
 8003362:	d824      	bhi.n	80033ae <UART_SetConfig+0x342>
 8003364:	a201      	add	r2, pc, #4	; (adr r2, 800336c <UART_SetConfig+0x300>)
 8003366:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800336a:	bf00      	nop
 800336c:	08003391 	.word	0x08003391
 8003370:	080033af 	.word	0x080033af
 8003374:	08003399 	.word	0x08003399
 8003378:	080033af 	.word	0x080033af
 800337c:	0800339f 	.word	0x0800339f
 8003380:	080033af 	.word	0x080033af
 8003384:	080033af 	.word	0x080033af
 8003388:	080033af 	.word	0x080033af
 800338c:	080033a7 	.word	0x080033a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003390:	f7fe fd10 	bl	8001db4 <HAL_RCC_GetPCLK1Freq>
 8003394:	61f8      	str	r0, [r7, #28]
        break;
 8003396:	e010      	b.n	80033ba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003398:	4b8f      	ldr	r3, [pc, #572]	; (80035d8 <UART_SetConfig+0x56c>)
 800339a:	61fb      	str	r3, [r7, #28]
        break;
 800339c:	e00d      	b.n	80033ba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800339e:	f7fe fc71 	bl	8001c84 <HAL_RCC_GetSysClockFreq>
 80033a2:	61f8      	str	r0, [r7, #28]
        break;
 80033a4:	e009      	b.n	80033ba <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80033a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033aa:	61fb      	str	r3, [r7, #28]
        break;
 80033ac:	e005      	b.n	80033ba <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80033ae:	2300      	movs	r3, #0
 80033b0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80033b8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	f000 80fb 	beq.w	80035b8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	685a      	ldr	r2, [r3, #4]
 80033c6:	4613      	mov	r3, r2
 80033c8:	005b      	lsls	r3, r3, #1
 80033ca:	4413      	add	r3, r2
 80033cc:	69fa      	ldr	r2, [r7, #28]
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d305      	bcc.n	80033de <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80033d8:	69fa      	ldr	r2, [r7, #28]
 80033da:	429a      	cmp	r2, r3
 80033dc:	d903      	bls.n	80033e6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80033e4:	e0e8      	b.n	80035b8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	2200      	movs	r2, #0
 80033ea:	461c      	mov	r4, r3
 80033ec:	4615      	mov	r5, r2
 80033ee:	f04f 0200 	mov.w	r2, #0
 80033f2:	f04f 0300 	mov.w	r3, #0
 80033f6:	022b      	lsls	r3, r5, #8
 80033f8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80033fc:	0222      	lsls	r2, r4, #8
 80033fe:	68f9      	ldr	r1, [r7, #12]
 8003400:	6849      	ldr	r1, [r1, #4]
 8003402:	0849      	lsrs	r1, r1, #1
 8003404:	2000      	movs	r0, #0
 8003406:	4688      	mov	r8, r1
 8003408:	4681      	mov	r9, r0
 800340a:	eb12 0a08 	adds.w	sl, r2, r8
 800340e:	eb43 0b09 	adc.w	fp, r3, r9
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	603b      	str	r3, [r7, #0]
 800341a:	607a      	str	r2, [r7, #4]
 800341c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003420:	4650      	mov	r0, sl
 8003422:	4659      	mov	r1, fp
 8003424:	f7fc ff34 	bl	8000290 <__aeabi_uldivmod>
 8003428:	4602      	mov	r2, r0
 800342a:	460b      	mov	r3, r1
 800342c:	4613      	mov	r3, r2
 800342e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003430:	69bb      	ldr	r3, [r7, #24]
 8003432:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003436:	d308      	bcc.n	800344a <UART_SetConfig+0x3de>
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800343e:	d204      	bcs.n	800344a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	60da      	str	r2, [r3, #12]
 8003448:	e0b6      	b.n	80035b8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003450:	e0b2      	b.n	80035b8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	69db      	ldr	r3, [r3, #28]
 8003456:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800345a:	d15e      	bne.n	800351a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800345c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003460:	2b08      	cmp	r3, #8
 8003462:	d828      	bhi.n	80034b6 <UART_SetConfig+0x44a>
 8003464:	a201      	add	r2, pc, #4	; (adr r2, 800346c <UART_SetConfig+0x400>)
 8003466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800346a:	bf00      	nop
 800346c:	08003491 	.word	0x08003491
 8003470:	08003499 	.word	0x08003499
 8003474:	080034a1 	.word	0x080034a1
 8003478:	080034b7 	.word	0x080034b7
 800347c:	080034a7 	.word	0x080034a7
 8003480:	080034b7 	.word	0x080034b7
 8003484:	080034b7 	.word	0x080034b7
 8003488:	080034b7 	.word	0x080034b7
 800348c:	080034af 	.word	0x080034af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003490:	f7fe fc90 	bl	8001db4 <HAL_RCC_GetPCLK1Freq>
 8003494:	61f8      	str	r0, [r7, #28]
        break;
 8003496:	e014      	b.n	80034c2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003498:	f7fe fca2 	bl	8001de0 <HAL_RCC_GetPCLK2Freq>
 800349c:	61f8      	str	r0, [r7, #28]
        break;
 800349e:	e010      	b.n	80034c2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034a0:	4b4d      	ldr	r3, [pc, #308]	; (80035d8 <UART_SetConfig+0x56c>)
 80034a2:	61fb      	str	r3, [r7, #28]
        break;
 80034a4:	e00d      	b.n	80034c2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034a6:	f7fe fbed 	bl	8001c84 <HAL_RCC_GetSysClockFreq>
 80034aa:	61f8      	str	r0, [r7, #28]
        break;
 80034ac:	e009      	b.n	80034c2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034b2:	61fb      	str	r3, [r7, #28]
        break;
 80034b4:	e005      	b.n	80034c2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80034b6:	2300      	movs	r3, #0
 80034b8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80034c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d077      	beq.n	80035b8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	005a      	lsls	r2, r3, #1
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	085b      	lsrs	r3, r3, #1
 80034d2:	441a      	add	r2, r3
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034dc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80034de:	69bb      	ldr	r3, [r7, #24]
 80034e0:	2b0f      	cmp	r3, #15
 80034e2:	d916      	bls.n	8003512 <UART_SetConfig+0x4a6>
 80034e4:	69bb      	ldr	r3, [r7, #24]
 80034e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034ea:	d212      	bcs.n	8003512 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80034ec:	69bb      	ldr	r3, [r7, #24]
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	f023 030f 	bic.w	r3, r3, #15
 80034f4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	085b      	lsrs	r3, r3, #1
 80034fa:	b29b      	uxth	r3, r3
 80034fc:	f003 0307 	and.w	r3, r3, #7
 8003500:	b29a      	uxth	r2, r3
 8003502:	8afb      	ldrh	r3, [r7, #22]
 8003504:	4313      	orrs	r3, r2
 8003506:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	8afa      	ldrh	r2, [r7, #22]
 800350e:	60da      	str	r2, [r3, #12]
 8003510:	e052      	b.n	80035b8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003518:	e04e      	b.n	80035b8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800351a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800351e:	2b08      	cmp	r3, #8
 8003520:	d827      	bhi.n	8003572 <UART_SetConfig+0x506>
 8003522:	a201      	add	r2, pc, #4	; (adr r2, 8003528 <UART_SetConfig+0x4bc>)
 8003524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003528:	0800354d 	.word	0x0800354d
 800352c:	08003555 	.word	0x08003555
 8003530:	0800355d 	.word	0x0800355d
 8003534:	08003573 	.word	0x08003573
 8003538:	08003563 	.word	0x08003563
 800353c:	08003573 	.word	0x08003573
 8003540:	08003573 	.word	0x08003573
 8003544:	08003573 	.word	0x08003573
 8003548:	0800356b 	.word	0x0800356b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800354c:	f7fe fc32 	bl	8001db4 <HAL_RCC_GetPCLK1Freq>
 8003550:	61f8      	str	r0, [r7, #28]
        break;
 8003552:	e014      	b.n	800357e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003554:	f7fe fc44 	bl	8001de0 <HAL_RCC_GetPCLK2Freq>
 8003558:	61f8      	str	r0, [r7, #28]
        break;
 800355a:	e010      	b.n	800357e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800355c:	4b1e      	ldr	r3, [pc, #120]	; (80035d8 <UART_SetConfig+0x56c>)
 800355e:	61fb      	str	r3, [r7, #28]
        break;
 8003560:	e00d      	b.n	800357e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003562:	f7fe fb8f 	bl	8001c84 <HAL_RCC_GetSysClockFreq>
 8003566:	61f8      	str	r0, [r7, #28]
        break;
 8003568:	e009      	b.n	800357e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800356a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800356e:	61fb      	str	r3, [r7, #28]
        break;
 8003570:	e005      	b.n	800357e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003572:	2300      	movs	r3, #0
 8003574:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800357c:	bf00      	nop
    }

    if (pclk != 0U)
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d019      	beq.n	80035b8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	085a      	lsrs	r2, r3, #1
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	441a      	add	r2, r3
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	fbb2 f3f3 	udiv	r3, r2, r3
 8003596:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	2b0f      	cmp	r3, #15
 800359c:	d909      	bls.n	80035b2 <UART_SetConfig+0x546>
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035a4:	d205      	bcs.n	80035b2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	b29a      	uxth	r2, r3
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	60da      	str	r2, [r3, #12]
 80035b0:	e002      	b.n	80035b8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2200      	movs	r2, #0
 80035bc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2200      	movs	r2, #0
 80035c2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80035c4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3728      	adds	r7, #40	; 0x28
 80035cc:	46bd      	mov	sp, r7
 80035ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035d2:	bf00      	nop
 80035d4:	40008000 	.word	0x40008000
 80035d8:	00f42400 	.word	0x00f42400

080035dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e8:	f003 0301 	and.w	r3, r3, #1
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d00a      	beq.n	8003606 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	430a      	orrs	r2, r1
 8003604:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00a      	beq.n	8003628 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	430a      	orrs	r2, r1
 8003626:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800362c:	f003 0304 	and.w	r3, r3, #4
 8003630:	2b00      	cmp	r3, #0
 8003632:	d00a      	beq.n	800364a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	685b      	ldr	r3, [r3, #4]
 800363a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	430a      	orrs	r2, r1
 8003648:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800364e:	f003 0308 	and.w	r3, r3, #8
 8003652:	2b00      	cmp	r3, #0
 8003654:	d00a      	beq.n	800366c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	430a      	orrs	r2, r1
 800366a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003670:	f003 0310 	and.w	r3, r3, #16
 8003674:	2b00      	cmp	r3, #0
 8003676:	d00a      	beq.n	800368e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	430a      	orrs	r2, r1
 800368c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003692:	f003 0320 	and.w	r3, r3, #32
 8003696:	2b00      	cmp	r3, #0
 8003698:	d00a      	beq.n	80036b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	430a      	orrs	r2, r1
 80036ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d01a      	beq.n	80036f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	430a      	orrs	r2, r1
 80036d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036da:	d10a      	bne.n	80036f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	430a      	orrs	r2, r1
 80036f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00a      	beq.n	8003714 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	430a      	orrs	r2, r1
 8003712:	605a      	str	r2, [r3, #4]
  }
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371e:	4770      	bx	lr

08003720 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b086      	sub	sp, #24
 8003724:	af02      	add	r7, sp, #8
 8003726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2200      	movs	r2, #0
 800372c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003730:	f7fd fa1c 	bl	8000b6c <HAL_GetTick>
 8003734:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f003 0308 	and.w	r3, r3, #8
 8003740:	2b08      	cmp	r3, #8
 8003742:	d10e      	bne.n	8003762 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003744:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003748:	9300      	str	r3, [sp, #0]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 f82d 	bl	80037b2 <UART_WaitOnFlagUntilTimeout>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d001      	beq.n	8003762 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e023      	b.n	80037aa <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0304 	and.w	r3, r3, #4
 800376c:	2b04      	cmp	r3, #4
 800376e:	d10e      	bne.n	800378e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003770:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003774:	9300      	str	r3, [sp, #0]
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2200      	movs	r2, #0
 800377a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 f817 	bl	80037b2 <UART_WaitOnFlagUntilTimeout>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d001      	beq.n	800378e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e00d      	b.n	80037aa <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2220      	movs	r2, #32
 8003792:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2220      	movs	r2, #32
 8003798:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}

080037b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80037b2:	b580      	push	{r7, lr}
 80037b4:	b09c      	sub	sp, #112	; 0x70
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	60f8      	str	r0, [r7, #12]
 80037ba:	60b9      	str	r1, [r7, #8]
 80037bc:	603b      	str	r3, [r7, #0]
 80037be:	4613      	mov	r3, r2
 80037c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80037c2:	e0a5      	b.n	8003910 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ca:	f000 80a1 	beq.w	8003910 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037ce:	f7fd f9cd 	bl	8000b6c <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80037da:	429a      	cmp	r2, r3
 80037dc:	d302      	bcc.n	80037e4 <UART_WaitOnFlagUntilTimeout+0x32>
 80037de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d13e      	bne.n	8003862 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037ec:	e853 3f00 	ldrex	r3, [r3]
 80037f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80037f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80037f8:	667b      	str	r3, [r7, #100]	; 0x64
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	461a      	mov	r2, r3
 8003800:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003802:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003804:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003806:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003808:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800380a:	e841 2300 	strex	r3, r2, [r1]
 800380e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003810:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1e6      	bne.n	80037e4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	3308      	adds	r3, #8
 800381c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800381e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003820:	e853 3f00 	ldrex	r3, [r3]
 8003824:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003828:	f023 0301 	bic.w	r3, r3, #1
 800382c:	663b      	str	r3, [r7, #96]	; 0x60
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	3308      	adds	r3, #8
 8003834:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003836:	64ba      	str	r2, [r7, #72]	; 0x48
 8003838:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800383a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800383c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800383e:	e841 2300 	strex	r3, r2, [r1]
 8003842:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003844:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003846:	2b00      	cmp	r3, #0
 8003848:	d1e5      	bne.n	8003816 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2220      	movs	r2, #32
 800384e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2220      	movs	r2, #32
 8003854:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	2200      	movs	r2, #0
 800385a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e067      	b.n	8003932 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0304 	and.w	r3, r3, #4
 800386c:	2b00      	cmp	r3, #0
 800386e:	d04f      	beq.n	8003910 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	69db      	ldr	r3, [r3, #28]
 8003876:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800387a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800387e:	d147      	bne.n	8003910 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003888:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003892:	e853 3f00 	ldrex	r3, [r3]
 8003896:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800389a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800389e:	66fb      	str	r3, [r7, #108]	; 0x6c
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	461a      	mov	r2, r3
 80038a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038a8:	637b      	str	r3, [r7, #52]	; 0x34
 80038aa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80038ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80038b0:	e841 2300 	strex	r3, r2, [r1]
 80038b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80038b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d1e6      	bne.n	800388a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	3308      	adds	r3, #8
 80038c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	e853 3f00 	ldrex	r3, [r3]
 80038ca:	613b      	str	r3, [r7, #16]
   return(result);
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	f023 0301 	bic.w	r3, r3, #1
 80038d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	3308      	adds	r3, #8
 80038da:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80038dc:	623a      	str	r2, [r7, #32]
 80038de:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e0:	69f9      	ldr	r1, [r7, #28]
 80038e2:	6a3a      	ldr	r2, [r7, #32]
 80038e4:	e841 2300 	strex	r3, r2, [r1]
 80038e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80038ea:	69bb      	ldr	r3, [r7, #24]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d1e5      	bne.n	80038bc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	2220      	movs	r2, #32
 80038f4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2220      	movs	r2, #32
 80038fa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2220      	movs	r2, #32
 8003900:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800390c:	2303      	movs	r3, #3
 800390e:	e010      	b.n	8003932 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	69da      	ldr	r2, [r3, #28]
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	4013      	ands	r3, r2
 800391a:	68ba      	ldr	r2, [r7, #8]
 800391c:	429a      	cmp	r2, r3
 800391e:	bf0c      	ite	eq
 8003920:	2301      	moveq	r3, #1
 8003922:	2300      	movne	r3, #0
 8003924:	b2db      	uxtb	r3, r3
 8003926:	461a      	mov	r2, r3
 8003928:	79fb      	ldrb	r3, [r7, #7]
 800392a:	429a      	cmp	r2, r3
 800392c:	f43f af4a 	beq.w	80037c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	3770      	adds	r7, #112	; 0x70
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
	...

0800393c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800393c:	b480      	push	{r7}
 800393e:	b097      	sub	sp, #92	; 0x5c
 8003940:	af00      	add	r7, sp, #0
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	4613      	mov	r3, r2
 8003948:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	68ba      	ldr	r2, [r7, #8]
 800394e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	88fa      	ldrh	r2, [r7, #6]
 8003954:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	88fa      	ldrh	r2, [r7, #6]
 800395c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2200      	movs	r2, #0
 8003964:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800396e:	d10e      	bne.n	800398e <UART_Start_Receive_IT+0x52>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	691b      	ldr	r3, [r3, #16]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d105      	bne.n	8003984 <UART_Start_Receive_IT+0x48>
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800397e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003982:	e02d      	b.n	80039e0 <UART_Start_Receive_IT+0xa4>
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	22ff      	movs	r2, #255	; 0xff
 8003988:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800398c:	e028      	b.n	80039e0 <UART_Start_Receive_IT+0xa4>
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	689b      	ldr	r3, [r3, #8]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d10d      	bne.n	80039b2 <UART_Start_Receive_IT+0x76>
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d104      	bne.n	80039a8 <UART_Start_Receive_IT+0x6c>
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	22ff      	movs	r2, #255	; 0xff
 80039a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80039a6:	e01b      	b.n	80039e0 <UART_Start_Receive_IT+0xa4>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	227f      	movs	r2, #127	; 0x7f
 80039ac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80039b0:	e016      	b.n	80039e0 <UART_Start_Receive_IT+0xa4>
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	689b      	ldr	r3, [r3, #8]
 80039b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80039ba:	d10d      	bne.n	80039d8 <UART_Start_Receive_IT+0x9c>
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	691b      	ldr	r3, [r3, #16]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d104      	bne.n	80039ce <UART_Start_Receive_IT+0x92>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	227f      	movs	r2, #127	; 0x7f
 80039c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80039cc:	e008      	b.n	80039e0 <UART_Start_Receive_IT+0xa4>
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	223f      	movs	r2, #63	; 0x3f
 80039d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80039d6:	e003      	b.n	80039e0 <UART_Start_Receive_IT+0xa4>
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2200      	movs	r2, #0
 80039dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2200      	movs	r2, #0
 80039e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2222      	movs	r2, #34	; 0x22
 80039ec:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	3308      	adds	r3, #8
 80039f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039f8:	e853 3f00 	ldrex	r3, [r3]
 80039fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80039fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a00:	f043 0301 	orr.w	r3, r3, #1
 8003a04:	657b      	str	r3, [r7, #84]	; 0x54
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	3308      	adds	r3, #8
 8003a0c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003a0e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003a10:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003a14:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a16:	e841 2300 	strex	r3, r2, [r1]
 8003a1a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003a1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d1e5      	bne.n	80039ee <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }  
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a2a:	d107      	bne.n	8003a3c <UART_Start_Receive_IT+0x100>
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	691b      	ldr	r3, [r3, #16]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d103      	bne.n	8003a3c <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	4a24      	ldr	r2, [pc, #144]	; (8003ac8 <UART_Start_Receive_IT+0x18c>)
 8003a38:	665a      	str	r2, [r3, #100]	; 0x64
 8003a3a:	e002      	b.n	8003a42 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	4a23      	ldr	r2, [pc, #140]	; (8003acc <UART_Start_Receive_IT+0x190>)
 8003a40:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d019      	beq.n	8003a86 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a5a:	e853 3f00 	ldrex	r3, [r3]
 8003a5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a62:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003a66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	461a      	mov	r2, r3
 8003a6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a70:	637b      	str	r3, [r7, #52]	; 0x34
 8003a72:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003a76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003a78:	e841 2300 	strex	r3, r2, [r1]
 8003a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d1e6      	bne.n	8003a52 <UART_Start_Receive_IT+0x116>
 8003a84:	e018      	b.n	8003ab8 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a8c:	697b      	ldr	r3, [r7, #20]
 8003a8e:	e853 3f00 	ldrex	r3, [r3]
 8003a92:	613b      	str	r3, [r7, #16]
   return(result);
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	f043 0320 	orr.w	r3, r3, #32
 8003a9a:	653b      	str	r3, [r7, #80]	; 0x50
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003aa4:	623b      	str	r3, [r7, #32]
 8003aa6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa8:	69f9      	ldr	r1, [r7, #28]
 8003aaa:	6a3a      	ldr	r2, [r7, #32]
 8003aac:	e841 2300 	strex	r3, r2, [r1]
 8003ab0:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d1e6      	bne.n	8003a86 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8003ab8:	2300      	movs	r3, #0
}
 8003aba:	4618      	mov	r0, r3
 8003abc:	375c      	adds	r7, #92	; 0x5c
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	08003eef 	.word	0x08003eef
 8003acc:	08003d8f 	.word	0x08003d8f

08003ad0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b095      	sub	sp, #84	; 0x54
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ae0:	e853 3f00 	ldrex	r3, [r3]
 8003ae4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003aec:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	461a      	mov	r2, r3
 8003af4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003af6:	643b      	str	r3, [r7, #64]	; 0x40
 8003af8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003afa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003afc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003afe:	e841 2300 	strex	r3, r2, [r1]
 8003b02:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1e6      	bne.n	8003ad8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	3308      	adds	r3, #8
 8003b10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b12:	6a3b      	ldr	r3, [r7, #32]
 8003b14:	e853 3f00 	ldrex	r3, [r3]
 8003b18:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	f023 0301 	bic.w	r3, r3, #1
 8003b20:	64bb      	str	r3, [r7, #72]	; 0x48
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	3308      	adds	r3, #8
 8003b28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003b2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b2c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b32:	e841 2300 	strex	r3, r2, [r1]
 8003b36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d1e5      	bne.n	8003b0a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d118      	bne.n	8003b78 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	e853 3f00 	ldrex	r3, [r3]
 8003b52:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	f023 0310 	bic.w	r3, r3, #16
 8003b5a:	647b      	str	r3, [r7, #68]	; 0x44
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	461a      	mov	r2, r3
 8003b62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b64:	61bb      	str	r3, [r7, #24]
 8003b66:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b68:	6979      	ldr	r1, [r7, #20]
 8003b6a:	69ba      	ldr	r2, [r7, #24]
 8003b6c:	e841 2300 	strex	r3, r2, [r1]
 8003b70:	613b      	str	r3, [r7, #16]
   return(result);
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d1e6      	bne.n	8003b46 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2220      	movs	r2, #32
 8003b7c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2200      	movs	r2, #0
 8003b82:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003b8a:	bf00      	nop
 8003b8c:	3754      	adds	r7, #84	; 0x54
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr

08003b96 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003b96:	b580      	push	{r7, lr}
 8003b98:	b084      	sub	sp, #16
 8003b9a:	af00      	add	r7, sp, #0
 8003b9c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003bb4:	68f8      	ldr	r0, [r7, #12]
 8003bb6:	f7ff fa43 	bl	8003040 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003bba:	bf00      	nop
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003bc2:	b480      	push	{r7}
 8003bc4:	b08f      	sub	sp, #60	; 0x3c
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003bce:	2b21      	cmp	r3, #33	; 0x21
 8003bd0:	d14d      	bne.n	8003c6e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d132      	bne.n	8003c44 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be4:	6a3b      	ldr	r3, [r7, #32]
 8003be6:	e853 3f00 	ldrex	r3, [r3]
 8003bea:	61fb      	str	r3, [r7, #28]
   return(result);
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bf2:	637b      	str	r3, [r7, #52]	; 0x34
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bfe:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003c02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c04:	e841 2300 	strex	r3, r2, [r1]
 8003c08:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d1e6      	bne.n	8003bde <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	e853 3f00 	ldrex	r3, [r3]
 8003c1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003c24:	633b      	str	r3, [r7, #48]	; 0x30
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c2e:	61bb      	str	r3, [r7, #24]
 8003c30:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c32:	6979      	ldr	r1, [r7, #20]
 8003c34:	69ba      	ldr	r2, [r7, #24]
 8003c36:	e841 2300 	strex	r3, r2, [r1]
 8003c3a:	613b      	str	r3, [r7, #16]
   return(result);
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1e6      	bne.n	8003c10 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003c42:	e014      	b.n	8003c6e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c48:	781a      	ldrb	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	b292      	uxth	r2, r2
 8003c50:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c56:	1c5a      	adds	r2, r3, #1
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	3b01      	subs	r3, #1
 8003c66:	b29a      	uxth	r2, r3
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8003c6e:	bf00      	nop
 8003c70:	373c      	adds	r7, #60	; 0x3c
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr

08003c7a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003c7a:	b480      	push	{r7}
 8003c7c:	b091      	sub	sp, #68	; 0x44
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c86:	2b21      	cmp	r3, #33	; 0x21
 8003c88:	d151      	bne.n	8003d2e <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d132      	bne.n	8003cfc <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9e:	e853 3f00 	ldrex	r3, [r3]
 8003ca2:	623b      	str	r3, [r7, #32]
   return(result);
 8003ca4:	6a3b      	ldr	r3, [r7, #32]
 8003ca6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003caa:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cb4:	633b      	str	r3, [r7, #48]	; 0x30
 8003cb6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cb8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003cba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cbc:	e841 2300 	strex	r3, r2, [r1]
 8003cc0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d1e6      	bne.n	8003c96 <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	e853 3f00 	ldrex	r3, [r3]
 8003cd4:	60fb      	str	r3, [r7, #12]
   return(result);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cdc:	637b      	str	r3, [r7, #52]	; 0x34
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ce6:	61fb      	str	r3, [r7, #28]
 8003ce8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cea:	69b9      	ldr	r1, [r7, #24]
 8003cec:	69fa      	ldr	r2, [r7, #28]
 8003cee:	e841 2300 	strex	r3, r2, [r1]
 8003cf2:	617b      	str	r3, [r7, #20]
   return(result);
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1e6      	bne.n	8003cc8 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003cfa:	e018      	b.n	8003d2e <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d00:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003d02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d04:	881a      	ldrh	r2, [r3, #0]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d0e:	b292      	uxth	r2, r2
 8003d10:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d16:	1c9a      	adds	r2, r3, #2
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003d22:	b29b      	uxth	r3, r3
 8003d24:	3b01      	subs	r3, #1
 8003d26:	b29a      	uxth	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8003d2e:	bf00      	nop
 8003d30:	3744      	adds	r7, #68	; 0x44
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr

08003d3a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b088      	sub	sp, #32
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	e853 3f00 	ldrex	r3, [r3]
 8003d4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d56:	61fb      	str	r3, [r7, #28]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	69fb      	ldr	r3, [r7, #28]
 8003d60:	61bb      	str	r3, [r7, #24]
 8003d62:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d64:	6979      	ldr	r1, [r7, #20]
 8003d66:	69ba      	ldr	r2, [r7, #24]
 8003d68:	e841 2300 	strex	r3, r2, [r1]
 8003d6c:	613b      	str	r3, [r7, #16]
   return(result);
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d1e6      	bne.n	8003d42 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2220      	movs	r2, #32
 8003d78:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f7ff f953 	bl	800302c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003d86:	bf00      	nop
 8003d88:	3720      	adds	r7, #32
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b096      	sub	sp, #88	; 0x58
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003d9c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003da4:	2b22      	cmp	r3, #34	; 0x22
 8003da6:	f040 8094 	bne.w	8003ed2 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003db0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003db4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003db8:	b2d9      	uxtb	r1, r3
 8003dba:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003dbe:	b2da      	uxtb	r2, r3
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc4:	400a      	ands	r2, r1
 8003dc6:	b2d2      	uxtb	r2, r2
 8003dc8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dce:	1c5a      	adds	r2, r3, #1
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	3b01      	subs	r3, #1
 8003dde:	b29a      	uxth	r2, r3
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003dec:	b29b      	uxth	r3, r3
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d179      	bne.n	8003ee6 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dfa:	e853 3f00 	ldrex	r3, [r3]
 8003dfe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e02:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e06:	653b      	str	r3, [r7, #80]	; 0x50
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	461a      	mov	r2, r3
 8003e0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e10:	647b      	str	r3, [r7, #68]	; 0x44
 8003e12:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e14:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e18:	e841 2300 	strex	r3, r2, [r1]
 8003e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d1e6      	bne.n	8003df2 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	3308      	adds	r3, #8
 8003e2a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2e:	e853 3f00 	ldrex	r3, [r3]
 8003e32:	623b      	str	r3, [r7, #32]
   return(result);
 8003e34:	6a3b      	ldr	r3, [r7, #32]
 8003e36:	f023 0301 	bic.w	r3, r3, #1
 8003e3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	3308      	adds	r3, #8
 8003e42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e44:	633a      	str	r2, [r7, #48]	; 0x30
 8003e46:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e48:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e4c:	e841 2300 	strex	r3, r2, [r1]
 8003e50:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d1e5      	bne.n	8003e24 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2220      	movs	r2, #32
 8003e5c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d12e      	bne.n	8003eca <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	e853 3f00 	ldrex	r3, [r3]
 8003e7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f023 0310 	bic.w	r3, r3, #16
 8003e86:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e90:	61fb      	str	r3, [r7, #28]
 8003e92:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e94:	69b9      	ldr	r1, [r7, #24]
 8003e96:	69fa      	ldr	r2, [r7, #28]
 8003e98:	e841 2300 	strex	r3, r2, [r1]
 8003e9c:	617b      	str	r3, [r7, #20]
   return(result);
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d1e6      	bne.n	8003e72 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	69db      	ldr	r3, [r3, #28]
 8003eaa:	f003 0310 	and.w	r3, r3, #16
 8003eae:	2b10      	cmp	r3, #16
 8003eb0:	d103      	bne.n	8003eba <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	2210      	movs	r2, #16
 8003eb8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f7ff f8c6 	bl	8003054 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003ec8:	e00d      	b.n	8003ee6 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f7fc fb62 	bl	8000594 <HAL_UART_RxCpltCallback>
}
 8003ed0:	e009      	b.n	8003ee6 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	8b1b      	ldrh	r3, [r3, #24]
 8003ed8:	b29a      	uxth	r2, r3
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f042 0208 	orr.w	r2, r2, #8
 8003ee2:	b292      	uxth	r2, r2
 8003ee4:	831a      	strh	r2, [r3, #24]
}
 8003ee6:	bf00      	nop
 8003ee8:	3758      	adds	r7, #88	; 0x58
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}

08003eee <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003eee:	b580      	push	{r7, lr}
 8003ef0:	b096      	sub	sp, #88	; 0x58
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003efc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f04:	2b22      	cmp	r3, #34	; 0x22
 8003f06:	f040 8094 	bne.w	8004032 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003f10:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f18:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8003f1a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8003f1e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003f22:	4013      	ands	r3, r2
 8003f24:	b29a      	uxth	r2, r3
 8003f26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f28:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f2e:	1c9a      	adds	r2, r3, #2
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	b29a      	uxth	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003f4c:	b29b      	uxth	r3, r3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d179      	bne.n	8004046 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f5a:	e853 3f00 	ldrex	r3, [r3]
 8003f5e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f62:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003f66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f70:	643b      	str	r3, [r7, #64]	; 0x40
 8003f72:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f74:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003f76:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f78:	e841 2300 	strex	r3, r2, [r1]
 8003f7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d1e6      	bne.n	8003f52 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	3308      	adds	r3, #8
 8003f8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f8c:	6a3b      	ldr	r3, [r7, #32]
 8003f8e:	e853 3f00 	ldrex	r3, [r3]
 8003f92:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	f023 0301 	bic.w	r3, r3, #1
 8003f9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	3308      	adds	r3, #8
 8003fa2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fa4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003fa6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003faa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003fac:	e841 2300 	strex	r3, r2, [r1]
 8003fb0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d1e5      	bne.n	8003f84 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2220      	movs	r2, #32
 8003fbc:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d12e      	bne.n	800402a <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	e853 3f00 	ldrex	r3, [r3]
 8003fde:	60bb      	str	r3, [r7, #8]
   return(result);
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	f023 0310 	bic.w	r3, r3, #16
 8003fe6:	647b      	str	r3, [r7, #68]	; 0x44
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	461a      	mov	r2, r3
 8003fee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ff0:	61bb      	str	r3, [r7, #24]
 8003ff2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff4:	6979      	ldr	r1, [r7, #20]
 8003ff6:	69ba      	ldr	r2, [r7, #24]
 8003ff8:	e841 2300 	strex	r3, r2, [r1]
 8003ffc:	613b      	str	r3, [r7, #16]
   return(result);
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d1e6      	bne.n	8003fd2 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	69db      	ldr	r3, [r3, #28]
 800400a:	f003 0310 	and.w	r3, r3, #16
 800400e:	2b10      	cmp	r3, #16
 8004010:	d103      	bne.n	800401a <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2210      	movs	r2, #16
 8004018:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004020:	4619      	mov	r1, r3
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f7ff f816 	bl	8003054 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004028:	e00d      	b.n	8004046 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f7fc fab2 	bl	8000594 <HAL_UART_RxCpltCallback>
}
 8004030:	e009      	b.n	8004046 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	8b1b      	ldrh	r3, [r3, #24]
 8004038:	b29a      	uxth	r2, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f042 0208 	orr.w	r2, r2, #8
 8004042:	b292      	uxth	r2, r2
 8004044:	831a      	strh	r2, [r3, #24]
}
 8004046:	bf00      	nop
 8004048:	3758      	adds	r7, #88	; 0x58
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}

0800404e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800404e:	b480      	push	{r7}
 8004050:	b083      	sub	sp, #12
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004056:	bf00      	nop
 8004058:	370c      	adds	r7, #12
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
	...

08004064 <__errno>:
 8004064:	4b01      	ldr	r3, [pc, #4]	; (800406c <__errno+0x8>)
 8004066:	6818      	ldr	r0, [r3, #0]
 8004068:	4770      	bx	lr
 800406a:	bf00      	nop
 800406c:	2000000c 	.word	0x2000000c

08004070 <__libc_init_array>:
 8004070:	b570      	push	{r4, r5, r6, lr}
 8004072:	4d0d      	ldr	r5, [pc, #52]	; (80040a8 <__libc_init_array+0x38>)
 8004074:	4c0d      	ldr	r4, [pc, #52]	; (80040ac <__libc_init_array+0x3c>)
 8004076:	1b64      	subs	r4, r4, r5
 8004078:	10a4      	asrs	r4, r4, #2
 800407a:	2600      	movs	r6, #0
 800407c:	42a6      	cmp	r6, r4
 800407e:	d109      	bne.n	8004094 <__libc_init_array+0x24>
 8004080:	4d0b      	ldr	r5, [pc, #44]	; (80040b0 <__libc_init_array+0x40>)
 8004082:	4c0c      	ldr	r4, [pc, #48]	; (80040b4 <__libc_init_array+0x44>)
 8004084:	f000 fc8e 	bl	80049a4 <_init>
 8004088:	1b64      	subs	r4, r4, r5
 800408a:	10a4      	asrs	r4, r4, #2
 800408c:	2600      	movs	r6, #0
 800408e:	42a6      	cmp	r6, r4
 8004090:	d105      	bne.n	800409e <__libc_init_array+0x2e>
 8004092:	bd70      	pop	{r4, r5, r6, pc}
 8004094:	f855 3b04 	ldr.w	r3, [r5], #4
 8004098:	4798      	blx	r3
 800409a:	3601      	adds	r6, #1
 800409c:	e7ee      	b.n	800407c <__libc_init_array+0xc>
 800409e:	f855 3b04 	ldr.w	r3, [r5], #4
 80040a2:	4798      	blx	r3
 80040a4:	3601      	adds	r6, #1
 80040a6:	e7f2      	b.n	800408e <__libc_init_array+0x1e>
 80040a8:	08004a68 	.word	0x08004a68
 80040ac:	08004a68 	.word	0x08004a68
 80040b0:	08004a68 	.word	0x08004a68
 80040b4:	08004a6c 	.word	0x08004a6c

080040b8 <memset>:
 80040b8:	4402      	add	r2, r0
 80040ba:	4603      	mov	r3, r0
 80040bc:	4293      	cmp	r3, r2
 80040be:	d100      	bne.n	80040c2 <memset+0xa>
 80040c0:	4770      	bx	lr
 80040c2:	f803 1b01 	strb.w	r1, [r3], #1
 80040c6:	e7f9      	b.n	80040bc <memset+0x4>

080040c8 <siprintf>:
 80040c8:	b40e      	push	{r1, r2, r3}
 80040ca:	b500      	push	{lr}
 80040cc:	b09c      	sub	sp, #112	; 0x70
 80040ce:	ab1d      	add	r3, sp, #116	; 0x74
 80040d0:	9002      	str	r0, [sp, #8]
 80040d2:	9006      	str	r0, [sp, #24]
 80040d4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80040d8:	4809      	ldr	r0, [pc, #36]	; (8004100 <siprintf+0x38>)
 80040da:	9107      	str	r1, [sp, #28]
 80040dc:	9104      	str	r1, [sp, #16]
 80040de:	4909      	ldr	r1, [pc, #36]	; (8004104 <siprintf+0x3c>)
 80040e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80040e4:	9105      	str	r1, [sp, #20]
 80040e6:	6800      	ldr	r0, [r0, #0]
 80040e8:	9301      	str	r3, [sp, #4]
 80040ea:	a902      	add	r1, sp, #8
 80040ec:	f000 f868 	bl	80041c0 <_svfiprintf_r>
 80040f0:	9b02      	ldr	r3, [sp, #8]
 80040f2:	2200      	movs	r2, #0
 80040f4:	701a      	strb	r2, [r3, #0]
 80040f6:	b01c      	add	sp, #112	; 0x70
 80040f8:	f85d eb04 	ldr.w	lr, [sp], #4
 80040fc:	b003      	add	sp, #12
 80040fe:	4770      	bx	lr
 8004100:	2000000c 	.word	0x2000000c
 8004104:	ffff0208 	.word	0xffff0208

08004108 <__ssputs_r>:
 8004108:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800410c:	688e      	ldr	r6, [r1, #8]
 800410e:	429e      	cmp	r6, r3
 8004110:	4682      	mov	sl, r0
 8004112:	460c      	mov	r4, r1
 8004114:	4690      	mov	r8, r2
 8004116:	461f      	mov	r7, r3
 8004118:	d838      	bhi.n	800418c <__ssputs_r+0x84>
 800411a:	898a      	ldrh	r2, [r1, #12]
 800411c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004120:	d032      	beq.n	8004188 <__ssputs_r+0x80>
 8004122:	6825      	ldr	r5, [r4, #0]
 8004124:	6909      	ldr	r1, [r1, #16]
 8004126:	eba5 0901 	sub.w	r9, r5, r1
 800412a:	6965      	ldr	r5, [r4, #20]
 800412c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004130:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004134:	3301      	adds	r3, #1
 8004136:	444b      	add	r3, r9
 8004138:	106d      	asrs	r5, r5, #1
 800413a:	429d      	cmp	r5, r3
 800413c:	bf38      	it	cc
 800413e:	461d      	movcc	r5, r3
 8004140:	0553      	lsls	r3, r2, #21
 8004142:	d531      	bpl.n	80041a8 <__ssputs_r+0xa0>
 8004144:	4629      	mov	r1, r5
 8004146:	f000 fb63 	bl	8004810 <_malloc_r>
 800414a:	4606      	mov	r6, r0
 800414c:	b950      	cbnz	r0, 8004164 <__ssputs_r+0x5c>
 800414e:	230c      	movs	r3, #12
 8004150:	f8ca 3000 	str.w	r3, [sl]
 8004154:	89a3      	ldrh	r3, [r4, #12]
 8004156:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800415a:	81a3      	strh	r3, [r4, #12]
 800415c:	f04f 30ff 	mov.w	r0, #4294967295
 8004160:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004164:	6921      	ldr	r1, [r4, #16]
 8004166:	464a      	mov	r2, r9
 8004168:	f000 fabe 	bl	80046e8 <memcpy>
 800416c:	89a3      	ldrh	r3, [r4, #12]
 800416e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004172:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004176:	81a3      	strh	r3, [r4, #12]
 8004178:	6126      	str	r6, [r4, #16]
 800417a:	6165      	str	r5, [r4, #20]
 800417c:	444e      	add	r6, r9
 800417e:	eba5 0509 	sub.w	r5, r5, r9
 8004182:	6026      	str	r6, [r4, #0]
 8004184:	60a5      	str	r5, [r4, #8]
 8004186:	463e      	mov	r6, r7
 8004188:	42be      	cmp	r6, r7
 800418a:	d900      	bls.n	800418e <__ssputs_r+0x86>
 800418c:	463e      	mov	r6, r7
 800418e:	6820      	ldr	r0, [r4, #0]
 8004190:	4632      	mov	r2, r6
 8004192:	4641      	mov	r1, r8
 8004194:	f000 fab6 	bl	8004704 <memmove>
 8004198:	68a3      	ldr	r3, [r4, #8]
 800419a:	1b9b      	subs	r3, r3, r6
 800419c:	60a3      	str	r3, [r4, #8]
 800419e:	6823      	ldr	r3, [r4, #0]
 80041a0:	4433      	add	r3, r6
 80041a2:	6023      	str	r3, [r4, #0]
 80041a4:	2000      	movs	r0, #0
 80041a6:	e7db      	b.n	8004160 <__ssputs_r+0x58>
 80041a8:	462a      	mov	r2, r5
 80041aa:	f000 fba5 	bl	80048f8 <_realloc_r>
 80041ae:	4606      	mov	r6, r0
 80041b0:	2800      	cmp	r0, #0
 80041b2:	d1e1      	bne.n	8004178 <__ssputs_r+0x70>
 80041b4:	6921      	ldr	r1, [r4, #16]
 80041b6:	4650      	mov	r0, sl
 80041b8:	f000 fabe 	bl	8004738 <_free_r>
 80041bc:	e7c7      	b.n	800414e <__ssputs_r+0x46>
	...

080041c0 <_svfiprintf_r>:
 80041c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041c4:	4698      	mov	r8, r3
 80041c6:	898b      	ldrh	r3, [r1, #12]
 80041c8:	061b      	lsls	r3, r3, #24
 80041ca:	b09d      	sub	sp, #116	; 0x74
 80041cc:	4607      	mov	r7, r0
 80041ce:	460d      	mov	r5, r1
 80041d0:	4614      	mov	r4, r2
 80041d2:	d50e      	bpl.n	80041f2 <_svfiprintf_r+0x32>
 80041d4:	690b      	ldr	r3, [r1, #16]
 80041d6:	b963      	cbnz	r3, 80041f2 <_svfiprintf_r+0x32>
 80041d8:	2140      	movs	r1, #64	; 0x40
 80041da:	f000 fb19 	bl	8004810 <_malloc_r>
 80041de:	6028      	str	r0, [r5, #0]
 80041e0:	6128      	str	r0, [r5, #16]
 80041e2:	b920      	cbnz	r0, 80041ee <_svfiprintf_r+0x2e>
 80041e4:	230c      	movs	r3, #12
 80041e6:	603b      	str	r3, [r7, #0]
 80041e8:	f04f 30ff 	mov.w	r0, #4294967295
 80041ec:	e0d1      	b.n	8004392 <_svfiprintf_r+0x1d2>
 80041ee:	2340      	movs	r3, #64	; 0x40
 80041f0:	616b      	str	r3, [r5, #20]
 80041f2:	2300      	movs	r3, #0
 80041f4:	9309      	str	r3, [sp, #36]	; 0x24
 80041f6:	2320      	movs	r3, #32
 80041f8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80041fc:	f8cd 800c 	str.w	r8, [sp, #12]
 8004200:	2330      	movs	r3, #48	; 0x30
 8004202:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80043ac <_svfiprintf_r+0x1ec>
 8004206:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800420a:	f04f 0901 	mov.w	r9, #1
 800420e:	4623      	mov	r3, r4
 8004210:	469a      	mov	sl, r3
 8004212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004216:	b10a      	cbz	r2, 800421c <_svfiprintf_r+0x5c>
 8004218:	2a25      	cmp	r2, #37	; 0x25
 800421a:	d1f9      	bne.n	8004210 <_svfiprintf_r+0x50>
 800421c:	ebba 0b04 	subs.w	fp, sl, r4
 8004220:	d00b      	beq.n	800423a <_svfiprintf_r+0x7a>
 8004222:	465b      	mov	r3, fp
 8004224:	4622      	mov	r2, r4
 8004226:	4629      	mov	r1, r5
 8004228:	4638      	mov	r0, r7
 800422a:	f7ff ff6d 	bl	8004108 <__ssputs_r>
 800422e:	3001      	adds	r0, #1
 8004230:	f000 80aa 	beq.w	8004388 <_svfiprintf_r+0x1c8>
 8004234:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004236:	445a      	add	r2, fp
 8004238:	9209      	str	r2, [sp, #36]	; 0x24
 800423a:	f89a 3000 	ldrb.w	r3, [sl]
 800423e:	2b00      	cmp	r3, #0
 8004240:	f000 80a2 	beq.w	8004388 <_svfiprintf_r+0x1c8>
 8004244:	2300      	movs	r3, #0
 8004246:	f04f 32ff 	mov.w	r2, #4294967295
 800424a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800424e:	f10a 0a01 	add.w	sl, sl, #1
 8004252:	9304      	str	r3, [sp, #16]
 8004254:	9307      	str	r3, [sp, #28]
 8004256:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800425a:	931a      	str	r3, [sp, #104]	; 0x68
 800425c:	4654      	mov	r4, sl
 800425e:	2205      	movs	r2, #5
 8004260:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004264:	4851      	ldr	r0, [pc, #324]	; (80043ac <_svfiprintf_r+0x1ec>)
 8004266:	f7fb ffc3 	bl	80001f0 <memchr>
 800426a:	9a04      	ldr	r2, [sp, #16]
 800426c:	b9d8      	cbnz	r0, 80042a6 <_svfiprintf_r+0xe6>
 800426e:	06d0      	lsls	r0, r2, #27
 8004270:	bf44      	itt	mi
 8004272:	2320      	movmi	r3, #32
 8004274:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004278:	0711      	lsls	r1, r2, #28
 800427a:	bf44      	itt	mi
 800427c:	232b      	movmi	r3, #43	; 0x2b
 800427e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004282:	f89a 3000 	ldrb.w	r3, [sl]
 8004286:	2b2a      	cmp	r3, #42	; 0x2a
 8004288:	d015      	beq.n	80042b6 <_svfiprintf_r+0xf6>
 800428a:	9a07      	ldr	r2, [sp, #28]
 800428c:	4654      	mov	r4, sl
 800428e:	2000      	movs	r0, #0
 8004290:	f04f 0c0a 	mov.w	ip, #10
 8004294:	4621      	mov	r1, r4
 8004296:	f811 3b01 	ldrb.w	r3, [r1], #1
 800429a:	3b30      	subs	r3, #48	; 0x30
 800429c:	2b09      	cmp	r3, #9
 800429e:	d94e      	bls.n	800433e <_svfiprintf_r+0x17e>
 80042a0:	b1b0      	cbz	r0, 80042d0 <_svfiprintf_r+0x110>
 80042a2:	9207      	str	r2, [sp, #28]
 80042a4:	e014      	b.n	80042d0 <_svfiprintf_r+0x110>
 80042a6:	eba0 0308 	sub.w	r3, r0, r8
 80042aa:	fa09 f303 	lsl.w	r3, r9, r3
 80042ae:	4313      	orrs	r3, r2
 80042b0:	9304      	str	r3, [sp, #16]
 80042b2:	46a2      	mov	sl, r4
 80042b4:	e7d2      	b.n	800425c <_svfiprintf_r+0x9c>
 80042b6:	9b03      	ldr	r3, [sp, #12]
 80042b8:	1d19      	adds	r1, r3, #4
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	9103      	str	r1, [sp, #12]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	bfbb      	ittet	lt
 80042c2:	425b      	neglt	r3, r3
 80042c4:	f042 0202 	orrlt.w	r2, r2, #2
 80042c8:	9307      	strge	r3, [sp, #28]
 80042ca:	9307      	strlt	r3, [sp, #28]
 80042cc:	bfb8      	it	lt
 80042ce:	9204      	strlt	r2, [sp, #16]
 80042d0:	7823      	ldrb	r3, [r4, #0]
 80042d2:	2b2e      	cmp	r3, #46	; 0x2e
 80042d4:	d10c      	bne.n	80042f0 <_svfiprintf_r+0x130>
 80042d6:	7863      	ldrb	r3, [r4, #1]
 80042d8:	2b2a      	cmp	r3, #42	; 0x2a
 80042da:	d135      	bne.n	8004348 <_svfiprintf_r+0x188>
 80042dc:	9b03      	ldr	r3, [sp, #12]
 80042de:	1d1a      	adds	r2, r3, #4
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	9203      	str	r2, [sp, #12]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	bfb8      	it	lt
 80042e8:	f04f 33ff 	movlt.w	r3, #4294967295
 80042ec:	3402      	adds	r4, #2
 80042ee:	9305      	str	r3, [sp, #20]
 80042f0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80043bc <_svfiprintf_r+0x1fc>
 80042f4:	7821      	ldrb	r1, [r4, #0]
 80042f6:	2203      	movs	r2, #3
 80042f8:	4650      	mov	r0, sl
 80042fa:	f7fb ff79 	bl	80001f0 <memchr>
 80042fe:	b140      	cbz	r0, 8004312 <_svfiprintf_r+0x152>
 8004300:	2340      	movs	r3, #64	; 0x40
 8004302:	eba0 000a 	sub.w	r0, r0, sl
 8004306:	fa03 f000 	lsl.w	r0, r3, r0
 800430a:	9b04      	ldr	r3, [sp, #16]
 800430c:	4303      	orrs	r3, r0
 800430e:	3401      	adds	r4, #1
 8004310:	9304      	str	r3, [sp, #16]
 8004312:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004316:	4826      	ldr	r0, [pc, #152]	; (80043b0 <_svfiprintf_r+0x1f0>)
 8004318:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800431c:	2206      	movs	r2, #6
 800431e:	f7fb ff67 	bl	80001f0 <memchr>
 8004322:	2800      	cmp	r0, #0
 8004324:	d038      	beq.n	8004398 <_svfiprintf_r+0x1d8>
 8004326:	4b23      	ldr	r3, [pc, #140]	; (80043b4 <_svfiprintf_r+0x1f4>)
 8004328:	bb1b      	cbnz	r3, 8004372 <_svfiprintf_r+0x1b2>
 800432a:	9b03      	ldr	r3, [sp, #12]
 800432c:	3307      	adds	r3, #7
 800432e:	f023 0307 	bic.w	r3, r3, #7
 8004332:	3308      	adds	r3, #8
 8004334:	9303      	str	r3, [sp, #12]
 8004336:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004338:	4433      	add	r3, r6
 800433a:	9309      	str	r3, [sp, #36]	; 0x24
 800433c:	e767      	b.n	800420e <_svfiprintf_r+0x4e>
 800433e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004342:	460c      	mov	r4, r1
 8004344:	2001      	movs	r0, #1
 8004346:	e7a5      	b.n	8004294 <_svfiprintf_r+0xd4>
 8004348:	2300      	movs	r3, #0
 800434a:	3401      	adds	r4, #1
 800434c:	9305      	str	r3, [sp, #20]
 800434e:	4619      	mov	r1, r3
 8004350:	f04f 0c0a 	mov.w	ip, #10
 8004354:	4620      	mov	r0, r4
 8004356:	f810 2b01 	ldrb.w	r2, [r0], #1
 800435a:	3a30      	subs	r2, #48	; 0x30
 800435c:	2a09      	cmp	r2, #9
 800435e:	d903      	bls.n	8004368 <_svfiprintf_r+0x1a8>
 8004360:	2b00      	cmp	r3, #0
 8004362:	d0c5      	beq.n	80042f0 <_svfiprintf_r+0x130>
 8004364:	9105      	str	r1, [sp, #20]
 8004366:	e7c3      	b.n	80042f0 <_svfiprintf_r+0x130>
 8004368:	fb0c 2101 	mla	r1, ip, r1, r2
 800436c:	4604      	mov	r4, r0
 800436e:	2301      	movs	r3, #1
 8004370:	e7f0      	b.n	8004354 <_svfiprintf_r+0x194>
 8004372:	ab03      	add	r3, sp, #12
 8004374:	9300      	str	r3, [sp, #0]
 8004376:	462a      	mov	r2, r5
 8004378:	4b0f      	ldr	r3, [pc, #60]	; (80043b8 <_svfiprintf_r+0x1f8>)
 800437a:	a904      	add	r1, sp, #16
 800437c:	4638      	mov	r0, r7
 800437e:	f3af 8000 	nop.w
 8004382:	1c42      	adds	r2, r0, #1
 8004384:	4606      	mov	r6, r0
 8004386:	d1d6      	bne.n	8004336 <_svfiprintf_r+0x176>
 8004388:	89ab      	ldrh	r3, [r5, #12]
 800438a:	065b      	lsls	r3, r3, #25
 800438c:	f53f af2c 	bmi.w	80041e8 <_svfiprintf_r+0x28>
 8004390:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004392:	b01d      	add	sp, #116	; 0x74
 8004394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004398:	ab03      	add	r3, sp, #12
 800439a:	9300      	str	r3, [sp, #0]
 800439c:	462a      	mov	r2, r5
 800439e:	4b06      	ldr	r3, [pc, #24]	; (80043b8 <_svfiprintf_r+0x1f8>)
 80043a0:	a904      	add	r1, sp, #16
 80043a2:	4638      	mov	r0, r7
 80043a4:	f000 f87a 	bl	800449c <_printf_i>
 80043a8:	e7eb      	b.n	8004382 <_svfiprintf_r+0x1c2>
 80043aa:	bf00      	nop
 80043ac:	08004a2c 	.word	0x08004a2c
 80043b0:	08004a36 	.word	0x08004a36
 80043b4:	00000000 	.word	0x00000000
 80043b8:	08004109 	.word	0x08004109
 80043bc:	08004a32 	.word	0x08004a32

080043c0 <_printf_common>:
 80043c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043c4:	4616      	mov	r6, r2
 80043c6:	4699      	mov	r9, r3
 80043c8:	688a      	ldr	r2, [r1, #8]
 80043ca:	690b      	ldr	r3, [r1, #16]
 80043cc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80043d0:	4293      	cmp	r3, r2
 80043d2:	bfb8      	it	lt
 80043d4:	4613      	movlt	r3, r2
 80043d6:	6033      	str	r3, [r6, #0]
 80043d8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80043dc:	4607      	mov	r7, r0
 80043de:	460c      	mov	r4, r1
 80043e0:	b10a      	cbz	r2, 80043e6 <_printf_common+0x26>
 80043e2:	3301      	adds	r3, #1
 80043e4:	6033      	str	r3, [r6, #0]
 80043e6:	6823      	ldr	r3, [r4, #0]
 80043e8:	0699      	lsls	r1, r3, #26
 80043ea:	bf42      	ittt	mi
 80043ec:	6833      	ldrmi	r3, [r6, #0]
 80043ee:	3302      	addmi	r3, #2
 80043f0:	6033      	strmi	r3, [r6, #0]
 80043f2:	6825      	ldr	r5, [r4, #0]
 80043f4:	f015 0506 	ands.w	r5, r5, #6
 80043f8:	d106      	bne.n	8004408 <_printf_common+0x48>
 80043fa:	f104 0a19 	add.w	sl, r4, #25
 80043fe:	68e3      	ldr	r3, [r4, #12]
 8004400:	6832      	ldr	r2, [r6, #0]
 8004402:	1a9b      	subs	r3, r3, r2
 8004404:	42ab      	cmp	r3, r5
 8004406:	dc26      	bgt.n	8004456 <_printf_common+0x96>
 8004408:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800440c:	1e13      	subs	r3, r2, #0
 800440e:	6822      	ldr	r2, [r4, #0]
 8004410:	bf18      	it	ne
 8004412:	2301      	movne	r3, #1
 8004414:	0692      	lsls	r2, r2, #26
 8004416:	d42b      	bmi.n	8004470 <_printf_common+0xb0>
 8004418:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800441c:	4649      	mov	r1, r9
 800441e:	4638      	mov	r0, r7
 8004420:	47c0      	blx	r8
 8004422:	3001      	adds	r0, #1
 8004424:	d01e      	beq.n	8004464 <_printf_common+0xa4>
 8004426:	6823      	ldr	r3, [r4, #0]
 8004428:	68e5      	ldr	r5, [r4, #12]
 800442a:	6832      	ldr	r2, [r6, #0]
 800442c:	f003 0306 	and.w	r3, r3, #6
 8004430:	2b04      	cmp	r3, #4
 8004432:	bf08      	it	eq
 8004434:	1aad      	subeq	r5, r5, r2
 8004436:	68a3      	ldr	r3, [r4, #8]
 8004438:	6922      	ldr	r2, [r4, #16]
 800443a:	bf0c      	ite	eq
 800443c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004440:	2500      	movne	r5, #0
 8004442:	4293      	cmp	r3, r2
 8004444:	bfc4      	itt	gt
 8004446:	1a9b      	subgt	r3, r3, r2
 8004448:	18ed      	addgt	r5, r5, r3
 800444a:	2600      	movs	r6, #0
 800444c:	341a      	adds	r4, #26
 800444e:	42b5      	cmp	r5, r6
 8004450:	d11a      	bne.n	8004488 <_printf_common+0xc8>
 8004452:	2000      	movs	r0, #0
 8004454:	e008      	b.n	8004468 <_printf_common+0xa8>
 8004456:	2301      	movs	r3, #1
 8004458:	4652      	mov	r2, sl
 800445a:	4649      	mov	r1, r9
 800445c:	4638      	mov	r0, r7
 800445e:	47c0      	blx	r8
 8004460:	3001      	adds	r0, #1
 8004462:	d103      	bne.n	800446c <_printf_common+0xac>
 8004464:	f04f 30ff 	mov.w	r0, #4294967295
 8004468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800446c:	3501      	adds	r5, #1
 800446e:	e7c6      	b.n	80043fe <_printf_common+0x3e>
 8004470:	18e1      	adds	r1, r4, r3
 8004472:	1c5a      	adds	r2, r3, #1
 8004474:	2030      	movs	r0, #48	; 0x30
 8004476:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800447a:	4422      	add	r2, r4
 800447c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004480:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004484:	3302      	adds	r3, #2
 8004486:	e7c7      	b.n	8004418 <_printf_common+0x58>
 8004488:	2301      	movs	r3, #1
 800448a:	4622      	mov	r2, r4
 800448c:	4649      	mov	r1, r9
 800448e:	4638      	mov	r0, r7
 8004490:	47c0      	blx	r8
 8004492:	3001      	adds	r0, #1
 8004494:	d0e6      	beq.n	8004464 <_printf_common+0xa4>
 8004496:	3601      	adds	r6, #1
 8004498:	e7d9      	b.n	800444e <_printf_common+0x8e>
	...

0800449c <_printf_i>:
 800449c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044a0:	7e0f      	ldrb	r7, [r1, #24]
 80044a2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80044a4:	2f78      	cmp	r7, #120	; 0x78
 80044a6:	4691      	mov	r9, r2
 80044a8:	4680      	mov	r8, r0
 80044aa:	460c      	mov	r4, r1
 80044ac:	469a      	mov	sl, r3
 80044ae:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80044b2:	d807      	bhi.n	80044c4 <_printf_i+0x28>
 80044b4:	2f62      	cmp	r7, #98	; 0x62
 80044b6:	d80a      	bhi.n	80044ce <_printf_i+0x32>
 80044b8:	2f00      	cmp	r7, #0
 80044ba:	f000 80d8 	beq.w	800466e <_printf_i+0x1d2>
 80044be:	2f58      	cmp	r7, #88	; 0x58
 80044c0:	f000 80a3 	beq.w	800460a <_printf_i+0x16e>
 80044c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044c8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80044cc:	e03a      	b.n	8004544 <_printf_i+0xa8>
 80044ce:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80044d2:	2b15      	cmp	r3, #21
 80044d4:	d8f6      	bhi.n	80044c4 <_printf_i+0x28>
 80044d6:	a101      	add	r1, pc, #4	; (adr r1, 80044dc <_printf_i+0x40>)
 80044d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80044dc:	08004535 	.word	0x08004535
 80044e0:	08004549 	.word	0x08004549
 80044e4:	080044c5 	.word	0x080044c5
 80044e8:	080044c5 	.word	0x080044c5
 80044ec:	080044c5 	.word	0x080044c5
 80044f0:	080044c5 	.word	0x080044c5
 80044f4:	08004549 	.word	0x08004549
 80044f8:	080044c5 	.word	0x080044c5
 80044fc:	080044c5 	.word	0x080044c5
 8004500:	080044c5 	.word	0x080044c5
 8004504:	080044c5 	.word	0x080044c5
 8004508:	08004655 	.word	0x08004655
 800450c:	08004579 	.word	0x08004579
 8004510:	08004637 	.word	0x08004637
 8004514:	080044c5 	.word	0x080044c5
 8004518:	080044c5 	.word	0x080044c5
 800451c:	08004677 	.word	0x08004677
 8004520:	080044c5 	.word	0x080044c5
 8004524:	08004579 	.word	0x08004579
 8004528:	080044c5 	.word	0x080044c5
 800452c:	080044c5 	.word	0x080044c5
 8004530:	0800463f 	.word	0x0800463f
 8004534:	682b      	ldr	r3, [r5, #0]
 8004536:	1d1a      	adds	r2, r3, #4
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	602a      	str	r2, [r5, #0]
 800453c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004540:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004544:	2301      	movs	r3, #1
 8004546:	e0a3      	b.n	8004690 <_printf_i+0x1f4>
 8004548:	6820      	ldr	r0, [r4, #0]
 800454a:	6829      	ldr	r1, [r5, #0]
 800454c:	0606      	lsls	r6, r0, #24
 800454e:	f101 0304 	add.w	r3, r1, #4
 8004552:	d50a      	bpl.n	800456a <_printf_i+0xce>
 8004554:	680e      	ldr	r6, [r1, #0]
 8004556:	602b      	str	r3, [r5, #0]
 8004558:	2e00      	cmp	r6, #0
 800455a:	da03      	bge.n	8004564 <_printf_i+0xc8>
 800455c:	232d      	movs	r3, #45	; 0x2d
 800455e:	4276      	negs	r6, r6
 8004560:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004564:	485e      	ldr	r0, [pc, #376]	; (80046e0 <_printf_i+0x244>)
 8004566:	230a      	movs	r3, #10
 8004568:	e019      	b.n	800459e <_printf_i+0x102>
 800456a:	680e      	ldr	r6, [r1, #0]
 800456c:	602b      	str	r3, [r5, #0]
 800456e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004572:	bf18      	it	ne
 8004574:	b236      	sxthne	r6, r6
 8004576:	e7ef      	b.n	8004558 <_printf_i+0xbc>
 8004578:	682b      	ldr	r3, [r5, #0]
 800457a:	6820      	ldr	r0, [r4, #0]
 800457c:	1d19      	adds	r1, r3, #4
 800457e:	6029      	str	r1, [r5, #0]
 8004580:	0601      	lsls	r1, r0, #24
 8004582:	d501      	bpl.n	8004588 <_printf_i+0xec>
 8004584:	681e      	ldr	r6, [r3, #0]
 8004586:	e002      	b.n	800458e <_printf_i+0xf2>
 8004588:	0646      	lsls	r6, r0, #25
 800458a:	d5fb      	bpl.n	8004584 <_printf_i+0xe8>
 800458c:	881e      	ldrh	r6, [r3, #0]
 800458e:	4854      	ldr	r0, [pc, #336]	; (80046e0 <_printf_i+0x244>)
 8004590:	2f6f      	cmp	r7, #111	; 0x6f
 8004592:	bf0c      	ite	eq
 8004594:	2308      	moveq	r3, #8
 8004596:	230a      	movne	r3, #10
 8004598:	2100      	movs	r1, #0
 800459a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800459e:	6865      	ldr	r5, [r4, #4]
 80045a0:	60a5      	str	r5, [r4, #8]
 80045a2:	2d00      	cmp	r5, #0
 80045a4:	bfa2      	ittt	ge
 80045a6:	6821      	ldrge	r1, [r4, #0]
 80045a8:	f021 0104 	bicge.w	r1, r1, #4
 80045ac:	6021      	strge	r1, [r4, #0]
 80045ae:	b90e      	cbnz	r6, 80045b4 <_printf_i+0x118>
 80045b0:	2d00      	cmp	r5, #0
 80045b2:	d04d      	beq.n	8004650 <_printf_i+0x1b4>
 80045b4:	4615      	mov	r5, r2
 80045b6:	fbb6 f1f3 	udiv	r1, r6, r3
 80045ba:	fb03 6711 	mls	r7, r3, r1, r6
 80045be:	5dc7      	ldrb	r7, [r0, r7]
 80045c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80045c4:	4637      	mov	r7, r6
 80045c6:	42bb      	cmp	r3, r7
 80045c8:	460e      	mov	r6, r1
 80045ca:	d9f4      	bls.n	80045b6 <_printf_i+0x11a>
 80045cc:	2b08      	cmp	r3, #8
 80045ce:	d10b      	bne.n	80045e8 <_printf_i+0x14c>
 80045d0:	6823      	ldr	r3, [r4, #0]
 80045d2:	07de      	lsls	r6, r3, #31
 80045d4:	d508      	bpl.n	80045e8 <_printf_i+0x14c>
 80045d6:	6923      	ldr	r3, [r4, #16]
 80045d8:	6861      	ldr	r1, [r4, #4]
 80045da:	4299      	cmp	r1, r3
 80045dc:	bfde      	ittt	le
 80045de:	2330      	movle	r3, #48	; 0x30
 80045e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80045e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80045e8:	1b52      	subs	r2, r2, r5
 80045ea:	6122      	str	r2, [r4, #16]
 80045ec:	f8cd a000 	str.w	sl, [sp]
 80045f0:	464b      	mov	r3, r9
 80045f2:	aa03      	add	r2, sp, #12
 80045f4:	4621      	mov	r1, r4
 80045f6:	4640      	mov	r0, r8
 80045f8:	f7ff fee2 	bl	80043c0 <_printf_common>
 80045fc:	3001      	adds	r0, #1
 80045fe:	d14c      	bne.n	800469a <_printf_i+0x1fe>
 8004600:	f04f 30ff 	mov.w	r0, #4294967295
 8004604:	b004      	add	sp, #16
 8004606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800460a:	4835      	ldr	r0, [pc, #212]	; (80046e0 <_printf_i+0x244>)
 800460c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004610:	6829      	ldr	r1, [r5, #0]
 8004612:	6823      	ldr	r3, [r4, #0]
 8004614:	f851 6b04 	ldr.w	r6, [r1], #4
 8004618:	6029      	str	r1, [r5, #0]
 800461a:	061d      	lsls	r5, r3, #24
 800461c:	d514      	bpl.n	8004648 <_printf_i+0x1ac>
 800461e:	07df      	lsls	r7, r3, #31
 8004620:	bf44      	itt	mi
 8004622:	f043 0320 	orrmi.w	r3, r3, #32
 8004626:	6023      	strmi	r3, [r4, #0]
 8004628:	b91e      	cbnz	r6, 8004632 <_printf_i+0x196>
 800462a:	6823      	ldr	r3, [r4, #0]
 800462c:	f023 0320 	bic.w	r3, r3, #32
 8004630:	6023      	str	r3, [r4, #0]
 8004632:	2310      	movs	r3, #16
 8004634:	e7b0      	b.n	8004598 <_printf_i+0xfc>
 8004636:	6823      	ldr	r3, [r4, #0]
 8004638:	f043 0320 	orr.w	r3, r3, #32
 800463c:	6023      	str	r3, [r4, #0]
 800463e:	2378      	movs	r3, #120	; 0x78
 8004640:	4828      	ldr	r0, [pc, #160]	; (80046e4 <_printf_i+0x248>)
 8004642:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004646:	e7e3      	b.n	8004610 <_printf_i+0x174>
 8004648:	0659      	lsls	r1, r3, #25
 800464a:	bf48      	it	mi
 800464c:	b2b6      	uxthmi	r6, r6
 800464e:	e7e6      	b.n	800461e <_printf_i+0x182>
 8004650:	4615      	mov	r5, r2
 8004652:	e7bb      	b.n	80045cc <_printf_i+0x130>
 8004654:	682b      	ldr	r3, [r5, #0]
 8004656:	6826      	ldr	r6, [r4, #0]
 8004658:	6961      	ldr	r1, [r4, #20]
 800465a:	1d18      	adds	r0, r3, #4
 800465c:	6028      	str	r0, [r5, #0]
 800465e:	0635      	lsls	r5, r6, #24
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	d501      	bpl.n	8004668 <_printf_i+0x1cc>
 8004664:	6019      	str	r1, [r3, #0]
 8004666:	e002      	b.n	800466e <_printf_i+0x1d2>
 8004668:	0670      	lsls	r0, r6, #25
 800466a:	d5fb      	bpl.n	8004664 <_printf_i+0x1c8>
 800466c:	8019      	strh	r1, [r3, #0]
 800466e:	2300      	movs	r3, #0
 8004670:	6123      	str	r3, [r4, #16]
 8004672:	4615      	mov	r5, r2
 8004674:	e7ba      	b.n	80045ec <_printf_i+0x150>
 8004676:	682b      	ldr	r3, [r5, #0]
 8004678:	1d1a      	adds	r2, r3, #4
 800467a:	602a      	str	r2, [r5, #0]
 800467c:	681d      	ldr	r5, [r3, #0]
 800467e:	6862      	ldr	r2, [r4, #4]
 8004680:	2100      	movs	r1, #0
 8004682:	4628      	mov	r0, r5
 8004684:	f7fb fdb4 	bl	80001f0 <memchr>
 8004688:	b108      	cbz	r0, 800468e <_printf_i+0x1f2>
 800468a:	1b40      	subs	r0, r0, r5
 800468c:	6060      	str	r0, [r4, #4]
 800468e:	6863      	ldr	r3, [r4, #4]
 8004690:	6123      	str	r3, [r4, #16]
 8004692:	2300      	movs	r3, #0
 8004694:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004698:	e7a8      	b.n	80045ec <_printf_i+0x150>
 800469a:	6923      	ldr	r3, [r4, #16]
 800469c:	462a      	mov	r2, r5
 800469e:	4649      	mov	r1, r9
 80046a0:	4640      	mov	r0, r8
 80046a2:	47d0      	blx	sl
 80046a4:	3001      	adds	r0, #1
 80046a6:	d0ab      	beq.n	8004600 <_printf_i+0x164>
 80046a8:	6823      	ldr	r3, [r4, #0]
 80046aa:	079b      	lsls	r3, r3, #30
 80046ac:	d413      	bmi.n	80046d6 <_printf_i+0x23a>
 80046ae:	68e0      	ldr	r0, [r4, #12]
 80046b0:	9b03      	ldr	r3, [sp, #12]
 80046b2:	4298      	cmp	r0, r3
 80046b4:	bfb8      	it	lt
 80046b6:	4618      	movlt	r0, r3
 80046b8:	e7a4      	b.n	8004604 <_printf_i+0x168>
 80046ba:	2301      	movs	r3, #1
 80046bc:	4632      	mov	r2, r6
 80046be:	4649      	mov	r1, r9
 80046c0:	4640      	mov	r0, r8
 80046c2:	47d0      	blx	sl
 80046c4:	3001      	adds	r0, #1
 80046c6:	d09b      	beq.n	8004600 <_printf_i+0x164>
 80046c8:	3501      	adds	r5, #1
 80046ca:	68e3      	ldr	r3, [r4, #12]
 80046cc:	9903      	ldr	r1, [sp, #12]
 80046ce:	1a5b      	subs	r3, r3, r1
 80046d0:	42ab      	cmp	r3, r5
 80046d2:	dcf2      	bgt.n	80046ba <_printf_i+0x21e>
 80046d4:	e7eb      	b.n	80046ae <_printf_i+0x212>
 80046d6:	2500      	movs	r5, #0
 80046d8:	f104 0619 	add.w	r6, r4, #25
 80046dc:	e7f5      	b.n	80046ca <_printf_i+0x22e>
 80046de:	bf00      	nop
 80046e0:	08004a3d 	.word	0x08004a3d
 80046e4:	08004a4e 	.word	0x08004a4e

080046e8 <memcpy>:
 80046e8:	440a      	add	r2, r1
 80046ea:	4291      	cmp	r1, r2
 80046ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80046f0:	d100      	bne.n	80046f4 <memcpy+0xc>
 80046f2:	4770      	bx	lr
 80046f4:	b510      	push	{r4, lr}
 80046f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046fe:	4291      	cmp	r1, r2
 8004700:	d1f9      	bne.n	80046f6 <memcpy+0xe>
 8004702:	bd10      	pop	{r4, pc}

08004704 <memmove>:
 8004704:	4288      	cmp	r0, r1
 8004706:	b510      	push	{r4, lr}
 8004708:	eb01 0402 	add.w	r4, r1, r2
 800470c:	d902      	bls.n	8004714 <memmove+0x10>
 800470e:	4284      	cmp	r4, r0
 8004710:	4623      	mov	r3, r4
 8004712:	d807      	bhi.n	8004724 <memmove+0x20>
 8004714:	1e43      	subs	r3, r0, #1
 8004716:	42a1      	cmp	r1, r4
 8004718:	d008      	beq.n	800472c <memmove+0x28>
 800471a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800471e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004722:	e7f8      	b.n	8004716 <memmove+0x12>
 8004724:	4402      	add	r2, r0
 8004726:	4601      	mov	r1, r0
 8004728:	428a      	cmp	r2, r1
 800472a:	d100      	bne.n	800472e <memmove+0x2a>
 800472c:	bd10      	pop	{r4, pc}
 800472e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004732:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004736:	e7f7      	b.n	8004728 <memmove+0x24>

08004738 <_free_r>:
 8004738:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800473a:	2900      	cmp	r1, #0
 800473c:	d044      	beq.n	80047c8 <_free_r+0x90>
 800473e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004742:	9001      	str	r0, [sp, #4]
 8004744:	2b00      	cmp	r3, #0
 8004746:	f1a1 0404 	sub.w	r4, r1, #4
 800474a:	bfb8      	it	lt
 800474c:	18e4      	addlt	r4, r4, r3
 800474e:	f000 f913 	bl	8004978 <__malloc_lock>
 8004752:	4a1e      	ldr	r2, [pc, #120]	; (80047cc <_free_r+0x94>)
 8004754:	9801      	ldr	r0, [sp, #4]
 8004756:	6813      	ldr	r3, [r2, #0]
 8004758:	b933      	cbnz	r3, 8004768 <_free_r+0x30>
 800475a:	6063      	str	r3, [r4, #4]
 800475c:	6014      	str	r4, [r2, #0]
 800475e:	b003      	add	sp, #12
 8004760:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004764:	f000 b90e 	b.w	8004984 <__malloc_unlock>
 8004768:	42a3      	cmp	r3, r4
 800476a:	d908      	bls.n	800477e <_free_r+0x46>
 800476c:	6825      	ldr	r5, [r4, #0]
 800476e:	1961      	adds	r1, r4, r5
 8004770:	428b      	cmp	r3, r1
 8004772:	bf01      	itttt	eq
 8004774:	6819      	ldreq	r1, [r3, #0]
 8004776:	685b      	ldreq	r3, [r3, #4]
 8004778:	1949      	addeq	r1, r1, r5
 800477a:	6021      	streq	r1, [r4, #0]
 800477c:	e7ed      	b.n	800475a <_free_r+0x22>
 800477e:	461a      	mov	r2, r3
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	b10b      	cbz	r3, 8004788 <_free_r+0x50>
 8004784:	42a3      	cmp	r3, r4
 8004786:	d9fa      	bls.n	800477e <_free_r+0x46>
 8004788:	6811      	ldr	r1, [r2, #0]
 800478a:	1855      	adds	r5, r2, r1
 800478c:	42a5      	cmp	r5, r4
 800478e:	d10b      	bne.n	80047a8 <_free_r+0x70>
 8004790:	6824      	ldr	r4, [r4, #0]
 8004792:	4421      	add	r1, r4
 8004794:	1854      	adds	r4, r2, r1
 8004796:	42a3      	cmp	r3, r4
 8004798:	6011      	str	r1, [r2, #0]
 800479a:	d1e0      	bne.n	800475e <_free_r+0x26>
 800479c:	681c      	ldr	r4, [r3, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	6053      	str	r3, [r2, #4]
 80047a2:	4421      	add	r1, r4
 80047a4:	6011      	str	r1, [r2, #0]
 80047a6:	e7da      	b.n	800475e <_free_r+0x26>
 80047a8:	d902      	bls.n	80047b0 <_free_r+0x78>
 80047aa:	230c      	movs	r3, #12
 80047ac:	6003      	str	r3, [r0, #0]
 80047ae:	e7d6      	b.n	800475e <_free_r+0x26>
 80047b0:	6825      	ldr	r5, [r4, #0]
 80047b2:	1961      	adds	r1, r4, r5
 80047b4:	428b      	cmp	r3, r1
 80047b6:	bf04      	itt	eq
 80047b8:	6819      	ldreq	r1, [r3, #0]
 80047ba:	685b      	ldreq	r3, [r3, #4]
 80047bc:	6063      	str	r3, [r4, #4]
 80047be:	bf04      	itt	eq
 80047c0:	1949      	addeq	r1, r1, r5
 80047c2:	6021      	streq	r1, [r4, #0]
 80047c4:	6054      	str	r4, [r2, #4]
 80047c6:	e7ca      	b.n	800475e <_free_r+0x26>
 80047c8:	b003      	add	sp, #12
 80047ca:	bd30      	pop	{r4, r5, pc}
 80047cc:	2000011c 	.word	0x2000011c

080047d0 <sbrk_aligned>:
 80047d0:	b570      	push	{r4, r5, r6, lr}
 80047d2:	4e0e      	ldr	r6, [pc, #56]	; (800480c <sbrk_aligned+0x3c>)
 80047d4:	460c      	mov	r4, r1
 80047d6:	6831      	ldr	r1, [r6, #0]
 80047d8:	4605      	mov	r5, r0
 80047da:	b911      	cbnz	r1, 80047e2 <sbrk_aligned+0x12>
 80047dc:	f000 f8bc 	bl	8004958 <_sbrk_r>
 80047e0:	6030      	str	r0, [r6, #0]
 80047e2:	4621      	mov	r1, r4
 80047e4:	4628      	mov	r0, r5
 80047e6:	f000 f8b7 	bl	8004958 <_sbrk_r>
 80047ea:	1c43      	adds	r3, r0, #1
 80047ec:	d00a      	beq.n	8004804 <sbrk_aligned+0x34>
 80047ee:	1cc4      	adds	r4, r0, #3
 80047f0:	f024 0403 	bic.w	r4, r4, #3
 80047f4:	42a0      	cmp	r0, r4
 80047f6:	d007      	beq.n	8004808 <sbrk_aligned+0x38>
 80047f8:	1a21      	subs	r1, r4, r0
 80047fa:	4628      	mov	r0, r5
 80047fc:	f000 f8ac 	bl	8004958 <_sbrk_r>
 8004800:	3001      	adds	r0, #1
 8004802:	d101      	bne.n	8004808 <sbrk_aligned+0x38>
 8004804:	f04f 34ff 	mov.w	r4, #4294967295
 8004808:	4620      	mov	r0, r4
 800480a:	bd70      	pop	{r4, r5, r6, pc}
 800480c:	20000120 	.word	0x20000120

08004810 <_malloc_r>:
 8004810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004814:	1ccd      	adds	r5, r1, #3
 8004816:	f025 0503 	bic.w	r5, r5, #3
 800481a:	3508      	adds	r5, #8
 800481c:	2d0c      	cmp	r5, #12
 800481e:	bf38      	it	cc
 8004820:	250c      	movcc	r5, #12
 8004822:	2d00      	cmp	r5, #0
 8004824:	4607      	mov	r7, r0
 8004826:	db01      	blt.n	800482c <_malloc_r+0x1c>
 8004828:	42a9      	cmp	r1, r5
 800482a:	d905      	bls.n	8004838 <_malloc_r+0x28>
 800482c:	230c      	movs	r3, #12
 800482e:	603b      	str	r3, [r7, #0]
 8004830:	2600      	movs	r6, #0
 8004832:	4630      	mov	r0, r6
 8004834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004838:	4e2e      	ldr	r6, [pc, #184]	; (80048f4 <_malloc_r+0xe4>)
 800483a:	f000 f89d 	bl	8004978 <__malloc_lock>
 800483e:	6833      	ldr	r3, [r6, #0]
 8004840:	461c      	mov	r4, r3
 8004842:	bb34      	cbnz	r4, 8004892 <_malloc_r+0x82>
 8004844:	4629      	mov	r1, r5
 8004846:	4638      	mov	r0, r7
 8004848:	f7ff ffc2 	bl	80047d0 <sbrk_aligned>
 800484c:	1c43      	adds	r3, r0, #1
 800484e:	4604      	mov	r4, r0
 8004850:	d14d      	bne.n	80048ee <_malloc_r+0xde>
 8004852:	6834      	ldr	r4, [r6, #0]
 8004854:	4626      	mov	r6, r4
 8004856:	2e00      	cmp	r6, #0
 8004858:	d140      	bne.n	80048dc <_malloc_r+0xcc>
 800485a:	6823      	ldr	r3, [r4, #0]
 800485c:	4631      	mov	r1, r6
 800485e:	4638      	mov	r0, r7
 8004860:	eb04 0803 	add.w	r8, r4, r3
 8004864:	f000 f878 	bl	8004958 <_sbrk_r>
 8004868:	4580      	cmp	r8, r0
 800486a:	d13a      	bne.n	80048e2 <_malloc_r+0xd2>
 800486c:	6821      	ldr	r1, [r4, #0]
 800486e:	3503      	adds	r5, #3
 8004870:	1a6d      	subs	r5, r5, r1
 8004872:	f025 0503 	bic.w	r5, r5, #3
 8004876:	3508      	adds	r5, #8
 8004878:	2d0c      	cmp	r5, #12
 800487a:	bf38      	it	cc
 800487c:	250c      	movcc	r5, #12
 800487e:	4629      	mov	r1, r5
 8004880:	4638      	mov	r0, r7
 8004882:	f7ff ffa5 	bl	80047d0 <sbrk_aligned>
 8004886:	3001      	adds	r0, #1
 8004888:	d02b      	beq.n	80048e2 <_malloc_r+0xd2>
 800488a:	6823      	ldr	r3, [r4, #0]
 800488c:	442b      	add	r3, r5
 800488e:	6023      	str	r3, [r4, #0]
 8004890:	e00e      	b.n	80048b0 <_malloc_r+0xa0>
 8004892:	6822      	ldr	r2, [r4, #0]
 8004894:	1b52      	subs	r2, r2, r5
 8004896:	d41e      	bmi.n	80048d6 <_malloc_r+0xc6>
 8004898:	2a0b      	cmp	r2, #11
 800489a:	d916      	bls.n	80048ca <_malloc_r+0xba>
 800489c:	1961      	adds	r1, r4, r5
 800489e:	42a3      	cmp	r3, r4
 80048a0:	6025      	str	r5, [r4, #0]
 80048a2:	bf18      	it	ne
 80048a4:	6059      	strne	r1, [r3, #4]
 80048a6:	6863      	ldr	r3, [r4, #4]
 80048a8:	bf08      	it	eq
 80048aa:	6031      	streq	r1, [r6, #0]
 80048ac:	5162      	str	r2, [r4, r5]
 80048ae:	604b      	str	r3, [r1, #4]
 80048b0:	4638      	mov	r0, r7
 80048b2:	f104 060b 	add.w	r6, r4, #11
 80048b6:	f000 f865 	bl	8004984 <__malloc_unlock>
 80048ba:	f026 0607 	bic.w	r6, r6, #7
 80048be:	1d23      	adds	r3, r4, #4
 80048c0:	1af2      	subs	r2, r6, r3
 80048c2:	d0b6      	beq.n	8004832 <_malloc_r+0x22>
 80048c4:	1b9b      	subs	r3, r3, r6
 80048c6:	50a3      	str	r3, [r4, r2]
 80048c8:	e7b3      	b.n	8004832 <_malloc_r+0x22>
 80048ca:	6862      	ldr	r2, [r4, #4]
 80048cc:	42a3      	cmp	r3, r4
 80048ce:	bf0c      	ite	eq
 80048d0:	6032      	streq	r2, [r6, #0]
 80048d2:	605a      	strne	r2, [r3, #4]
 80048d4:	e7ec      	b.n	80048b0 <_malloc_r+0xa0>
 80048d6:	4623      	mov	r3, r4
 80048d8:	6864      	ldr	r4, [r4, #4]
 80048da:	e7b2      	b.n	8004842 <_malloc_r+0x32>
 80048dc:	4634      	mov	r4, r6
 80048de:	6876      	ldr	r6, [r6, #4]
 80048e0:	e7b9      	b.n	8004856 <_malloc_r+0x46>
 80048e2:	230c      	movs	r3, #12
 80048e4:	603b      	str	r3, [r7, #0]
 80048e6:	4638      	mov	r0, r7
 80048e8:	f000 f84c 	bl	8004984 <__malloc_unlock>
 80048ec:	e7a1      	b.n	8004832 <_malloc_r+0x22>
 80048ee:	6025      	str	r5, [r4, #0]
 80048f0:	e7de      	b.n	80048b0 <_malloc_r+0xa0>
 80048f2:	bf00      	nop
 80048f4:	2000011c 	.word	0x2000011c

080048f8 <_realloc_r>:
 80048f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048fc:	4680      	mov	r8, r0
 80048fe:	4614      	mov	r4, r2
 8004900:	460e      	mov	r6, r1
 8004902:	b921      	cbnz	r1, 800490e <_realloc_r+0x16>
 8004904:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004908:	4611      	mov	r1, r2
 800490a:	f7ff bf81 	b.w	8004810 <_malloc_r>
 800490e:	b92a      	cbnz	r2, 800491c <_realloc_r+0x24>
 8004910:	f7ff ff12 	bl	8004738 <_free_r>
 8004914:	4625      	mov	r5, r4
 8004916:	4628      	mov	r0, r5
 8004918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800491c:	f000 f838 	bl	8004990 <_malloc_usable_size_r>
 8004920:	4284      	cmp	r4, r0
 8004922:	4607      	mov	r7, r0
 8004924:	d802      	bhi.n	800492c <_realloc_r+0x34>
 8004926:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800492a:	d812      	bhi.n	8004952 <_realloc_r+0x5a>
 800492c:	4621      	mov	r1, r4
 800492e:	4640      	mov	r0, r8
 8004930:	f7ff ff6e 	bl	8004810 <_malloc_r>
 8004934:	4605      	mov	r5, r0
 8004936:	2800      	cmp	r0, #0
 8004938:	d0ed      	beq.n	8004916 <_realloc_r+0x1e>
 800493a:	42bc      	cmp	r4, r7
 800493c:	4622      	mov	r2, r4
 800493e:	4631      	mov	r1, r6
 8004940:	bf28      	it	cs
 8004942:	463a      	movcs	r2, r7
 8004944:	f7ff fed0 	bl	80046e8 <memcpy>
 8004948:	4631      	mov	r1, r6
 800494a:	4640      	mov	r0, r8
 800494c:	f7ff fef4 	bl	8004738 <_free_r>
 8004950:	e7e1      	b.n	8004916 <_realloc_r+0x1e>
 8004952:	4635      	mov	r5, r6
 8004954:	e7df      	b.n	8004916 <_realloc_r+0x1e>
	...

08004958 <_sbrk_r>:
 8004958:	b538      	push	{r3, r4, r5, lr}
 800495a:	4d06      	ldr	r5, [pc, #24]	; (8004974 <_sbrk_r+0x1c>)
 800495c:	2300      	movs	r3, #0
 800495e:	4604      	mov	r4, r0
 8004960:	4608      	mov	r0, r1
 8004962:	602b      	str	r3, [r5, #0]
 8004964:	f7fc f820 	bl	80009a8 <_sbrk>
 8004968:	1c43      	adds	r3, r0, #1
 800496a:	d102      	bne.n	8004972 <_sbrk_r+0x1a>
 800496c:	682b      	ldr	r3, [r5, #0]
 800496e:	b103      	cbz	r3, 8004972 <_sbrk_r+0x1a>
 8004970:	6023      	str	r3, [r4, #0]
 8004972:	bd38      	pop	{r3, r4, r5, pc}
 8004974:	20000124 	.word	0x20000124

08004978 <__malloc_lock>:
 8004978:	4801      	ldr	r0, [pc, #4]	; (8004980 <__malloc_lock+0x8>)
 800497a:	f000 b811 	b.w	80049a0 <__retarget_lock_acquire_recursive>
 800497e:	bf00      	nop
 8004980:	20000128 	.word	0x20000128

08004984 <__malloc_unlock>:
 8004984:	4801      	ldr	r0, [pc, #4]	; (800498c <__malloc_unlock+0x8>)
 8004986:	f000 b80c 	b.w	80049a2 <__retarget_lock_release_recursive>
 800498a:	bf00      	nop
 800498c:	20000128 	.word	0x20000128

08004990 <_malloc_usable_size_r>:
 8004990:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004994:	1f18      	subs	r0, r3, #4
 8004996:	2b00      	cmp	r3, #0
 8004998:	bfbc      	itt	lt
 800499a:	580b      	ldrlt	r3, [r1, r0]
 800499c:	18c0      	addlt	r0, r0, r3
 800499e:	4770      	bx	lr

080049a0 <__retarget_lock_acquire_recursive>:
 80049a0:	4770      	bx	lr

080049a2 <__retarget_lock_release_recursive>:
 80049a2:	4770      	bx	lr

080049a4 <_init>:
 80049a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049a6:	bf00      	nop
 80049a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049aa:	bc08      	pop	{r3}
 80049ac:	469e      	mov	lr, r3
 80049ae:	4770      	bx	lr

080049b0 <_fini>:
 80049b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80049b2:	bf00      	nop
 80049b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80049b6:	bc08      	pop	{r3}
 80049b8:	469e      	mov	lr, r3
 80049ba:	4770      	bx	lr
