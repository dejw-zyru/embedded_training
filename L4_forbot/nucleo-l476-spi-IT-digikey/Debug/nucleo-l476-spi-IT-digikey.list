
nucleo-l476-spi-IT-digikey.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005650  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  080057e0  080057e0  000157e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005884  08005884  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005884  08005884  00015884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800588c  0800588c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800588c  0800588c  0001588c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005890  08005890  00015890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005894  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  20000070  08005904  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000190  08005904  00020190  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d7d4  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ce8  00000000  00000000  0002d874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b40  00000000  00000000  0002f560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a88  00000000  00000000  000300a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026704  00000000  00000000  00030b28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dae2  00000000  00000000  0005722c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ebf22  00000000  00000000  00064d0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00150c30  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031b8  00000000  00000000  00150c80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080057c8 	.word	0x080057c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080057c8 	.word	0x080057c8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b098      	sub	sp, #96	; 0x60
 8000578:	af00      	add	r7, sp, #0
	char uart_buf[50];
	  int uart_buf_len;
	  char spi_buf[20];
	  uint8_t addr;
	  uint8_t wip;
	  uint8_t state = 0;
 800057a:	2300      	movs	r3, #0
 800057c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000580:	f000 fbec 	bl	8000d5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000584:	f000 f926 	bl	80007d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000588:	f000 f9e4 	bl	8000954 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800058c:	f000 f9b2 	bl	80008f4 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8000590:	f000 f972 	bl	8000878 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  // CS pin should default high
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000594:	2201      	movs	r2, #1
 8000596:	2140      	movs	r1, #64	; 0x40
 8000598:	4883      	ldr	r0, [pc, #524]	; (80007a8 <main+0x234>)
 800059a:	f000 ff7b 	bl	8001494 <HAL_GPIO_WritePin>

    // Say something
    uart_buf_len = sprintf(uart_buf, "SPI Interrupt Test\r\n");
 800059e:	f107 0318 	add.w	r3, r7, #24
 80005a2:	4982      	ldr	r1, [pc, #520]	; (80007ac <main+0x238>)
 80005a4:	4618      	mov	r0, r3
 80005a6:	f004 fca1 	bl	8004eec <siprintf>
 80005aa:	64f8      	str	r0, [r7, #76]	; 0x4c
    HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 80005ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80005ae:	b29a      	uxth	r2, r3
 80005b0:	f107 0118 	add.w	r1, r7, #24
 80005b4:	2364      	movs	r3, #100	; 0x64
 80005b6:	487e      	ldr	r0, [pc, #504]	; (80007b0 <main+0x23c>)
 80005b8:	f003 ff69 	bl	800448e <HAL_UART_Transmit>

    // Set starting address in EEPROM (arbitrarily set to 5). Note that for the
    // 25AA040A, we can't do sequential writes outside of page (16 bytes)
    addr = 0x05;
 80005bc:	2305      	movs	r3, #5
 80005be:	70fb      	strb	r3, [r7, #3]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Finite state machine to allow for non-blocking SPI transmit/receive
	      switch(state)
 80005c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80005c4:	2b05      	cmp	r3, #5
 80005c6:	f200 80e6 	bhi.w	8000796 <main+0x222>
 80005ca:	a201      	add	r2, pc, #4	; (adr r2, 80005d0 <main+0x5c>)
 80005cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005d0:	080005e9 	.word	0x080005e9
 80005d4:	08000655 	.word	0x08000655
 80005d8:	08000673 	.word	0x08000673
 80005dc:	080006bd 	.word	0x080006bd
 80005e0:	08000713 	.word	0x08000713
 80005e4:	0800072f 	.word	0x0800072f
	      {
	        // Transmit
	        case 0:

	          // First 2 bytes of buffer are instruction and address
	          spi_buf[0] = EEPROM_WRITE;
 80005e8:	2302      	movs	r3, #2
 80005ea:	713b      	strb	r3, [r7, #4]
	          spi_buf[1] = addr;
 80005ec:	78fb      	ldrb	r3, [r7, #3]
 80005ee:	717b      	strb	r3, [r7, #5]

	          // Fill buffer with stuff to write to EEPROM
	          for (int i = 0; i < 10; i++)
 80005f0:	2300      	movs	r3, #0
 80005f2:	65bb      	str	r3, [r7, #88]	; 0x58
 80005f4:	e00a      	b.n	800060c <main+0x98>
	          {
	            spi_buf[2 + i] = i;
 80005f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80005f8:	3302      	adds	r3, #2
 80005fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80005fc:	b2d2      	uxtb	r2, r2
 80005fe:	3360      	adds	r3, #96	; 0x60
 8000600:	443b      	add	r3, r7
 8000602:	f803 2c5c 	strb.w	r2, [r3, #-92]
	          for (int i = 0; i < 10; i++)
 8000606:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000608:	3301      	adds	r3, #1
 800060a:	65bb      	str	r3, [r7, #88]	; 0x58
 800060c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800060e:	2b09      	cmp	r3, #9
 8000610:	ddf1      	ble.n	80005f6 <main+0x82>
	          }

	          // Enable write enable latch (allow write operations)
	          HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000612:	2200      	movs	r2, #0
 8000614:	2140      	movs	r1, #64	; 0x40
 8000616:	4864      	ldr	r0, [pc, #400]	; (80007a8 <main+0x234>)
 8000618:	f000 ff3c 	bl	8001494 <HAL_GPIO_WritePin>
	          HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_WREN, 1, 100);
 800061c:	2364      	movs	r3, #100	; 0x64
 800061e:	2201      	movs	r2, #1
 8000620:	4964      	ldr	r1, [pc, #400]	; (80007b4 <main+0x240>)
 8000622:	4865      	ldr	r0, [pc, #404]	; (80007b8 <main+0x244>)
 8000624:	f002 fb11 	bl	8002c4a <HAL_SPI_Transmit>
	          HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000628:	2201      	movs	r2, #1
 800062a:	2140      	movs	r1, #64	; 0x40
 800062c:	485e      	ldr	r0, [pc, #376]	; (80007a8 <main+0x234>)
 800062e:	f000 ff31 	bl	8001494 <HAL_GPIO_WritePin>

	          // Perform non-blocking write to SPI
	          HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000632:	2200      	movs	r2, #0
 8000634:	2140      	movs	r1, #64	; 0x40
 8000636:	485c      	ldr	r0, [pc, #368]	; (80007a8 <main+0x234>)
 8000638:	f000 ff2c 	bl	8001494 <HAL_GPIO_WritePin>
	          HAL_SPI_Transmit_IT(&hspi1, (uint8_t *)spi_buf, 12);
 800063c:	1d3b      	adds	r3, r7, #4
 800063e:	220c      	movs	r2, #12
 8000640:	4619      	mov	r1, r3
 8000642:	485d      	ldr	r0, [pc, #372]	; (80007b8 <main+0x244>)
 8000644:	f002 ffb2 	bl	80035ac <HAL_SPI_Transmit_IT>

	          // Go to next state: waiting for interrupt flag
	          state  += 1;
 8000648:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800064c:	3301      	adds	r3, #1
 800064e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	          break;
 8000652:	e0a7      	b.n	80007a4 <main+0x230>

	        // Wait for transmit flag
	        case 1:

	          if (spi_xmit_flag)
 8000654:	4b59      	ldr	r3, [pc, #356]	; (80007bc <main+0x248>)
 8000656:	781b      	ldrb	r3, [r3, #0]
 8000658:	b2db      	uxtb	r3, r3
 800065a:	2b00      	cmp	r3, #0
 800065c:	f000 809d 	beq.w	800079a <main+0x226>
	          {
	            // Clear flag and go to next state
	            spi_xmit_flag = 0;
 8000660:	4b56      	ldr	r3, [pc, #344]	; (80007bc <main+0x248>)
 8000662:	2200      	movs	r2, #0
 8000664:	701a      	strb	r2, [r3, #0]
	            state  += 1;
 8000666:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800066a:	3301      	adds	r3, #1
 800066c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	          }

	          break;
 8000670:	e093      	b.n	800079a <main+0x226>

	        // Wait for WIP bit to be cleared
	        case 2:

	          // Read status register
	          HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000672:	2200      	movs	r2, #0
 8000674:	2140      	movs	r1, #64	; 0x40
 8000676:	484c      	ldr	r0, [pc, #304]	; (80007a8 <main+0x234>)
 8000678:	f000 ff0c 	bl	8001494 <HAL_GPIO_WritePin>
	          HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_RDSR, 1, 100);
 800067c:	2364      	movs	r3, #100	; 0x64
 800067e:	2201      	movs	r2, #1
 8000680:	494f      	ldr	r1, [pc, #316]	; (80007c0 <main+0x24c>)
 8000682:	484d      	ldr	r0, [pc, #308]	; (80007b8 <main+0x244>)
 8000684:	f002 fae1 	bl	8002c4a <HAL_SPI_Transmit>
	          HAL_SPI_Receive(&hspi1, (uint8_t *)spi_buf, 1, 100);
 8000688:	1d39      	adds	r1, r7, #4
 800068a:	2364      	movs	r3, #100	; 0x64
 800068c:	2201      	movs	r2, #1
 800068e:	484a      	ldr	r0, [pc, #296]	; (80007b8 <main+0x244>)
 8000690:	f002 fc49 	bl	8002f26 <HAL_SPI_Receive>
	          HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000694:	2201      	movs	r2, #1
 8000696:	2140      	movs	r1, #64	; 0x40
 8000698:	4843      	ldr	r0, [pc, #268]	; (80007a8 <main+0x234>)
 800069a:	f000 fefb 	bl	8001494 <HAL_GPIO_WritePin>

	          // Mask out WIP bit
	          wip = spi_buf[0] & 0b00000001;
 800069e:	793b      	ldrb	r3, [r7, #4]
 80006a0:	f003 0301 	and.w	r3, r3, #1
 80006a4:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b

	          // If WIP is cleared, go to next state
	          if (wip == 0)
 80006a8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d176      	bne.n	800079e <main+0x22a>
	          {
	            state  += 1;
 80006b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80006b4:	3301      	adds	r3, #1
 80006b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	          }

	          break;
 80006ba:	e070      	b.n	800079e <main+0x22a>

	        // Set up for interrupt-based SPI receive
	        case 3:

	          // Clear SPI buffer
	          for (int i = 0; i < 12; i++)
 80006bc:	2300      	movs	r3, #0
 80006be:	657b      	str	r3, [r7, #84]	; 0x54
 80006c0:	e007      	b.n	80006d2 <main+0x15e>
	          {
	            spi_buf[i] = 0;
 80006c2:	1d3a      	adds	r2, r7, #4
 80006c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80006c6:	4413      	add	r3, r2
 80006c8:	2200      	movs	r2, #0
 80006ca:	701a      	strb	r2, [r3, #0]
	          for (int i = 0; i < 12; i++)
 80006cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80006ce:	3301      	adds	r3, #1
 80006d0:	657b      	str	r3, [r7, #84]	; 0x54
 80006d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80006d4:	2b0b      	cmp	r3, #11
 80006d6:	ddf4      	ble.n	80006c2 <main+0x14e>
	          }

	          // Read the 10 bytes back
	          HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80006d8:	2200      	movs	r2, #0
 80006da:	2140      	movs	r1, #64	; 0x40
 80006dc:	4832      	ldr	r0, [pc, #200]	; (80007a8 <main+0x234>)
 80006de:	f000 fed9 	bl	8001494 <HAL_GPIO_WritePin>
	          HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_READ, 1, 100);
 80006e2:	2364      	movs	r3, #100	; 0x64
 80006e4:	2201      	movs	r2, #1
 80006e6:	4937      	ldr	r1, [pc, #220]	; (80007c4 <main+0x250>)
 80006e8:	4833      	ldr	r0, [pc, #204]	; (80007b8 <main+0x244>)
 80006ea:	f002 faae 	bl	8002c4a <HAL_SPI_Transmit>
	          HAL_SPI_Transmit(&hspi1, (uint8_t *)&addr, 1, 100);
 80006ee:	1cf9      	adds	r1, r7, #3
 80006f0:	2364      	movs	r3, #100	; 0x64
 80006f2:	2201      	movs	r2, #1
 80006f4:	4830      	ldr	r0, [pc, #192]	; (80007b8 <main+0x244>)
 80006f6:	f002 faa8 	bl	8002c4a <HAL_SPI_Transmit>
	          HAL_SPI_Receive_IT(&hspi1, (uint8_t *)spi_buf, 10);
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	220a      	movs	r2, #10
 80006fe:	4619      	mov	r1, r3
 8000700:	482d      	ldr	r0, [pc, #180]	; (80007b8 <main+0x244>)
 8000702:	f002 ffe1 	bl	80036c8 <HAL_SPI_Receive_IT>

	          // Go to next state: waiting for receive to finish
	          state  += 1;
 8000706:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800070a:	3301      	adds	r3, #1
 800070c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	          break;
 8000710:	e048      	b.n	80007a4 <main+0x230>

	        // Wait for receive flag
	        case 4:

	          if (spi_recv_flag)
 8000712:	4b2d      	ldr	r3, [pc, #180]	; (80007c8 <main+0x254>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	b2db      	uxtb	r3, r3
 8000718:	2b00      	cmp	r3, #0
 800071a:	d042      	beq.n	80007a2 <main+0x22e>
	          {
	            // Clear flag and go to next state
	            spi_recv_flag = 0;
 800071c:	4b2a      	ldr	r3, [pc, #168]	; (80007c8 <main+0x254>)
 800071e:	2200      	movs	r2, #0
 8000720:	701a      	strb	r2, [r3, #0]
	            state  += 1;
 8000722:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000726:	3301      	adds	r3, #1
 8000728:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	          }

	          break;
 800072c:	e039      	b.n	80007a2 <main+0x22e>

	        // Print out received bytes and wait before retransmitting
	        case 5:

	          // Print out bytes
	          for (int i = 0; i < 10; i++)
 800072e:	2300      	movs	r3, #0
 8000730:	653b      	str	r3, [r7, #80]	; 0x50
 8000732:	e016      	b.n	8000762 <main+0x1ee>
	          {
	            uart_buf_len = sprintf(uart_buf,
	                                    "0x%02x ",(unsigned int)spi_buf[i]);
 8000734:	1d3a      	adds	r2, r7, #4
 8000736:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000738:	4413      	add	r3, r2
 800073a:	781b      	ldrb	r3, [r3, #0]
	            uart_buf_len = sprintf(uart_buf,
 800073c:	461a      	mov	r2, r3
 800073e:	f107 0318 	add.w	r3, r7, #24
 8000742:	4922      	ldr	r1, [pc, #136]	; (80007cc <main+0x258>)
 8000744:	4618      	mov	r0, r3
 8000746:	f004 fbd1 	bl	8004eec <siprintf>
 800074a:	64f8      	str	r0, [r7, #76]	; 0x4c
	            HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 800074c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800074e:	b29a      	uxth	r2, r3
 8000750:	f107 0118 	add.w	r1, r7, #24
 8000754:	2364      	movs	r3, #100	; 0x64
 8000756:	4816      	ldr	r0, [pc, #88]	; (80007b0 <main+0x23c>)
 8000758:	f003 fe99 	bl	800448e <HAL_UART_Transmit>
	          for (int i = 0; i < 10; i++)
 800075c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800075e:	3301      	adds	r3, #1
 8000760:	653b      	str	r3, [r7, #80]	; 0x50
 8000762:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000764:	2b09      	cmp	r3, #9
 8000766:	dde5      	ble.n	8000734 <main+0x1c0>
	          }

	          // Print newline
	          uart_buf_len = sprintf(uart_buf, "\r\n");
 8000768:	f107 0318 	add.w	r3, r7, #24
 800076c:	4918      	ldr	r1, [pc, #96]	; (80007d0 <main+0x25c>)
 800076e:	4618      	mov	r0, r3
 8000770:	f004 fbbc 	bl	8004eec <siprintf>
 8000774:	64f8      	str	r0, [r7, #76]	; 0x4c
	          HAL_UART_Transmit(&huart2, (uint8_t *)uart_buf, uart_buf_len, 100);
 8000776:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000778:	b29a      	uxth	r2, r3
 800077a:	f107 0118 	add.w	r1, r7, #24
 800077e:	2364      	movs	r3, #100	; 0x64
 8000780:	480b      	ldr	r0, [pc, #44]	; (80007b0 <main+0x23c>)
 8000782:	f003 fe84 	bl	800448e <HAL_UART_Transmit>

	          // Wait a few seconds before retransmitting (yes, I know that this is
	          // blocking--you can make it non-blocking if you wish. I'm lazy.)
	          HAL_Delay(1000);
 8000786:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800078a:	f000 fb63 	bl	8000e54 <HAL_Delay>
	          state = 0;
 800078e:	2300      	movs	r3, #0
 8000790:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	          break;
 8000794:	e006      	b.n	80007a4 <main+0x230>

	        default:
	          break;
 8000796:	bf00      	nop
 8000798:	e712      	b.n	80005c0 <main+0x4c>
	          break;
 800079a:	bf00      	nop
 800079c:	e710      	b.n	80005c0 <main+0x4c>
	          break;
 800079e:	bf00      	nop
 80007a0:	e70e      	b.n	80005c0 <main+0x4c>
	          break;
 80007a2:	bf00      	nop
	      switch(state)
 80007a4:	e70c      	b.n	80005c0 <main+0x4c>
 80007a6:	bf00      	nop
 80007a8:	48000400 	.word	0x48000400
 80007ac:	080057e0 	.word	0x080057e0
 80007b0:	200000f0 	.word	0x200000f0
 80007b4:	08005804 	.word	0x08005804
 80007b8:	2000008c 	.word	0x2000008c
 80007bc:	20000174 	.word	0x20000174
 80007c0:	08005805 	.word	0x08005805
 80007c4:	08005803 	.word	0x08005803
 80007c8:	20000175 	.word	0x20000175
 80007cc:	080057f8 	.word	0x080057f8
 80007d0:	08005800 	.word	0x08005800

080007d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b096      	sub	sp, #88	; 0x58
 80007d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007da:	f107 0314 	add.w	r3, r7, #20
 80007de:	2244      	movs	r2, #68	; 0x44
 80007e0:	2100      	movs	r1, #0
 80007e2:	4618      	mov	r0, r3
 80007e4:	f004 fb7a 	bl	8004edc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e8:	463b      	mov	r3, r7
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]
 80007f2:	60da      	str	r2, [r3, #12]
 80007f4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007f6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007fa:	f000 fe71 	bl	80014e0 <HAL_PWREx_ControlVoltageScaling>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000804:	f000 f934 	bl	8000a70 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000808:	2302      	movs	r3, #2
 800080a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800080c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000810:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000812:	2310      	movs	r3, #16
 8000814:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000816:	2302      	movs	r3, #2
 8000818:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800081a:	2302      	movs	r3, #2
 800081c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800081e:	2301      	movs	r3, #1
 8000820:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000822:	230a      	movs	r3, #10
 8000824:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000826:	2307      	movs	r3, #7
 8000828:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800082a:	2302      	movs	r3, #2
 800082c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800082e:	2302      	movs	r3, #2
 8000830:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000832:	f107 0314 	add.w	r3, r7, #20
 8000836:	4618      	mov	r0, r3
 8000838:	f000 fea8 	bl	800158c <HAL_RCC_OscConfig>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000842:	f000 f915 	bl	8000a70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000846:	230f      	movs	r3, #15
 8000848:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800084a:	2303      	movs	r3, #3
 800084c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800084e:	2300      	movs	r3, #0
 8000850:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000852:	2300      	movs	r3, #0
 8000854:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000856:	2300      	movs	r3, #0
 8000858:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800085a:	463b      	mov	r3, r7
 800085c:	2104      	movs	r1, #4
 800085e:	4618      	mov	r0, r3
 8000860:	f001 fa70 	bl	8001d44 <HAL_RCC_ClockConfig>
 8000864:	4603      	mov	r3, r0
 8000866:	2b00      	cmp	r3, #0
 8000868:	d001      	beq.n	800086e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800086a:	f000 f901 	bl	8000a70 <Error_Handler>
  }
}
 800086e:	bf00      	nop
 8000870:	3758      	adds	r7, #88	; 0x58
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
	...

08000878 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800087c:	4b1b      	ldr	r3, [pc, #108]	; (80008ec <MX_SPI1_Init+0x74>)
 800087e:	4a1c      	ldr	r2, [pc, #112]	; (80008f0 <MX_SPI1_Init+0x78>)
 8000880:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000882:	4b1a      	ldr	r3, [pc, #104]	; (80008ec <MX_SPI1_Init+0x74>)
 8000884:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000888:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800088a:	4b18      	ldr	r3, [pc, #96]	; (80008ec <MX_SPI1_Init+0x74>)
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000890:	4b16      	ldr	r3, [pc, #88]	; (80008ec <MX_SPI1_Init+0x74>)
 8000892:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000896:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000898:	4b14      	ldr	r3, [pc, #80]	; (80008ec <MX_SPI1_Init+0x74>)
 800089a:	2200      	movs	r2, #0
 800089c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800089e:	4b13      	ldr	r3, [pc, #76]	; (80008ec <MX_SPI1_Init+0x74>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008a4:	4b11      	ldr	r3, [pc, #68]	; (80008ec <MX_SPI1_Init+0x74>)
 80008a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008aa:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 80008ac:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <MX_SPI1_Init+0x74>)
 80008ae:	2228      	movs	r2, #40	; 0x28
 80008b0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008b2:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <MX_SPI1_Init+0x74>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008b8:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <MX_SPI1_Init+0x74>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008be:	4b0b      	ldr	r3, [pc, #44]	; (80008ec <MX_SPI1_Init+0x74>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80008c4:	4b09      	ldr	r3, [pc, #36]	; (80008ec <MX_SPI1_Init+0x74>)
 80008c6:	2207      	movs	r2, #7
 80008c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008ca:	4b08      	ldr	r3, [pc, #32]	; (80008ec <MX_SPI1_Init+0x74>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80008d0:	4b06      	ldr	r3, [pc, #24]	; (80008ec <MX_SPI1_Init+0x74>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008d6:	4805      	ldr	r0, [pc, #20]	; (80008ec <MX_SPI1_Init+0x74>)
 80008d8:	f002 f914 	bl	8002b04 <HAL_SPI_Init>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80008e2:	f000 f8c5 	bl	8000a70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	2000008c 	.word	0x2000008c
 80008f0:	40013000 	.word	0x40013000

080008f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008f8:	4b14      	ldr	r3, [pc, #80]	; (800094c <MX_USART2_UART_Init+0x58>)
 80008fa:	4a15      	ldr	r2, [pc, #84]	; (8000950 <MX_USART2_UART_Init+0x5c>)
 80008fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008fe:	4b13      	ldr	r3, [pc, #76]	; (800094c <MX_USART2_UART_Init+0x58>)
 8000900:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000904:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000906:	4b11      	ldr	r3, [pc, #68]	; (800094c <MX_USART2_UART_Init+0x58>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800090c:	4b0f      	ldr	r3, [pc, #60]	; (800094c <MX_USART2_UART_Init+0x58>)
 800090e:	2200      	movs	r2, #0
 8000910:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000912:	4b0e      	ldr	r3, [pc, #56]	; (800094c <MX_USART2_UART_Init+0x58>)
 8000914:	2200      	movs	r2, #0
 8000916:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000918:	4b0c      	ldr	r3, [pc, #48]	; (800094c <MX_USART2_UART_Init+0x58>)
 800091a:	220c      	movs	r2, #12
 800091c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800091e:	4b0b      	ldr	r3, [pc, #44]	; (800094c <MX_USART2_UART_Init+0x58>)
 8000920:	2200      	movs	r2, #0
 8000922:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000924:	4b09      	ldr	r3, [pc, #36]	; (800094c <MX_USART2_UART_Init+0x58>)
 8000926:	2200      	movs	r2, #0
 8000928:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800092a:	4b08      	ldr	r3, [pc, #32]	; (800094c <MX_USART2_UART_Init+0x58>)
 800092c:	2200      	movs	r2, #0
 800092e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000930:	4b06      	ldr	r3, [pc, #24]	; (800094c <MX_USART2_UART_Init+0x58>)
 8000932:	2200      	movs	r2, #0
 8000934:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000936:	4805      	ldr	r0, [pc, #20]	; (800094c <MX_USART2_UART_Init+0x58>)
 8000938:	f003 fd5b 	bl	80043f2 <HAL_UART_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000942:	f000 f895 	bl	8000a70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	200000f0 	.word	0x200000f0
 8000950:	40004400 	.word	0x40004400

08000954 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b08a      	sub	sp, #40	; 0x28
 8000958:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095a:	f107 0314 	add.w	r3, r7, #20
 800095e:	2200      	movs	r2, #0
 8000960:	601a      	str	r2, [r3, #0]
 8000962:	605a      	str	r2, [r3, #4]
 8000964:	609a      	str	r2, [r3, #8]
 8000966:	60da      	str	r2, [r3, #12]
 8000968:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800096a:	4b2a      	ldr	r3, [pc, #168]	; (8000a14 <MX_GPIO_Init+0xc0>)
 800096c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096e:	4a29      	ldr	r2, [pc, #164]	; (8000a14 <MX_GPIO_Init+0xc0>)
 8000970:	f043 0304 	orr.w	r3, r3, #4
 8000974:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000976:	4b27      	ldr	r3, [pc, #156]	; (8000a14 <MX_GPIO_Init+0xc0>)
 8000978:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800097a:	f003 0304 	and.w	r3, r3, #4
 800097e:	613b      	str	r3, [r7, #16]
 8000980:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000982:	4b24      	ldr	r3, [pc, #144]	; (8000a14 <MX_GPIO_Init+0xc0>)
 8000984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000986:	4a23      	ldr	r2, [pc, #140]	; (8000a14 <MX_GPIO_Init+0xc0>)
 8000988:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800098c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800098e:	4b21      	ldr	r3, [pc, #132]	; (8000a14 <MX_GPIO_Init+0xc0>)
 8000990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000996:	60fb      	str	r3, [r7, #12]
 8000998:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800099a:	4b1e      	ldr	r3, [pc, #120]	; (8000a14 <MX_GPIO_Init+0xc0>)
 800099c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099e:	4a1d      	ldr	r2, [pc, #116]	; (8000a14 <MX_GPIO_Init+0xc0>)
 80009a0:	f043 0301 	orr.w	r3, r3, #1
 80009a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009a6:	4b1b      	ldr	r3, [pc, #108]	; (8000a14 <MX_GPIO_Init+0xc0>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009aa:	f003 0301 	and.w	r3, r3, #1
 80009ae:	60bb      	str	r3, [r7, #8]
 80009b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009b2:	4b18      	ldr	r3, [pc, #96]	; (8000a14 <MX_GPIO_Init+0xc0>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b6:	4a17      	ldr	r2, [pc, #92]	; (8000a14 <MX_GPIO_Init+0xc0>)
 80009b8:	f043 0302 	orr.w	r3, r3, #2
 80009bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009be:	4b15      	ldr	r3, [pc, #84]	; (8000a14 <MX_GPIO_Init+0xc0>)
 80009c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c2:	f003 0302 	and.w	r3, r3, #2
 80009c6:	607b      	str	r3, [r7, #4]
 80009c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80009ca:	2200      	movs	r2, #0
 80009cc:	2140      	movs	r1, #64	; 0x40
 80009ce:	4812      	ldr	r0, [pc, #72]	; (8000a18 <MX_GPIO_Init+0xc4>)
 80009d0:	f000 fd60 	bl	8001494 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009da:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009e4:	f107 0314 	add.w	r3, r7, #20
 80009e8:	4619      	mov	r1, r3
 80009ea:	480c      	ldr	r0, [pc, #48]	; (8000a1c <MX_GPIO_Init+0xc8>)
 80009ec:	f000 fba8 	bl	8001140 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80009f0:	2340      	movs	r3, #64	; 0x40
 80009f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009f4:	2301      	movs	r3, #1
 80009f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009fc:	2300      	movs	r3, #0
 80009fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a00:	f107 0314 	add.w	r3, r7, #20
 8000a04:	4619      	mov	r1, r3
 8000a06:	4804      	ldr	r0, [pc, #16]	; (8000a18 <MX_GPIO_Init+0xc4>)
 8000a08:	f000 fb9a 	bl	8001140 <HAL_GPIO_Init>

}
 8000a0c:	bf00      	nop
 8000a0e:	3728      	adds	r7, #40	; 0x28
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	40021000 	.word	0x40021000
 8000a18:	48000400 	.word	0x48000400
 8000a1c:	48000800 	.word	0x48000800

08000a20 <HAL_SPI_TxCpltCallback>:

/* USER CODE BEGIN 4 */
// This is called when SPI transmit is done
void HAL_SPI_TxCpltCallback (SPI_HandleTypeDef * hspi)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  // Set CS pin to high and raise flag
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000a28:	2201      	movs	r2, #1
 8000a2a:	2140      	movs	r1, #64	; 0x40
 8000a2c:	4804      	ldr	r0, [pc, #16]	; (8000a40 <HAL_SPI_TxCpltCallback+0x20>)
 8000a2e:	f000 fd31 	bl	8001494 <HAL_GPIO_WritePin>
  spi_xmit_flag = 1;
 8000a32:	4b04      	ldr	r3, [pc, #16]	; (8000a44 <HAL_SPI_TxCpltCallback+0x24>)
 8000a34:	2201      	movs	r2, #1
 8000a36:	701a      	strb	r2, [r3, #0]
}
 8000a38:	bf00      	nop
 8000a3a:	3708      	adds	r7, #8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	48000400 	.word	0x48000400
 8000a44:	20000174 	.word	0x20000174

08000a48 <HAL_SPI_RxCpltCallback>:

// This is called when SPI receive is done
void HAL_SPI_RxCpltCallback (SPI_HandleTypeDef * hspi)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b082      	sub	sp, #8
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  // Set CS pin to high and raise flag
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000a50:	2201      	movs	r2, #1
 8000a52:	2140      	movs	r1, #64	; 0x40
 8000a54:	4804      	ldr	r0, [pc, #16]	; (8000a68 <HAL_SPI_RxCpltCallback+0x20>)
 8000a56:	f000 fd1d 	bl	8001494 <HAL_GPIO_WritePin>
  spi_recv_flag = 1;
 8000a5a:	4b04      	ldr	r3, [pc, #16]	; (8000a6c <HAL_SPI_RxCpltCallback+0x24>)
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	701a      	strb	r2, [r3, #0]
}
 8000a60:	bf00      	nop
 8000a62:	3708      	adds	r7, #8
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	48000400 	.word	0x48000400
 8000a6c:	20000175 	.word	0x20000175

08000a70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a74:	b672      	cpsid	i
}
 8000a76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a78:	e7fe      	b.n	8000a78 <Error_Handler+0x8>
	...

08000a7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a82:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <HAL_MspInit+0x44>)
 8000a84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a86:	4a0e      	ldr	r2, [pc, #56]	; (8000ac0 <HAL_MspInit+0x44>)
 8000a88:	f043 0301 	orr.w	r3, r3, #1
 8000a8c:	6613      	str	r3, [r2, #96]	; 0x60
 8000a8e:	4b0c      	ldr	r3, [pc, #48]	; (8000ac0 <HAL_MspInit+0x44>)
 8000a90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a92:	f003 0301 	and.w	r3, r3, #1
 8000a96:	607b      	str	r3, [r7, #4]
 8000a98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a9a:	4b09      	ldr	r3, [pc, #36]	; (8000ac0 <HAL_MspInit+0x44>)
 8000a9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a9e:	4a08      	ldr	r2, [pc, #32]	; (8000ac0 <HAL_MspInit+0x44>)
 8000aa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa4:	6593      	str	r3, [r2, #88]	; 0x58
 8000aa6:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <HAL_MspInit+0x44>)
 8000aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aae:	603b      	str	r3, [r7, #0]
 8000ab0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	370c      	adds	r7, #12
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	40021000 	.word	0x40021000

08000ac4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08a      	sub	sp, #40	; 0x28
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
 8000ada:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a1b      	ldr	r2, [pc, #108]	; (8000b50 <HAL_SPI_MspInit+0x8c>)
 8000ae2:	4293      	cmp	r3, r2
 8000ae4:	d130      	bne.n	8000b48 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ae6:	4b1b      	ldr	r3, [pc, #108]	; (8000b54 <HAL_SPI_MspInit+0x90>)
 8000ae8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aea:	4a1a      	ldr	r2, [pc, #104]	; (8000b54 <HAL_SPI_MspInit+0x90>)
 8000aec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000af0:	6613      	str	r3, [r2, #96]	; 0x60
 8000af2:	4b18      	ldr	r3, [pc, #96]	; (8000b54 <HAL_SPI_MspInit+0x90>)
 8000af4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000af6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000afa:	613b      	str	r3, [r7, #16]
 8000afc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afe:	4b15      	ldr	r3, [pc, #84]	; (8000b54 <HAL_SPI_MspInit+0x90>)
 8000b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b02:	4a14      	ldr	r2, [pc, #80]	; (8000b54 <HAL_SPI_MspInit+0x90>)
 8000b04:	f043 0301 	orr.w	r3, r3, #1
 8000b08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b0a:	4b12      	ldr	r3, [pc, #72]	; (8000b54 <HAL_SPI_MspInit+0x90>)
 8000b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b0e:	f003 0301 	and.w	r3, r3, #1
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000b16:	23e0      	movs	r3, #224	; 0xe0
 8000b18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b22:	2303      	movs	r3, #3
 8000b24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b26:	2305      	movs	r3, #5
 8000b28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2a:	f107 0314 	add.w	r3, r7, #20
 8000b2e:	4619      	mov	r1, r3
 8000b30:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b34:	f000 fb04 	bl	8001140 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8000b38:	2200      	movs	r2, #0
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	2023      	movs	r0, #35	; 0x23
 8000b3e:	f000 fa88 	bl	8001052 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8000b42:	2023      	movs	r0, #35	; 0x23
 8000b44:	f000 faa1 	bl	800108a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b48:	bf00      	nop
 8000b4a:	3728      	adds	r7, #40	; 0x28
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	40013000 	.word	0x40013000
 8000b54:	40021000 	.word	0x40021000

08000b58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b0ac      	sub	sp, #176	; 0xb0
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b60:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	2288      	movs	r2, #136	; 0x88
 8000b76:	2100      	movs	r1, #0
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f004 f9af 	bl	8004edc <memset>
  if(huart->Instance==USART2)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	4a21      	ldr	r2, [pc, #132]	; (8000c08 <HAL_UART_MspInit+0xb0>)
 8000b84:	4293      	cmp	r3, r2
 8000b86:	d13b      	bne.n	8000c00 <HAL_UART_MspInit+0xa8>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b88:	2302      	movs	r3, #2
 8000b8a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	4618      	mov	r0, r3
 8000b96:	f001 faf9 	bl	800218c <HAL_RCCEx_PeriphCLKConfig>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ba0:	f7ff ff66 	bl	8000a70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ba4:	4b19      	ldr	r3, [pc, #100]	; (8000c0c <HAL_UART_MspInit+0xb4>)
 8000ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ba8:	4a18      	ldr	r2, [pc, #96]	; (8000c0c <HAL_UART_MspInit+0xb4>)
 8000baa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bae:	6593      	str	r3, [r2, #88]	; 0x58
 8000bb0:	4b16      	ldr	r3, [pc, #88]	; (8000c0c <HAL_UART_MspInit+0xb4>)
 8000bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bb4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bb8:	613b      	str	r3, [r7, #16]
 8000bba:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bbc:	4b13      	ldr	r3, [pc, #76]	; (8000c0c <HAL_UART_MspInit+0xb4>)
 8000bbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc0:	4a12      	ldr	r2, [pc, #72]	; (8000c0c <HAL_UART_MspInit+0xb4>)
 8000bc2:	f043 0301 	orr.w	r3, r3, #1
 8000bc6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bc8:	4b10      	ldr	r3, [pc, #64]	; (8000c0c <HAL_UART_MspInit+0xb4>)
 8000bca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bcc:	f003 0301 	and.w	r3, r3, #1
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000bd4:	230c      	movs	r3, #12
 8000bd6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be0:	2300      	movs	r3, #0
 8000be2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be6:	2303      	movs	r3, #3
 8000be8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bec:	2307      	movs	r3, #7
 8000bee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bfc:	f000 faa0 	bl	8001140 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000c00:	bf00      	nop
 8000c02:	37b0      	adds	r7, #176	; 0xb0
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	40004400 	.word	0x40004400
 8000c0c:	40021000 	.word	0x40021000

08000c10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <NMI_Handler+0x4>

08000c16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c1a:	e7fe      	b.n	8000c1a <HardFault_Handler+0x4>

08000c1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <MemManage_Handler+0x4>

08000c22 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c26:	e7fe      	b.n	8000c26 <BusFault_Handler+0x4>

08000c28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c2c:	e7fe      	b.n	8000c2c <UsageFault_Handler+0x4>

08000c2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr

08000c3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr

08000c4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c5c:	f000 f8da 	bl	8000e14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c60:	bf00      	nop
 8000c62:	bd80      	pop	{r7, pc}

08000c64 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8000c68:	4802      	ldr	r0, [pc, #8]	; (8000c74 <SPI1_IRQHandler+0x10>)
 8000c6a:	f002 fe8d 	bl	8003988 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	2000008c 	.word	0x2000008c

08000c78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b086      	sub	sp, #24
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c80:	4a14      	ldr	r2, [pc, #80]	; (8000cd4 <_sbrk+0x5c>)
 8000c82:	4b15      	ldr	r3, [pc, #84]	; (8000cd8 <_sbrk+0x60>)
 8000c84:	1ad3      	subs	r3, r2, r3
 8000c86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c8c:	4b13      	ldr	r3, [pc, #76]	; (8000cdc <_sbrk+0x64>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d102      	bne.n	8000c9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c94:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <_sbrk+0x64>)
 8000c96:	4a12      	ldr	r2, [pc, #72]	; (8000ce0 <_sbrk+0x68>)
 8000c98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c9a:	4b10      	ldr	r3, [pc, #64]	; (8000cdc <_sbrk+0x64>)
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	4413      	add	r3, r2
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d207      	bcs.n	8000cb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ca8:	f004 f8ee 	bl	8004e88 <__errno>
 8000cac:	4603      	mov	r3, r0
 8000cae:	220c      	movs	r2, #12
 8000cb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb6:	e009      	b.n	8000ccc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cb8:	4b08      	ldr	r3, [pc, #32]	; (8000cdc <_sbrk+0x64>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cbe:	4b07      	ldr	r3, [pc, #28]	; (8000cdc <_sbrk+0x64>)
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	4413      	add	r3, r2
 8000cc6:	4a05      	ldr	r2, [pc, #20]	; (8000cdc <_sbrk+0x64>)
 8000cc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cca:	68fb      	ldr	r3, [r7, #12]
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3718      	adds	r7, #24
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	20018000 	.word	0x20018000
 8000cd8:	00000400 	.word	0x00000400
 8000cdc:	20000178 	.word	0x20000178
 8000ce0:	20000190 	.word	0x20000190

08000ce4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ce8:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <SystemInit+0x20>)
 8000cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cee:	4a05      	ldr	r2, [pc, #20]	; (8000d04 <SystemInit+0x20>)
 8000cf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d40 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d0c:	f7ff ffea 	bl	8000ce4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d10:	480c      	ldr	r0, [pc, #48]	; (8000d44 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d12:	490d      	ldr	r1, [pc, #52]	; (8000d48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d14:	4a0d      	ldr	r2, [pc, #52]	; (8000d4c <LoopForever+0xe>)
  movs r3, #0
 8000d16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d18:	e002      	b.n	8000d20 <LoopCopyDataInit>

08000d1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d1e:	3304      	adds	r3, #4

08000d20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d24:	d3f9      	bcc.n	8000d1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d26:	4a0a      	ldr	r2, [pc, #40]	; (8000d50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d28:	4c0a      	ldr	r4, [pc, #40]	; (8000d54 <LoopForever+0x16>)
  movs r3, #0
 8000d2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d2c:	e001      	b.n	8000d32 <LoopFillZerobss>

08000d2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d30:	3204      	adds	r2, #4

08000d32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d34:	d3fb      	bcc.n	8000d2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d36:	f004 f8ad 	bl	8004e94 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d3a:	f7ff fc1b 	bl	8000574 <main>

08000d3e <LoopForever>:

LoopForever:
    b LoopForever
 8000d3e:	e7fe      	b.n	8000d3e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d40:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000d44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d48:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d4c:	08005894 	.word	0x08005894
  ldr r2, =_sbss
 8000d50:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d54:	20000190 	.word	0x20000190

08000d58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d58:	e7fe      	b.n	8000d58 <ADC1_2_IRQHandler>
	...

08000d5c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b082      	sub	sp, #8
 8000d60:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d62:	2300      	movs	r3, #0
 8000d64:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d66:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <HAL_Init+0x3c>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a0b      	ldr	r2, [pc, #44]	; (8000d98 <HAL_Init+0x3c>)
 8000d6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d70:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d72:	2003      	movs	r0, #3
 8000d74:	f000 f962 	bl	800103c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d78:	2000      	movs	r0, #0
 8000d7a:	f000 f80f 	bl	8000d9c <HAL_InitTick>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d002      	beq.n	8000d8a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000d84:	2301      	movs	r3, #1
 8000d86:	71fb      	strb	r3, [r7, #7]
 8000d88:	e001      	b.n	8000d8e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d8a:	f7ff fe77 	bl	8000a7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	40022000 	.word	0x40022000

08000d9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b084      	sub	sp, #16
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000da4:	2300      	movs	r3, #0
 8000da6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000da8:	4b17      	ldr	r3, [pc, #92]	; (8000e08 <HAL_InitTick+0x6c>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d023      	beq.n	8000df8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000db0:	4b16      	ldr	r3, [pc, #88]	; (8000e0c <HAL_InitTick+0x70>)
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	4b14      	ldr	r3, [pc, #80]	; (8000e08 <HAL_InitTick+0x6c>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	4619      	mov	r1, r3
 8000dba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f000 f96d 	bl	80010a6 <HAL_SYSTICK_Config>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d10f      	bne.n	8000df2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	2b0f      	cmp	r3, #15
 8000dd6:	d809      	bhi.n	8000dec <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	6879      	ldr	r1, [r7, #4]
 8000ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8000de0:	f000 f937 	bl	8001052 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000de4:	4a0a      	ldr	r2, [pc, #40]	; (8000e10 <HAL_InitTick+0x74>)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6013      	str	r3, [r2, #0]
 8000dea:	e007      	b.n	8000dfc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000dec:	2301      	movs	r3, #1
 8000dee:	73fb      	strb	r3, [r7, #15]
 8000df0:	e004      	b.n	8000dfc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	73fb      	strb	r3, [r7, #15]
 8000df6:	e001      	b.n	8000dfc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	3710      	adds	r7, #16
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	20000008 	.word	0x20000008
 8000e0c:	20000000 	.word	0x20000000
 8000e10:	20000004 	.word	0x20000004

08000e14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e18:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <HAL_IncTick+0x20>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	461a      	mov	r2, r3
 8000e1e:	4b06      	ldr	r3, [pc, #24]	; (8000e38 <HAL_IncTick+0x24>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4413      	add	r3, r2
 8000e24:	4a04      	ldr	r2, [pc, #16]	; (8000e38 <HAL_IncTick+0x24>)
 8000e26:	6013      	str	r3, [r2, #0]
}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	20000008 	.word	0x20000008
 8000e38:	2000017c 	.word	0x2000017c

08000e3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e40:	4b03      	ldr	r3, [pc, #12]	; (8000e50 <HAL_GetTick+0x14>)
 8000e42:	681b      	ldr	r3, [r3, #0]
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	2000017c 	.word	0x2000017c

08000e54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b084      	sub	sp, #16
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e5c:	f7ff ffee 	bl	8000e3c <HAL_GetTick>
 8000e60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e6c:	d005      	beq.n	8000e7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000e6e:	4b0a      	ldr	r3, [pc, #40]	; (8000e98 <HAL_Delay+0x44>)
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	461a      	mov	r2, r3
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	4413      	add	r3, r2
 8000e78:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e7a:	bf00      	nop
 8000e7c:	f7ff ffde 	bl	8000e3c <HAL_GetTick>
 8000e80:	4602      	mov	r2, r0
 8000e82:	68bb      	ldr	r3, [r7, #8]
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	68fa      	ldr	r2, [r7, #12]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	d8f7      	bhi.n	8000e7c <HAL_Delay+0x28>
  {
  }
}
 8000e8c:	bf00      	nop
 8000e8e:	bf00      	nop
 8000e90:	3710      	adds	r7, #16
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	20000008 	.word	0x20000008

08000e9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b085      	sub	sp, #20
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	f003 0307 	and.w	r3, r3, #7
 8000eaa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eac:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8000eae:	68db      	ldr	r3, [r3, #12]
 8000eb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eb2:	68ba      	ldr	r2, [r7, #8]
 8000eb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000eb8:	4013      	ands	r3, r2
 8000eba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ec4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ec8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ecc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ece:	4a04      	ldr	r2, [pc, #16]	; (8000ee0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	60d3      	str	r3, [r2, #12]
}
 8000ed4:	bf00      	nop
 8000ed6:	3714      	adds	r7, #20
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	e000ed00 	.word	0xe000ed00

08000ee4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ee8:	4b04      	ldr	r3, [pc, #16]	; (8000efc <__NVIC_GetPriorityGrouping+0x18>)
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	0a1b      	lsrs	r3, r3, #8
 8000eee:	f003 0307 	and.w	r3, r3, #7
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	db0b      	blt.n	8000f2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f12:	79fb      	ldrb	r3, [r7, #7]
 8000f14:	f003 021f 	and.w	r2, r3, #31
 8000f18:	4907      	ldr	r1, [pc, #28]	; (8000f38 <__NVIC_EnableIRQ+0x38>)
 8000f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1e:	095b      	lsrs	r3, r3, #5
 8000f20:	2001      	movs	r0, #1
 8000f22:	fa00 f202 	lsl.w	r2, r0, r2
 8000f26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f2a:	bf00      	nop
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	e000e100 	.word	0xe000e100

08000f3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	6039      	str	r1, [r7, #0]
 8000f46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	db0a      	blt.n	8000f66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	490c      	ldr	r1, [pc, #48]	; (8000f88 <__NVIC_SetPriority+0x4c>)
 8000f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5a:	0112      	lsls	r2, r2, #4
 8000f5c:	b2d2      	uxtb	r2, r2
 8000f5e:	440b      	add	r3, r1
 8000f60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f64:	e00a      	b.n	8000f7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	b2da      	uxtb	r2, r3
 8000f6a:	4908      	ldr	r1, [pc, #32]	; (8000f8c <__NVIC_SetPriority+0x50>)
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	f003 030f 	and.w	r3, r3, #15
 8000f72:	3b04      	subs	r3, #4
 8000f74:	0112      	lsls	r2, r2, #4
 8000f76:	b2d2      	uxtb	r2, r2
 8000f78:	440b      	add	r3, r1
 8000f7a:	761a      	strb	r2, [r3, #24]
}
 8000f7c:	bf00      	nop
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	e000e100 	.word	0xe000e100
 8000f8c:	e000ed00 	.word	0xe000ed00

08000f90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b089      	sub	sp, #36	; 0x24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	60f8      	str	r0, [r7, #12]
 8000f98:	60b9      	str	r1, [r7, #8]
 8000f9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	f003 0307 	and.w	r3, r3, #7
 8000fa2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fa4:	69fb      	ldr	r3, [r7, #28]
 8000fa6:	f1c3 0307 	rsb	r3, r3, #7
 8000faa:	2b04      	cmp	r3, #4
 8000fac:	bf28      	it	cs
 8000fae:	2304      	movcs	r3, #4
 8000fb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	3304      	adds	r3, #4
 8000fb6:	2b06      	cmp	r3, #6
 8000fb8:	d902      	bls.n	8000fc0 <NVIC_EncodePriority+0x30>
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	3b03      	subs	r3, #3
 8000fbe:	e000      	b.n	8000fc2 <NVIC_EncodePriority+0x32>
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fc4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fc8:	69bb      	ldr	r3, [r7, #24]
 8000fca:	fa02 f303 	lsl.w	r3, r2, r3
 8000fce:	43da      	mvns	r2, r3
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	401a      	ands	r2, r3
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fd8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	fa01 f303 	lsl.w	r3, r1, r3
 8000fe2:	43d9      	mvns	r1, r3
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe8:	4313      	orrs	r3, r2
         );
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3724      	adds	r7, #36	; 0x24
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
	...

08000ff8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	3b01      	subs	r3, #1
 8001004:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001008:	d301      	bcc.n	800100e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800100a:	2301      	movs	r3, #1
 800100c:	e00f      	b.n	800102e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800100e:	4a0a      	ldr	r2, [pc, #40]	; (8001038 <SysTick_Config+0x40>)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	3b01      	subs	r3, #1
 8001014:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001016:	210f      	movs	r1, #15
 8001018:	f04f 30ff 	mov.w	r0, #4294967295
 800101c:	f7ff ff8e 	bl	8000f3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001020:	4b05      	ldr	r3, [pc, #20]	; (8001038 <SysTick_Config+0x40>)
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001026:	4b04      	ldr	r3, [pc, #16]	; (8001038 <SysTick_Config+0x40>)
 8001028:	2207      	movs	r2, #7
 800102a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	e000e010 	.word	0xe000e010

0800103c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f7ff ff29 	bl	8000e9c <__NVIC_SetPriorityGrouping>
}
 800104a:	bf00      	nop
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}

08001052 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	b086      	sub	sp, #24
 8001056:	af00      	add	r7, sp, #0
 8001058:	4603      	mov	r3, r0
 800105a:	60b9      	str	r1, [r7, #8]
 800105c:	607a      	str	r2, [r7, #4]
 800105e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001060:	2300      	movs	r3, #0
 8001062:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001064:	f7ff ff3e 	bl	8000ee4 <__NVIC_GetPriorityGrouping>
 8001068:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	68b9      	ldr	r1, [r7, #8]
 800106e:	6978      	ldr	r0, [r7, #20]
 8001070:	f7ff ff8e 	bl	8000f90 <NVIC_EncodePriority>
 8001074:	4602      	mov	r2, r0
 8001076:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800107a:	4611      	mov	r1, r2
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff ff5d 	bl	8000f3c <__NVIC_SetPriority>
}
 8001082:	bf00      	nop
 8001084:	3718      	adds	r7, #24
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}

0800108a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800108a:	b580      	push	{r7, lr}
 800108c:	b082      	sub	sp, #8
 800108e:	af00      	add	r7, sp, #0
 8001090:	4603      	mov	r3, r0
 8001092:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff ff31 	bl	8000f00 <__NVIC_EnableIRQ>
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b082      	sub	sp, #8
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f7ff ffa2 	bl	8000ff8 <SysTick_Config>
 80010b4:	4603      	mov	r3, r0
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b084      	sub	sp, #16
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010c6:	2300      	movs	r3, #0
 80010c8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80010d0:	b2db      	uxtb	r3, r3
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d005      	beq.n	80010e2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2204      	movs	r2, #4
 80010da:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80010dc:	2301      	movs	r3, #1
 80010de:	73fb      	strb	r3, [r7, #15]
 80010e0:	e029      	b.n	8001136 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f022 020e 	bic.w	r2, r2, #14
 80010f0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f022 0201 	bic.w	r2, r2, #1
 8001100:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001106:	f003 021c 	and.w	r2, r3, #28
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110e:	2101      	movs	r1, #1
 8001110:	fa01 f202 	lsl.w	r2, r1, r2
 8001114:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2201      	movs	r2, #1
 800111a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2200      	movs	r2, #0
 8001122:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800112a:	2b00      	cmp	r3, #0
 800112c:	d003      	beq.n	8001136 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001132:	6878      	ldr	r0, [r7, #4]
 8001134:	4798      	blx	r3
    }
  }
  return status;
 8001136:	7bfb      	ldrb	r3, [r7, #15]
}
 8001138:	4618      	mov	r0, r3
 800113a:	3710      	adds	r7, #16
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}

08001140 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001140:	b480      	push	{r7}
 8001142:	b087      	sub	sp, #28
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
 8001148:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800114a:	2300      	movs	r3, #0
 800114c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800114e:	e17f      	b.n	8001450 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	2101      	movs	r1, #1
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	fa01 f303 	lsl.w	r3, r1, r3
 800115c:	4013      	ands	r3, r2
 800115e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	2b00      	cmp	r3, #0
 8001164:	f000 8171 	beq.w	800144a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	f003 0303 	and.w	r3, r3, #3
 8001170:	2b01      	cmp	r3, #1
 8001172:	d005      	beq.n	8001180 <HAL_GPIO_Init+0x40>
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f003 0303 	and.w	r3, r3, #3
 800117c:	2b02      	cmp	r3, #2
 800117e:	d130      	bne.n	80011e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	689b      	ldr	r3, [r3, #8]
 8001184:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	005b      	lsls	r3, r3, #1
 800118a:	2203      	movs	r2, #3
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	43db      	mvns	r3, r3
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	4013      	ands	r3, r2
 8001196:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	68da      	ldr	r2, [r3, #12]
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	fa02 f303 	lsl.w	r3, r2, r3
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011b6:	2201      	movs	r2, #1
 80011b8:	697b      	ldr	r3, [r7, #20]
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	43db      	mvns	r3, r3
 80011c0:	693a      	ldr	r2, [r7, #16]
 80011c2:	4013      	ands	r3, r2
 80011c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	091b      	lsrs	r3, r3, #4
 80011cc:	f003 0201 	and.w	r2, r3, #1
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	4313      	orrs	r3, r2
 80011da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f003 0303 	and.w	r3, r3, #3
 80011ea:	2b03      	cmp	r3, #3
 80011ec:	d118      	bne.n	8001220 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80011f4:	2201      	movs	r2, #1
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	43db      	mvns	r3, r3
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	4013      	ands	r3, r2
 8001202:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	685b      	ldr	r3, [r3, #4]
 8001208:	08db      	lsrs	r3, r3, #3
 800120a:	f003 0201 	and.w	r2, r3, #1
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	693a      	ldr	r2, [r7, #16]
 8001216:	4313      	orrs	r3, r2
 8001218:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f003 0303 	and.w	r3, r3, #3
 8001228:	2b03      	cmp	r3, #3
 800122a:	d017      	beq.n	800125c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	2203      	movs	r2, #3
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	43db      	mvns	r3, r3
 800123e:	693a      	ldr	r2, [r7, #16]
 8001240:	4013      	ands	r3, r2
 8001242:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	689a      	ldr	r2, [r3, #8]
 8001248:	697b      	ldr	r3, [r7, #20]
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	fa02 f303 	lsl.w	r3, r2, r3
 8001250:	693a      	ldr	r2, [r7, #16]
 8001252:	4313      	orrs	r3, r2
 8001254:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f003 0303 	and.w	r3, r3, #3
 8001264:	2b02      	cmp	r3, #2
 8001266:	d123      	bne.n	80012b0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	08da      	lsrs	r2, r3, #3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	3208      	adds	r2, #8
 8001270:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001274:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	f003 0307 	and.w	r3, r3, #7
 800127c:	009b      	lsls	r3, r3, #2
 800127e:	220f      	movs	r2, #15
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	4013      	ands	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	691a      	ldr	r2, [r3, #16]
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	f003 0307 	and.w	r3, r3, #7
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	fa02 f303 	lsl.w	r3, r2, r3
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	4313      	orrs	r3, r2
 80012a0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	08da      	lsrs	r2, r3, #3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	3208      	adds	r2, #8
 80012aa:	6939      	ldr	r1, [r7, #16]
 80012ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	2203      	movs	r2, #3
 80012bc:	fa02 f303 	lsl.w	r3, r2, r3
 80012c0:	43db      	mvns	r3, r3
 80012c2:	693a      	ldr	r2, [r7, #16]
 80012c4:	4013      	ands	r3, r2
 80012c6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f003 0203 	and.w	r2, r3, #3
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	4313      	orrs	r3, r2
 80012dc:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	f000 80ac 	beq.w	800144a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f2:	4b5f      	ldr	r3, [pc, #380]	; (8001470 <HAL_GPIO_Init+0x330>)
 80012f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012f6:	4a5e      	ldr	r2, [pc, #376]	; (8001470 <HAL_GPIO_Init+0x330>)
 80012f8:	f043 0301 	orr.w	r3, r3, #1
 80012fc:	6613      	str	r3, [r2, #96]	; 0x60
 80012fe:	4b5c      	ldr	r3, [pc, #368]	; (8001470 <HAL_GPIO_Init+0x330>)
 8001300:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	60bb      	str	r3, [r7, #8]
 8001308:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800130a:	4a5a      	ldr	r2, [pc, #360]	; (8001474 <HAL_GPIO_Init+0x334>)
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	089b      	lsrs	r3, r3, #2
 8001310:	3302      	adds	r3, #2
 8001312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001316:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	f003 0303 	and.w	r3, r3, #3
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	220f      	movs	r2, #15
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	43db      	mvns	r3, r3
 8001328:	693a      	ldr	r2, [r7, #16]
 800132a:	4013      	ands	r3, r2
 800132c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001334:	d025      	beq.n	8001382 <HAL_GPIO_Init+0x242>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a4f      	ldr	r2, [pc, #316]	; (8001478 <HAL_GPIO_Init+0x338>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d01f      	beq.n	800137e <HAL_GPIO_Init+0x23e>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a4e      	ldr	r2, [pc, #312]	; (800147c <HAL_GPIO_Init+0x33c>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d019      	beq.n	800137a <HAL_GPIO_Init+0x23a>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a4d      	ldr	r2, [pc, #308]	; (8001480 <HAL_GPIO_Init+0x340>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d013      	beq.n	8001376 <HAL_GPIO_Init+0x236>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a4c      	ldr	r2, [pc, #304]	; (8001484 <HAL_GPIO_Init+0x344>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d00d      	beq.n	8001372 <HAL_GPIO_Init+0x232>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a4b      	ldr	r2, [pc, #300]	; (8001488 <HAL_GPIO_Init+0x348>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d007      	beq.n	800136e <HAL_GPIO_Init+0x22e>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a4a      	ldr	r2, [pc, #296]	; (800148c <HAL_GPIO_Init+0x34c>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d101      	bne.n	800136a <HAL_GPIO_Init+0x22a>
 8001366:	2306      	movs	r3, #6
 8001368:	e00c      	b.n	8001384 <HAL_GPIO_Init+0x244>
 800136a:	2307      	movs	r3, #7
 800136c:	e00a      	b.n	8001384 <HAL_GPIO_Init+0x244>
 800136e:	2305      	movs	r3, #5
 8001370:	e008      	b.n	8001384 <HAL_GPIO_Init+0x244>
 8001372:	2304      	movs	r3, #4
 8001374:	e006      	b.n	8001384 <HAL_GPIO_Init+0x244>
 8001376:	2303      	movs	r3, #3
 8001378:	e004      	b.n	8001384 <HAL_GPIO_Init+0x244>
 800137a:	2302      	movs	r3, #2
 800137c:	e002      	b.n	8001384 <HAL_GPIO_Init+0x244>
 800137e:	2301      	movs	r3, #1
 8001380:	e000      	b.n	8001384 <HAL_GPIO_Init+0x244>
 8001382:	2300      	movs	r3, #0
 8001384:	697a      	ldr	r2, [r7, #20]
 8001386:	f002 0203 	and.w	r2, r2, #3
 800138a:	0092      	lsls	r2, r2, #2
 800138c:	4093      	lsls	r3, r2
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	4313      	orrs	r3, r2
 8001392:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001394:	4937      	ldr	r1, [pc, #220]	; (8001474 <HAL_GPIO_Init+0x334>)
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	089b      	lsrs	r3, r3, #2
 800139a:	3302      	adds	r3, #2
 800139c:	693a      	ldr	r2, [r7, #16]
 800139e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013a2:	4b3b      	ldr	r3, [pc, #236]	; (8001490 <HAL_GPIO_Init+0x350>)
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	43db      	mvns	r3, r3
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	4013      	ands	r3, r2
 80013b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d003      	beq.n	80013c6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013c6:	4a32      	ldr	r2, [pc, #200]	; (8001490 <HAL_GPIO_Init+0x350>)
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013cc:	4b30      	ldr	r3, [pc, #192]	; (8001490 <HAL_GPIO_Init+0x350>)
 80013ce:	68db      	ldr	r3, [r3, #12]
 80013d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	43db      	mvns	r3, r3
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	4013      	ands	r3, r2
 80013da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d003      	beq.n	80013f0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013f0:	4a27      	ldr	r2, [pc, #156]	; (8001490 <HAL_GPIO_Init+0x350>)
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80013f6:	4b26      	ldr	r3, [pc, #152]	; (8001490 <HAL_GPIO_Init+0x350>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	43db      	mvns	r3, r3
 8001400:	693a      	ldr	r2, [r7, #16]
 8001402:	4013      	ands	r3, r2
 8001404:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d003      	beq.n	800141a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	4313      	orrs	r3, r2
 8001418:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800141a:	4a1d      	ldr	r2, [pc, #116]	; (8001490 <HAL_GPIO_Init+0x350>)
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001420:	4b1b      	ldr	r3, [pc, #108]	; (8001490 <HAL_GPIO_Init+0x350>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	43db      	mvns	r3, r3
 800142a:	693a      	ldr	r2, [r7, #16]
 800142c:	4013      	ands	r3, r2
 800142e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d003      	beq.n	8001444 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800143c:	693a      	ldr	r2, [r7, #16]
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	4313      	orrs	r3, r2
 8001442:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001444:	4a12      	ldr	r2, [pc, #72]	; (8001490 <HAL_GPIO_Init+0x350>)
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	3301      	adds	r3, #1
 800144e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	fa22 f303 	lsr.w	r3, r2, r3
 800145a:	2b00      	cmp	r3, #0
 800145c:	f47f ae78 	bne.w	8001150 <HAL_GPIO_Init+0x10>
  }
}
 8001460:	bf00      	nop
 8001462:	bf00      	nop
 8001464:	371c      	adds	r7, #28
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	40021000 	.word	0x40021000
 8001474:	40010000 	.word	0x40010000
 8001478:	48000400 	.word	0x48000400
 800147c:	48000800 	.word	0x48000800
 8001480:	48000c00 	.word	0x48000c00
 8001484:	48001000 	.word	0x48001000
 8001488:	48001400 	.word	0x48001400
 800148c:	48001800 	.word	0x48001800
 8001490:	40010400 	.word	0x40010400

08001494 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001494:	b480      	push	{r7}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	460b      	mov	r3, r1
 800149e:	807b      	strh	r3, [r7, #2]
 80014a0:	4613      	mov	r3, r2
 80014a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014a4:	787b      	ldrb	r3, [r7, #1]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d003      	beq.n	80014b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014aa:	887a      	ldrh	r2, [r7, #2]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014b0:	e002      	b.n	80014b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014b2:	887a      	ldrh	r2, [r7, #2]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014b8:	bf00      	nop
 80014ba:	370c      	adds	r7, #12
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80014c8:	4b04      	ldr	r3, [pc, #16]	; (80014dc <HAL_PWREx_GetVoltageRange+0x18>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	40007000 	.word	0x40007000

080014e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014ee:	d130      	bne.n	8001552 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80014f0:	4b23      	ldr	r3, [pc, #140]	; (8001580 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014fc:	d038      	beq.n	8001570 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014fe:	4b20      	ldr	r3, [pc, #128]	; (8001580 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001506:	4a1e      	ldr	r2, [pc, #120]	; (8001580 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001508:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800150c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800150e:	4b1d      	ldr	r3, [pc, #116]	; (8001584 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	2232      	movs	r2, #50	; 0x32
 8001514:	fb02 f303 	mul.w	r3, r2, r3
 8001518:	4a1b      	ldr	r2, [pc, #108]	; (8001588 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800151a:	fba2 2303 	umull	r2, r3, r2, r3
 800151e:	0c9b      	lsrs	r3, r3, #18
 8001520:	3301      	adds	r3, #1
 8001522:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001524:	e002      	b.n	800152c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	3b01      	subs	r3, #1
 800152a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800152c:	4b14      	ldr	r3, [pc, #80]	; (8001580 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800152e:	695b      	ldr	r3, [r3, #20]
 8001530:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001534:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001538:	d102      	bne.n	8001540 <HAL_PWREx_ControlVoltageScaling+0x60>
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d1f2      	bne.n	8001526 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001540:	4b0f      	ldr	r3, [pc, #60]	; (8001580 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001542:	695b      	ldr	r3, [r3, #20]
 8001544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001548:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800154c:	d110      	bne.n	8001570 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800154e:	2303      	movs	r3, #3
 8001550:	e00f      	b.n	8001572 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001552:	4b0b      	ldr	r3, [pc, #44]	; (8001580 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800155a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800155e:	d007      	beq.n	8001570 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001560:	4b07      	ldr	r3, [pc, #28]	; (8001580 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001568:	4a05      	ldr	r2, [pc, #20]	; (8001580 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800156a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800156e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001570:	2300      	movs	r3, #0
}
 8001572:	4618      	mov	r0, r3
 8001574:	3714      	adds	r7, #20
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	40007000 	.word	0x40007000
 8001584:	20000000 	.word	0x20000000
 8001588:	431bde83 	.word	0x431bde83

0800158c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b088      	sub	sp, #32
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d101      	bne.n	800159e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e3ca      	b.n	8001d34 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800159e:	4b97      	ldr	r3, [pc, #604]	; (80017fc <HAL_RCC_OscConfig+0x270>)
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	f003 030c 	and.w	r3, r3, #12
 80015a6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015a8:	4b94      	ldr	r3, [pc, #592]	; (80017fc <HAL_RCC_OscConfig+0x270>)
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	f003 0303 	and.w	r3, r3, #3
 80015b0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f003 0310 	and.w	r3, r3, #16
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	f000 80e4 	beq.w	8001788 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d007      	beq.n	80015d6 <HAL_RCC_OscConfig+0x4a>
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	2b0c      	cmp	r3, #12
 80015ca:	f040 808b 	bne.w	80016e4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	f040 8087 	bne.w	80016e4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015d6:	4b89      	ldr	r3, [pc, #548]	; (80017fc <HAL_RCC_OscConfig+0x270>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d005      	beq.n	80015ee <HAL_RCC_OscConfig+0x62>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	699b      	ldr	r3, [r3, #24]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d101      	bne.n	80015ee <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e3a2      	b.n	8001d34 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6a1a      	ldr	r2, [r3, #32]
 80015f2:	4b82      	ldr	r3, [pc, #520]	; (80017fc <HAL_RCC_OscConfig+0x270>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 0308 	and.w	r3, r3, #8
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d004      	beq.n	8001608 <HAL_RCC_OscConfig+0x7c>
 80015fe:	4b7f      	ldr	r3, [pc, #508]	; (80017fc <HAL_RCC_OscConfig+0x270>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001606:	e005      	b.n	8001614 <HAL_RCC_OscConfig+0x88>
 8001608:	4b7c      	ldr	r3, [pc, #496]	; (80017fc <HAL_RCC_OscConfig+0x270>)
 800160a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800160e:	091b      	lsrs	r3, r3, #4
 8001610:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001614:	4293      	cmp	r3, r2
 8001616:	d223      	bcs.n	8001660 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a1b      	ldr	r3, [r3, #32]
 800161c:	4618      	mov	r0, r3
 800161e:	f000 fd55 	bl	80020cc <RCC_SetFlashLatencyFromMSIRange>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	e383      	b.n	8001d34 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800162c:	4b73      	ldr	r3, [pc, #460]	; (80017fc <HAL_RCC_OscConfig+0x270>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a72      	ldr	r2, [pc, #456]	; (80017fc <HAL_RCC_OscConfig+0x270>)
 8001632:	f043 0308 	orr.w	r3, r3, #8
 8001636:	6013      	str	r3, [r2, #0]
 8001638:	4b70      	ldr	r3, [pc, #448]	; (80017fc <HAL_RCC_OscConfig+0x270>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6a1b      	ldr	r3, [r3, #32]
 8001644:	496d      	ldr	r1, [pc, #436]	; (80017fc <HAL_RCC_OscConfig+0x270>)
 8001646:	4313      	orrs	r3, r2
 8001648:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800164a:	4b6c      	ldr	r3, [pc, #432]	; (80017fc <HAL_RCC_OscConfig+0x270>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	69db      	ldr	r3, [r3, #28]
 8001656:	021b      	lsls	r3, r3, #8
 8001658:	4968      	ldr	r1, [pc, #416]	; (80017fc <HAL_RCC_OscConfig+0x270>)
 800165a:	4313      	orrs	r3, r2
 800165c:	604b      	str	r3, [r1, #4]
 800165e:	e025      	b.n	80016ac <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001660:	4b66      	ldr	r3, [pc, #408]	; (80017fc <HAL_RCC_OscConfig+0x270>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a65      	ldr	r2, [pc, #404]	; (80017fc <HAL_RCC_OscConfig+0x270>)
 8001666:	f043 0308 	orr.w	r3, r3, #8
 800166a:	6013      	str	r3, [r2, #0]
 800166c:	4b63      	ldr	r3, [pc, #396]	; (80017fc <HAL_RCC_OscConfig+0x270>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	6a1b      	ldr	r3, [r3, #32]
 8001678:	4960      	ldr	r1, [pc, #384]	; (80017fc <HAL_RCC_OscConfig+0x270>)
 800167a:	4313      	orrs	r3, r2
 800167c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800167e:	4b5f      	ldr	r3, [pc, #380]	; (80017fc <HAL_RCC_OscConfig+0x270>)
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	69db      	ldr	r3, [r3, #28]
 800168a:	021b      	lsls	r3, r3, #8
 800168c:	495b      	ldr	r1, [pc, #364]	; (80017fc <HAL_RCC_OscConfig+0x270>)
 800168e:	4313      	orrs	r3, r2
 8001690:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001692:	69bb      	ldr	r3, [r7, #24]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d109      	bne.n	80016ac <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6a1b      	ldr	r3, [r3, #32]
 800169c:	4618      	mov	r0, r3
 800169e:	f000 fd15 	bl	80020cc <RCC_SetFlashLatencyFromMSIRange>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e343      	b.n	8001d34 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016ac:	f000 fc4a 	bl	8001f44 <HAL_RCC_GetSysClockFreq>
 80016b0:	4602      	mov	r2, r0
 80016b2:	4b52      	ldr	r3, [pc, #328]	; (80017fc <HAL_RCC_OscConfig+0x270>)
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	091b      	lsrs	r3, r3, #4
 80016b8:	f003 030f 	and.w	r3, r3, #15
 80016bc:	4950      	ldr	r1, [pc, #320]	; (8001800 <HAL_RCC_OscConfig+0x274>)
 80016be:	5ccb      	ldrb	r3, [r1, r3]
 80016c0:	f003 031f 	and.w	r3, r3, #31
 80016c4:	fa22 f303 	lsr.w	r3, r2, r3
 80016c8:	4a4e      	ldr	r2, [pc, #312]	; (8001804 <HAL_RCC_OscConfig+0x278>)
 80016ca:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80016cc:	4b4e      	ldr	r3, [pc, #312]	; (8001808 <HAL_RCC_OscConfig+0x27c>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff fb63 	bl	8000d9c <HAL_InitTick>
 80016d6:	4603      	mov	r3, r0
 80016d8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80016da:	7bfb      	ldrb	r3, [r7, #15]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d052      	beq.n	8001786 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80016e0:	7bfb      	ldrb	r3, [r7, #15]
 80016e2:	e327      	b.n	8001d34 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d032      	beq.n	8001752 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80016ec:	4b43      	ldr	r3, [pc, #268]	; (80017fc <HAL_RCC_OscConfig+0x270>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a42      	ldr	r2, [pc, #264]	; (80017fc <HAL_RCC_OscConfig+0x270>)
 80016f2:	f043 0301 	orr.w	r3, r3, #1
 80016f6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016f8:	f7ff fba0 	bl	8000e3c <HAL_GetTick>
 80016fc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016fe:	e008      	b.n	8001712 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001700:	f7ff fb9c 	bl	8000e3c <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	2b02      	cmp	r3, #2
 800170c:	d901      	bls.n	8001712 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e310      	b.n	8001d34 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001712:	4b3a      	ldr	r3, [pc, #232]	; (80017fc <HAL_RCC_OscConfig+0x270>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d0f0      	beq.n	8001700 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800171e:	4b37      	ldr	r3, [pc, #220]	; (80017fc <HAL_RCC_OscConfig+0x270>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a36      	ldr	r2, [pc, #216]	; (80017fc <HAL_RCC_OscConfig+0x270>)
 8001724:	f043 0308 	orr.w	r3, r3, #8
 8001728:	6013      	str	r3, [r2, #0]
 800172a:	4b34      	ldr	r3, [pc, #208]	; (80017fc <HAL_RCC_OscConfig+0x270>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6a1b      	ldr	r3, [r3, #32]
 8001736:	4931      	ldr	r1, [pc, #196]	; (80017fc <HAL_RCC_OscConfig+0x270>)
 8001738:	4313      	orrs	r3, r2
 800173a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800173c:	4b2f      	ldr	r3, [pc, #188]	; (80017fc <HAL_RCC_OscConfig+0x270>)
 800173e:	685b      	ldr	r3, [r3, #4]
 8001740:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	69db      	ldr	r3, [r3, #28]
 8001748:	021b      	lsls	r3, r3, #8
 800174a:	492c      	ldr	r1, [pc, #176]	; (80017fc <HAL_RCC_OscConfig+0x270>)
 800174c:	4313      	orrs	r3, r2
 800174e:	604b      	str	r3, [r1, #4]
 8001750:	e01a      	b.n	8001788 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001752:	4b2a      	ldr	r3, [pc, #168]	; (80017fc <HAL_RCC_OscConfig+0x270>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a29      	ldr	r2, [pc, #164]	; (80017fc <HAL_RCC_OscConfig+0x270>)
 8001758:	f023 0301 	bic.w	r3, r3, #1
 800175c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800175e:	f7ff fb6d 	bl	8000e3c <HAL_GetTick>
 8001762:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001764:	e008      	b.n	8001778 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001766:	f7ff fb69 	bl	8000e3c <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	2b02      	cmp	r3, #2
 8001772:	d901      	bls.n	8001778 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001774:	2303      	movs	r3, #3
 8001776:	e2dd      	b.n	8001d34 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001778:	4b20      	ldr	r3, [pc, #128]	; (80017fc <HAL_RCC_OscConfig+0x270>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0302 	and.w	r3, r3, #2
 8001780:	2b00      	cmp	r3, #0
 8001782:	d1f0      	bne.n	8001766 <HAL_RCC_OscConfig+0x1da>
 8001784:	e000      	b.n	8001788 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001786:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0301 	and.w	r3, r3, #1
 8001790:	2b00      	cmp	r3, #0
 8001792:	d074      	beq.n	800187e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	2b08      	cmp	r3, #8
 8001798:	d005      	beq.n	80017a6 <HAL_RCC_OscConfig+0x21a>
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	2b0c      	cmp	r3, #12
 800179e:	d10e      	bne.n	80017be <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	2b03      	cmp	r3, #3
 80017a4:	d10b      	bne.n	80017be <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017a6:	4b15      	ldr	r3, [pc, #84]	; (80017fc <HAL_RCC_OscConfig+0x270>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d064      	beq.n	800187c <HAL_RCC_OscConfig+0x2f0>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d160      	bne.n	800187c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e2ba      	b.n	8001d34 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017c6:	d106      	bne.n	80017d6 <HAL_RCC_OscConfig+0x24a>
 80017c8:	4b0c      	ldr	r3, [pc, #48]	; (80017fc <HAL_RCC_OscConfig+0x270>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a0b      	ldr	r2, [pc, #44]	; (80017fc <HAL_RCC_OscConfig+0x270>)
 80017ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017d2:	6013      	str	r3, [r2, #0]
 80017d4:	e026      	b.n	8001824 <HAL_RCC_OscConfig+0x298>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017de:	d115      	bne.n	800180c <HAL_RCC_OscConfig+0x280>
 80017e0:	4b06      	ldr	r3, [pc, #24]	; (80017fc <HAL_RCC_OscConfig+0x270>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a05      	ldr	r2, [pc, #20]	; (80017fc <HAL_RCC_OscConfig+0x270>)
 80017e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017ea:	6013      	str	r3, [r2, #0]
 80017ec:	4b03      	ldr	r3, [pc, #12]	; (80017fc <HAL_RCC_OscConfig+0x270>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a02      	ldr	r2, [pc, #8]	; (80017fc <HAL_RCC_OscConfig+0x270>)
 80017f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017f6:	6013      	str	r3, [r2, #0]
 80017f8:	e014      	b.n	8001824 <HAL_RCC_OscConfig+0x298>
 80017fa:	bf00      	nop
 80017fc:	40021000 	.word	0x40021000
 8001800:	08005808 	.word	0x08005808
 8001804:	20000000 	.word	0x20000000
 8001808:	20000004 	.word	0x20000004
 800180c:	4ba0      	ldr	r3, [pc, #640]	; (8001a90 <HAL_RCC_OscConfig+0x504>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a9f      	ldr	r2, [pc, #636]	; (8001a90 <HAL_RCC_OscConfig+0x504>)
 8001812:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001816:	6013      	str	r3, [r2, #0]
 8001818:	4b9d      	ldr	r3, [pc, #628]	; (8001a90 <HAL_RCC_OscConfig+0x504>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a9c      	ldr	r2, [pc, #624]	; (8001a90 <HAL_RCC_OscConfig+0x504>)
 800181e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001822:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d013      	beq.n	8001854 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800182c:	f7ff fb06 	bl	8000e3c <HAL_GetTick>
 8001830:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001832:	e008      	b.n	8001846 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001834:	f7ff fb02 	bl	8000e3c <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b64      	cmp	r3, #100	; 0x64
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e276      	b.n	8001d34 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001846:	4b92      	ldr	r3, [pc, #584]	; (8001a90 <HAL_RCC_OscConfig+0x504>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800184e:	2b00      	cmp	r3, #0
 8001850:	d0f0      	beq.n	8001834 <HAL_RCC_OscConfig+0x2a8>
 8001852:	e014      	b.n	800187e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001854:	f7ff faf2 	bl	8000e3c <HAL_GetTick>
 8001858:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800185a:	e008      	b.n	800186e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800185c:	f7ff faee 	bl	8000e3c <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	2b64      	cmp	r3, #100	; 0x64
 8001868:	d901      	bls.n	800186e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800186a:	2303      	movs	r3, #3
 800186c:	e262      	b.n	8001d34 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800186e:	4b88      	ldr	r3, [pc, #544]	; (8001a90 <HAL_RCC_OscConfig+0x504>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001876:	2b00      	cmp	r3, #0
 8001878:	d1f0      	bne.n	800185c <HAL_RCC_OscConfig+0x2d0>
 800187a:	e000      	b.n	800187e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800187c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0302 	and.w	r3, r3, #2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d060      	beq.n	800194c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	2b04      	cmp	r3, #4
 800188e:	d005      	beq.n	800189c <HAL_RCC_OscConfig+0x310>
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	2b0c      	cmp	r3, #12
 8001894:	d119      	bne.n	80018ca <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	2b02      	cmp	r3, #2
 800189a:	d116      	bne.n	80018ca <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800189c:	4b7c      	ldr	r3, [pc, #496]	; (8001a90 <HAL_RCC_OscConfig+0x504>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d005      	beq.n	80018b4 <HAL_RCC_OscConfig+0x328>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	68db      	ldr	r3, [r3, #12]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d101      	bne.n	80018b4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e23f      	b.n	8001d34 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018b4:	4b76      	ldr	r3, [pc, #472]	; (8001a90 <HAL_RCC_OscConfig+0x504>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	691b      	ldr	r3, [r3, #16]
 80018c0:	061b      	lsls	r3, r3, #24
 80018c2:	4973      	ldr	r1, [pc, #460]	; (8001a90 <HAL_RCC_OscConfig+0x504>)
 80018c4:	4313      	orrs	r3, r2
 80018c6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018c8:	e040      	b.n	800194c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d023      	beq.n	800191a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018d2:	4b6f      	ldr	r3, [pc, #444]	; (8001a90 <HAL_RCC_OscConfig+0x504>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a6e      	ldr	r2, [pc, #440]	; (8001a90 <HAL_RCC_OscConfig+0x504>)
 80018d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018de:	f7ff faad 	bl	8000e3c <HAL_GetTick>
 80018e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018e4:	e008      	b.n	80018f8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018e6:	f7ff faa9 	bl	8000e3c <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	2b02      	cmp	r3, #2
 80018f2:	d901      	bls.n	80018f8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
 80018f6:	e21d      	b.n	8001d34 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018f8:	4b65      	ldr	r3, [pc, #404]	; (8001a90 <HAL_RCC_OscConfig+0x504>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001900:	2b00      	cmp	r3, #0
 8001902:	d0f0      	beq.n	80018e6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001904:	4b62      	ldr	r3, [pc, #392]	; (8001a90 <HAL_RCC_OscConfig+0x504>)
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	691b      	ldr	r3, [r3, #16]
 8001910:	061b      	lsls	r3, r3, #24
 8001912:	495f      	ldr	r1, [pc, #380]	; (8001a90 <HAL_RCC_OscConfig+0x504>)
 8001914:	4313      	orrs	r3, r2
 8001916:	604b      	str	r3, [r1, #4]
 8001918:	e018      	b.n	800194c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800191a:	4b5d      	ldr	r3, [pc, #372]	; (8001a90 <HAL_RCC_OscConfig+0x504>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a5c      	ldr	r2, [pc, #368]	; (8001a90 <HAL_RCC_OscConfig+0x504>)
 8001920:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001924:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001926:	f7ff fa89 	bl	8000e3c <HAL_GetTick>
 800192a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800192c:	e008      	b.n	8001940 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800192e:	f7ff fa85 	bl	8000e3c <HAL_GetTick>
 8001932:	4602      	mov	r2, r0
 8001934:	693b      	ldr	r3, [r7, #16]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	2b02      	cmp	r3, #2
 800193a:	d901      	bls.n	8001940 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e1f9      	b.n	8001d34 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001940:	4b53      	ldr	r3, [pc, #332]	; (8001a90 <HAL_RCC_OscConfig+0x504>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001948:	2b00      	cmp	r3, #0
 800194a:	d1f0      	bne.n	800192e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f003 0308 	and.w	r3, r3, #8
 8001954:	2b00      	cmp	r3, #0
 8001956:	d03c      	beq.n	80019d2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	695b      	ldr	r3, [r3, #20]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d01c      	beq.n	800199a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001960:	4b4b      	ldr	r3, [pc, #300]	; (8001a90 <HAL_RCC_OscConfig+0x504>)
 8001962:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001966:	4a4a      	ldr	r2, [pc, #296]	; (8001a90 <HAL_RCC_OscConfig+0x504>)
 8001968:	f043 0301 	orr.w	r3, r3, #1
 800196c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001970:	f7ff fa64 	bl	8000e3c <HAL_GetTick>
 8001974:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001976:	e008      	b.n	800198a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001978:	f7ff fa60 	bl	8000e3c <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b02      	cmp	r3, #2
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e1d4      	b.n	8001d34 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800198a:	4b41      	ldr	r3, [pc, #260]	; (8001a90 <HAL_RCC_OscConfig+0x504>)
 800198c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001990:	f003 0302 	and.w	r3, r3, #2
 8001994:	2b00      	cmp	r3, #0
 8001996:	d0ef      	beq.n	8001978 <HAL_RCC_OscConfig+0x3ec>
 8001998:	e01b      	b.n	80019d2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800199a:	4b3d      	ldr	r3, [pc, #244]	; (8001a90 <HAL_RCC_OscConfig+0x504>)
 800199c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019a0:	4a3b      	ldr	r2, [pc, #236]	; (8001a90 <HAL_RCC_OscConfig+0x504>)
 80019a2:	f023 0301 	bic.w	r3, r3, #1
 80019a6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019aa:	f7ff fa47 	bl	8000e3c <HAL_GetTick>
 80019ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019b0:	e008      	b.n	80019c4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019b2:	f7ff fa43 	bl	8000e3c <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d901      	bls.n	80019c4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e1b7      	b.n	8001d34 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019c4:	4b32      	ldr	r3, [pc, #200]	; (8001a90 <HAL_RCC_OscConfig+0x504>)
 80019c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d1ef      	bne.n	80019b2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0304 	and.w	r3, r3, #4
 80019da:	2b00      	cmp	r3, #0
 80019dc:	f000 80a6 	beq.w	8001b2c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019e0:	2300      	movs	r3, #0
 80019e2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80019e4:	4b2a      	ldr	r3, [pc, #168]	; (8001a90 <HAL_RCC_OscConfig+0x504>)
 80019e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d10d      	bne.n	8001a0c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019f0:	4b27      	ldr	r3, [pc, #156]	; (8001a90 <HAL_RCC_OscConfig+0x504>)
 80019f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f4:	4a26      	ldr	r2, [pc, #152]	; (8001a90 <HAL_RCC_OscConfig+0x504>)
 80019f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019fa:	6593      	str	r3, [r2, #88]	; 0x58
 80019fc:	4b24      	ldr	r3, [pc, #144]	; (8001a90 <HAL_RCC_OscConfig+0x504>)
 80019fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a04:	60bb      	str	r3, [r7, #8]
 8001a06:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a0c:	4b21      	ldr	r3, [pc, #132]	; (8001a94 <HAL_RCC_OscConfig+0x508>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d118      	bne.n	8001a4a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a18:	4b1e      	ldr	r3, [pc, #120]	; (8001a94 <HAL_RCC_OscConfig+0x508>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a1d      	ldr	r2, [pc, #116]	; (8001a94 <HAL_RCC_OscConfig+0x508>)
 8001a1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a22:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a24:	f7ff fa0a 	bl	8000e3c <HAL_GetTick>
 8001a28:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a2a:	e008      	b.n	8001a3e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a2c:	f7ff fa06 	bl	8000e3c <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e17a      	b.n	8001d34 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a3e:	4b15      	ldr	r3, [pc, #84]	; (8001a94 <HAL_RCC_OscConfig+0x508>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d0f0      	beq.n	8001a2c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d108      	bne.n	8001a64 <HAL_RCC_OscConfig+0x4d8>
 8001a52:	4b0f      	ldr	r3, [pc, #60]	; (8001a90 <HAL_RCC_OscConfig+0x504>)
 8001a54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a58:	4a0d      	ldr	r2, [pc, #52]	; (8001a90 <HAL_RCC_OscConfig+0x504>)
 8001a5a:	f043 0301 	orr.w	r3, r3, #1
 8001a5e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a62:	e029      	b.n	8001ab8 <HAL_RCC_OscConfig+0x52c>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689b      	ldr	r3, [r3, #8]
 8001a68:	2b05      	cmp	r3, #5
 8001a6a:	d115      	bne.n	8001a98 <HAL_RCC_OscConfig+0x50c>
 8001a6c:	4b08      	ldr	r3, [pc, #32]	; (8001a90 <HAL_RCC_OscConfig+0x504>)
 8001a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a72:	4a07      	ldr	r2, [pc, #28]	; (8001a90 <HAL_RCC_OscConfig+0x504>)
 8001a74:	f043 0304 	orr.w	r3, r3, #4
 8001a78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a7c:	4b04      	ldr	r3, [pc, #16]	; (8001a90 <HAL_RCC_OscConfig+0x504>)
 8001a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a82:	4a03      	ldr	r2, [pc, #12]	; (8001a90 <HAL_RCC_OscConfig+0x504>)
 8001a84:	f043 0301 	orr.w	r3, r3, #1
 8001a88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a8c:	e014      	b.n	8001ab8 <HAL_RCC_OscConfig+0x52c>
 8001a8e:	bf00      	nop
 8001a90:	40021000 	.word	0x40021000
 8001a94:	40007000 	.word	0x40007000
 8001a98:	4b9c      	ldr	r3, [pc, #624]	; (8001d0c <HAL_RCC_OscConfig+0x780>)
 8001a9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a9e:	4a9b      	ldr	r2, [pc, #620]	; (8001d0c <HAL_RCC_OscConfig+0x780>)
 8001aa0:	f023 0301 	bic.w	r3, r3, #1
 8001aa4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001aa8:	4b98      	ldr	r3, [pc, #608]	; (8001d0c <HAL_RCC_OscConfig+0x780>)
 8001aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aae:	4a97      	ldr	r2, [pc, #604]	; (8001d0c <HAL_RCC_OscConfig+0x780>)
 8001ab0:	f023 0304 	bic.w	r3, r3, #4
 8001ab4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d016      	beq.n	8001aee <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac0:	f7ff f9bc 	bl	8000e3c <HAL_GetTick>
 8001ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ac6:	e00a      	b.n	8001ade <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ac8:	f7ff f9b8 	bl	8000e3c <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e12a      	b.n	8001d34 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ade:	4b8b      	ldr	r3, [pc, #556]	; (8001d0c <HAL_RCC_OscConfig+0x780>)
 8001ae0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ae4:	f003 0302 	and.w	r3, r3, #2
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d0ed      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x53c>
 8001aec:	e015      	b.n	8001b1a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aee:	f7ff f9a5 	bl	8000e3c <HAL_GetTick>
 8001af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001af4:	e00a      	b.n	8001b0c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001af6:	f7ff f9a1 	bl	8000e3c <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d901      	bls.n	8001b0c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e113      	b.n	8001d34 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b0c:	4b7f      	ldr	r3, [pc, #508]	; (8001d0c <HAL_RCC_OscConfig+0x780>)
 8001b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d1ed      	bne.n	8001af6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b1a:	7ffb      	ldrb	r3, [r7, #31]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d105      	bne.n	8001b2c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b20:	4b7a      	ldr	r3, [pc, #488]	; (8001d0c <HAL_RCC_OscConfig+0x780>)
 8001b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b24:	4a79      	ldr	r2, [pc, #484]	; (8001d0c <HAL_RCC_OscConfig+0x780>)
 8001b26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b2a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	f000 80fe 	beq.w	8001d32 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	f040 80d0 	bne.w	8001ce0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b40:	4b72      	ldr	r3, [pc, #456]	; (8001d0c <HAL_RCC_OscConfig+0x780>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	f003 0203 	and.w	r2, r3, #3
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d130      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d127      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b70:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d11f      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b7c:	687a      	ldr	r2, [r7, #4]
 8001b7e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b80:	2a07      	cmp	r2, #7
 8001b82:	bf14      	ite	ne
 8001b84:	2201      	movne	r2, #1
 8001b86:	2200      	moveq	r2, #0
 8001b88:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d113      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b8e:	697b      	ldr	r3, [r7, #20]
 8001b90:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b98:	085b      	lsrs	r3, r3, #1
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d109      	bne.n	8001bb6 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bac:	085b      	lsrs	r3, r3, #1
 8001bae:	3b01      	subs	r3, #1
 8001bb0:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d06e      	beq.n	8001c94 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	2b0c      	cmp	r3, #12
 8001bba:	d069      	beq.n	8001c90 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001bbc:	4b53      	ldr	r3, [pc, #332]	; (8001d0c <HAL_RCC_OscConfig+0x780>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d105      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001bc8:	4b50      	ldr	r3, [pc, #320]	; (8001d0c <HAL_RCC_OscConfig+0x780>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d001      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e0ad      	b.n	8001d34 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001bd8:	4b4c      	ldr	r3, [pc, #304]	; (8001d0c <HAL_RCC_OscConfig+0x780>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a4b      	ldr	r2, [pc, #300]	; (8001d0c <HAL_RCC_OscConfig+0x780>)
 8001bde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001be2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001be4:	f7ff f92a 	bl	8000e3c <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bec:	f7ff f926 	bl	8000e3c <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e09a      	b.n	8001d34 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bfe:	4b43      	ldr	r3, [pc, #268]	; (8001d0c <HAL_RCC_OscConfig+0x780>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1f0      	bne.n	8001bec <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c0a:	4b40      	ldr	r3, [pc, #256]	; (8001d0c <HAL_RCC_OscConfig+0x780>)
 8001c0c:	68da      	ldr	r2, [r3, #12]
 8001c0e:	4b40      	ldr	r3, [pc, #256]	; (8001d10 <HAL_RCC_OscConfig+0x784>)
 8001c10:	4013      	ands	r3, r2
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001c1a:	3a01      	subs	r2, #1
 8001c1c:	0112      	lsls	r2, r2, #4
 8001c1e:	4311      	orrs	r1, r2
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c24:	0212      	lsls	r2, r2, #8
 8001c26:	4311      	orrs	r1, r2
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001c2c:	0852      	lsrs	r2, r2, #1
 8001c2e:	3a01      	subs	r2, #1
 8001c30:	0552      	lsls	r2, r2, #21
 8001c32:	4311      	orrs	r1, r2
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c38:	0852      	lsrs	r2, r2, #1
 8001c3a:	3a01      	subs	r2, #1
 8001c3c:	0652      	lsls	r2, r2, #25
 8001c3e:	4311      	orrs	r1, r2
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c44:	0912      	lsrs	r2, r2, #4
 8001c46:	0452      	lsls	r2, r2, #17
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	4930      	ldr	r1, [pc, #192]	; (8001d0c <HAL_RCC_OscConfig+0x780>)
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001c50:	4b2e      	ldr	r3, [pc, #184]	; (8001d0c <HAL_RCC_OscConfig+0x780>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a2d      	ldr	r2, [pc, #180]	; (8001d0c <HAL_RCC_OscConfig+0x780>)
 8001c56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c5a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c5c:	4b2b      	ldr	r3, [pc, #172]	; (8001d0c <HAL_RCC_OscConfig+0x780>)
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	4a2a      	ldr	r2, [pc, #168]	; (8001d0c <HAL_RCC_OscConfig+0x780>)
 8001c62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c66:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c68:	f7ff f8e8 	bl	8000e3c <HAL_GetTick>
 8001c6c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c6e:	e008      	b.n	8001c82 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c70:	f7ff f8e4 	bl	8000e3c <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e058      	b.n	8001d34 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c82:	4b22      	ldr	r3, [pc, #136]	; (8001d0c <HAL_RCC_OscConfig+0x780>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d0f0      	beq.n	8001c70 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c8e:	e050      	b.n	8001d32 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e04f      	b.n	8001d34 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c94:	4b1d      	ldr	r3, [pc, #116]	; (8001d0c <HAL_RCC_OscConfig+0x780>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d148      	bne.n	8001d32 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ca0:	4b1a      	ldr	r3, [pc, #104]	; (8001d0c <HAL_RCC_OscConfig+0x780>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a19      	ldr	r2, [pc, #100]	; (8001d0c <HAL_RCC_OscConfig+0x780>)
 8001ca6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001caa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cac:	4b17      	ldr	r3, [pc, #92]	; (8001d0c <HAL_RCC_OscConfig+0x780>)
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	4a16      	ldr	r2, [pc, #88]	; (8001d0c <HAL_RCC_OscConfig+0x780>)
 8001cb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cb6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001cb8:	f7ff f8c0 	bl	8000e3c <HAL_GetTick>
 8001cbc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cc0:	f7ff f8bc 	bl	8000e3c <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e030      	b.n	8001d34 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cd2:	4b0e      	ldr	r3, [pc, #56]	; (8001d0c <HAL_RCC_OscConfig+0x780>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d0f0      	beq.n	8001cc0 <HAL_RCC_OscConfig+0x734>
 8001cde:	e028      	b.n	8001d32 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	2b0c      	cmp	r3, #12
 8001ce4:	d023      	beq.n	8001d2e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ce6:	4b09      	ldr	r3, [pc, #36]	; (8001d0c <HAL_RCC_OscConfig+0x780>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a08      	ldr	r2, [pc, #32]	; (8001d0c <HAL_RCC_OscConfig+0x780>)
 8001cec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cf0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf2:	f7ff f8a3 	bl	8000e3c <HAL_GetTick>
 8001cf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cf8:	e00c      	b.n	8001d14 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cfa:	f7ff f89f 	bl	8000e3c <HAL_GetTick>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	2b02      	cmp	r3, #2
 8001d06:	d905      	bls.n	8001d14 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e013      	b.n	8001d34 <HAL_RCC_OscConfig+0x7a8>
 8001d0c:	40021000 	.word	0x40021000
 8001d10:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d14:	4b09      	ldr	r3, [pc, #36]	; (8001d3c <HAL_RCC_OscConfig+0x7b0>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d1ec      	bne.n	8001cfa <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001d20:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <HAL_RCC_OscConfig+0x7b0>)
 8001d22:	68da      	ldr	r2, [r3, #12]
 8001d24:	4905      	ldr	r1, [pc, #20]	; (8001d3c <HAL_RCC_OscConfig+0x7b0>)
 8001d26:	4b06      	ldr	r3, [pc, #24]	; (8001d40 <HAL_RCC_OscConfig+0x7b4>)
 8001d28:	4013      	ands	r3, r2
 8001d2a:	60cb      	str	r3, [r1, #12]
 8001d2c:	e001      	b.n	8001d32 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e000      	b.n	8001d34 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3720      	adds	r7, #32
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	feeefffc 	.word	0xfeeefffc

08001d44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d101      	bne.n	8001d58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e0e7      	b.n	8001f28 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d58:	4b75      	ldr	r3, [pc, #468]	; (8001f30 <HAL_RCC_ClockConfig+0x1ec>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0307 	and.w	r3, r3, #7
 8001d60:	683a      	ldr	r2, [r7, #0]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d910      	bls.n	8001d88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d66:	4b72      	ldr	r3, [pc, #456]	; (8001f30 <HAL_RCC_ClockConfig+0x1ec>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f023 0207 	bic.w	r2, r3, #7
 8001d6e:	4970      	ldr	r1, [pc, #448]	; (8001f30 <HAL_RCC_ClockConfig+0x1ec>)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d76:	4b6e      	ldr	r3, [pc, #440]	; (8001f30 <HAL_RCC_ClockConfig+0x1ec>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0307 	and.w	r3, r3, #7
 8001d7e:	683a      	ldr	r2, [r7, #0]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d001      	beq.n	8001d88 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e0cf      	b.n	8001f28 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0302 	and.w	r3, r3, #2
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d010      	beq.n	8001db6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	689a      	ldr	r2, [r3, #8]
 8001d98:	4b66      	ldr	r3, [pc, #408]	; (8001f34 <HAL_RCC_ClockConfig+0x1f0>)
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d908      	bls.n	8001db6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001da4:	4b63      	ldr	r3, [pc, #396]	; (8001f34 <HAL_RCC_ClockConfig+0x1f0>)
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	4960      	ldr	r1, [pc, #384]	; (8001f34 <HAL_RCC_ClockConfig+0x1f0>)
 8001db2:	4313      	orrs	r3, r2
 8001db4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d04c      	beq.n	8001e5c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	2b03      	cmp	r3, #3
 8001dc8:	d107      	bne.n	8001dda <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dca:	4b5a      	ldr	r3, [pc, #360]	; (8001f34 <HAL_RCC_ClockConfig+0x1f0>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d121      	bne.n	8001e1a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e0a6      	b.n	8001f28 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	2b02      	cmp	r3, #2
 8001de0:	d107      	bne.n	8001df2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001de2:	4b54      	ldr	r3, [pc, #336]	; (8001f34 <HAL_RCC_ClockConfig+0x1f0>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d115      	bne.n	8001e1a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001dee:	2301      	movs	r3, #1
 8001df0:	e09a      	b.n	8001f28 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d107      	bne.n	8001e0a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dfa:	4b4e      	ldr	r3, [pc, #312]	; (8001f34 <HAL_RCC_ClockConfig+0x1f0>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d109      	bne.n	8001e1a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e08e      	b.n	8001f28 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e0a:	4b4a      	ldr	r3, [pc, #296]	; (8001f34 <HAL_RCC_ClockConfig+0x1f0>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d101      	bne.n	8001e1a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e086      	b.n	8001f28 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e1a:	4b46      	ldr	r3, [pc, #280]	; (8001f34 <HAL_RCC_ClockConfig+0x1f0>)
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f023 0203 	bic.w	r2, r3, #3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	4943      	ldr	r1, [pc, #268]	; (8001f34 <HAL_RCC_ClockConfig+0x1f0>)
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e2c:	f7ff f806 	bl	8000e3c <HAL_GetTick>
 8001e30:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e32:	e00a      	b.n	8001e4a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e34:	f7ff f802 	bl	8000e3c <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e06e      	b.n	8001f28 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e4a:	4b3a      	ldr	r3, [pc, #232]	; (8001f34 <HAL_RCC_ClockConfig+0x1f0>)
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	f003 020c 	and.w	r2, r3, #12
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	d1eb      	bne.n	8001e34 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0302 	and.w	r3, r3, #2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d010      	beq.n	8001e8a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689a      	ldr	r2, [r3, #8]
 8001e6c:	4b31      	ldr	r3, [pc, #196]	; (8001f34 <HAL_RCC_ClockConfig+0x1f0>)
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d208      	bcs.n	8001e8a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e78:	4b2e      	ldr	r3, [pc, #184]	; (8001f34 <HAL_RCC_ClockConfig+0x1f0>)
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	492b      	ldr	r1, [pc, #172]	; (8001f34 <HAL_RCC_ClockConfig+0x1f0>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e8a:	4b29      	ldr	r3, [pc, #164]	; (8001f30 <HAL_RCC_ClockConfig+0x1ec>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0307 	and.w	r3, r3, #7
 8001e92:	683a      	ldr	r2, [r7, #0]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d210      	bcs.n	8001eba <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e98:	4b25      	ldr	r3, [pc, #148]	; (8001f30 <HAL_RCC_ClockConfig+0x1ec>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f023 0207 	bic.w	r2, r3, #7
 8001ea0:	4923      	ldr	r1, [pc, #140]	; (8001f30 <HAL_RCC_ClockConfig+0x1ec>)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ea8:	4b21      	ldr	r3, [pc, #132]	; (8001f30 <HAL_RCC_ClockConfig+0x1ec>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0307 	and.w	r3, r3, #7
 8001eb0:	683a      	ldr	r2, [r7, #0]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d001      	beq.n	8001eba <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e036      	b.n	8001f28 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 0304 	and.w	r3, r3, #4
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d008      	beq.n	8001ed8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ec6:	4b1b      	ldr	r3, [pc, #108]	; (8001f34 <HAL_RCC_ClockConfig+0x1f0>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	4918      	ldr	r1, [pc, #96]	; (8001f34 <HAL_RCC_ClockConfig+0x1f0>)
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0308 	and.w	r3, r3, #8
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d009      	beq.n	8001ef8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ee4:	4b13      	ldr	r3, [pc, #76]	; (8001f34 <HAL_RCC_ClockConfig+0x1f0>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	691b      	ldr	r3, [r3, #16]
 8001ef0:	00db      	lsls	r3, r3, #3
 8001ef2:	4910      	ldr	r1, [pc, #64]	; (8001f34 <HAL_RCC_ClockConfig+0x1f0>)
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ef8:	f000 f824 	bl	8001f44 <HAL_RCC_GetSysClockFreq>
 8001efc:	4602      	mov	r2, r0
 8001efe:	4b0d      	ldr	r3, [pc, #52]	; (8001f34 <HAL_RCC_ClockConfig+0x1f0>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	091b      	lsrs	r3, r3, #4
 8001f04:	f003 030f 	and.w	r3, r3, #15
 8001f08:	490b      	ldr	r1, [pc, #44]	; (8001f38 <HAL_RCC_ClockConfig+0x1f4>)
 8001f0a:	5ccb      	ldrb	r3, [r1, r3]
 8001f0c:	f003 031f 	and.w	r3, r3, #31
 8001f10:	fa22 f303 	lsr.w	r3, r2, r3
 8001f14:	4a09      	ldr	r2, [pc, #36]	; (8001f3c <HAL_RCC_ClockConfig+0x1f8>)
 8001f16:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f18:	4b09      	ldr	r3, [pc, #36]	; (8001f40 <HAL_RCC_ClockConfig+0x1fc>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7fe ff3d 	bl	8000d9c <HAL_InitTick>
 8001f22:	4603      	mov	r3, r0
 8001f24:	72fb      	strb	r3, [r7, #11]

  return status;
 8001f26:	7afb      	ldrb	r3, [r7, #11]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3710      	adds	r7, #16
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40022000 	.word	0x40022000
 8001f34:	40021000 	.word	0x40021000
 8001f38:	08005808 	.word	0x08005808
 8001f3c:	20000000 	.word	0x20000000
 8001f40:	20000004 	.word	0x20000004

08001f44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b089      	sub	sp, #36	; 0x24
 8001f48:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	61fb      	str	r3, [r7, #28]
 8001f4e:	2300      	movs	r3, #0
 8001f50:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f52:	4b3e      	ldr	r3, [pc, #248]	; (800204c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	f003 030c 	and.w	r3, r3, #12
 8001f5a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f5c:	4b3b      	ldr	r3, [pc, #236]	; (800204c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	f003 0303 	and.w	r3, r3, #3
 8001f64:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d005      	beq.n	8001f78 <HAL_RCC_GetSysClockFreq+0x34>
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	2b0c      	cmp	r3, #12
 8001f70:	d121      	bne.n	8001fb6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d11e      	bne.n	8001fb6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f78:	4b34      	ldr	r3, [pc, #208]	; (800204c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f003 0308 	and.w	r3, r3, #8
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d107      	bne.n	8001f94 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f84:	4b31      	ldr	r3, [pc, #196]	; (800204c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f8a:	0a1b      	lsrs	r3, r3, #8
 8001f8c:	f003 030f 	and.w	r3, r3, #15
 8001f90:	61fb      	str	r3, [r7, #28]
 8001f92:	e005      	b.n	8001fa0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f94:	4b2d      	ldr	r3, [pc, #180]	; (800204c <HAL_RCC_GetSysClockFreq+0x108>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	091b      	lsrs	r3, r3, #4
 8001f9a:	f003 030f 	and.w	r3, r3, #15
 8001f9e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001fa0:	4a2b      	ldr	r2, [pc, #172]	; (8002050 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001fa2:	69fb      	ldr	r3, [r7, #28]
 8001fa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fa8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d10d      	bne.n	8001fcc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001fb0:	69fb      	ldr	r3, [r7, #28]
 8001fb2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fb4:	e00a      	b.n	8001fcc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	2b04      	cmp	r3, #4
 8001fba:	d102      	bne.n	8001fc2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001fbc:	4b25      	ldr	r3, [pc, #148]	; (8002054 <HAL_RCC_GetSysClockFreq+0x110>)
 8001fbe:	61bb      	str	r3, [r7, #24]
 8001fc0:	e004      	b.n	8001fcc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	2b08      	cmp	r3, #8
 8001fc6:	d101      	bne.n	8001fcc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001fc8:	4b23      	ldr	r3, [pc, #140]	; (8002058 <HAL_RCC_GetSysClockFreq+0x114>)
 8001fca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	2b0c      	cmp	r3, #12
 8001fd0:	d134      	bne.n	800203c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001fd2:	4b1e      	ldr	r3, [pc, #120]	; (800204c <HAL_RCC_GetSysClockFreq+0x108>)
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	f003 0303 	and.w	r3, r3, #3
 8001fda:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d003      	beq.n	8001fea <HAL_RCC_GetSysClockFreq+0xa6>
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	2b03      	cmp	r3, #3
 8001fe6:	d003      	beq.n	8001ff0 <HAL_RCC_GetSysClockFreq+0xac>
 8001fe8:	e005      	b.n	8001ff6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001fea:	4b1a      	ldr	r3, [pc, #104]	; (8002054 <HAL_RCC_GetSysClockFreq+0x110>)
 8001fec:	617b      	str	r3, [r7, #20]
      break;
 8001fee:	e005      	b.n	8001ffc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001ff0:	4b19      	ldr	r3, [pc, #100]	; (8002058 <HAL_RCC_GetSysClockFreq+0x114>)
 8001ff2:	617b      	str	r3, [r7, #20]
      break;
 8001ff4:	e002      	b.n	8001ffc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	617b      	str	r3, [r7, #20]
      break;
 8001ffa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ffc:	4b13      	ldr	r3, [pc, #76]	; (800204c <HAL_RCC_GetSysClockFreq+0x108>)
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	091b      	lsrs	r3, r3, #4
 8002002:	f003 0307 	and.w	r3, r3, #7
 8002006:	3301      	adds	r3, #1
 8002008:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800200a:	4b10      	ldr	r3, [pc, #64]	; (800204c <HAL_RCC_GetSysClockFreq+0x108>)
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	0a1b      	lsrs	r3, r3, #8
 8002010:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002014:	697a      	ldr	r2, [r7, #20]
 8002016:	fb03 f202 	mul.w	r2, r3, r2
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002020:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002022:	4b0a      	ldr	r3, [pc, #40]	; (800204c <HAL_RCC_GetSysClockFreq+0x108>)
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	0e5b      	lsrs	r3, r3, #25
 8002028:	f003 0303 	and.w	r3, r3, #3
 800202c:	3301      	adds	r3, #1
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002032:	697a      	ldr	r2, [r7, #20]
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	fbb2 f3f3 	udiv	r3, r2, r3
 800203a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800203c:	69bb      	ldr	r3, [r7, #24]
}
 800203e:	4618      	mov	r0, r3
 8002040:	3724      	adds	r7, #36	; 0x24
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	40021000 	.word	0x40021000
 8002050:	08005820 	.word	0x08005820
 8002054:	00f42400 	.word	0x00f42400
 8002058:	007a1200 	.word	0x007a1200

0800205c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002060:	4b03      	ldr	r3, [pc, #12]	; (8002070 <HAL_RCC_GetHCLKFreq+0x14>)
 8002062:	681b      	ldr	r3, [r3, #0]
}
 8002064:	4618      	mov	r0, r3
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	20000000 	.word	0x20000000

08002074 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002078:	f7ff fff0 	bl	800205c <HAL_RCC_GetHCLKFreq>
 800207c:	4602      	mov	r2, r0
 800207e:	4b06      	ldr	r3, [pc, #24]	; (8002098 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	0a1b      	lsrs	r3, r3, #8
 8002084:	f003 0307 	and.w	r3, r3, #7
 8002088:	4904      	ldr	r1, [pc, #16]	; (800209c <HAL_RCC_GetPCLK1Freq+0x28>)
 800208a:	5ccb      	ldrb	r3, [r1, r3]
 800208c:	f003 031f 	and.w	r3, r3, #31
 8002090:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002094:	4618      	mov	r0, r3
 8002096:	bd80      	pop	{r7, pc}
 8002098:	40021000 	.word	0x40021000
 800209c:	08005818 	.word	0x08005818

080020a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80020a4:	f7ff ffda 	bl	800205c <HAL_RCC_GetHCLKFreq>
 80020a8:	4602      	mov	r2, r0
 80020aa:	4b06      	ldr	r3, [pc, #24]	; (80020c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	0adb      	lsrs	r3, r3, #11
 80020b0:	f003 0307 	and.w	r3, r3, #7
 80020b4:	4904      	ldr	r1, [pc, #16]	; (80020c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80020b6:	5ccb      	ldrb	r3, [r1, r3]
 80020b8:	f003 031f 	and.w	r3, r3, #31
 80020bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	40021000 	.word	0x40021000
 80020c8:	08005818 	.word	0x08005818

080020cc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80020d4:	2300      	movs	r3, #0
 80020d6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80020d8:	4b2a      	ldr	r3, [pc, #168]	; (8002184 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d003      	beq.n	80020ec <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80020e4:	f7ff f9ee 	bl	80014c4 <HAL_PWREx_GetVoltageRange>
 80020e8:	6178      	str	r0, [r7, #20]
 80020ea:	e014      	b.n	8002116 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80020ec:	4b25      	ldr	r3, [pc, #148]	; (8002184 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020f0:	4a24      	ldr	r2, [pc, #144]	; (8002184 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020f6:	6593      	str	r3, [r2, #88]	; 0x58
 80020f8:	4b22      	ldr	r3, [pc, #136]	; (8002184 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002100:	60fb      	str	r3, [r7, #12]
 8002102:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002104:	f7ff f9de 	bl	80014c4 <HAL_PWREx_GetVoltageRange>
 8002108:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800210a:	4b1e      	ldr	r3, [pc, #120]	; (8002184 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800210c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800210e:	4a1d      	ldr	r2, [pc, #116]	; (8002184 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002110:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002114:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800211c:	d10b      	bne.n	8002136 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2b80      	cmp	r3, #128	; 0x80
 8002122:	d919      	bls.n	8002158 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2ba0      	cmp	r3, #160	; 0xa0
 8002128:	d902      	bls.n	8002130 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800212a:	2302      	movs	r3, #2
 800212c:	613b      	str	r3, [r7, #16]
 800212e:	e013      	b.n	8002158 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002130:	2301      	movs	r3, #1
 8002132:	613b      	str	r3, [r7, #16]
 8002134:	e010      	b.n	8002158 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2b80      	cmp	r3, #128	; 0x80
 800213a:	d902      	bls.n	8002142 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800213c:	2303      	movs	r3, #3
 800213e:	613b      	str	r3, [r7, #16]
 8002140:	e00a      	b.n	8002158 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2b80      	cmp	r3, #128	; 0x80
 8002146:	d102      	bne.n	800214e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002148:	2302      	movs	r3, #2
 800214a:	613b      	str	r3, [r7, #16]
 800214c:	e004      	b.n	8002158 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2b70      	cmp	r3, #112	; 0x70
 8002152:	d101      	bne.n	8002158 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002154:	2301      	movs	r3, #1
 8002156:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002158:	4b0b      	ldr	r3, [pc, #44]	; (8002188 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f023 0207 	bic.w	r2, r3, #7
 8002160:	4909      	ldr	r1, [pc, #36]	; (8002188 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	4313      	orrs	r3, r2
 8002166:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002168:	4b07      	ldr	r3, [pc, #28]	; (8002188 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0307 	and.w	r3, r3, #7
 8002170:	693a      	ldr	r2, [r7, #16]
 8002172:	429a      	cmp	r2, r3
 8002174:	d001      	beq.n	800217a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e000      	b.n	800217c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	3718      	adds	r7, #24
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}
 8002184:	40021000 	.word	0x40021000
 8002188:	40022000 	.word	0x40022000

0800218c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002194:	2300      	movs	r3, #0
 8002196:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002198:	2300      	movs	r3, #0
 800219a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d041      	beq.n	800222c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021ac:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80021b0:	d02a      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80021b2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80021b6:	d824      	bhi.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80021b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80021bc:	d008      	beq.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80021be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80021c2:	d81e      	bhi.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d00a      	beq.n	80021de <HAL_RCCEx_PeriphCLKConfig+0x52>
 80021c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021cc:	d010      	beq.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80021ce:	e018      	b.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80021d0:	4b86      	ldr	r3, [pc, #536]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	4a85      	ldr	r2, [pc, #532]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021da:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021dc:	e015      	b.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	3304      	adds	r3, #4
 80021e2:	2100      	movs	r1, #0
 80021e4:	4618      	mov	r0, r3
 80021e6:	f000 fabb 	bl	8002760 <RCCEx_PLLSAI1_Config>
 80021ea:	4603      	mov	r3, r0
 80021ec:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021ee:	e00c      	b.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	3320      	adds	r3, #32
 80021f4:	2100      	movs	r1, #0
 80021f6:	4618      	mov	r0, r3
 80021f8:	f000 fba6 	bl	8002948 <RCCEx_PLLSAI2_Config>
 80021fc:	4603      	mov	r3, r0
 80021fe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002200:	e003      	b.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	74fb      	strb	r3, [r7, #19]
      break;
 8002206:	e000      	b.n	800220a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002208:	bf00      	nop
    }

    if(ret == HAL_OK)
 800220a:	7cfb      	ldrb	r3, [r7, #19]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d10b      	bne.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002210:	4b76      	ldr	r3, [pc, #472]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002216:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800221e:	4973      	ldr	r1, [pc, #460]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002220:	4313      	orrs	r3, r2
 8002222:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002226:	e001      	b.n	800222c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002228:	7cfb      	ldrb	r3, [r7, #19]
 800222a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d041      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800223c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002240:	d02a      	beq.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002242:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002246:	d824      	bhi.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002248:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800224c:	d008      	beq.n	8002260 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800224e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002252:	d81e      	bhi.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002254:	2b00      	cmp	r3, #0
 8002256:	d00a      	beq.n	800226e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002258:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800225c:	d010      	beq.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800225e:	e018      	b.n	8002292 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002260:	4b62      	ldr	r3, [pc, #392]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	4a61      	ldr	r2, [pc, #388]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002266:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800226a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800226c:	e015      	b.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	3304      	adds	r3, #4
 8002272:	2100      	movs	r1, #0
 8002274:	4618      	mov	r0, r3
 8002276:	f000 fa73 	bl	8002760 <RCCEx_PLLSAI1_Config>
 800227a:	4603      	mov	r3, r0
 800227c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800227e:	e00c      	b.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	3320      	adds	r3, #32
 8002284:	2100      	movs	r1, #0
 8002286:	4618      	mov	r0, r3
 8002288:	f000 fb5e 	bl	8002948 <RCCEx_PLLSAI2_Config>
 800228c:	4603      	mov	r3, r0
 800228e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002290:	e003      	b.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	74fb      	strb	r3, [r7, #19]
      break;
 8002296:	e000      	b.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002298:	bf00      	nop
    }

    if(ret == HAL_OK)
 800229a:	7cfb      	ldrb	r3, [r7, #19]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d10b      	bne.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80022a0:	4b52      	ldr	r3, [pc, #328]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022a6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80022ae:	494f      	ldr	r1, [pc, #316]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80022b6:	e001      	b.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022b8:	7cfb      	ldrb	r3, [r7, #19]
 80022ba:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	f000 80a0 	beq.w	800240a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022ca:	2300      	movs	r3, #0
 80022cc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80022ce:	4b47      	ldr	r3, [pc, #284]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d101      	bne.n	80022de <HAL_RCCEx_PeriphCLKConfig+0x152>
 80022da:	2301      	movs	r3, #1
 80022dc:	e000      	b.n	80022e0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80022de:	2300      	movs	r3, #0
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d00d      	beq.n	8002300 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022e4:	4b41      	ldr	r3, [pc, #260]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e8:	4a40      	ldr	r2, [pc, #256]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ee:	6593      	str	r3, [r2, #88]	; 0x58
 80022f0:	4b3e      	ldr	r3, [pc, #248]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f8:	60bb      	str	r3, [r7, #8]
 80022fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022fc:	2301      	movs	r3, #1
 80022fe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002300:	4b3b      	ldr	r3, [pc, #236]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a3a      	ldr	r2, [pc, #232]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002306:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800230a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800230c:	f7fe fd96 	bl	8000e3c <HAL_GetTick>
 8002310:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002312:	e009      	b.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002314:	f7fe fd92 	bl	8000e3c <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b02      	cmp	r3, #2
 8002320:	d902      	bls.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	74fb      	strb	r3, [r7, #19]
        break;
 8002326:	e005      	b.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002328:	4b31      	ldr	r3, [pc, #196]	; (80023f0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002330:	2b00      	cmp	r3, #0
 8002332:	d0ef      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002334:	7cfb      	ldrb	r3, [r7, #19]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d15c      	bne.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800233a:	4b2c      	ldr	r3, [pc, #176]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800233c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002340:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002344:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d01f      	beq.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002352:	697a      	ldr	r2, [r7, #20]
 8002354:	429a      	cmp	r2, r3
 8002356:	d019      	beq.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002358:	4b24      	ldr	r3, [pc, #144]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800235a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800235e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002362:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002364:	4b21      	ldr	r3, [pc, #132]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800236a:	4a20      	ldr	r2, [pc, #128]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800236c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002370:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002374:	4b1d      	ldr	r3, [pc, #116]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002376:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800237a:	4a1c      	ldr	r2, [pc, #112]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800237c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002380:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002384:	4a19      	ldr	r2, [pc, #100]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	2b00      	cmp	r3, #0
 8002394:	d016      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002396:	f7fe fd51 	bl	8000e3c <HAL_GetTick>
 800239a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800239c:	e00b      	b.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800239e:	f7fe fd4d 	bl	8000e3c <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d902      	bls.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	74fb      	strb	r3, [r7, #19]
            break;
 80023b4:	e006      	b.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023b6:	4b0d      	ldr	r3, [pc, #52]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023bc:	f003 0302 	and.w	r3, r3, #2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d0ec      	beq.n	800239e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80023c4:	7cfb      	ldrb	r3, [r7, #19]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d10c      	bne.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023ca:	4b08      	ldr	r3, [pc, #32]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023da:	4904      	ldr	r1, [pc, #16]	; (80023ec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80023dc:	4313      	orrs	r3, r2
 80023de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80023e2:	e009      	b.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80023e4:	7cfb      	ldrb	r3, [r7, #19]
 80023e6:	74bb      	strb	r3, [r7, #18]
 80023e8:	e006      	b.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80023ea:	bf00      	nop
 80023ec:	40021000 	.word	0x40021000
 80023f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023f4:	7cfb      	ldrb	r3, [r7, #19]
 80023f6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023f8:	7c7b      	ldrb	r3, [r7, #17]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d105      	bne.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023fe:	4b9e      	ldr	r3, [pc, #632]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002402:	4a9d      	ldr	r2, [pc, #628]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002404:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002408:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	2b00      	cmp	r3, #0
 8002414:	d00a      	beq.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002416:	4b98      	ldr	r3, [pc, #608]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800241c:	f023 0203 	bic.w	r2, r3, #3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002424:	4994      	ldr	r1, [pc, #592]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002426:	4313      	orrs	r3, r2
 8002428:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	2b00      	cmp	r3, #0
 8002436:	d00a      	beq.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002438:	4b8f      	ldr	r3, [pc, #572]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800243a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800243e:	f023 020c 	bic.w	r2, r3, #12
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002446:	498c      	ldr	r1, [pc, #560]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002448:	4313      	orrs	r3, r2
 800244a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0304 	and.w	r3, r3, #4
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00a      	beq.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800245a:	4b87      	ldr	r3, [pc, #540]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800245c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002460:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002468:	4983      	ldr	r1, [pc, #524]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800246a:	4313      	orrs	r3, r2
 800246c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0308 	and.w	r3, r3, #8
 8002478:	2b00      	cmp	r3, #0
 800247a:	d00a      	beq.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800247c:	4b7e      	ldr	r3, [pc, #504]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800247e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002482:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248a:	497b      	ldr	r1, [pc, #492]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800248c:	4313      	orrs	r3, r2
 800248e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0310 	and.w	r3, r3, #16
 800249a:	2b00      	cmp	r3, #0
 800249c:	d00a      	beq.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800249e:	4b76      	ldr	r3, [pc, #472]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024ac:	4972      	ldr	r1, [pc, #456]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0320 	and.w	r3, r3, #32
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d00a      	beq.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80024c0:	4b6d      	ldr	r3, [pc, #436]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024ce:	496a      	ldr	r1, [pc, #424]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d00a      	beq.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80024e2:	4b65      	ldr	r3, [pc, #404]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f0:	4961      	ldr	r1, [pc, #388]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002500:	2b00      	cmp	r3, #0
 8002502:	d00a      	beq.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002504:	4b5c      	ldr	r3, [pc, #368]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800250a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002512:	4959      	ldr	r1, [pc, #356]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002514:	4313      	orrs	r3, r2
 8002516:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002522:	2b00      	cmp	r3, #0
 8002524:	d00a      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002526:	4b54      	ldr	r3, [pc, #336]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800252c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002534:	4950      	ldr	r1, [pc, #320]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002536:	4313      	orrs	r3, r2
 8002538:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002544:	2b00      	cmp	r3, #0
 8002546:	d00a      	beq.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002548:	4b4b      	ldr	r3, [pc, #300]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800254a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800254e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002556:	4948      	ldr	r1, [pc, #288]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002558:	4313      	orrs	r3, r2
 800255a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002566:	2b00      	cmp	r3, #0
 8002568:	d00a      	beq.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800256a:	4b43      	ldr	r3, [pc, #268]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800256c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002570:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002578:	493f      	ldr	r1, [pc, #252]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800257a:	4313      	orrs	r3, r2
 800257c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d028      	beq.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800258c:	4b3a      	ldr	r3, [pc, #232]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800258e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002592:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800259a:	4937      	ldr	r1, [pc, #220]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800259c:	4313      	orrs	r3, r2
 800259e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025aa:	d106      	bne.n	80025ba <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025ac:	4b32      	ldr	r3, [pc, #200]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	4a31      	ldr	r2, [pc, #196]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025b6:	60d3      	str	r3, [r2, #12]
 80025b8:	e011      	b.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80025be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025c2:	d10c      	bne.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	3304      	adds	r3, #4
 80025c8:	2101      	movs	r1, #1
 80025ca:	4618      	mov	r0, r3
 80025cc:	f000 f8c8 	bl	8002760 <RCCEx_PLLSAI1_Config>
 80025d0:	4603      	mov	r3, r0
 80025d2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80025d4:	7cfb      	ldrb	r3, [r7, #19]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d001      	beq.n	80025de <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80025da:	7cfb      	ldrb	r3, [r7, #19]
 80025dc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d028      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80025ea:	4b23      	ldr	r3, [pc, #140]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f8:	491f      	ldr	r1, [pc, #124]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002604:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002608:	d106      	bne.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800260a:	4b1b      	ldr	r3, [pc, #108]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	4a1a      	ldr	r2, [pc, #104]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002610:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002614:	60d3      	str	r3, [r2, #12]
 8002616:	e011      	b.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800261c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002620:	d10c      	bne.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	3304      	adds	r3, #4
 8002626:	2101      	movs	r1, #1
 8002628:	4618      	mov	r0, r3
 800262a:	f000 f899 	bl	8002760 <RCCEx_PLLSAI1_Config>
 800262e:	4603      	mov	r3, r0
 8002630:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002632:	7cfb      	ldrb	r3, [r7, #19]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002638:	7cfb      	ldrb	r3, [r7, #19]
 800263a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d02b      	beq.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002648:	4b0b      	ldr	r3, [pc, #44]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800264a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800264e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002656:	4908      	ldr	r1, [pc, #32]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002658:	4313      	orrs	r3, r2
 800265a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002662:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002666:	d109      	bne.n	800267c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002668:	4b03      	ldr	r3, [pc, #12]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	4a02      	ldr	r2, [pc, #8]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800266e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002672:	60d3      	str	r3, [r2, #12]
 8002674:	e014      	b.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002676:	bf00      	nop
 8002678:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002680:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002684:	d10c      	bne.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	3304      	adds	r3, #4
 800268a:	2101      	movs	r1, #1
 800268c:	4618      	mov	r0, r3
 800268e:	f000 f867 	bl	8002760 <RCCEx_PLLSAI1_Config>
 8002692:	4603      	mov	r3, r0
 8002694:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002696:	7cfb      	ldrb	r3, [r7, #19]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d001      	beq.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800269c:	7cfb      	ldrb	r3, [r7, #19]
 800269e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d02f      	beq.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026ac:	4b2b      	ldr	r3, [pc, #172]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026b2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026ba:	4928      	ldr	r1, [pc, #160]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80026ca:	d10d      	bne.n	80026e8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	3304      	adds	r3, #4
 80026d0:	2102      	movs	r1, #2
 80026d2:	4618      	mov	r0, r3
 80026d4:	f000 f844 	bl	8002760 <RCCEx_PLLSAI1_Config>
 80026d8:	4603      	mov	r3, r0
 80026da:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026dc:	7cfb      	ldrb	r3, [r7, #19]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d014      	beq.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80026e2:	7cfb      	ldrb	r3, [r7, #19]
 80026e4:	74bb      	strb	r3, [r7, #18]
 80026e6:	e011      	b.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026f0:	d10c      	bne.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	3320      	adds	r3, #32
 80026f6:	2102      	movs	r1, #2
 80026f8:	4618      	mov	r0, r3
 80026fa:	f000 f925 	bl	8002948 <RCCEx_PLLSAI2_Config>
 80026fe:	4603      	mov	r3, r0
 8002700:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002702:	7cfb      	ldrb	r3, [r7, #19]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002708:	7cfb      	ldrb	r3, [r7, #19]
 800270a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d00a      	beq.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002718:	4b10      	ldr	r3, [pc, #64]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800271a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800271e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002726:	490d      	ldr	r1, [pc, #52]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002728:	4313      	orrs	r3, r2
 800272a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002736:	2b00      	cmp	r3, #0
 8002738:	d00b      	beq.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800273a:	4b08      	ldr	r3, [pc, #32]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800273c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002740:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800274a:	4904      	ldr	r1, [pc, #16]	; (800275c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800274c:	4313      	orrs	r3, r2
 800274e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002752:	7cbb      	ldrb	r3, [r7, #18]
}
 8002754:	4618      	mov	r0, r3
 8002756:	3718      	adds	r7, #24
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	40021000 	.word	0x40021000

08002760 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800276a:	2300      	movs	r3, #0
 800276c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800276e:	4b75      	ldr	r3, [pc, #468]	; (8002944 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	f003 0303 	and.w	r3, r3, #3
 8002776:	2b00      	cmp	r3, #0
 8002778:	d018      	beq.n	80027ac <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800277a:	4b72      	ldr	r3, [pc, #456]	; (8002944 <RCCEx_PLLSAI1_Config+0x1e4>)
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	f003 0203 	and.w	r2, r3, #3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	429a      	cmp	r2, r3
 8002788:	d10d      	bne.n	80027a6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
       ||
 800278e:	2b00      	cmp	r3, #0
 8002790:	d009      	beq.n	80027a6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002792:	4b6c      	ldr	r3, [pc, #432]	; (8002944 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	091b      	lsrs	r3, r3, #4
 8002798:	f003 0307 	and.w	r3, r3, #7
 800279c:	1c5a      	adds	r2, r3, #1
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	685b      	ldr	r3, [r3, #4]
       ||
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d047      	beq.n	8002836 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	73fb      	strb	r3, [r7, #15]
 80027aa:	e044      	b.n	8002836 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2b03      	cmp	r3, #3
 80027b2:	d018      	beq.n	80027e6 <RCCEx_PLLSAI1_Config+0x86>
 80027b4:	2b03      	cmp	r3, #3
 80027b6:	d825      	bhi.n	8002804 <RCCEx_PLLSAI1_Config+0xa4>
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d002      	beq.n	80027c2 <RCCEx_PLLSAI1_Config+0x62>
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d009      	beq.n	80027d4 <RCCEx_PLLSAI1_Config+0x74>
 80027c0:	e020      	b.n	8002804 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80027c2:	4b60      	ldr	r3, [pc, #384]	; (8002944 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d11d      	bne.n	800280a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027d2:	e01a      	b.n	800280a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80027d4:	4b5b      	ldr	r3, [pc, #364]	; (8002944 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d116      	bne.n	800280e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027e4:	e013      	b.n	800280e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80027e6:	4b57      	ldr	r3, [pc, #348]	; (8002944 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d10f      	bne.n	8002812 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80027f2:	4b54      	ldr	r3, [pc, #336]	; (8002944 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d109      	bne.n	8002812 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002802:	e006      	b.n	8002812 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	73fb      	strb	r3, [r7, #15]
      break;
 8002808:	e004      	b.n	8002814 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800280a:	bf00      	nop
 800280c:	e002      	b.n	8002814 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800280e:	bf00      	nop
 8002810:	e000      	b.n	8002814 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002812:	bf00      	nop
    }

    if(status == HAL_OK)
 8002814:	7bfb      	ldrb	r3, [r7, #15]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d10d      	bne.n	8002836 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800281a:	4b4a      	ldr	r3, [pc, #296]	; (8002944 <RCCEx_PLLSAI1_Config+0x1e4>)
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6819      	ldr	r1, [r3, #0]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	3b01      	subs	r3, #1
 800282c:	011b      	lsls	r3, r3, #4
 800282e:	430b      	orrs	r3, r1
 8002830:	4944      	ldr	r1, [pc, #272]	; (8002944 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002832:	4313      	orrs	r3, r2
 8002834:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002836:	7bfb      	ldrb	r3, [r7, #15]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d17d      	bne.n	8002938 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800283c:	4b41      	ldr	r3, [pc, #260]	; (8002944 <RCCEx_PLLSAI1_Config+0x1e4>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a40      	ldr	r2, [pc, #256]	; (8002944 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002842:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002846:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002848:	f7fe faf8 	bl	8000e3c <HAL_GetTick>
 800284c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800284e:	e009      	b.n	8002864 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002850:	f7fe faf4 	bl	8000e3c <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b02      	cmp	r3, #2
 800285c:	d902      	bls.n	8002864 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	73fb      	strb	r3, [r7, #15]
        break;
 8002862:	e005      	b.n	8002870 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002864:	4b37      	ldr	r3, [pc, #220]	; (8002944 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d1ef      	bne.n	8002850 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002870:	7bfb      	ldrb	r3, [r7, #15]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d160      	bne.n	8002938 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d111      	bne.n	80028a0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800287c:	4b31      	ldr	r3, [pc, #196]	; (8002944 <RCCEx_PLLSAI1_Config+0x1e4>)
 800287e:	691b      	ldr	r3, [r3, #16]
 8002880:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002884:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	6892      	ldr	r2, [r2, #8]
 800288c:	0211      	lsls	r1, r2, #8
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	68d2      	ldr	r2, [r2, #12]
 8002892:	0912      	lsrs	r2, r2, #4
 8002894:	0452      	lsls	r2, r2, #17
 8002896:	430a      	orrs	r2, r1
 8002898:	492a      	ldr	r1, [pc, #168]	; (8002944 <RCCEx_PLLSAI1_Config+0x1e4>)
 800289a:	4313      	orrs	r3, r2
 800289c:	610b      	str	r3, [r1, #16]
 800289e:	e027      	b.n	80028f0 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d112      	bne.n	80028cc <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028a6:	4b27      	ldr	r3, [pc, #156]	; (8002944 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80028ae:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	6892      	ldr	r2, [r2, #8]
 80028b6:	0211      	lsls	r1, r2, #8
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	6912      	ldr	r2, [r2, #16]
 80028bc:	0852      	lsrs	r2, r2, #1
 80028be:	3a01      	subs	r2, #1
 80028c0:	0552      	lsls	r2, r2, #21
 80028c2:	430a      	orrs	r2, r1
 80028c4:	491f      	ldr	r1, [pc, #124]	; (8002944 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	610b      	str	r3, [r1, #16]
 80028ca:	e011      	b.n	80028f0 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80028cc:	4b1d      	ldr	r3, [pc, #116]	; (8002944 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028ce:	691b      	ldr	r3, [r3, #16]
 80028d0:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80028d4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	6892      	ldr	r2, [r2, #8]
 80028dc:	0211      	lsls	r1, r2, #8
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	6952      	ldr	r2, [r2, #20]
 80028e2:	0852      	lsrs	r2, r2, #1
 80028e4:	3a01      	subs	r2, #1
 80028e6:	0652      	lsls	r2, r2, #25
 80028e8:	430a      	orrs	r2, r1
 80028ea:	4916      	ldr	r1, [pc, #88]	; (8002944 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80028f0:	4b14      	ldr	r3, [pc, #80]	; (8002944 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a13      	ldr	r2, [pc, #76]	; (8002944 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028f6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80028fa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028fc:	f7fe fa9e 	bl	8000e3c <HAL_GetTick>
 8002900:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002902:	e009      	b.n	8002918 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002904:	f7fe fa9a 	bl	8000e3c <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b02      	cmp	r3, #2
 8002910:	d902      	bls.n	8002918 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	73fb      	strb	r3, [r7, #15]
          break;
 8002916:	e005      	b.n	8002924 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002918:	4b0a      	ldr	r3, [pc, #40]	; (8002944 <RCCEx_PLLSAI1_Config+0x1e4>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d0ef      	beq.n	8002904 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002924:	7bfb      	ldrb	r3, [r7, #15]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d106      	bne.n	8002938 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800292a:	4b06      	ldr	r3, [pc, #24]	; (8002944 <RCCEx_PLLSAI1_Config+0x1e4>)
 800292c:	691a      	ldr	r2, [r3, #16]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	4904      	ldr	r1, [pc, #16]	; (8002944 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002934:	4313      	orrs	r3, r2
 8002936:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002938:	7bfb      	ldrb	r3, [r7, #15]
}
 800293a:	4618      	mov	r0, r3
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	40021000 	.word	0x40021000

08002948 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002952:	2300      	movs	r3, #0
 8002954:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002956:	4b6a      	ldr	r3, [pc, #424]	; (8002b00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002958:	68db      	ldr	r3, [r3, #12]
 800295a:	f003 0303 	and.w	r3, r3, #3
 800295e:	2b00      	cmp	r3, #0
 8002960:	d018      	beq.n	8002994 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002962:	4b67      	ldr	r3, [pc, #412]	; (8002b00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002964:	68db      	ldr	r3, [r3, #12]
 8002966:	f003 0203 	and.w	r2, r3, #3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	429a      	cmp	r2, r3
 8002970:	d10d      	bne.n	800298e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
       ||
 8002976:	2b00      	cmp	r3, #0
 8002978:	d009      	beq.n	800298e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800297a:	4b61      	ldr	r3, [pc, #388]	; (8002b00 <RCCEx_PLLSAI2_Config+0x1b8>)
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	091b      	lsrs	r3, r3, #4
 8002980:	f003 0307 	and.w	r3, r3, #7
 8002984:	1c5a      	adds	r2, r3, #1
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
       ||
 800298a:	429a      	cmp	r2, r3
 800298c:	d047      	beq.n	8002a1e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	73fb      	strb	r3, [r7, #15]
 8002992:	e044      	b.n	8002a1e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2b03      	cmp	r3, #3
 800299a:	d018      	beq.n	80029ce <RCCEx_PLLSAI2_Config+0x86>
 800299c:	2b03      	cmp	r3, #3
 800299e:	d825      	bhi.n	80029ec <RCCEx_PLLSAI2_Config+0xa4>
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d002      	beq.n	80029aa <RCCEx_PLLSAI2_Config+0x62>
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d009      	beq.n	80029bc <RCCEx_PLLSAI2_Config+0x74>
 80029a8:	e020      	b.n	80029ec <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80029aa:	4b55      	ldr	r3, [pc, #340]	; (8002b00 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d11d      	bne.n	80029f2 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029ba:	e01a      	b.n	80029f2 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80029bc:	4b50      	ldr	r3, [pc, #320]	; (8002b00 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d116      	bne.n	80029f6 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029cc:	e013      	b.n	80029f6 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80029ce:	4b4c      	ldr	r3, [pc, #304]	; (8002b00 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d10f      	bne.n	80029fa <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80029da:	4b49      	ldr	r3, [pc, #292]	; (8002b00 <RCCEx_PLLSAI2_Config+0x1b8>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d109      	bne.n	80029fa <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80029ea:	e006      	b.n	80029fa <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	73fb      	strb	r3, [r7, #15]
      break;
 80029f0:	e004      	b.n	80029fc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80029f2:	bf00      	nop
 80029f4:	e002      	b.n	80029fc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80029f6:	bf00      	nop
 80029f8:	e000      	b.n	80029fc <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80029fa:	bf00      	nop
    }

    if(status == HAL_OK)
 80029fc:	7bfb      	ldrb	r3, [r7, #15]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d10d      	bne.n	8002a1e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002a02:	4b3f      	ldr	r3, [pc, #252]	; (8002b00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6819      	ldr	r1, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	3b01      	subs	r3, #1
 8002a14:	011b      	lsls	r3, r3, #4
 8002a16:	430b      	orrs	r3, r1
 8002a18:	4939      	ldr	r1, [pc, #228]	; (8002b00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002a1e:	7bfb      	ldrb	r3, [r7, #15]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d167      	bne.n	8002af4 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002a24:	4b36      	ldr	r3, [pc, #216]	; (8002b00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a35      	ldr	r2, [pc, #212]	; (8002b00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a30:	f7fe fa04 	bl	8000e3c <HAL_GetTick>
 8002a34:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a36:	e009      	b.n	8002a4c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a38:	f7fe fa00 	bl	8000e3c <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d902      	bls.n	8002a4c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	73fb      	strb	r3, [r7, #15]
        break;
 8002a4a:	e005      	b.n	8002a58 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a4c:	4b2c      	ldr	r3, [pc, #176]	; (8002b00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d1ef      	bne.n	8002a38 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a58:	7bfb      	ldrb	r3, [r7, #15]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d14a      	bne.n	8002af4 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d111      	bne.n	8002a88 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a64:	4b26      	ldr	r3, [pc, #152]	; (8002b00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a66:	695b      	ldr	r3, [r3, #20]
 8002a68:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002a6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a70:	687a      	ldr	r2, [r7, #4]
 8002a72:	6892      	ldr	r2, [r2, #8]
 8002a74:	0211      	lsls	r1, r2, #8
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	68d2      	ldr	r2, [r2, #12]
 8002a7a:	0912      	lsrs	r2, r2, #4
 8002a7c:	0452      	lsls	r2, r2, #17
 8002a7e:	430a      	orrs	r2, r1
 8002a80:	491f      	ldr	r1, [pc, #124]	; (8002b00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	614b      	str	r3, [r1, #20]
 8002a86:	e011      	b.n	8002aac <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a88:	4b1d      	ldr	r3, [pc, #116]	; (8002b00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a8a:	695b      	ldr	r3, [r3, #20]
 8002a8c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002a90:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	6892      	ldr	r2, [r2, #8]
 8002a98:	0211      	lsls	r1, r2, #8
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	6912      	ldr	r2, [r2, #16]
 8002a9e:	0852      	lsrs	r2, r2, #1
 8002aa0:	3a01      	subs	r2, #1
 8002aa2:	0652      	lsls	r2, r2, #25
 8002aa4:	430a      	orrs	r2, r1
 8002aa6:	4916      	ldr	r1, [pc, #88]	; (8002b00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002aac:	4b14      	ldr	r3, [pc, #80]	; (8002b00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a13      	ldr	r2, [pc, #76]	; (8002b00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ab2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ab6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab8:	f7fe f9c0 	bl	8000e3c <HAL_GetTick>
 8002abc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002abe:	e009      	b.n	8002ad4 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ac0:	f7fe f9bc 	bl	8000e3c <HAL_GetTick>
 8002ac4:	4602      	mov	r2, r0
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	1ad3      	subs	r3, r2, r3
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d902      	bls.n	8002ad4 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	73fb      	strb	r3, [r7, #15]
          break;
 8002ad2:	e005      	b.n	8002ae0 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ad4:	4b0a      	ldr	r3, [pc, #40]	; (8002b00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d0ef      	beq.n	8002ac0 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002ae0:	7bfb      	ldrb	r3, [r7, #15]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d106      	bne.n	8002af4 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002ae6:	4b06      	ldr	r3, [pc, #24]	; (8002b00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ae8:	695a      	ldr	r2, [r3, #20]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	4904      	ldr	r1, [pc, #16]	; (8002b00 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3710      	adds	r7, #16
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	40021000 	.word	0x40021000

08002b04 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b084      	sub	sp, #16
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d101      	bne.n	8002b16 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	e095      	b.n	8002c42 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d108      	bne.n	8002b30 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002b26:	d009      	beq.n	8002b3c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	61da      	str	r2, [r3, #28]
 8002b2e:	e005      	b.n	8002b3c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d106      	bne.n	8002b5c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f7fd ffb4 	bl	8000ac4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2202      	movs	r2, #2
 8002b60:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	681a      	ldr	r2, [r3, #0]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b72:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002b7c:	d902      	bls.n	8002b84 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	60fb      	str	r3, [r7, #12]
 8002b82:	e002      	b.n	8002b8a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002b84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b88:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002b92:	d007      	beq.n	8002ba4 <HAL_SPI_Init+0xa0>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002b9c:	d002      	beq.n	8002ba4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002bb4:	431a      	orrs	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	f003 0302 	and.w	r3, r3, #2
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	695b      	ldr	r3, [r3, #20]
 8002bc4:	f003 0301 	and.w	r3, r3, #1
 8002bc8:	431a      	orrs	r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bd2:	431a      	orrs	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	69db      	ldr	r3, [r3, #28]
 8002bd8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002bdc:	431a      	orrs	r2, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a1b      	ldr	r3, [r3, #32]
 8002be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002be6:	ea42 0103 	orr.w	r1, r2, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bee:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	0c1b      	lsrs	r3, r3, #16
 8002c00:	f003 0204 	and.w	r2, r3, #4
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c08:	f003 0310 	and.w	r3, r3, #16
 8002c0c:	431a      	orrs	r2, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c12:	f003 0308 	and.w	r3, r3, #8
 8002c16:	431a      	orrs	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002c20:	ea42 0103 	orr.w	r1, r2, r3
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2200      	movs	r2, #0
 8002c36:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2201      	movs	r2, #1
 8002c3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3710      	adds	r7, #16
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b088      	sub	sp, #32
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	60f8      	str	r0, [r7, #12]
 8002c52:	60b9      	str	r1, [r7, #8]
 8002c54:	603b      	str	r3, [r7, #0]
 8002c56:	4613      	mov	r3, r2
 8002c58:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d101      	bne.n	8002c6c <HAL_SPI_Transmit+0x22>
 8002c68:	2302      	movs	r3, #2
 8002c6a:	e158      	b.n	8002f1e <HAL_SPI_Transmit+0x2d4>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002c74:	f7fe f8e2 	bl	8000e3c <HAL_GetTick>
 8002c78:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002c7a:	88fb      	ldrh	r3, [r7, #6]
 8002c7c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d002      	beq.n	8002c90 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002c8e:	e13d      	b.n	8002f0c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d002      	beq.n	8002c9c <HAL_SPI_Transmit+0x52>
 8002c96:	88fb      	ldrh	r3, [r7, #6]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d102      	bne.n	8002ca2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ca0:	e134      	b.n	8002f0c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	2203      	movs	r2, #3
 8002ca6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2200      	movs	r2, #0
 8002cae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	68ba      	ldr	r2, [r7, #8]
 8002cb4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	88fa      	ldrh	r2, [r7, #6]
 8002cba:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	88fa      	ldrh	r2, [r7, #6]
 8002cc0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cec:	d10f      	bne.n	8002d0e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002cfc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d0c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d18:	2b40      	cmp	r3, #64	; 0x40
 8002d1a:	d007      	beq.n	8002d2c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d2a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002d34:	d94b      	bls.n	8002dce <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d002      	beq.n	8002d44 <HAL_SPI_Transmit+0xfa>
 8002d3e:	8afb      	ldrh	r3, [r7, #22]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d13e      	bne.n	8002dc2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d48:	881a      	ldrh	r2, [r3, #0]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d54:	1c9a      	adds	r2, r3, #2
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	3b01      	subs	r3, #1
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002d68:	e02b      	b.n	8002dc2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f003 0302 	and.w	r3, r3, #2
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	d112      	bne.n	8002d9e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d7c:	881a      	ldrh	r2, [r3, #0]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d88:	1c9a      	adds	r2, r3, #2
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	3b01      	subs	r3, #1
 8002d96:	b29a      	uxth	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002d9c:	e011      	b.n	8002dc2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d9e:	f7fe f84d 	bl	8000e3c <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	683a      	ldr	r2, [r7, #0]
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d803      	bhi.n	8002db6 <HAL_SPI_Transmit+0x16c>
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002db4:	d102      	bne.n	8002dbc <HAL_SPI_Transmit+0x172>
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d102      	bne.n	8002dc2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8002dbc:	2303      	movs	r3, #3
 8002dbe:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002dc0:	e0a4      	b.n	8002f0c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002dc6:	b29b      	uxth	r3, r3
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d1ce      	bne.n	8002d6a <HAL_SPI_Transmit+0x120>
 8002dcc:	e07c      	b.n	8002ec8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d002      	beq.n	8002ddc <HAL_SPI_Transmit+0x192>
 8002dd6:	8afb      	ldrh	r3, [r7, #22]
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d170      	bne.n	8002ebe <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d912      	bls.n	8002e0c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dea:	881a      	ldrh	r2, [r3, #0]
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df6:	1c9a      	adds	r2, r3, #2
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	3b02      	subs	r3, #2
 8002e04:	b29a      	uxth	r2, r3
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002e0a:	e058      	b.n	8002ebe <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	330c      	adds	r3, #12
 8002e16:	7812      	ldrb	r2, [r2, #0]
 8002e18:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e1e:	1c5a      	adds	r2, r3, #1
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	b29a      	uxth	r2, r3
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002e32:	e044      	b.n	8002ebe <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d12b      	bne.n	8002e9a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d912      	bls.n	8002e72 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e50:	881a      	ldrh	r2, [r3, #0]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e5c:	1c9a      	adds	r2, r3, #2
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	3b02      	subs	r3, #2
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002e70:	e025      	b.n	8002ebe <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	330c      	adds	r3, #12
 8002e7c:	7812      	ldrb	r2, [r2, #0]
 8002e7e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e84:	1c5a      	adds	r2, r3, #1
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	3b01      	subs	r3, #1
 8002e92:	b29a      	uxth	r2, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002e98:	e011      	b.n	8002ebe <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e9a:	f7fd ffcf 	bl	8000e3c <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	683a      	ldr	r2, [r7, #0]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d803      	bhi.n	8002eb2 <HAL_SPI_Transmit+0x268>
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb0:	d102      	bne.n	8002eb8 <HAL_SPI_Transmit+0x26e>
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d102      	bne.n	8002ebe <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002ebc:	e026      	b.n	8002f0c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d1b5      	bne.n	8002e34 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	6839      	ldr	r1, [r7, #0]
 8002ecc:	68f8      	ldr	r0, [r7, #12]
 8002ece:	f001 f999 	bl	8004204 <SPI_EndRxTxTransaction>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d002      	beq.n	8002ede <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2220      	movs	r2, #32
 8002edc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d10a      	bne.n	8002efc <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	613b      	str	r3, [r7, #16]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	613b      	str	r3, [r7, #16]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	613b      	str	r3, [r7, #16]
 8002efa:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d002      	beq.n	8002f0a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	77fb      	strb	r3, [r7, #31]
 8002f08:	e000      	b.n	8002f0c <HAL_SPI_Transmit+0x2c2>
  }

error:
 8002f0a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002f1c:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3720      	adds	r7, #32
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}

08002f26 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f26:	b580      	push	{r7, lr}
 8002f28:	b088      	sub	sp, #32
 8002f2a:	af02      	add	r7, sp, #8
 8002f2c:	60f8      	str	r0, [r7, #12]
 8002f2e:	60b9      	str	r1, [r7, #8]
 8002f30:	603b      	str	r3, [r7, #0]
 8002f32:	4613      	mov	r3, r2
 8002f34:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002f36:	2300      	movs	r3, #0
 8002f38:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f42:	d112      	bne.n	8002f6a <HAL_SPI_Receive+0x44>
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d10e      	bne.n	8002f6a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	2204      	movs	r2, #4
 8002f50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002f54:	88fa      	ldrh	r2, [r7, #6]
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	9300      	str	r3, [sp, #0]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	68ba      	ldr	r2, [r7, #8]
 8002f5e:	68b9      	ldr	r1, [r7, #8]
 8002f60:	68f8      	ldr	r0, [r7, #12]
 8002f62:	f000 f910 	bl	8003186 <HAL_SPI_TransmitReceive>
 8002f66:	4603      	mov	r3, r0
 8002f68:	e109      	b.n	800317e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d101      	bne.n	8002f78 <HAL_SPI_Receive+0x52>
 8002f74:	2302      	movs	r3, #2
 8002f76:	e102      	b.n	800317e <HAL_SPI_Receive+0x258>
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f80:	f7fd ff5c 	bl	8000e3c <HAL_GetTick>
 8002f84:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d002      	beq.n	8002f98 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8002f92:	2302      	movs	r3, #2
 8002f94:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002f96:	e0e9      	b.n	800316c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d002      	beq.n	8002fa4 <HAL_SPI_Receive+0x7e>
 8002f9e:	88fb      	ldrh	r3, [r7, #6]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d102      	bne.n	8002faa <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002fa8:	e0e0      	b.n	800316c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2204      	movs	r2, #4
 8002fae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	68ba      	ldr	r2, [r7, #8]
 8002fbc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	88fa      	ldrh	r2, [r7, #6]
 8002fc2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	88fa      	ldrh	r2, [r7, #6]
 8002fca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002ff4:	d908      	bls.n	8003008 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	685a      	ldr	r2, [r3, #4]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003004:	605a      	str	r2, [r3, #4]
 8003006:	e007      	b.n	8003018 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	685a      	ldr	r2, [r3, #4]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003016:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003020:	d10f      	bne.n	8003042 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003030:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003040:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800304c:	2b40      	cmp	r3, #64	; 0x40
 800304e:	d007      	beq.n	8003060 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800305e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003068:	d867      	bhi.n	800313a <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800306a:	e030      	b.n	80030ce <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	2b01      	cmp	r3, #1
 8003078:	d117      	bne.n	80030aa <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f103 020c 	add.w	r2, r3, #12
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003086:	7812      	ldrb	r2, [r2, #0]
 8003088:	b2d2      	uxtb	r2, r2
 800308a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003090:	1c5a      	adds	r2, r3, #1
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800309c:	b29b      	uxth	r3, r3
 800309e:	3b01      	subs	r3, #1
 80030a0:	b29a      	uxth	r2, r3
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80030a8:	e011      	b.n	80030ce <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030aa:	f7fd fec7 	bl	8000e3c <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	683a      	ldr	r2, [r7, #0]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d803      	bhi.n	80030c2 <HAL_SPI_Receive+0x19c>
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c0:	d102      	bne.n	80030c8 <HAL_SPI_Receive+0x1a2>
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d102      	bne.n	80030ce <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	75fb      	strb	r3, [r7, #23]
          goto error;
 80030cc:	e04e      	b.n	800316c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80030d4:	b29b      	uxth	r3, r3
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d1c8      	bne.n	800306c <HAL_SPI_Receive+0x146>
 80030da:	e034      	b.n	8003146 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d115      	bne.n	8003116 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	68da      	ldr	r2, [r3, #12]
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f4:	b292      	uxth	r2, r2
 80030f6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fc:	1c9a      	adds	r2, r3, #2
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003108:	b29b      	uxth	r3, r3
 800310a:	3b01      	subs	r3, #1
 800310c:	b29a      	uxth	r2, r3
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003114:	e011      	b.n	800313a <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003116:	f7fd fe91 	bl	8000e3c <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	693b      	ldr	r3, [r7, #16]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	683a      	ldr	r2, [r7, #0]
 8003122:	429a      	cmp	r2, r3
 8003124:	d803      	bhi.n	800312e <HAL_SPI_Receive+0x208>
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800312c:	d102      	bne.n	8003134 <HAL_SPI_Receive+0x20e>
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d102      	bne.n	800313a <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	75fb      	strb	r3, [r7, #23]
          goto error;
 8003138:	e018      	b.n	800316c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003140:	b29b      	uxth	r3, r3
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1ca      	bne.n	80030dc <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003146:	693a      	ldr	r2, [r7, #16]
 8003148:	6839      	ldr	r1, [r7, #0]
 800314a:	68f8      	ldr	r0, [r7, #12]
 800314c:	f001 f802 	bl	8004154 <SPI_EndRxTransaction>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d002      	beq.n	800315c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2220      	movs	r2, #32
 800315a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003160:	2b00      	cmp	r3, #0
 8003162:	d002      	beq.n	800316a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	75fb      	strb	r3, [r7, #23]
 8003168:	e000      	b.n	800316c <HAL_SPI_Receive+0x246>
  }

error :
 800316a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2200      	movs	r2, #0
 8003178:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800317c:	7dfb      	ldrb	r3, [r7, #23]
}
 800317e:	4618      	mov	r0, r3
 8003180:	3718      	adds	r7, #24
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}

08003186 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003186:	b580      	push	{r7, lr}
 8003188:	b08a      	sub	sp, #40	; 0x28
 800318a:	af00      	add	r7, sp, #0
 800318c:	60f8      	str	r0, [r7, #12]
 800318e:	60b9      	str	r1, [r7, #8]
 8003190:	607a      	str	r2, [r7, #4]
 8003192:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003194:	2301      	movs	r3, #1
 8003196:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003198:	2300      	movs	r3, #0
 800319a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d101      	bne.n	80031ac <HAL_SPI_TransmitReceive+0x26>
 80031a8:	2302      	movs	r3, #2
 80031aa:	e1fb      	b.n	80035a4 <HAL_SPI_TransmitReceive+0x41e>
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031b4:	f7fd fe42 	bl	8000e3c <HAL_GetTick>
 80031b8:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80031c0:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80031c8:	887b      	ldrh	r3, [r7, #2]
 80031ca:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80031cc:	887b      	ldrh	r3, [r7, #2]
 80031ce:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80031d0:	7efb      	ldrb	r3, [r7, #27]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d00e      	beq.n	80031f4 <HAL_SPI_TransmitReceive+0x6e>
 80031d6:	697b      	ldr	r3, [r7, #20]
 80031d8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80031dc:	d106      	bne.n	80031ec <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d102      	bne.n	80031ec <HAL_SPI_TransmitReceive+0x66>
 80031e6:	7efb      	ldrb	r3, [r7, #27]
 80031e8:	2b04      	cmp	r3, #4
 80031ea:	d003      	beq.n	80031f4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80031ec:	2302      	movs	r3, #2
 80031ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80031f2:	e1cd      	b.n	8003590 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d005      	beq.n	8003206 <HAL_SPI_TransmitReceive+0x80>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d002      	beq.n	8003206 <HAL_SPI_TransmitReceive+0x80>
 8003200:	887b      	ldrh	r3, [r7, #2]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d103      	bne.n	800320e <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800320c:	e1c0      	b.n	8003590 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003214:	b2db      	uxtb	r3, r3
 8003216:	2b04      	cmp	r3, #4
 8003218:	d003      	beq.n	8003222 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2205      	movs	r2, #5
 800321e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2200      	movs	r2, #0
 8003226:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	887a      	ldrh	r2, [r7, #2]
 8003232:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	887a      	ldrh	r2, [r7, #2]
 800323a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	68ba      	ldr	r2, [r7, #8]
 8003242:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	887a      	ldrh	r2, [r7, #2]
 8003248:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	887a      	ldrh	r2, [r7, #2]
 800324e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2200      	movs	r2, #0
 8003254:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2200      	movs	r2, #0
 800325a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003264:	d802      	bhi.n	800326c <HAL_SPI_TransmitReceive+0xe6>
 8003266:	8a3b      	ldrh	r3, [r7, #16]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d908      	bls.n	800327e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	685a      	ldr	r2, [r3, #4]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800327a:	605a      	str	r2, [r3, #4]
 800327c:	e007      	b.n	800328e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	685a      	ldr	r2, [r3, #4]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800328c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003298:	2b40      	cmp	r3, #64	; 0x40
 800329a:	d007      	beq.n	80032ac <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032aa:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80032b4:	d97c      	bls.n	80033b0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d002      	beq.n	80032c4 <HAL_SPI_TransmitReceive+0x13e>
 80032be:	8a7b      	ldrh	r3, [r7, #18]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d169      	bne.n	8003398 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032c8:	881a      	ldrh	r2, [r3, #0]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d4:	1c9a      	adds	r2, r3, #2
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032de:	b29b      	uxth	r3, r3
 80032e0:	3b01      	subs	r3, #1
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032e8:	e056      	b.n	8003398 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f003 0302 	and.w	r3, r3, #2
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d11b      	bne.n	8003330 <HAL_SPI_TransmitReceive+0x1aa>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80032fc:	b29b      	uxth	r3, r3
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d016      	beq.n	8003330 <HAL_SPI_TransmitReceive+0x1aa>
 8003302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003304:	2b01      	cmp	r3, #1
 8003306:	d113      	bne.n	8003330 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800330c:	881a      	ldrh	r2, [r3, #0]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003318:	1c9a      	adds	r2, r3, #2
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003322:	b29b      	uxth	r3, r3
 8003324:	3b01      	subs	r3, #1
 8003326:	b29a      	uxth	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800332c:	2300      	movs	r3, #0
 800332e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f003 0301 	and.w	r3, r3, #1
 800333a:	2b01      	cmp	r3, #1
 800333c:	d11c      	bne.n	8003378 <HAL_SPI_TransmitReceive+0x1f2>
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003344:	b29b      	uxth	r3, r3
 8003346:	2b00      	cmp	r3, #0
 8003348:	d016      	beq.n	8003378 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	68da      	ldr	r2, [r3, #12]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003354:	b292      	uxth	r2, r2
 8003356:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335c:	1c9a      	adds	r2, r3, #2
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003368:	b29b      	uxth	r3, r3
 800336a:	3b01      	subs	r3, #1
 800336c:	b29a      	uxth	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003374:	2301      	movs	r3, #1
 8003376:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003378:	f7fd fd60 	bl	8000e3c <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003384:	429a      	cmp	r2, r3
 8003386:	d807      	bhi.n	8003398 <HAL_SPI_TransmitReceive+0x212>
 8003388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800338a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800338e:	d003      	beq.n	8003398 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003396:	e0fb      	b.n	8003590 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800339c:	b29b      	uxth	r3, r3
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1a3      	bne.n	80032ea <HAL_SPI_TransmitReceive+0x164>
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d19d      	bne.n	80032ea <HAL_SPI_TransmitReceive+0x164>
 80033ae:	e0df      	b.n	8003570 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d003      	beq.n	80033c0 <HAL_SPI_TransmitReceive+0x23a>
 80033b8:	8a7b      	ldrh	r3, [r7, #18]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	f040 80cb 	bne.w	8003556 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	d912      	bls.n	80033f0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033ce:	881a      	ldrh	r2, [r3, #0]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033da:	1c9a      	adds	r2, r3, #2
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	3b02      	subs	r3, #2
 80033e8:	b29a      	uxth	r2, r3
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	87da      	strh	r2, [r3, #62]	; 0x3e
 80033ee:	e0b2      	b.n	8003556 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	330c      	adds	r3, #12
 80033fa:	7812      	ldrb	r2, [r2, #0]
 80033fc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003402:	1c5a      	adds	r2, r3, #1
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800340c:	b29b      	uxth	r3, r3
 800340e:	3b01      	subs	r3, #1
 8003410:	b29a      	uxth	r2, r3
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003416:	e09e      	b.n	8003556 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	689b      	ldr	r3, [r3, #8]
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b02      	cmp	r3, #2
 8003424:	d134      	bne.n	8003490 <HAL_SPI_TransmitReceive+0x30a>
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800342a:	b29b      	uxth	r3, r3
 800342c:	2b00      	cmp	r3, #0
 800342e:	d02f      	beq.n	8003490 <HAL_SPI_TransmitReceive+0x30a>
 8003430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003432:	2b01      	cmp	r3, #1
 8003434:	d12c      	bne.n	8003490 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800343a:	b29b      	uxth	r3, r3
 800343c:	2b01      	cmp	r3, #1
 800343e:	d912      	bls.n	8003466 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003444:	881a      	ldrh	r2, [r3, #0]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003450:	1c9a      	adds	r2, r3, #2
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800345a:	b29b      	uxth	r3, r3
 800345c:	3b02      	subs	r3, #2
 800345e:	b29a      	uxth	r2, r3
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003464:	e012      	b.n	800348c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	330c      	adds	r3, #12
 8003470:	7812      	ldrb	r2, [r2, #0]
 8003472:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003478:	1c5a      	adds	r2, r3, #1
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003482:	b29b      	uxth	r3, r3
 8003484:	3b01      	subs	r3, #1
 8003486:	b29a      	uxth	r2, r3
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800348c:	2300      	movs	r3, #0
 800348e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	2b01      	cmp	r3, #1
 800349c:	d148      	bne.n	8003530 <HAL_SPI_TransmitReceive+0x3aa>
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d042      	beq.n	8003530 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d923      	bls.n	80034fe <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68da      	ldr	r2, [r3, #12]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c0:	b292      	uxth	r2, r2
 80034c2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c8:	1c9a      	adds	r2, r3, #2
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	3b02      	subs	r3, #2
 80034d8:	b29a      	uxth	r2, r3
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d81f      	bhi.n	800352c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	685a      	ldr	r2, [r3, #4]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80034fa:	605a      	str	r2, [r3, #4]
 80034fc:	e016      	b.n	800352c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f103 020c 	add.w	r2, r3, #12
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350a:	7812      	ldrb	r2, [r2, #0]
 800350c:	b2d2      	uxtb	r2, r2
 800350e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003514:	1c5a      	adds	r2, r3, #1
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003520:	b29b      	uxth	r3, r3
 8003522:	3b01      	subs	r3, #1
 8003524:	b29a      	uxth	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800352c:	2301      	movs	r3, #1
 800352e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003530:	f7fd fc84 	bl	8000e3c <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800353c:	429a      	cmp	r2, r3
 800353e:	d803      	bhi.n	8003548 <HAL_SPI_TransmitReceive+0x3c2>
 8003540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003546:	d102      	bne.n	800354e <HAL_SPI_TransmitReceive+0x3c8>
 8003548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800354a:	2b00      	cmp	r3, #0
 800354c:	d103      	bne.n	8003556 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003554:	e01c      	b.n	8003590 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800355a:	b29b      	uxth	r3, r3
 800355c:	2b00      	cmp	r3, #0
 800355e:	f47f af5b 	bne.w	8003418 <HAL_SPI_TransmitReceive+0x292>
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003568:	b29b      	uxth	r3, r3
 800356a:	2b00      	cmp	r3, #0
 800356c:	f47f af54 	bne.w	8003418 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003570:	69fa      	ldr	r2, [r7, #28]
 8003572:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003574:	68f8      	ldr	r0, [r7, #12]
 8003576:	f000 fe45 	bl	8004204 <SPI_EndRxTxTransaction>
 800357a:	4603      	mov	r3, r0
 800357c:	2b00      	cmp	r3, #0
 800357e:	d006      	beq.n	800358e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2220      	movs	r2, #32
 800358a:	661a      	str	r2, [r3, #96]	; 0x60
 800358c:	e000      	b.n	8003590 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800358e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2200      	movs	r2, #0
 800359c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80035a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3728      	adds	r7, #40	; 0x28
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b087      	sub	sp, #28
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	4613      	mov	r3, r2
 80035b8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80035ba:	2300      	movs	r3, #0
 80035bc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d101      	bne.n	80035cc <HAL_SPI_Transmit_IT+0x20>
 80035c8:	2302      	movs	r3, #2
 80035ca:	e072      	b.n	80036b2 <HAL_SPI_Transmit_IT+0x106>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2201      	movs	r2, #1
 80035d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d002      	beq.n	80035e0 <HAL_SPI_Transmit_IT+0x34>
 80035da:	88fb      	ldrh	r3, [r7, #6]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d102      	bne.n	80035e6 <HAL_SPI_Transmit_IT+0x3a>
  {
    errorcode = HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80035e4:	e060      	b.n	80036a8 <HAL_SPI_Transmit_IT+0xfc>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d002      	beq.n	80035f8 <HAL_SPI_Transmit_IT+0x4c>
  {
    errorcode = HAL_BUSY;
 80035f2:	2302      	movs	r3, #2
 80035f4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80035f6:	e057      	b.n	80036a8 <HAL_SPI_Transmit_IT+0xfc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2203      	movs	r2, #3
 80035fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	68ba      	ldr	r2, [r7, #8]
 800360a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	88fa      	ldrh	r2, [r7, #6]
 8003610:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	88fa      	ldrh	r2, [r7, #6]
 8003616:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2200      	movs	r2, #0
 8003622:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2200      	movs	r2, #0
 800362a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2200      	movs	r2, #0
 8003632:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800363c:	d903      	bls.n	8003646 <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	4a1f      	ldr	r2, [pc, #124]	; (80036c0 <HAL_SPI_Transmit_IT+0x114>)
 8003642:	651a      	str	r2, [r3, #80]	; 0x50
 8003644:	e002      	b.n	800364c <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	4a1e      	ldr	r2, [pc, #120]	; (80036c4 <HAL_SPI_Transmit_IT+0x118>)
 800364a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003654:	d10f      	bne.n	8003676 <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003664:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003674:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	685a      	ldr	r2, [r3, #4]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 8003684:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003690:	2b40      	cmp	r3, #64	; 0x40
 8003692:	d008      	beq.n	80036a6 <HAL_SPI_Transmit_IT+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036a2:	601a      	str	r2, [r3, #0]
 80036a4:	e000      	b.n	80036a8 <HAL_SPI_Transmit_IT+0xfc>
  }

error :
 80036a6:	bf00      	nop
  __HAL_UNLOCK(hspi);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80036b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	371c      	adds	r7, #28
 80036b6:	46bd      	mov	sp, r7
 80036b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036bc:	4770      	bx	lr
 80036be:	bf00      	nop
 80036c0:	08003ed3 	.word	0x08003ed3
 80036c4:	08003e8d 	.word	0x08003e8d

080036c8 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b086      	sub	sp, #24
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	4613      	mov	r3, r2
 80036d4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80036d6:	2300      	movs	r3, #0
 80036d8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d110      	bne.n	8003704 <HAL_SPI_Receive_IT+0x3c>
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036ea:	d10b      	bne.n	8003704 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2204      	movs	r2, #4
 80036f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 80036f4:	88fb      	ldrh	r3, [r7, #6]
 80036f6:	68ba      	ldr	r2, [r7, #8]
 80036f8:	68b9      	ldr	r1, [r7, #8]
 80036fa:	68f8      	ldr	r0, [r7, #12]
 80036fc:	f000 f894 	bl	8003828 <HAL_SPI_TransmitReceive_IT>
 8003700:	4603      	mov	r3, r0
 8003702:	e089      	b.n	8003818 <HAL_SPI_Receive_IT+0x150>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800370a:	2b01      	cmp	r3, #1
 800370c:	d101      	bne.n	8003712 <HAL_SPI_Receive_IT+0x4a>
 800370e:	2302      	movs	r3, #2
 8003710:	e082      	b.n	8003818 <HAL_SPI_Receive_IT+0x150>
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2201      	movs	r2, #1
 8003716:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003720:	b2db      	uxtb	r3, r3
 8003722:	2b01      	cmp	r3, #1
 8003724:	d002      	beq.n	800372c <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8003726:	2302      	movs	r3, #2
 8003728:	75fb      	strb	r3, [r7, #23]
    goto error;
 800372a:	e070      	b.n	800380e <HAL_SPI_Receive_IT+0x146>
  }

  if ((pData == NULL) || (Size == 0U))
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d002      	beq.n	8003738 <HAL_SPI_Receive_IT+0x70>
 8003732:	88fb      	ldrh	r3, [r7, #6]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d102      	bne.n	800373e <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800373c:	e067      	b.n	800380e <HAL_SPI_Receive_IT+0x146>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2204      	movs	r2, #4
 8003742:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2200      	movs	r2, #0
 800374a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	68ba      	ldr	r2, [r7, #8]
 8003750:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	88fa      	ldrh	r2, [r7, #6]
 8003756:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	88fa      	ldrh	r2, [r7, #6]
 800375e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2200      	movs	r2, #0
 8003766:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2200      	movs	r2, #0
 8003772:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2200      	movs	r2, #0
 8003778:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003782:	d90b      	bls.n	800379c <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	685a      	ldr	r2, [r3, #4]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003792:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	4a22      	ldr	r2, [pc, #136]	; (8003820 <HAL_SPI_Receive_IT+0x158>)
 8003798:	64da      	str	r2, [r3, #76]	; 0x4c
 800379a:	e00a      	b.n	80037b2 <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	685a      	ldr	r2, [r3, #4]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80037aa:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	4a1d      	ldr	r2, [pc, #116]	; (8003824 <HAL_SPI_Receive_IT+0x15c>)
 80037b0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037ba:	d10f      	bne.n	80037dc <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037ca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80037da:	601a      	str	r2, [r3, #0]
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	685a      	ldr	r2, [r3, #4]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80037ea:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f6:	2b40      	cmp	r3, #64	; 0x40
 80037f8:	d008      	beq.n	800380c <HAL_SPI_Receive_IT+0x144>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003808:	601a      	str	r2, [r3, #0]
 800380a:	e000      	b.n	800380e <HAL_SPI_Receive_IT+0x146>
  }

error :
 800380c:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003816:	7dfb      	ldrb	r3, [r7, #23]
}
 8003818:	4618      	mov	r0, r3
 800381a:	3718      	adds	r7, #24
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	08003e41 	.word	0x08003e41
 8003824:	08003df1 	.word	0x08003df1

08003828 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8003828:	b480      	push	{r7}
 800382a:	b087      	sub	sp, #28
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
 8003834:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003836:	2300      	movs	r3, #0
 8003838:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003840:	2b01      	cmp	r3, #1
 8003842:	d101      	bne.n	8003848 <HAL_SPI_TransmitReceive_IT+0x20>
 8003844:	2302      	movs	r3, #2
 8003846:	e091      	b.n	800396c <HAL_SPI_TransmitReceive_IT+0x144>
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2201      	movs	r2, #1
 800384c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003856:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800385e:	7dbb      	ldrb	r3, [r7, #22]
 8003860:	2b01      	cmp	r3, #1
 8003862:	d00d      	beq.n	8003880 <HAL_SPI_TransmitReceive_IT+0x58>
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800386a:	d106      	bne.n	800387a <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d102      	bne.n	800387a <HAL_SPI_TransmitReceive_IT+0x52>
 8003874:	7dbb      	ldrb	r3, [r7, #22]
 8003876:	2b04      	cmp	r3, #4
 8003878:	d002      	beq.n	8003880 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 800387a:	2302      	movs	r3, #2
 800387c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800387e:	e070      	b.n	8003962 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d005      	beq.n	8003892 <HAL_SPI_TransmitReceive_IT+0x6a>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d002      	beq.n	8003892 <HAL_SPI_TransmitReceive_IT+0x6a>
 800388c:	887b      	ldrh	r3, [r7, #2]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d102      	bne.n	8003898 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003896:	e064      	b.n	8003962 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	2b04      	cmp	r3, #4
 80038a2:	d003      	beq.n	80038ac <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2205      	movs	r2, #5
 80038a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2200      	movs	r2, #0
 80038b0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	68ba      	ldr	r2, [r7, #8]
 80038b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	887a      	ldrh	r2, [r7, #2]
 80038bc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	887a      	ldrh	r2, [r7, #2]
 80038c2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	887a      	ldrh	r2, [r7, #2]
 80038ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	887a      	ldrh	r2, [r7, #2]
 80038d6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	68db      	ldr	r3, [r3, #12]
 80038de:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80038e2:	d906      	bls.n	80038f2 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	4a24      	ldr	r2, [pc, #144]	; (8003978 <HAL_SPI_TransmitReceive_IT+0x150>)
 80038e8:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	4a23      	ldr	r2, [pc, #140]	; (800397c <HAL_SPI_TransmitReceive_IT+0x154>)
 80038ee:	651a      	str	r2, [r3, #80]	; 0x50
 80038f0:	e005      	b.n	80038fe <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	4a22      	ldr	r2, [pc, #136]	; (8003980 <HAL_SPI_TransmitReceive_IT+0x158>)
 80038f6:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	4a22      	ldr	r2, [pc, #136]	; (8003984 <HAL_SPI_TransmitReceive_IT+0x15c>)
 80038fc:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003906:	d802      	bhi.n	800390e <HAL_SPI_TransmitReceive_IT+0xe6>
 8003908:	887b      	ldrh	r3, [r7, #2]
 800390a:	2b01      	cmp	r3, #1
 800390c:	d908      	bls.n	8003920 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	685a      	ldr	r2, [r3, #4]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800391c:	605a      	str	r2, [r3, #4]
 800391e:	e007      	b.n	8003930 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	685a      	ldr	r2, [r3, #4]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800392e:	605a      	str	r2, [r3, #4]
  }

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	685a      	ldr	r2, [r3, #4]
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 800393e:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800394a:	2b40      	cmp	r3, #64	; 0x40
 800394c:	d008      	beq.n	8003960 <HAL_SPI_TransmitReceive_IT+0x138>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800395c:	601a      	str	r2, [r3, #0]
 800395e:	e000      	b.n	8003962 <HAL_SPI_TransmitReceive_IT+0x13a>
  }

error :
 8003960:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800396a:	7dfb      	ldrb	r3, [r7, #23]
}
 800396c:	4618      	mov	r0, r3
 800396e:	371c      	adds	r7, #28
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr
 8003978:	08003d2b 	.word	0x08003d2b
 800397c:	08003d91 	.word	0x08003d91
 8003980:	08003bdb 	.word	0x08003bdb
 8003984:	08003c99 	.word	0x08003c99

08003988 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b088      	sub	sp, #32
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	689b      	ldr	r3, [r3, #8]
 800399e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80039a0:	69bb      	ldr	r3, [r7, #24]
 80039a2:	099b      	lsrs	r3, r3, #6
 80039a4:	f003 0301 	and.w	r3, r3, #1
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d10f      	bne.n	80039cc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00a      	beq.n	80039cc <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	099b      	lsrs	r3, r3, #6
 80039ba:	f003 0301 	and.w	r3, r3, #1
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d004      	beq.n	80039cc <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	4798      	blx	r3
    return;
 80039ca:	e0d7      	b.n	8003b7c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	085b      	lsrs	r3, r3, #1
 80039d0:	f003 0301 	and.w	r3, r3, #1
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d00a      	beq.n	80039ee <HAL_SPI_IRQHandler+0x66>
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	09db      	lsrs	r3, r3, #7
 80039dc:	f003 0301 	and.w	r3, r3, #1
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d004      	beq.n	80039ee <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	4798      	blx	r3
    return;
 80039ec:	e0c6      	b.n	8003b7c <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80039ee:	69bb      	ldr	r3, [r7, #24]
 80039f0:	095b      	lsrs	r3, r3, #5
 80039f2:	f003 0301 	and.w	r3, r3, #1
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d10c      	bne.n	8003a14 <HAL_SPI_IRQHandler+0x8c>
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	099b      	lsrs	r3, r3, #6
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d106      	bne.n	8003a14 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	0a1b      	lsrs	r3, r3, #8
 8003a0a:	f003 0301 	and.w	r3, r3, #1
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	f000 80b4 	beq.w	8003b7c <HAL_SPI_IRQHandler+0x1f4>
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	095b      	lsrs	r3, r3, #5
 8003a18:	f003 0301 	and.w	r3, r3, #1
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	f000 80ad 	beq.w	8003b7c <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	099b      	lsrs	r3, r3, #6
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d023      	beq.n	8003a76 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003a34:	b2db      	uxtb	r3, r3
 8003a36:	2b03      	cmp	r3, #3
 8003a38:	d011      	beq.n	8003a5e <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a3e:	f043 0204 	orr.w	r2, r3, #4
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a46:	2300      	movs	r3, #0
 8003a48:	617b      	str	r3, [r7, #20]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	617b      	str	r3, [r7, #20]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	617b      	str	r3, [r7, #20]
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	e00b      	b.n	8003a76 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a5e:	2300      	movs	r3, #0
 8003a60:	613b      	str	r3, [r7, #16]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	613b      	str	r3, [r7, #16]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	613b      	str	r3, [r7, #16]
 8003a72:	693b      	ldr	r3, [r7, #16]
        return;
 8003a74:	e082      	b.n	8003b7c <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	095b      	lsrs	r3, r3, #5
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d014      	beq.n	8003aac <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a86:	f043 0201 	orr.w	r2, r3, #1
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003a8e:	2300      	movs	r3, #0
 8003a90:	60fb      	str	r3, [r7, #12]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	60fb      	str	r3, [r7, #12]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	681a      	ldr	r2, [r3, #0]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003aa8:	601a      	str	r2, [r3, #0]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	0a1b      	lsrs	r3, r3, #8
 8003ab0:	f003 0301 	and.w	r3, r3, #1
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d00c      	beq.n	8003ad2 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003abc:	f043 0208 	orr.w	r2, r3, #8
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	60bb      	str	r3, [r7, #8]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	60bb      	str	r3, [r7, #8]
 8003ad0:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d04f      	beq.n	8003b7a <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	685a      	ldr	r2, [r3, #4]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003ae8:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2201      	movs	r2, #1
 8003aee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003af2:	69fb      	ldr	r3, [r7, #28]
 8003af4:	f003 0302 	and.w	r3, r3, #2
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d104      	bne.n	8003b06 <HAL_SPI_IRQHandler+0x17e>
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d034      	beq.n	8003b70 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	685a      	ldr	r2, [r3, #4]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f022 0203 	bic.w	r2, r2, #3
 8003b14:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d011      	beq.n	8003b42 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b22:	4a18      	ldr	r2, [pc, #96]	; (8003b84 <HAL_SPI_IRQHandler+0x1fc>)
 8003b24:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f7fd fac7 	bl	80010be <HAL_DMA_Abort_IT>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d005      	beq.n	8003b42 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b3a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d016      	beq.n	8003b78 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b4e:	4a0d      	ldr	r2, [pc, #52]	; (8003b84 <HAL_SPI_IRQHandler+0x1fc>)
 8003b50:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b56:	4618      	mov	r0, r3
 8003b58:	f7fd fab1 	bl	80010be <HAL_DMA_Abort_IT>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00a      	beq.n	8003b78 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b66:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8003b6e:	e003      	b.n	8003b78 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f000 f813 	bl	8003b9c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003b76:	e000      	b.n	8003b7a <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003b78:	bf00      	nop
    return;
 8003b7a:	bf00      	nop
  }
}
 8003b7c:	3720      	adds	r7, #32
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	08003bb1 	.word	0x08003bb1

08003b88 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8003b90:	bf00      	nop
 8003b92:	370c      	adds	r7, #12
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr

08003b9c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b084      	sub	sp, #16
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bbc:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003bcc:	68f8      	ldr	r0, [r7, #12]
 8003bce:	f7ff ffe5 	bl	8003b9c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003bd2:	bf00      	nop
 8003bd4:	3710      	adds	r7, #16
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b082      	sub	sp, #8
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d923      	bls.n	8003c36 <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68da      	ldr	r2, [r3, #12]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bf8:	b292      	uxth	r2, r2
 8003bfa:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c00:	1c9a      	adds	r2, r3, #2
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	3b02      	subs	r3, #2
 8003c10:	b29a      	uxth	r2, r3
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d11f      	bne.n	8003c64 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	685a      	ldr	r2, [r3, #4]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003c32:	605a      	str	r2, [r3, #4]
 8003c34:	e016      	b.n	8003c64 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f103 020c 	add.w	r2, r3, #12
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c42:	7812      	ldrb	r2, [r2, #0]
 8003c44:	b2d2      	uxtb	r2, r2
 8003c46:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4c:	1c5a      	adds	r2, r3, #1
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	b29a      	uxth	r2, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d10f      	bne.n	8003c90 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	685a      	ldr	r2, [r3, #4]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c7e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c84:	b29b      	uxth	r3, r3
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d102      	bne.n	8003c90 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 fb00 	bl	8004290 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003c90:	bf00      	nop
 8003c92:	3708      	adds	r7, #8
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b082      	sub	sp, #8
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ca4:	b29b      	uxth	r3, r3
 8003ca6:	2b01      	cmp	r3, #1
 8003ca8:	d912      	bls.n	8003cd0 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cae:	881a      	ldrh	r2, [r3, #0]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cba:	1c9a      	adds	r2, r3, #2
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	3b02      	subs	r3, #2
 8003cc8:	b29a      	uxth	r2, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003cce:	e012      	b.n	8003cf6 <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	330c      	adds	r3, #12
 8003cda:	7812      	ldrb	r2, [r2, #0]
 8003cdc:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce2:	1c5a      	adds	r2, r3, #1
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cec:	b29b      	uxth	r3, r3
 8003cee:	3b01      	subs	r3, #1
 8003cf0:	b29a      	uxth	r2, r3
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d110      	bne.n	8003d22 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	685a      	ldr	r2, [r3, #4]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003d0e:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003d16:	b29b      	uxth	r3, r3
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d102      	bne.n	8003d22 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f000 fab7 	bl	8004290 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003d22:	bf00      	nop
 8003d24:	3708      	adds	r7, #8
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}

08003d2a <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003d2a:	b580      	push	{r7, lr}
 8003d2c:	b082      	sub	sp, #8
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	68da      	ldr	r2, [r3, #12]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3c:	b292      	uxth	r2, r2
 8003d3e:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d44:	1c9a      	adds	r2, r3, #2
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003d50:	b29b      	uxth	r3, r3
 8003d52:	3b01      	subs	r3, #1
 8003d54:	b29a      	uxth	r2, r3
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d10f      	bne.n	8003d88 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	685a      	ldr	r2, [r3, #4]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d76:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d102      	bne.n	8003d88 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f000 fa84 	bl	8004290 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003d88:	bf00      	nop
 8003d8a:	3708      	adds	r7, #8
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}

08003d90 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d9c:	881a      	ldrh	r2, [r3, #0]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da8:	1c9a      	adds	r2, r3, #2
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	3b01      	subs	r3, #1
 8003db6:	b29a      	uxth	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d110      	bne.n	8003de8 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	685a      	ldr	r2, [r3, #4]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003dd4:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d102      	bne.n	8003de8 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 fa54 	bl	8004290 <SPI_CloseRxTx_ISR>
    }
  }
}
 8003de8:	bf00      	nop
 8003dea:	3708      	adds	r7, #8
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f103 020c 	add.w	r2, r3, #12
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e04:	7812      	ldrb	r2, [r2, #0]
 8003e06:	b2d2      	uxtb	r2, r2
 8003e08:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0e:	1c5a      	adds	r2, r3, #1
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e1a:	b29b      	uxth	r3, r3
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d102      	bne.n	8003e38 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 fa6e 	bl	8004314 <SPI_CloseRx_ISR>
  }
}
 8003e38:	bf00      	nop
 8003e3a:	3708      	adds	r7, #8
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bd80      	pop	{r7, pc}

08003e40 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	68da      	ldr	r2, [r3, #12]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e52:	b292      	uxth	r2, r2
 8003e54:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5a:	1c9a      	adds	r2, r3, #2
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e66:	b29b      	uxth	r3, r3
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	b29a      	uxth	r2, r3
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d102      	bne.n	8003e84 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f000 fa48 	bl	8004314 <SPI_CloseRx_ISR>
  }
}
 8003e84:	bf00      	nop
 8003e86:	3708      	adds	r7, #8
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	330c      	adds	r3, #12
 8003e9e:	7812      	ldrb	r2, [r2, #0]
 8003ea0:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea6:	1c5a      	adds	r2, r3, #1
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	3b01      	subs	r3, #1
 8003eb4:	b29a      	uxth	r2, r3
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ebe:	b29b      	uxth	r3, r3
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d102      	bne.n	8003eca <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f000 fa55 	bl	8004374 <SPI_CloseTx_ISR>
  }
}
 8003eca:	bf00      	nop
 8003ecc:	3708      	adds	r7, #8
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}

08003ed2 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8003ed2:	b580      	push	{r7, lr}
 8003ed4:	b082      	sub	sp, #8
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ede:	881a      	ldrh	r2, [r3, #0]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eea:	1c9a      	adds	r2, r3, #2
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ef4:	b29b      	uxth	r3, r3
 8003ef6:	3b01      	subs	r3, #1
 8003ef8:	b29a      	uxth	r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d102      	bne.n	8003f0e <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f000 fa33 	bl	8004374 <SPI_CloseTx_ISR>
  }
}
 8003f0e:	bf00      	nop
 8003f10:	3708      	adds	r7, #8
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
	...

08003f18 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b088      	sub	sp, #32
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	603b      	str	r3, [r7, #0]
 8003f24:	4613      	mov	r3, r2
 8003f26:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003f28:	f7fc ff88 	bl	8000e3c <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f30:	1a9b      	subs	r3, r3, r2
 8003f32:	683a      	ldr	r2, [r7, #0]
 8003f34:	4413      	add	r3, r2
 8003f36:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003f38:	f7fc ff80 	bl	8000e3c <HAL_GetTick>
 8003f3c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003f3e:	4b39      	ldr	r3, [pc, #228]	; (8004024 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	015b      	lsls	r3, r3, #5
 8003f44:	0d1b      	lsrs	r3, r3, #20
 8003f46:	69fa      	ldr	r2, [r7, #28]
 8003f48:	fb02 f303 	mul.w	r3, r2, r3
 8003f4c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f4e:	e054      	b.n	8003ffa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f56:	d050      	beq.n	8003ffa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f58:	f7fc ff70 	bl	8000e3c <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	69bb      	ldr	r3, [r7, #24]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	69fa      	ldr	r2, [r7, #28]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d902      	bls.n	8003f6e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d13d      	bne.n	8003fea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	685a      	ldr	r2, [r3, #4]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003f7c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f86:	d111      	bne.n	8003fac <SPI_WaitFlagStateUntilTimeout+0x94>
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	689b      	ldr	r3, [r3, #8]
 8003f8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f90:	d004      	beq.n	8003f9c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f9a:	d107      	bne.n	8003fac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003faa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fb4:	d10f      	bne.n	8003fd6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fc4:	601a      	str	r2, [r3, #0]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fd4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003fe6:	2303      	movs	r3, #3
 8003fe8:	e017      	b.n	800401a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d101      	bne.n	8003ff4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	689a      	ldr	r2, [r3, #8]
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	4013      	ands	r3, r2
 8004004:	68ba      	ldr	r2, [r7, #8]
 8004006:	429a      	cmp	r2, r3
 8004008:	bf0c      	ite	eq
 800400a:	2301      	moveq	r3, #1
 800400c:	2300      	movne	r3, #0
 800400e:	b2db      	uxtb	r3, r3
 8004010:	461a      	mov	r2, r3
 8004012:	79fb      	ldrb	r3, [r7, #7]
 8004014:	429a      	cmp	r2, r3
 8004016:	d19b      	bne.n	8003f50 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3720      	adds	r7, #32
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	20000000 	.word	0x20000000

08004028 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b08a      	sub	sp, #40	; 0x28
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
 8004034:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004036:	2300      	movs	r3, #0
 8004038:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800403a:	f7fc feff 	bl	8000e3c <HAL_GetTick>
 800403e:	4602      	mov	r2, r0
 8004040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004042:	1a9b      	subs	r3, r3, r2
 8004044:	683a      	ldr	r2, [r7, #0]
 8004046:	4413      	add	r3, r2
 8004048:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800404a:	f7fc fef7 	bl	8000e3c <HAL_GetTick>
 800404e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	330c      	adds	r3, #12
 8004056:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004058:	4b3d      	ldr	r3, [pc, #244]	; (8004150 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	4613      	mov	r3, r2
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	4413      	add	r3, r2
 8004062:	00da      	lsls	r2, r3, #3
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	0d1b      	lsrs	r3, r3, #20
 8004068:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800406a:	fb02 f303 	mul.w	r3, r2, r3
 800406e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004070:	e060      	b.n	8004134 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004078:	d107      	bne.n	800408a <SPI_WaitFifoStateUntilTimeout+0x62>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d104      	bne.n	800408a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	b2db      	uxtb	r3, r3
 8004086:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004088:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004090:	d050      	beq.n	8004134 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004092:	f7fc fed3 	bl	8000e3c <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	6a3b      	ldr	r3, [r7, #32]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800409e:	429a      	cmp	r2, r3
 80040a0:	d902      	bls.n	80040a8 <SPI_WaitFifoStateUntilTimeout+0x80>
 80040a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d13d      	bne.n	8004124 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	685a      	ldr	r2, [r3, #4]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80040b6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80040c0:	d111      	bne.n	80040e6 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040ca:	d004      	beq.n	80040d6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040d4:	d107      	bne.n	80040e6 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80040e4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80040ee:	d10f      	bne.n	8004110 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681a      	ldr	r2, [r3, #0]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040fe:	601a      	str	r2, [r3, #0]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800410e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2201      	movs	r2, #1
 8004114:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2200      	movs	r2, #0
 800411c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004120:	2303      	movs	r3, #3
 8004122:	e010      	b.n	8004146 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d101      	bne.n	800412e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800412a:	2300      	movs	r3, #0
 800412c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800412e:	69bb      	ldr	r3, [r7, #24]
 8004130:	3b01      	subs	r3, #1
 8004132:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	689a      	ldr	r2, [r3, #8]
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	4013      	ands	r3, r2
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	429a      	cmp	r2, r3
 8004142:	d196      	bne.n	8004072 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004144:	2300      	movs	r3, #0
}
 8004146:	4618      	mov	r0, r3
 8004148:	3728      	adds	r7, #40	; 0x28
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	20000000 	.word	0x20000000

08004154 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b086      	sub	sp, #24
 8004158:	af02      	add	r7, sp, #8
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004168:	d111      	bne.n	800418e <SPI_EndRxTransaction+0x3a>
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004172:	d004      	beq.n	800417e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	689b      	ldr	r3, [r3, #8]
 8004178:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800417c:	d107      	bne.n	800418e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800418c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	9300      	str	r3, [sp, #0]
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	2200      	movs	r2, #0
 8004196:	2180      	movs	r1, #128	; 0x80
 8004198:	68f8      	ldr	r0, [r7, #12]
 800419a:	f7ff febd 	bl	8003f18 <SPI_WaitFlagStateUntilTimeout>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d007      	beq.n	80041b4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041a8:	f043 0220 	orr.w	r2, r3, #32
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	e023      	b.n	80041fc <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80041bc:	d11d      	bne.n	80041fa <SPI_EndRxTransaction+0xa6>
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	689b      	ldr	r3, [r3, #8]
 80041c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041c6:	d004      	beq.n	80041d2 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041d0:	d113      	bne.n	80041fa <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	9300      	str	r3, [sp, #0]
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	2200      	movs	r2, #0
 80041da:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80041de:	68f8      	ldr	r0, [r7, #12]
 80041e0:	f7ff ff22 	bl	8004028 <SPI_WaitFifoStateUntilTimeout>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d007      	beq.n	80041fa <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041ee:	f043 0220 	orr.w	r2, r3, #32
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e000      	b.n	80041fc <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80041fa:	2300      	movs	r3, #0
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3710      	adds	r7, #16
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}

08004204 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b086      	sub	sp, #24
 8004208:	af02      	add	r7, sp, #8
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	9300      	str	r3, [sp, #0]
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	2200      	movs	r2, #0
 8004218:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	f7ff ff03 	bl	8004028 <SPI_WaitFifoStateUntilTimeout>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d007      	beq.n	8004238 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800422c:	f043 0220 	orr.w	r2, r3, #32
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	e027      	b.n	8004288 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	9300      	str	r3, [sp, #0]
 800423c:	68bb      	ldr	r3, [r7, #8]
 800423e:	2200      	movs	r2, #0
 8004240:	2180      	movs	r1, #128	; 0x80
 8004242:	68f8      	ldr	r0, [r7, #12]
 8004244:	f7ff fe68 	bl	8003f18 <SPI_WaitFlagStateUntilTimeout>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d007      	beq.n	800425e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004252:	f043 0220 	orr.w	r2, r3, #32
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e014      	b.n	8004288 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	9300      	str	r3, [sp, #0]
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	2200      	movs	r2, #0
 8004266:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800426a:	68f8      	ldr	r0, [r7, #12]
 800426c:	f7ff fedc 	bl	8004028 <SPI_WaitFifoStateUntilTimeout>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d007      	beq.n	8004286 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800427a:	f043 0220 	orr.w	r2, r3, #32
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e000      	b.n	8004288 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8004286:	2300      	movs	r3, #0
}
 8004288:	4618      	mov	r0, r3
 800428a:	3710      	adds	r7, #16
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b084      	sub	sp, #16
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004298:	f7fc fdd0 	bl	8000e3c <HAL_GetTick>
 800429c:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	685a      	ldr	r2, [r3, #4]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f022 0220 	bic.w	r2, r2, #32
 80042ac:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80042ae:	68fa      	ldr	r2, [r7, #12]
 80042b0:	2164      	movs	r1, #100	; 0x64
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f7ff ffa6 	bl	8004204 <SPI_EndRxTxTransaction>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d005      	beq.n	80042ca <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042c2:	f043 0220 	orr.w	r2, r3, #32
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d115      	bne.n	80042fe <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	2b04      	cmp	r3, #4
 80042dc:	d107      	bne.n	80042ee <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2201      	movs	r2, #1
 80042e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f7fc fbae 	bl	8000a48 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80042ec:	e00e      	b.n	800430c <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2201      	movs	r2, #1
 80042f2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f7ff fc46 	bl	8003b88 <HAL_SPI_TxRxCpltCallback>
}
 80042fc:	e006      	b.n	800430c <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2201      	movs	r2, #1
 8004302:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 8004306:	6878      	ldr	r0, [r7, #4]
 8004308:	f7ff fc48 	bl	8003b9c <HAL_SPI_ErrorCallback>
}
 800430c:	bf00      	nop
 800430e:	3710      	adds	r7, #16
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b082      	sub	sp, #8
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	685a      	ldr	r2, [r3, #4]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800432a:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800432c:	f7fc fd86 	bl	8000e3c <HAL_GetTick>
 8004330:	4603      	mov	r3, r0
 8004332:	461a      	mov	r2, r3
 8004334:	2164      	movs	r1, #100	; 0x64
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f7ff ff0c 	bl	8004154 <SPI_EndRxTransaction>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d005      	beq.n	800434e <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004346:	f043 0220 	orr.w	r2, r3, #32
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2201      	movs	r2, #1
 8004352:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800435a:	2b00      	cmp	r3, #0
 800435c:	d103      	bne.n	8004366 <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f7fc fb72 	bl	8000a48 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8004364:	e002      	b.n	800436c <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 8004366:	6878      	ldr	r0, [r7, #4]
 8004368:	f7ff fc18 	bl	8003b9c <HAL_SPI_ErrorCallback>
}
 800436c:	bf00      	nop
 800436e:	3708      	adds	r7, #8
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}

08004374 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800437c:	f7fc fd5e 	bl	8000e3c <HAL_GetTick>
 8004380:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	685a      	ldr	r2, [r3, #4]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004390:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004392:	68fa      	ldr	r2, [r7, #12]
 8004394:	2164      	movs	r1, #100	; 0x64
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f7ff ff34 	bl	8004204 <SPI_EndRxTxTransaction>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d005      	beq.n	80043ae <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043a6:	f043 0220 	orr.w	r2, r3, #32
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d10a      	bne.n	80043cc <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80043b6:	2300      	movs	r3, #0
 80043b8:	60bb      	str	r3, [r7, #8]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68db      	ldr	r3, [r3, #12]
 80043c0:	60bb      	str	r3, [r7, #8]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	60bb      	str	r3, [r7, #8]
 80043ca:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d003      	beq.n	80043e4 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f7ff fbdd 	bl	8003b9c <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80043e2:	e002      	b.n	80043ea <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f7fc fb1b 	bl	8000a20 <HAL_SPI_TxCpltCallback>
}
 80043ea:	bf00      	nop
 80043ec:	3710      	adds	r7, #16
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}

080043f2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043f2:	b580      	push	{r7, lr}
 80043f4:	b082      	sub	sp, #8
 80043f6:	af00      	add	r7, sp, #0
 80043f8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d101      	bne.n	8004404 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e040      	b.n	8004486 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004408:	2b00      	cmp	r3, #0
 800440a:	d106      	bne.n	800441a <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f7fc fb9f 	bl	8000b58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2224      	movs	r2, #36	; 0x24
 800441e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f022 0201 	bic.w	r2, r2, #1
 800442e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f000 f8c1 	bl	80045b8 <UART_SetConfig>
 8004436:	4603      	mov	r3, r0
 8004438:	2b01      	cmp	r3, #1
 800443a:	d101      	bne.n	8004440 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e022      	b.n	8004486 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004444:	2b00      	cmp	r3, #0
 8004446:	d002      	beq.n	800444e <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	f000 fb6d 	bl	8004b28 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	685a      	ldr	r2, [r3, #4]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800445c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	689a      	ldr	r2, [r3, #8]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800446c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f042 0201 	orr.w	r2, r2, #1
 800447c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 fbf4 	bl	8004c6c <UART_CheckIdleState>
 8004484:	4603      	mov	r3, r0
}
 8004486:	4618      	mov	r0, r3
 8004488:	3708      	adds	r7, #8
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}

0800448e <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800448e:	b580      	push	{r7, lr}
 8004490:	b08a      	sub	sp, #40	; 0x28
 8004492:	af02      	add	r7, sp, #8
 8004494:	60f8      	str	r0, [r7, #12]
 8004496:	60b9      	str	r1, [r7, #8]
 8004498:	603b      	str	r3, [r7, #0]
 800449a:	4613      	mov	r3, r2
 800449c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044a2:	2b20      	cmp	r3, #32
 80044a4:	f040 8082 	bne.w	80045ac <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d002      	beq.n	80044b4 <HAL_UART_Transmit+0x26>
 80044ae:	88fb      	ldrh	r3, [r7, #6]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d101      	bne.n	80044b8 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	e07a      	b.n	80045ae <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d101      	bne.n	80044c6 <HAL_UART_Transmit+0x38>
 80044c2:	2302      	movs	r3, #2
 80044c4:	e073      	b.n	80045ae <HAL_UART_Transmit+0x120>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2201      	movs	r2, #1
 80044ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2221      	movs	r2, #33	; 0x21
 80044da:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044dc:	f7fc fcae 	bl	8000e3c <HAL_GetTick>
 80044e0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	88fa      	ldrh	r2, [r7, #6]
 80044e6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	88fa      	ldrh	r2, [r7, #6]
 80044ee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044fa:	d108      	bne.n	800450e <HAL_UART_Transmit+0x80>
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d104      	bne.n	800450e <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004504:	2300      	movs	r3, #0
 8004506:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	61bb      	str	r3, [r7, #24]
 800450c:	e003      	b.n	8004516 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004512:	2300      	movs	r3, #0
 8004514:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800451e:	e02d      	b.n	800457c <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	9300      	str	r3, [sp, #0]
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	2200      	movs	r2, #0
 8004528:	2180      	movs	r1, #128	; 0x80
 800452a:	68f8      	ldr	r0, [r7, #12]
 800452c:	f000 fbe7 	bl	8004cfe <UART_WaitOnFlagUntilTimeout>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d001      	beq.n	800453a <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e039      	b.n	80045ae <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d10b      	bne.n	8004558 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	881a      	ldrh	r2, [r3, #0]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800454c:	b292      	uxth	r2, r2
 800454e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004550:	69bb      	ldr	r3, [r7, #24]
 8004552:	3302      	adds	r3, #2
 8004554:	61bb      	str	r3, [r7, #24]
 8004556:	e008      	b.n	800456a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	781a      	ldrb	r2, [r3, #0]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	b292      	uxth	r2, r2
 8004562:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	3301      	adds	r3, #1
 8004568:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004570:	b29b      	uxth	r3, r3
 8004572:	3b01      	subs	r3, #1
 8004574:	b29a      	uxth	r2, r3
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004582:	b29b      	uxth	r3, r3
 8004584:	2b00      	cmp	r3, #0
 8004586:	d1cb      	bne.n	8004520 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	9300      	str	r3, [sp, #0]
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	2200      	movs	r2, #0
 8004590:	2140      	movs	r1, #64	; 0x40
 8004592:	68f8      	ldr	r0, [r7, #12]
 8004594:	f000 fbb3 	bl	8004cfe <UART_WaitOnFlagUntilTimeout>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d001      	beq.n	80045a2 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800459e:	2303      	movs	r3, #3
 80045a0:	e005      	b.n	80045ae <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2220      	movs	r2, #32
 80045a6:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80045a8:	2300      	movs	r3, #0
 80045aa:	e000      	b.n	80045ae <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80045ac:	2302      	movs	r3, #2
  }
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	3720      	adds	r7, #32
 80045b2:	46bd      	mov	sp, r7
 80045b4:	bd80      	pop	{r7, pc}
	...

080045b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045bc:	b08a      	sub	sp, #40	; 0x28
 80045be:	af00      	add	r7, sp, #0
 80045c0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80045c2:	2300      	movs	r3, #0
 80045c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	689a      	ldr	r2, [r3, #8]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	691b      	ldr	r3, [r3, #16]
 80045d0:	431a      	orrs	r2, r3
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	695b      	ldr	r3, [r3, #20]
 80045d6:	431a      	orrs	r2, r3
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	69db      	ldr	r3, [r3, #28]
 80045dc:	4313      	orrs	r3, r2
 80045de:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	4ba4      	ldr	r3, [pc, #656]	; (8004878 <UART_SetConfig+0x2c0>)
 80045e8:	4013      	ands	r3, r2
 80045ea:	68fa      	ldr	r2, [r7, #12]
 80045ec:	6812      	ldr	r2, [r2, #0]
 80045ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045f0:	430b      	orrs	r3, r1
 80045f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	68da      	ldr	r2, [r3, #12]
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	430a      	orrs	r2, r1
 8004608:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	699b      	ldr	r3, [r3, #24]
 800460e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a99      	ldr	r2, [pc, #612]	; (800487c <UART_SetConfig+0x2c4>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d004      	beq.n	8004624 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6a1b      	ldr	r3, [r3, #32]
 800461e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004620:	4313      	orrs	r3, r2
 8004622:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004634:	430a      	orrs	r2, r1
 8004636:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a90      	ldr	r2, [pc, #576]	; (8004880 <UART_SetConfig+0x2c8>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d126      	bne.n	8004690 <UART_SetConfig+0xd8>
 8004642:	4b90      	ldr	r3, [pc, #576]	; (8004884 <UART_SetConfig+0x2cc>)
 8004644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004648:	f003 0303 	and.w	r3, r3, #3
 800464c:	2b03      	cmp	r3, #3
 800464e:	d81b      	bhi.n	8004688 <UART_SetConfig+0xd0>
 8004650:	a201      	add	r2, pc, #4	; (adr r2, 8004658 <UART_SetConfig+0xa0>)
 8004652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004656:	bf00      	nop
 8004658:	08004669 	.word	0x08004669
 800465c:	08004679 	.word	0x08004679
 8004660:	08004671 	.word	0x08004671
 8004664:	08004681 	.word	0x08004681
 8004668:	2301      	movs	r3, #1
 800466a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800466e:	e116      	b.n	800489e <UART_SetConfig+0x2e6>
 8004670:	2302      	movs	r3, #2
 8004672:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004676:	e112      	b.n	800489e <UART_SetConfig+0x2e6>
 8004678:	2304      	movs	r3, #4
 800467a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800467e:	e10e      	b.n	800489e <UART_SetConfig+0x2e6>
 8004680:	2308      	movs	r3, #8
 8004682:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004686:	e10a      	b.n	800489e <UART_SetConfig+0x2e6>
 8004688:	2310      	movs	r3, #16
 800468a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800468e:	e106      	b.n	800489e <UART_SetConfig+0x2e6>
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a7c      	ldr	r2, [pc, #496]	; (8004888 <UART_SetConfig+0x2d0>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d138      	bne.n	800470c <UART_SetConfig+0x154>
 800469a:	4b7a      	ldr	r3, [pc, #488]	; (8004884 <UART_SetConfig+0x2cc>)
 800469c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046a0:	f003 030c 	and.w	r3, r3, #12
 80046a4:	2b0c      	cmp	r3, #12
 80046a6:	d82d      	bhi.n	8004704 <UART_SetConfig+0x14c>
 80046a8:	a201      	add	r2, pc, #4	; (adr r2, 80046b0 <UART_SetConfig+0xf8>)
 80046aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ae:	bf00      	nop
 80046b0:	080046e5 	.word	0x080046e5
 80046b4:	08004705 	.word	0x08004705
 80046b8:	08004705 	.word	0x08004705
 80046bc:	08004705 	.word	0x08004705
 80046c0:	080046f5 	.word	0x080046f5
 80046c4:	08004705 	.word	0x08004705
 80046c8:	08004705 	.word	0x08004705
 80046cc:	08004705 	.word	0x08004705
 80046d0:	080046ed 	.word	0x080046ed
 80046d4:	08004705 	.word	0x08004705
 80046d8:	08004705 	.word	0x08004705
 80046dc:	08004705 	.word	0x08004705
 80046e0:	080046fd 	.word	0x080046fd
 80046e4:	2300      	movs	r3, #0
 80046e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046ea:	e0d8      	b.n	800489e <UART_SetConfig+0x2e6>
 80046ec:	2302      	movs	r3, #2
 80046ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046f2:	e0d4      	b.n	800489e <UART_SetConfig+0x2e6>
 80046f4:	2304      	movs	r3, #4
 80046f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046fa:	e0d0      	b.n	800489e <UART_SetConfig+0x2e6>
 80046fc:	2308      	movs	r3, #8
 80046fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004702:	e0cc      	b.n	800489e <UART_SetConfig+0x2e6>
 8004704:	2310      	movs	r3, #16
 8004706:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800470a:	e0c8      	b.n	800489e <UART_SetConfig+0x2e6>
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a5e      	ldr	r2, [pc, #376]	; (800488c <UART_SetConfig+0x2d4>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d125      	bne.n	8004762 <UART_SetConfig+0x1aa>
 8004716:	4b5b      	ldr	r3, [pc, #364]	; (8004884 <UART_SetConfig+0x2cc>)
 8004718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800471c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004720:	2b30      	cmp	r3, #48	; 0x30
 8004722:	d016      	beq.n	8004752 <UART_SetConfig+0x19a>
 8004724:	2b30      	cmp	r3, #48	; 0x30
 8004726:	d818      	bhi.n	800475a <UART_SetConfig+0x1a2>
 8004728:	2b20      	cmp	r3, #32
 800472a:	d00a      	beq.n	8004742 <UART_SetConfig+0x18a>
 800472c:	2b20      	cmp	r3, #32
 800472e:	d814      	bhi.n	800475a <UART_SetConfig+0x1a2>
 8004730:	2b00      	cmp	r3, #0
 8004732:	d002      	beq.n	800473a <UART_SetConfig+0x182>
 8004734:	2b10      	cmp	r3, #16
 8004736:	d008      	beq.n	800474a <UART_SetConfig+0x192>
 8004738:	e00f      	b.n	800475a <UART_SetConfig+0x1a2>
 800473a:	2300      	movs	r3, #0
 800473c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004740:	e0ad      	b.n	800489e <UART_SetConfig+0x2e6>
 8004742:	2302      	movs	r3, #2
 8004744:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004748:	e0a9      	b.n	800489e <UART_SetConfig+0x2e6>
 800474a:	2304      	movs	r3, #4
 800474c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004750:	e0a5      	b.n	800489e <UART_SetConfig+0x2e6>
 8004752:	2308      	movs	r3, #8
 8004754:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004758:	e0a1      	b.n	800489e <UART_SetConfig+0x2e6>
 800475a:	2310      	movs	r3, #16
 800475c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004760:	e09d      	b.n	800489e <UART_SetConfig+0x2e6>
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a4a      	ldr	r2, [pc, #296]	; (8004890 <UART_SetConfig+0x2d8>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d125      	bne.n	80047b8 <UART_SetConfig+0x200>
 800476c:	4b45      	ldr	r3, [pc, #276]	; (8004884 <UART_SetConfig+0x2cc>)
 800476e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004772:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004776:	2bc0      	cmp	r3, #192	; 0xc0
 8004778:	d016      	beq.n	80047a8 <UART_SetConfig+0x1f0>
 800477a:	2bc0      	cmp	r3, #192	; 0xc0
 800477c:	d818      	bhi.n	80047b0 <UART_SetConfig+0x1f8>
 800477e:	2b80      	cmp	r3, #128	; 0x80
 8004780:	d00a      	beq.n	8004798 <UART_SetConfig+0x1e0>
 8004782:	2b80      	cmp	r3, #128	; 0x80
 8004784:	d814      	bhi.n	80047b0 <UART_SetConfig+0x1f8>
 8004786:	2b00      	cmp	r3, #0
 8004788:	d002      	beq.n	8004790 <UART_SetConfig+0x1d8>
 800478a:	2b40      	cmp	r3, #64	; 0x40
 800478c:	d008      	beq.n	80047a0 <UART_SetConfig+0x1e8>
 800478e:	e00f      	b.n	80047b0 <UART_SetConfig+0x1f8>
 8004790:	2300      	movs	r3, #0
 8004792:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004796:	e082      	b.n	800489e <UART_SetConfig+0x2e6>
 8004798:	2302      	movs	r3, #2
 800479a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800479e:	e07e      	b.n	800489e <UART_SetConfig+0x2e6>
 80047a0:	2304      	movs	r3, #4
 80047a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047a6:	e07a      	b.n	800489e <UART_SetConfig+0x2e6>
 80047a8:	2308      	movs	r3, #8
 80047aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047ae:	e076      	b.n	800489e <UART_SetConfig+0x2e6>
 80047b0:	2310      	movs	r3, #16
 80047b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047b6:	e072      	b.n	800489e <UART_SetConfig+0x2e6>
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a35      	ldr	r2, [pc, #212]	; (8004894 <UART_SetConfig+0x2dc>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d12a      	bne.n	8004818 <UART_SetConfig+0x260>
 80047c2:	4b30      	ldr	r3, [pc, #192]	; (8004884 <UART_SetConfig+0x2cc>)
 80047c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047d0:	d01a      	beq.n	8004808 <UART_SetConfig+0x250>
 80047d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047d6:	d81b      	bhi.n	8004810 <UART_SetConfig+0x258>
 80047d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047dc:	d00c      	beq.n	80047f8 <UART_SetConfig+0x240>
 80047de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047e2:	d815      	bhi.n	8004810 <UART_SetConfig+0x258>
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d003      	beq.n	80047f0 <UART_SetConfig+0x238>
 80047e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047ec:	d008      	beq.n	8004800 <UART_SetConfig+0x248>
 80047ee:	e00f      	b.n	8004810 <UART_SetConfig+0x258>
 80047f0:	2300      	movs	r3, #0
 80047f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047f6:	e052      	b.n	800489e <UART_SetConfig+0x2e6>
 80047f8:	2302      	movs	r3, #2
 80047fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047fe:	e04e      	b.n	800489e <UART_SetConfig+0x2e6>
 8004800:	2304      	movs	r3, #4
 8004802:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004806:	e04a      	b.n	800489e <UART_SetConfig+0x2e6>
 8004808:	2308      	movs	r3, #8
 800480a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800480e:	e046      	b.n	800489e <UART_SetConfig+0x2e6>
 8004810:	2310      	movs	r3, #16
 8004812:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004816:	e042      	b.n	800489e <UART_SetConfig+0x2e6>
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a17      	ldr	r2, [pc, #92]	; (800487c <UART_SetConfig+0x2c4>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d13a      	bne.n	8004898 <UART_SetConfig+0x2e0>
 8004822:	4b18      	ldr	r3, [pc, #96]	; (8004884 <UART_SetConfig+0x2cc>)
 8004824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004828:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800482c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004830:	d01a      	beq.n	8004868 <UART_SetConfig+0x2b0>
 8004832:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004836:	d81b      	bhi.n	8004870 <UART_SetConfig+0x2b8>
 8004838:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800483c:	d00c      	beq.n	8004858 <UART_SetConfig+0x2a0>
 800483e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004842:	d815      	bhi.n	8004870 <UART_SetConfig+0x2b8>
 8004844:	2b00      	cmp	r3, #0
 8004846:	d003      	beq.n	8004850 <UART_SetConfig+0x298>
 8004848:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800484c:	d008      	beq.n	8004860 <UART_SetConfig+0x2a8>
 800484e:	e00f      	b.n	8004870 <UART_SetConfig+0x2b8>
 8004850:	2300      	movs	r3, #0
 8004852:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004856:	e022      	b.n	800489e <UART_SetConfig+0x2e6>
 8004858:	2302      	movs	r3, #2
 800485a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800485e:	e01e      	b.n	800489e <UART_SetConfig+0x2e6>
 8004860:	2304      	movs	r3, #4
 8004862:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004866:	e01a      	b.n	800489e <UART_SetConfig+0x2e6>
 8004868:	2308      	movs	r3, #8
 800486a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800486e:	e016      	b.n	800489e <UART_SetConfig+0x2e6>
 8004870:	2310      	movs	r3, #16
 8004872:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004876:	e012      	b.n	800489e <UART_SetConfig+0x2e6>
 8004878:	efff69f3 	.word	0xefff69f3
 800487c:	40008000 	.word	0x40008000
 8004880:	40013800 	.word	0x40013800
 8004884:	40021000 	.word	0x40021000
 8004888:	40004400 	.word	0x40004400
 800488c:	40004800 	.word	0x40004800
 8004890:	40004c00 	.word	0x40004c00
 8004894:	40005000 	.word	0x40005000
 8004898:	2310      	movs	r3, #16
 800489a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a9f      	ldr	r2, [pc, #636]	; (8004b20 <UART_SetConfig+0x568>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d17a      	bne.n	800499e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80048a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80048ac:	2b08      	cmp	r3, #8
 80048ae:	d824      	bhi.n	80048fa <UART_SetConfig+0x342>
 80048b0:	a201      	add	r2, pc, #4	; (adr r2, 80048b8 <UART_SetConfig+0x300>)
 80048b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b6:	bf00      	nop
 80048b8:	080048dd 	.word	0x080048dd
 80048bc:	080048fb 	.word	0x080048fb
 80048c0:	080048e5 	.word	0x080048e5
 80048c4:	080048fb 	.word	0x080048fb
 80048c8:	080048eb 	.word	0x080048eb
 80048cc:	080048fb 	.word	0x080048fb
 80048d0:	080048fb 	.word	0x080048fb
 80048d4:	080048fb 	.word	0x080048fb
 80048d8:	080048f3 	.word	0x080048f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80048dc:	f7fd fbca 	bl	8002074 <HAL_RCC_GetPCLK1Freq>
 80048e0:	61f8      	str	r0, [r7, #28]
        break;
 80048e2:	e010      	b.n	8004906 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80048e4:	4b8f      	ldr	r3, [pc, #572]	; (8004b24 <UART_SetConfig+0x56c>)
 80048e6:	61fb      	str	r3, [r7, #28]
        break;
 80048e8:	e00d      	b.n	8004906 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80048ea:	f7fd fb2b 	bl	8001f44 <HAL_RCC_GetSysClockFreq>
 80048ee:	61f8      	str	r0, [r7, #28]
        break;
 80048f0:	e009      	b.n	8004906 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80048f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048f6:	61fb      	str	r3, [r7, #28]
        break;
 80048f8:	e005      	b.n	8004906 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80048fa:	2300      	movs	r3, #0
 80048fc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004904:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004906:	69fb      	ldr	r3, [r7, #28]
 8004908:	2b00      	cmp	r3, #0
 800490a:	f000 80fb 	beq.w	8004b04 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	685a      	ldr	r2, [r3, #4]
 8004912:	4613      	mov	r3, r2
 8004914:	005b      	lsls	r3, r3, #1
 8004916:	4413      	add	r3, r2
 8004918:	69fa      	ldr	r2, [r7, #28]
 800491a:	429a      	cmp	r2, r3
 800491c:	d305      	bcc.n	800492a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004924:	69fa      	ldr	r2, [r7, #28]
 8004926:	429a      	cmp	r2, r3
 8004928:	d903      	bls.n	8004932 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004930:	e0e8      	b.n	8004b04 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	2200      	movs	r2, #0
 8004936:	461c      	mov	r4, r3
 8004938:	4615      	mov	r5, r2
 800493a:	f04f 0200 	mov.w	r2, #0
 800493e:	f04f 0300 	mov.w	r3, #0
 8004942:	022b      	lsls	r3, r5, #8
 8004944:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004948:	0222      	lsls	r2, r4, #8
 800494a:	68f9      	ldr	r1, [r7, #12]
 800494c:	6849      	ldr	r1, [r1, #4]
 800494e:	0849      	lsrs	r1, r1, #1
 8004950:	2000      	movs	r0, #0
 8004952:	4688      	mov	r8, r1
 8004954:	4681      	mov	r9, r0
 8004956:	eb12 0a08 	adds.w	sl, r2, r8
 800495a:	eb43 0b09 	adc.w	fp, r3, r9
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	2200      	movs	r2, #0
 8004964:	603b      	str	r3, [r7, #0]
 8004966:	607a      	str	r2, [r7, #4]
 8004968:	e9d7 2300 	ldrd	r2, r3, [r7]
 800496c:	4650      	mov	r0, sl
 800496e:	4659      	mov	r1, fp
 8004970:	f7fb fc7e 	bl	8000270 <__aeabi_uldivmod>
 8004974:	4602      	mov	r2, r0
 8004976:	460b      	mov	r3, r1
 8004978:	4613      	mov	r3, r2
 800497a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004982:	d308      	bcc.n	8004996 <UART_SetConfig+0x3de>
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800498a:	d204      	bcs.n	8004996 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	69ba      	ldr	r2, [r7, #24]
 8004992:	60da      	str	r2, [r3, #12]
 8004994:	e0b6      	b.n	8004b04 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800499c:	e0b2      	b.n	8004b04 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	69db      	ldr	r3, [r3, #28]
 80049a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049a6:	d15e      	bne.n	8004a66 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80049a8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80049ac:	2b08      	cmp	r3, #8
 80049ae:	d828      	bhi.n	8004a02 <UART_SetConfig+0x44a>
 80049b0:	a201      	add	r2, pc, #4	; (adr r2, 80049b8 <UART_SetConfig+0x400>)
 80049b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049b6:	bf00      	nop
 80049b8:	080049dd 	.word	0x080049dd
 80049bc:	080049e5 	.word	0x080049e5
 80049c0:	080049ed 	.word	0x080049ed
 80049c4:	08004a03 	.word	0x08004a03
 80049c8:	080049f3 	.word	0x080049f3
 80049cc:	08004a03 	.word	0x08004a03
 80049d0:	08004a03 	.word	0x08004a03
 80049d4:	08004a03 	.word	0x08004a03
 80049d8:	080049fb 	.word	0x080049fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049dc:	f7fd fb4a 	bl	8002074 <HAL_RCC_GetPCLK1Freq>
 80049e0:	61f8      	str	r0, [r7, #28]
        break;
 80049e2:	e014      	b.n	8004a0e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80049e4:	f7fd fb5c 	bl	80020a0 <HAL_RCC_GetPCLK2Freq>
 80049e8:	61f8      	str	r0, [r7, #28]
        break;
 80049ea:	e010      	b.n	8004a0e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80049ec:	4b4d      	ldr	r3, [pc, #308]	; (8004b24 <UART_SetConfig+0x56c>)
 80049ee:	61fb      	str	r3, [r7, #28]
        break;
 80049f0:	e00d      	b.n	8004a0e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80049f2:	f7fd faa7 	bl	8001f44 <HAL_RCC_GetSysClockFreq>
 80049f6:	61f8      	str	r0, [r7, #28]
        break;
 80049f8:	e009      	b.n	8004a0e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80049fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049fe:	61fb      	str	r3, [r7, #28]
        break;
 8004a00:	e005      	b.n	8004a0e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8004a02:	2300      	movs	r3, #0
 8004a04:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004a0c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d077      	beq.n	8004b04 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a14:	69fb      	ldr	r3, [r7, #28]
 8004a16:	005a      	lsls	r2, r3, #1
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	085b      	lsrs	r3, r3, #1
 8004a1e:	441a      	add	r2, r3
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a28:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	2b0f      	cmp	r3, #15
 8004a2e:	d916      	bls.n	8004a5e <UART_SetConfig+0x4a6>
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a36:	d212      	bcs.n	8004a5e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a38:	69bb      	ldr	r3, [r7, #24]
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	f023 030f 	bic.w	r3, r3, #15
 8004a40:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a42:	69bb      	ldr	r3, [r7, #24]
 8004a44:	085b      	lsrs	r3, r3, #1
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	f003 0307 	and.w	r3, r3, #7
 8004a4c:	b29a      	uxth	r2, r3
 8004a4e:	8afb      	ldrh	r3, [r7, #22]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	8afa      	ldrh	r2, [r7, #22]
 8004a5a:	60da      	str	r2, [r3, #12]
 8004a5c:	e052      	b.n	8004b04 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004a64:	e04e      	b.n	8004b04 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004a66:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004a6a:	2b08      	cmp	r3, #8
 8004a6c:	d827      	bhi.n	8004abe <UART_SetConfig+0x506>
 8004a6e:	a201      	add	r2, pc, #4	; (adr r2, 8004a74 <UART_SetConfig+0x4bc>)
 8004a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a74:	08004a99 	.word	0x08004a99
 8004a78:	08004aa1 	.word	0x08004aa1
 8004a7c:	08004aa9 	.word	0x08004aa9
 8004a80:	08004abf 	.word	0x08004abf
 8004a84:	08004aaf 	.word	0x08004aaf
 8004a88:	08004abf 	.word	0x08004abf
 8004a8c:	08004abf 	.word	0x08004abf
 8004a90:	08004abf 	.word	0x08004abf
 8004a94:	08004ab7 	.word	0x08004ab7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a98:	f7fd faec 	bl	8002074 <HAL_RCC_GetPCLK1Freq>
 8004a9c:	61f8      	str	r0, [r7, #28]
        break;
 8004a9e:	e014      	b.n	8004aca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004aa0:	f7fd fafe 	bl	80020a0 <HAL_RCC_GetPCLK2Freq>
 8004aa4:	61f8      	str	r0, [r7, #28]
        break;
 8004aa6:	e010      	b.n	8004aca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004aa8:	4b1e      	ldr	r3, [pc, #120]	; (8004b24 <UART_SetConfig+0x56c>)
 8004aaa:	61fb      	str	r3, [r7, #28]
        break;
 8004aac:	e00d      	b.n	8004aca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004aae:	f7fd fa49 	bl	8001f44 <HAL_RCC_GetSysClockFreq>
 8004ab2:	61f8      	str	r0, [r7, #28]
        break;
 8004ab4:	e009      	b.n	8004aca <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ab6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004aba:	61fb      	str	r3, [r7, #28]
        break;
 8004abc:	e005      	b.n	8004aca <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004ac8:	bf00      	nop
    }

    if (pclk != 0U)
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d019      	beq.n	8004b04 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	085a      	lsrs	r2, r3, #1
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	441a      	add	r2, r3
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ae2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ae4:	69bb      	ldr	r3, [r7, #24]
 8004ae6:	2b0f      	cmp	r3, #15
 8004ae8:	d909      	bls.n	8004afe <UART_SetConfig+0x546>
 8004aea:	69bb      	ldr	r3, [r7, #24]
 8004aec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004af0:	d205      	bcs.n	8004afe <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004af2:	69bb      	ldr	r3, [r7, #24]
 8004af4:	b29a      	uxth	r2, r3
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	60da      	str	r2, [r3, #12]
 8004afc:	e002      	b.n	8004b04 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	2200      	movs	r2, #0
 8004b08:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004b10:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3728      	adds	r7, #40	; 0x28
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b1e:	bf00      	nop
 8004b20:	40008000 	.word	0x40008000
 8004b24:	00f42400 	.word	0x00f42400

08004b28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b34:	f003 0301 	and.w	r3, r3, #1
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d00a      	beq.n	8004b52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	430a      	orrs	r2, r1
 8004b50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b56:	f003 0302 	and.w	r3, r3, #2
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d00a      	beq.n	8004b74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	430a      	orrs	r2, r1
 8004b72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b78:	f003 0304 	and.w	r3, r3, #4
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d00a      	beq.n	8004b96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	430a      	orrs	r2, r1
 8004b94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b9a:	f003 0308 	and.w	r3, r3, #8
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d00a      	beq.n	8004bb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	685b      	ldr	r3, [r3, #4]
 8004ba8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	430a      	orrs	r2, r1
 8004bb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bbc:	f003 0310 	and.w	r3, r3, #16
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d00a      	beq.n	8004bda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	430a      	orrs	r2, r1
 8004bd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bde:	f003 0320 	and.w	r3, r3, #32
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d00a      	beq.n	8004bfc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	430a      	orrs	r2, r1
 8004bfa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d01a      	beq.n	8004c3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	685b      	ldr	r3, [r3, #4]
 8004c0e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	430a      	orrs	r2, r1
 8004c1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c26:	d10a      	bne.n	8004c3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	430a      	orrs	r2, r1
 8004c3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d00a      	beq.n	8004c60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	430a      	orrs	r2, r1
 8004c5e:	605a      	str	r2, [r3, #4]
  }
}
 8004c60:	bf00      	nop
 8004c62:	370c      	adds	r7, #12
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b086      	sub	sp, #24
 8004c70:	af02      	add	r7, sp, #8
 8004c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c7c:	f7fc f8de 	bl	8000e3c <HAL_GetTick>
 8004c80:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f003 0308 	and.w	r3, r3, #8
 8004c8c:	2b08      	cmp	r3, #8
 8004c8e:	d10e      	bne.n	8004cae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c94:	9300      	str	r3, [sp, #0]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004c9e:	6878      	ldr	r0, [r7, #4]
 8004ca0:	f000 f82d 	bl	8004cfe <UART_WaitOnFlagUntilTimeout>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d001      	beq.n	8004cae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e023      	b.n	8004cf6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0304 	and.w	r3, r3, #4
 8004cb8:	2b04      	cmp	r3, #4
 8004cba:	d10e      	bne.n	8004cda <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cbc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004cc0:	9300      	str	r3, [sp, #0]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 f817 	bl	8004cfe <UART_WaitOnFlagUntilTimeout>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d001      	beq.n	8004cda <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e00d      	b.n	8004cf6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2220      	movs	r2, #32
 8004cde:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2220      	movs	r2, #32
 8004ce4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004cf4:	2300      	movs	r3, #0
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	3710      	adds	r7, #16
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}

08004cfe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004cfe:	b580      	push	{r7, lr}
 8004d00:	b09c      	sub	sp, #112	; 0x70
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	60f8      	str	r0, [r7, #12]
 8004d06:	60b9      	str	r1, [r7, #8]
 8004d08:	603b      	str	r3, [r7, #0]
 8004d0a:	4613      	mov	r3, r2
 8004d0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d0e:	e0a5      	b.n	8004e5c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d16:	f000 80a1 	beq.w	8004e5c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d1a:	f7fc f88f 	bl	8000e3c <HAL_GetTick>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d302      	bcc.n	8004d30 <UART_WaitOnFlagUntilTimeout+0x32>
 8004d2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d13e      	bne.n	8004dae <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d38:	e853 3f00 	ldrex	r3, [r3]
 8004d3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004d3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d40:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d44:	667b      	str	r3, [r7, #100]	; 0x64
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d50:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d52:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004d54:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004d56:	e841 2300 	strex	r3, r2, [r1]
 8004d5a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004d5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d1e6      	bne.n	8004d30 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	3308      	adds	r3, #8
 8004d68:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d6c:	e853 3f00 	ldrex	r3, [r3]
 8004d70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d74:	f023 0301 	bic.w	r3, r3, #1
 8004d78:	663b      	str	r3, [r7, #96]	; 0x60
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	3308      	adds	r3, #8
 8004d80:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004d82:	64ba      	str	r2, [r7, #72]	; 0x48
 8004d84:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d86:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004d88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d8a:	e841 2300 	strex	r3, r2, [r1]
 8004d8e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004d90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d1e5      	bne.n	8004d62 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2220      	movs	r2, #32
 8004d9a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2220      	movs	r2, #32
 8004da0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e067      	b.n	8004e7e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f003 0304 	and.w	r3, r3, #4
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d04f      	beq.n	8004e5c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	69db      	ldr	r3, [r3, #28]
 8004dc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004dca:	d147      	bne.n	8004e5c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004dd4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dde:	e853 3f00 	ldrex	r3, [r3]
 8004de2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004dea:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	461a      	mov	r2, r3
 8004df2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004df4:	637b      	str	r3, [r7, #52]	; 0x34
 8004df6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004dfa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004dfc:	e841 2300 	strex	r3, r2, [r1]
 8004e00:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d1e6      	bne.n	8004dd6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	3308      	adds	r3, #8
 8004e0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	e853 3f00 	ldrex	r3, [r3]
 8004e16:	613b      	str	r3, [r7, #16]
   return(result);
 8004e18:	693b      	ldr	r3, [r7, #16]
 8004e1a:	f023 0301 	bic.w	r3, r3, #1
 8004e1e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	3308      	adds	r3, #8
 8004e26:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004e28:	623a      	str	r2, [r7, #32]
 8004e2a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e2c:	69f9      	ldr	r1, [r7, #28]
 8004e2e:	6a3a      	ldr	r2, [r7, #32]
 8004e30:	e841 2300 	strex	r3, r2, [r1]
 8004e34:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e36:	69bb      	ldr	r3, [r7, #24]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d1e5      	bne.n	8004e08 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2220      	movs	r2, #32
 8004e40:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2220      	movs	r2, #32
 8004e46:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2220      	movs	r2, #32
 8004e4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2200      	movs	r2, #0
 8004e54:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004e58:	2303      	movs	r3, #3
 8004e5a:	e010      	b.n	8004e7e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	69da      	ldr	r2, [r3, #28]
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	4013      	ands	r3, r2
 8004e66:	68ba      	ldr	r2, [r7, #8]
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	bf0c      	ite	eq
 8004e6c:	2301      	moveq	r3, #1
 8004e6e:	2300      	movne	r3, #0
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	461a      	mov	r2, r3
 8004e74:	79fb      	ldrb	r3, [r7, #7]
 8004e76:	429a      	cmp	r2, r3
 8004e78:	f43f af4a 	beq.w	8004d10 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3770      	adds	r7, #112	; 0x70
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}
	...

08004e88 <__errno>:
 8004e88:	4b01      	ldr	r3, [pc, #4]	; (8004e90 <__errno+0x8>)
 8004e8a:	6818      	ldr	r0, [r3, #0]
 8004e8c:	4770      	bx	lr
 8004e8e:	bf00      	nop
 8004e90:	2000000c 	.word	0x2000000c

08004e94 <__libc_init_array>:
 8004e94:	b570      	push	{r4, r5, r6, lr}
 8004e96:	4d0d      	ldr	r5, [pc, #52]	; (8004ecc <__libc_init_array+0x38>)
 8004e98:	4c0d      	ldr	r4, [pc, #52]	; (8004ed0 <__libc_init_array+0x3c>)
 8004e9a:	1b64      	subs	r4, r4, r5
 8004e9c:	10a4      	asrs	r4, r4, #2
 8004e9e:	2600      	movs	r6, #0
 8004ea0:	42a6      	cmp	r6, r4
 8004ea2:	d109      	bne.n	8004eb8 <__libc_init_array+0x24>
 8004ea4:	4d0b      	ldr	r5, [pc, #44]	; (8004ed4 <__libc_init_array+0x40>)
 8004ea6:	4c0c      	ldr	r4, [pc, #48]	; (8004ed8 <__libc_init_array+0x44>)
 8004ea8:	f000 fc8e 	bl	80057c8 <_init>
 8004eac:	1b64      	subs	r4, r4, r5
 8004eae:	10a4      	asrs	r4, r4, #2
 8004eb0:	2600      	movs	r6, #0
 8004eb2:	42a6      	cmp	r6, r4
 8004eb4:	d105      	bne.n	8004ec2 <__libc_init_array+0x2e>
 8004eb6:	bd70      	pop	{r4, r5, r6, pc}
 8004eb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ebc:	4798      	blx	r3
 8004ebe:	3601      	adds	r6, #1
 8004ec0:	e7ee      	b.n	8004ea0 <__libc_init_array+0xc>
 8004ec2:	f855 3b04 	ldr.w	r3, [r5], #4
 8004ec6:	4798      	blx	r3
 8004ec8:	3601      	adds	r6, #1
 8004eca:	e7f2      	b.n	8004eb2 <__libc_init_array+0x1e>
 8004ecc:	0800588c 	.word	0x0800588c
 8004ed0:	0800588c 	.word	0x0800588c
 8004ed4:	0800588c 	.word	0x0800588c
 8004ed8:	08005890 	.word	0x08005890

08004edc <memset>:
 8004edc:	4402      	add	r2, r0
 8004ede:	4603      	mov	r3, r0
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d100      	bne.n	8004ee6 <memset+0xa>
 8004ee4:	4770      	bx	lr
 8004ee6:	f803 1b01 	strb.w	r1, [r3], #1
 8004eea:	e7f9      	b.n	8004ee0 <memset+0x4>

08004eec <siprintf>:
 8004eec:	b40e      	push	{r1, r2, r3}
 8004eee:	b500      	push	{lr}
 8004ef0:	b09c      	sub	sp, #112	; 0x70
 8004ef2:	ab1d      	add	r3, sp, #116	; 0x74
 8004ef4:	9002      	str	r0, [sp, #8]
 8004ef6:	9006      	str	r0, [sp, #24]
 8004ef8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004efc:	4809      	ldr	r0, [pc, #36]	; (8004f24 <siprintf+0x38>)
 8004efe:	9107      	str	r1, [sp, #28]
 8004f00:	9104      	str	r1, [sp, #16]
 8004f02:	4909      	ldr	r1, [pc, #36]	; (8004f28 <siprintf+0x3c>)
 8004f04:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f08:	9105      	str	r1, [sp, #20]
 8004f0a:	6800      	ldr	r0, [r0, #0]
 8004f0c:	9301      	str	r3, [sp, #4]
 8004f0e:	a902      	add	r1, sp, #8
 8004f10:	f000 f868 	bl	8004fe4 <_svfiprintf_r>
 8004f14:	9b02      	ldr	r3, [sp, #8]
 8004f16:	2200      	movs	r2, #0
 8004f18:	701a      	strb	r2, [r3, #0]
 8004f1a:	b01c      	add	sp, #112	; 0x70
 8004f1c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f20:	b003      	add	sp, #12
 8004f22:	4770      	bx	lr
 8004f24:	2000000c 	.word	0x2000000c
 8004f28:	ffff0208 	.word	0xffff0208

08004f2c <__ssputs_r>:
 8004f2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f30:	688e      	ldr	r6, [r1, #8]
 8004f32:	429e      	cmp	r6, r3
 8004f34:	4682      	mov	sl, r0
 8004f36:	460c      	mov	r4, r1
 8004f38:	4690      	mov	r8, r2
 8004f3a:	461f      	mov	r7, r3
 8004f3c:	d838      	bhi.n	8004fb0 <__ssputs_r+0x84>
 8004f3e:	898a      	ldrh	r2, [r1, #12]
 8004f40:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004f44:	d032      	beq.n	8004fac <__ssputs_r+0x80>
 8004f46:	6825      	ldr	r5, [r4, #0]
 8004f48:	6909      	ldr	r1, [r1, #16]
 8004f4a:	eba5 0901 	sub.w	r9, r5, r1
 8004f4e:	6965      	ldr	r5, [r4, #20]
 8004f50:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004f54:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004f58:	3301      	adds	r3, #1
 8004f5a:	444b      	add	r3, r9
 8004f5c:	106d      	asrs	r5, r5, #1
 8004f5e:	429d      	cmp	r5, r3
 8004f60:	bf38      	it	cc
 8004f62:	461d      	movcc	r5, r3
 8004f64:	0553      	lsls	r3, r2, #21
 8004f66:	d531      	bpl.n	8004fcc <__ssputs_r+0xa0>
 8004f68:	4629      	mov	r1, r5
 8004f6a:	f000 fb63 	bl	8005634 <_malloc_r>
 8004f6e:	4606      	mov	r6, r0
 8004f70:	b950      	cbnz	r0, 8004f88 <__ssputs_r+0x5c>
 8004f72:	230c      	movs	r3, #12
 8004f74:	f8ca 3000 	str.w	r3, [sl]
 8004f78:	89a3      	ldrh	r3, [r4, #12]
 8004f7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004f7e:	81a3      	strh	r3, [r4, #12]
 8004f80:	f04f 30ff 	mov.w	r0, #4294967295
 8004f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f88:	6921      	ldr	r1, [r4, #16]
 8004f8a:	464a      	mov	r2, r9
 8004f8c:	f000 fabe 	bl	800550c <memcpy>
 8004f90:	89a3      	ldrh	r3, [r4, #12]
 8004f92:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004f96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f9a:	81a3      	strh	r3, [r4, #12]
 8004f9c:	6126      	str	r6, [r4, #16]
 8004f9e:	6165      	str	r5, [r4, #20]
 8004fa0:	444e      	add	r6, r9
 8004fa2:	eba5 0509 	sub.w	r5, r5, r9
 8004fa6:	6026      	str	r6, [r4, #0]
 8004fa8:	60a5      	str	r5, [r4, #8]
 8004faa:	463e      	mov	r6, r7
 8004fac:	42be      	cmp	r6, r7
 8004fae:	d900      	bls.n	8004fb2 <__ssputs_r+0x86>
 8004fb0:	463e      	mov	r6, r7
 8004fb2:	6820      	ldr	r0, [r4, #0]
 8004fb4:	4632      	mov	r2, r6
 8004fb6:	4641      	mov	r1, r8
 8004fb8:	f000 fab6 	bl	8005528 <memmove>
 8004fbc:	68a3      	ldr	r3, [r4, #8]
 8004fbe:	1b9b      	subs	r3, r3, r6
 8004fc0:	60a3      	str	r3, [r4, #8]
 8004fc2:	6823      	ldr	r3, [r4, #0]
 8004fc4:	4433      	add	r3, r6
 8004fc6:	6023      	str	r3, [r4, #0]
 8004fc8:	2000      	movs	r0, #0
 8004fca:	e7db      	b.n	8004f84 <__ssputs_r+0x58>
 8004fcc:	462a      	mov	r2, r5
 8004fce:	f000 fba5 	bl	800571c <_realloc_r>
 8004fd2:	4606      	mov	r6, r0
 8004fd4:	2800      	cmp	r0, #0
 8004fd6:	d1e1      	bne.n	8004f9c <__ssputs_r+0x70>
 8004fd8:	6921      	ldr	r1, [r4, #16]
 8004fda:	4650      	mov	r0, sl
 8004fdc:	f000 fabe 	bl	800555c <_free_r>
 8004fe0:	e7c7      	b.n	8004f72 <__ssputs_r+0x46>
	...

08004fe4 <_svfiprintf_r>:
 8004fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fe8:	4698      	mov	r8, r3
 8004fea:	898b      	ldrh	r3, [r1, #12]
 8004fec:	061b      	lsls	r3, r3, #24
 8004fee:	b09d      	sub	sp, #116	; 0x74
 8004ff0:	4607      	mov	r7, r0
 8004ff2:	460d      	mov	r5, r1
 8004ff4:	4614      	mov	r4, r2
 8004ff6:	d50e      	bpl.n	8005016 <_svfiprintf_r+0x32>
 8004ff8:	690b      	ldr	r3, [r1, #16]
 8004ffa:	b963      	cbnz	r3, 8005016 <_svfiprintf_r+0x32>
 8004ffc:	2140      	movs	r1, #64	; 0x40
 8004ffe:	f000 fb19 	bl	8005634 <_malloc_r>
 8005002:	6028      	str	r0, [r5, #0]
 8005004:	6128      	str	r0, [r5, #16]
 8005006:	b920      	cbnz	r0, 8005012 <_svfiprintf_r+0x2e>
 8005008:	230c      	movs	r3, #12
 800500a:	603b      	str	r3, [r7, #0]
 800500c:	f04f 30ff 	mov.w	r0, #4294967295
 8005010:	e0d1      	b.n	80051b6 <_svfiprintf_r+0x1d2>
 8005012:	2340      	movs	r3, #64	; 0x40
 8005014:	616b      	str	r3, [r5, #20]
 8005016:	2300      	movs	r3, #0
 8005018:	9309      	str	r3, [sp, #36]	; 0x24
 800501a:	2320      	movs	r3, #32
 800501c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005020:	f8cd 800c 	str.w	r8, [sp, #12]
 8005024:	2330      	movs	r3, #48	; 0x30
 8005026:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80051d0 <_svfiprintf_r+0x1ec>
 800502a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800502e:	f04f 0901 	mov.w	r9, #1
 8005032:	4623      	mov	r3, r4
 8005034:	469a      	mov	sl, r3
 8005036:	f813 2b01 	ldrb.w	r2, [r3], #1
 800503a:	b10a      	cbz	r2, 8005040 <_svfiprintf_r+0x5c>
 800503c:	2a25      	cmp	r2, #37	; 0x25
 800503e:	d1f9      	bne.n	8005034 <_svfiprintf_r+0x50>
 8005040:	ebba 0b04 	subs.w	fp, sl, r4
 8005044:	d00b      	beq.n	800505e <_svfiprintf_r+0x7a>
 8005046:	465b      	mov	r3, fp
 8005048:	4622      	mov	r2, r4
 800504a:	4629      	mov	r1, r5
 800504c:	4638      	mov	r0, r7
 800504e:	f7ff ff6d 	bl	8004f2c <__ssputs_r>
 8005052:	3001      	adds	r0, #1
 8005054:	f000 80aa 	beq.w	80051ac <_svfiprintf_r+0x1c8>
 8005058:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800505a:	445a      	add	r2, fp
 800505c:	9209      	str	r2, [sp, #36]	; 0x24
 800505e:	f89a 3000 	ldrb.w	r3, [sl]
 8005062:	2b00      	cmp	r3, #0
 8005064:	f000 80a2 	beq.w	80051ac <_svfiprintf_r+0x1c8>
 8005068:	2300      	movs	r3, #0
 800506a:	f04f 32ff 	mov.w	r2, #4294967295
 800506e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005072:	f10a 0a01 	add.w	sl, sl, #1
 8005076:	9304      	str	r3, [sp, #16]
 8005078:	9307      	str	r3, [sp, #28]
 800507a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800507e:	931a      	str	r3, [sp, #104]	; 0x68
 8005080:	4654      	mov	r4, sl
 8005082:	2205      	movs	r2, #5
 8005084:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005088:	4851      	ldr	r0, [pc, #324]	; (80051d0 <_svfiprintf_r+0x1ec>)
 800508a:	f7fb f8a1 	bl	80001d0 <memchr>
 800508e:	9a04      	ldr	r2, [sp, #16]
 8005090:	b9d8      	cbnz	r0, 80050ca <_svfiprintf_r+0xe6>
 8005092:	06d0      	lsls	r0, r2, #27
 8005094:	bf44      	itt	mi
 8005096:	2320      	movmi	r3, #32
 8005098:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800509c:	0711      	lsls	r1, r2, #28
 800509e:	bf44      	itt	mi
 80050a0:	232b      	movmi	r3, #43	; 0x2b
 80050a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050a6:	f89a 3000 	ldrb.w	r3, [sl]
 80050aa:	2b2a      	cmp	r3, #42	; 0x2a
 80050ac:	d015      	beq.n	80050da <_svfiprintf_r+0xf6>
 80050ae:	9a07      	ldr	r2, [sp, #28]
 80050b0:	4654      	mov	r4, sl
 80050b2:	2000      	movs	r0, #0
 80050b4:	f04f 0c0a 	mov.w	ip, #10
 80050b8:	4621      	mov	r1, r4
 80050ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80050be:	3b30      	subs	r3, #48	; 0x30
 80050c0:	2b09      	cmp	r3, #9
 80050c2:	d94e      	bls.n	8005162 <_svfiprintf_r+0x17e>
 80050c4:	b1b0      	cbz	r0, 80050f4 <_svfiprintf_r+0x110>
 80050c6:	9207      	str	r2, [sp, #28]
 80050c8:	e014      	b.n	80050f4 <_svfiprintf_r+0x110>
 80050ca:	eba0 0308 	sub.w	r3, r0, r8
 80050ce:	fa09 f303 	lsl.w	r3, r9, r3
 80050d2:	4313      	orrs	r3, r2
 80050d4:	9304      	str	r3, [sp, #16]
 80050d6:	46a2      	mov	sl, r4
 80050d8:	e7d2      	b.n	8005080 <_svfiprintf_r+0x9c>
 80050da:	9b03      	ldr	r3, [sp, #12]
 80050dc:	1d19      	adds	r1, r3, #4
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	9103      	str	r1, [sp, #12]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	bfbb      	ittet	lt
 80050e6:	425b      	neglt	r3, r3
 80050e8:	f042 0202 	orrlt.w	r2, r2, #2
 80050ec:	9307      	strge	r3, [sp, #28]
 80050ee:	9307      	strlt	r3, [sp, #28]
 80050f0:	bfb8      	it	lt
 80050f2:	9204      	strlt	r2, [sp, #16]
 80050f4:	7823      	ldrb	r3, [r4, #0]
 80050f6:	2b2e      	cmp	r3, #46	; 0x2e
 80050f8:	d10c      	bne.n	8005114 <_svfiprintf_r+0x130>
 80050fa:	7863      	ldrb	r3, [r4, #1]
 80050fc:	2b2a      	cmp	r3, #42	; 0x2a
 80050fe:	d135      	bne.n	800516c <_svfiprintf_r+0x188>
 8005100:	9b03      	ldr	r3, [sp, #12]
 8005102:	1d1a      	adds	r2, r3, #4
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	9203      	str	r2, [sp, #12]
 8005108:	2b00      	cmp	r3, #0
 800510a:	bfb8      	it	lt
 800510c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005110:	3402      	adds	r4, #2
 8005112:	9305      	str	r3, [sp, #20]
 8005114:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80051e0 <_svfiprintf_r+0x1fc>
 8005118:	7821      	ldrb	r1, [r4, #0]
 800511a:	2203      	movs	r2, #3
 800511c:	4650      	mov	r0, sl
 800511e:	f7fb f857 	bl	80001d0 <memchr>
 8005122:	b140      	cbz	r0, 8005136 <_svfiprintf_r+0x152>
 8005124:	2340      	movs	r3, #64	; 0x40
 8005126:	eba0 000a 	sub.w	r0, r0, sl
 800512a:	fa03 f000 	lsl.w	r0, r3, r0
 800512e:	9b04      	ldr	r3, [sp, #16]
 8005130:	4303      	orrs	r3, r0
 8005132:	3401      	adds	r4, #1
 8005134:	9304      	str	r3, [sp, #16]
 8005136:	f814 1b01 	ldrb.w	r1, [r4], #1
 800513a:	4826      	ldr	r0, [pc, #152]	; (80051d4 <_svfiprintf_r+0x1f0>)
 800513c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005140:	2206      	movs	r2, #6
 8005142:	f7fb f845 	bl	80001d0 <memchr>
 8005146:	2800      	cmp	r0, #0
 8005148:	d038      	beq.n	80051bc <_svfiprintf_r+0x1d8>
 800514a:	4b23      	ldr	r3, [pc, #140]	; (80051d8 <_svfiprintf_r+0x1f4>)
 800514c:	bb1b      	cbnz	r3, 8005196 <_svfiprintf_r+0x1b2>
 800514e:	9b03      	ldr	r3, [sp, #12]
 8005150:	3307      	adds	r3, #7
 8005152:	f023 0307 	bic.w	r3, r3, #7
 8005156:	3308      	adds	r3, #8
 8005158:	9303      	str	r3, [sp, #12]
 800515a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800515c:	4433      	add	r3, r6
 800515e:	9309      	str	r3, [sp, #36]	; 0x24
 8005160:	e767      	b.n	8005032 <_svfiprintf_r+0x4e>
 8005162:	fb0c 3202 	mla	r2, ip, r2, r3
 8005166:	460c      	mov	r4, r1
 8005168:	2001      	movs	r0, #1
 800516a:	e7a5      	b.n	80050b8 <_svfiprintf_r+0xd4>
 800516c:	2300      	movs	r3, #0
 800516e:	3401      	adds	r4, #1
 8005170:	9305      	str	r3, [sp, #20]
 8005172:	4619      	mov	r1, r3
 8005174:	f04f 0c0a 	mov.w	ip, #10
 8005178:	4620      	mov	r0, r4
 800517a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800517e:	3a30      	subs	r2, #48	; 0x30
 8005180:	2a09      	cmp	r2, #9
 8005182:	d903      	bls.n	800518c <_svfiprintf_r+0x1a8>
 8005184:	2b00      	cmp	r3, #0
 8005186:	d0c5      	beq.n	8005114 <_svfiprintf_r+0x130>
 8005188:	9105      	str	r1, [sp, #20]
 800518a:	e7c3      	b.n	8005114 <_svfiprintf_r+0x130>
 800518c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005190:	4604      	mov	r4, r0
 8005192:	2301      	movs	r3, #1
 8005194:	e7f0      	b.n	8005178 <_svfiprintf_r+0x194>
 8005196:	ab03      	add	r3, sp, #12
 8005198:	9300      	str	r3, [sp, #0]
 800519a:	462a      	mov	r2, r5
 800519c:	4b0f      	ldr	r3, [pc, #60]	; (80051dc <_svfiprintf_r+0x1f8>)
 800519e:	a904      	add	r1, sp, #16
 80051a0:	4638      	mov	r0, r7
 80051a2:	f3af 8000 	nop.w
 80051a6:	1c42      	adds	r2, r0, #1
 80051a8:	4606      	mov	r6, r0
 80051aa:	d1d6      	bne.n	800515a <_svfiprintf_r+0x176>
 80051ac:	89ab      	ldrh	r3, [r5, #12]
 80051ae:	065b      	lsls	r3, r3, #25
 80051b0:	f53f af2c 	bmi.w	800500c <_svfiprintf_r+0x28>
 80051b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80051b6:	b01d      	add	sp, #116	; 0x74
 80051b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051bc:	ab03      	add	r3, sp, #12
 80051be:	9300      	str	r3, [sp, #0]
 80051c0:	462a      	mov	r2, r5
 80051c2:	4b06      	ldr	r3, [pc, #24]	; (80051dc <_svfiprintf_r+0x1f8>)
 80051c4:	a904      	add	r1, sp, #16
 80051c6:	4638      	mov	r0, r7
 80051c8:	f000 f87a 	bl	80052c0 <_printf_i>
 80051cc:	e7eb      	b.n	80051a6 <_svfiprintf_r+0x1c2>
 80051ce:	bf00      	nop
 80051d0:	08005850 	.word	0x08005850
 80051d4:	0800585a 	.word	0x0800585a
 80051d8:	00000000 	.word	0x00000000
 80051dc:	08004f2d 	.word	0x08004f2d
 80051e0:	08005856 	.word	0x08005856

080051e4 <_printf_common>:
 80051e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051e8:	4616      	mov	r6, r2
 80051ea:	4699      	mov	r9, r3
 80051ec:	688a      	ldr	r2, [r1, #8]
 80051ee:	690b      	ldr	r3, [r1, #16]
 80051f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80051f4:	4293      	cmp	r3, r2
 80051f6:	bfb8      	it	lt
 80051f8:	4613      	movlt	r3, r2
 80051fa:	6033      	str	r3, [r6, #0]
 80051fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005200:	4607      	mov	r7, r0
 8005202:	460c      	mov	r4, r1
 8005204:	b10a      	cbz	r2, 800520a <_printf_common+0x26>
 8005206:	3301      	adds	r3, #1
 8005208:	6033      	str	r3, [r6, #0]
 800520a:	6823      	ldr	r3, [r4, #0]
 800520c:	0699      	lsls	r1, r3, #26
 800520e:	bf42      	ittt	mi
 8005210:	6833      	ldrmi	r3, [r6, #0]
 8005212:	3302      	addmi	r3, #2
 8005214:	6033      	strmi	r3, [r6, #0]
 8005216:	6825      	ldr	r5, [r4, #0]
 8005218:	f015 0506 	ands.w	r5, r5, #6
 800521c:	d106      	bne.n	800522c <_printf_common+0x48>
 800521e:	f104 0a19 	add.w	sl, r4, #25
 8005222:	68e3      	ldr	r3, [r4, #12]
 8005224:	6832      	ldr	r2, [r6, #0]
 8005226:	1a9b      	subs	r3, r3, r2
 8005228:	42ab      	cmp	r3, r5
 800522a:	dc26      	bgt.n	800527a <_printf_common+0x96>
 800522c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005230:	1e13      	subs	r3, r2, #0
 8005232:	6822      	ldr	r2, [r4, #0]
 8005234:	bf18      	it	ne
 8005236:	2301      	movne	r3, #1
 8005238:	0692      	lsls	r2, r2, #26
 800523a:	d42b      	bmi.n	8005294 <_printf_common+0xb0>
 800523c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005240:	4649      	mov	r1, r9
 8005242:	4638      	mov	r0, r7
 8005244:	47c0      	blx	r8
 8005246:	3001      	adds	r0, #1
 8005248:	d01e      	beq.n	8005288 <_printf_common+0xa4>
 800524a:	6823      	ldr	r3, [r4, #0]
 800524c:	68e5      	ldr	r5, [r4, #12]
 800524e:	6832      	ldr	r2, [r6, #0]
 8005250:	f003 0306 	and.w	r3, r3, #6
 8005254:	2b04      	cmp	r3, #4
 8005256:	bf08      	it	eq
 8005258:	1aad      	subeq	r5, r5, r2
 800525a:	68a3      	ldr	r3, [r4, #8]
 800525c:	6922      	ldr	r2, [r4, #16]
 800525e:	bf0c      	ite	eq
 8005260:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005264:	2500      	movne	r5, #0
 8005266:	4293      	cmp	r3, r2
 8005268:	bfc4      	itt	gt
 800526a:	1a9b      	subgt	r3, r3, r2
 800526c:	18ed      	addgt	r5, r5, r3
 800526e:	2600      	movs	r6, #0
 8005270:	341a      	adds	r4, #26
 8005272:	42b5      	cmp	r5, r6
 8005274:	d11a      	bne.n	80052ac <_printf_common+0xc8>
 8005276:	2000      	movs	r0, #0
 8005278:	e008      	b.n	800528c <_printf_common+0xa8>
 800527a:	2301      	movs	r3, #1
 800527c:	4652      	mov	r2, sl
 800527e:	4649      	mov	r1, r9
 8005280:	4638      	mov	r0, r7
 8005282:	47c0      	blx	r8
 8005284:	3001      	adds	r0, #1
 8005286:	d103      	bne.n	8005290 <_printf_common+0xac>
 8005288:	f04f 30ff 	mov.w	r0, #4294967295
 800528c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005290:	3501      	adds	r5, #1
 8005292:	e7c6      	b.n	8005222 <_printf_common+0x3e>
 8005294:	18e1      	adds	r1, r4, r3
 8005296:	1c5a      	adds	r2, r3, #1
 8005298:	2030      	movs	r0, #48	; 0x30
 800529a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800529e:	4422      	add	r2, r4
 80052a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80052a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80052a8:	3302      	adds	r3, #2
 80052aa:	e7c7      	b.n	800523c <_printf_common+0x58>
 80052ac:	2301      	movs	r3, #1
 80052ae:	4622      	mov	r2, r4
 80052b0:	4649      	mov	r1, r9
 80052b2:	4638      	mov	r0, r7
 80052b4:	47c0      	blx	r8
 80052b6:	3001      	adds	r0, #1
 80052b8:	d0e6      	beq.n	8005288 <_printf_common+0xa4>
 80052ba:	3601      	adds	r6, #1
 80052bc:	e7d9      	b.n	8005272 <_printf_common+0x8e>
	...

080052c0 <_printf_i>:
 80052c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052c4:	7e0f      	ldrb	r7, [r1, #24]
 80052c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80052c8:	2f78      	cmp	r7, #120	; 0x78
 80052ca:	4691      	mov	r9, r2
 80052cc:	4680      	mov	r8, r0
 80052ce:	460c      	mov	r4, r1
 80052d0:	469a      	mov	sl, r3
 80052d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80052d6:	d807      	bhi.n	80052e8 <_printf_i+0x28>
 80052d8:	2f62      	cmp	r7, #98	; 0x62
 80052da:	d80a      	bhi.n	80052f2 <_printf_i+0x32>
 80052dc:	2f00      	cmp	r7, #0
 80052de:	f000 80d8 	beq.w	8005492 <_printf_i+0x1d2>
 80052e2:	2f58      	cmp	r7, #88	; 0x58
 80052e4:	f000 80a3 	beq.w	800542e <_printf_i+0x16e>
 80052e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80052f0:	e03a      	b.n	8005368 <_printf_i+0xa8>
 80052f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80052f6:	2b15      	cmp	r3, #21
 80052f8:	d8f6      	bhi.n	80052e8 <_printf_i+0x28>
 80052fa:	a101      	add	r1, pc, #4	; (adr r1, 8005300 <_printf_i+0x40>)
 80052fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005300:	08005359 	.word	0x08005359
 8005304:	0800536d 	.word	0x0800536d
 8005308:	080052e9 	.word	0x080052e9
 800530c:	080052e9 	.word	0x080052e9
 8005310:	080052e9 	.word	0x080052e9
 8005314:	080052e9 	.word	0x080052e9
 8005318:	0800536d 	.word	0x0800536d
 800531c:	080052e9 	.word	0x080052e9
 8005320:	080052e9 	.word	0x080052e9
 8005324:	080052e9 	.word	0x080052e9
 8005328:	080052e9 	.word	0x080052e9
 800532c:	08005479 	.word	0x08005479
 8005330:	0800539d 	.word	0x0800539d
 8005334:	0800545b 	.word	0x0800545b
 8005338:	080052e9 	.word	0x080052e9
 800533c:	080052e9 	.word	0x080052e9
 8005340:	0800549b 	.word	0x0800549b
 8005344:	080052e9 	.word	0x080052e9
 8005348:	0800539d 	.word	0x0800539d
 800534c:	080052e9 	.word	0x080052e9
 8005350:	080052e9 	.word	0x080052e9
 8005354:	08005463 	.word	0x08005463
 8005358:	682b      	ldr	r3, [r5, #0]
 800535a:	1d1a      	adds	r2, r3, #4
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	602a      	str	r2, [r5, #0]
 8005360:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005364:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005368:	2301      	movs	r3, #1
 800536a:	e0a3      	b.n	80054b4 <_printf_i+0x1f4>
 800536c:	6820      	ldr	r0, [r4, #0]
 800536e:	6829      	ldr	r1, [r5, #0]
 8005370:	0606      	lsls	r6, r0, #24
 8005372:	f101 0304 	add.w	r3, r1, #4
 8005376:	d50a      	bpl.n	800538e <_printf_i+0xce>
 8005378:	680e      	ldr	r6, [r1, #0]
 800537a:	602b      	str	r3, [r5, #0]
 800537c:	2e00      	cmp	r6, #0
 800537e:	da03      	bge.n	8005388 <_printf_i+0xc8>
 8005380:	232d      	movs	r3, #45	; 0x2d
 8005382:	4276      	negs	r6, r6
 8005384:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005388:	485e      	ldr	r0, [pc, #376]	; (8005504 <_printf_i+0x244>)
 800538a:	230a      	movs	r3, #10
 800538c:	e019      	b.n	80053c2 <_printf_i+0x102>
 800538e:	680e      	ldr	r6, [r1, #0]
 8005390:	602b      	str	r3, [r5, #0]
 8005392:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005396:	bf18      	it	ne
 8005398:	b236      	sxthne	r6, r6
 800539a:	e7ef      	b.n	800537c <_printf_i+0xbc>
 800539c:	682b      	ldr	r3, [r5, #0]
 800539e:	6820      	ldr	r0, [r4, #0]
 80053a0:	1d19      	adds	r1, r3, #4
 80053a2:	6029      	str	r1, [r5, #0]
 80053a4:	0601      	lsls	r1, r0, #24
 80053a6:	d501      	bpl.n	80053ac <_printf_i+0xec>
 80053a8:	681e      	ldr	r6, [r3, #0]
 80053aa:	e002      	b.n	80053b2 <_printf_i+0xf2>
 80053ac:	0646      	lsls	r6, r0, #25
 80053ae:	d5fb      	bpl.n	80053a8 <_printf_i+0xe8>
 80053b0:	881e      	ldrh	r6, [r3, #0]
 80053b2:	4854      	ldr	r0, [pc, #336]	; (8005504 <_printf_i+0x244>)
 80053b4:	2f6f      	cmp	r7, #111	; 0x6f
 80053b6:	bf0c      	ite	eq
 80053b8:	2308      	moveq	r3, #8
 80053ba:	230a      	movne	r3, #10
 80053bc:	2100      	movs	r1, #0
 80053be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80053c2:	6865      	ldr	r5, [r4, #4]
 80053c4:	60a5      	str	r5, [r4, #8]
 80053c6:	2d00      	cmp	r5, #0
 80053c8:	bfa2      	ittt	ge
 80053ca:	6821      	ldrge	r1, [r4, #0]
 80053cc:	f021 0104 	bicge.w	r1, r1, #4
 80053d0:	6021      	strge	r1, [r4, #0]
 80053d2:	b90e      	cbnz	r6, 80053d8 <_printf_i+0x118>
 80053d4:	2d00      	cmp	r5, #0
 80053d6:	d04d      	beq.n	8005474 <_printf_i+0x1b4>
 80053d8:	4615      	mov	r5, r2
 80053da:	fbb6 f1f3 	udiv	r1, r6, r3
 80053de:	fb03 6711 	mls	r7, r3, r1, r6
 80053e2:	5dc7      	ldrb	r7, [r0, r7]
 80053e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80053e8:	4637      	mov	r7, r6
 80053ea:	42bb      	cmp	r3, r7
 80053ec:	460e      	mov	r6, r1
 80053ee:	d9f4      	bls.n	80053da <_printf_i+0x11a>
 80053f0:	2b08      	cmp	r3, #8
 80053f2:	d10b      	bne.n	800540c <_printf_i+0x14c>
 80053f4:	6823      	ldr	r3, [r4, #0]
 80053f6:	07de      	lsls	r6, r3, #31
 80053f8:	d508      	bpl.n	800540c <_printf_i+0x14c>
 80053fa:	6923      	ldr	r3, [r4, #16]
 80053fc:	6861      	ldr	r1, [r4, #4]
 80053fe:	4299      	cmp	r1, r3
 8005400:	bfde      	ittt	le
 8005402:	2330      	movle	r3, #48	; 0x30
 8005404:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005408:	f105 35ff 	addle.w	r5, r5, #4294967295
 800540c:	1b52      	subs	r2, r2, r5
 800540e:	6122      	str	r2, [r4, #16]
 8005410:	f8cd a000 	str.w	sl, [sp]
 8005414:	464b      	mov	r3, r9
 8005416:	aa03      	add	r2, sp, #12
 8005418:	4621      	mov	r1, r4
 800541a:	4640      	mov	r0, r8
 800541c:	f7ff fee2 	bl	80051e4 <_printf_common>
 8005420:	3001      	adds	r0, #1
 8005422:	d14c      	bne.n	80054be <_printf_i+0x1fe>
 8005424:	f04f 30ff 	mov.w	r0, #4294967295
 8005428:	b004      	add	sp, #16
 800542a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800542e:	4835      	ldr	r0, [pc, #212]	; (8005504 <_printf_i+0x244>)
 8005430:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005434:	6829      	ldr	r1, [r5, #0]
 8005436:	6823      	ldr	r3, [r4, #0]
 8005438:	f851 6b04 	ldr.w	r6, [r1], #4
 800543c:	6029      	str	r1, [r5, #0]
 800543e:	061d      	lsls	r5, r3, #24
 8005440:	d514      	bpl.n	800546c <_printf_i+0x1ac>
 8005442:	07df      	lsls	r7, r3, #31
 8005444:	bf44      	itt	mi
 8005446:	f043 0320 	orrmi.w	r3, r3, #32
 800544a:	6023      	strmi	r3, [r4, #0]
 800544c:	b91e      	cbnz	r6, 8005456 <_printf_i+0x196>
 800544e:	6823      	ldr	r3, [r4, #0]
 8005450:	f023 0320 	bic.w	r3, r3, #32
 8005454:	6023      	str	r3, [r4, #0]
 8005456:	2310      	movs	r3, #16
 8005458:	e7b0      	b.n	80053bc <_printf_i+0xfc>
 800545a:	6823      	ldr	r3, [r4, #0]
 800545c:	f043 0320 	orr.w	r3, r3, #32
 8005460:	6023      	str	r3, [r4, #0]
 8005462:	2378      	movs	r3, #120	; 0x78
 8005464:	4828      	ldr	r0, [pc, #160]	; (8005508 <_printf_i+0x248>)
 8005466:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800546a:	e7e3      	b.n	8005434 <_printf_i+0x174>
 800546c:	0659      	lsls	r1, r3, #25
 800546e:	bf48      	it	mi
 8005470:	b2b6      	uxthmi	r6, r6
 8005472:	e7e6      	b.n	8005442 <_printf_i+0x182>
 8005474:	4615      	mov	r5, r2
 8005476:	e7bb      	b.n	80053f0 <_printf_i+0x130>
 8005478:	682b      	ldr	r3, [r5, #0]
 800547a:	6826      	ldr	r6, [r4, #0]
 800547c:	6961      	ldr	r1, [r4, #20]
 800547e:	1d18      	adds	r0, r3, #4
 8005480:	6028      	str	r0, [r5, #0]
 8005482:	0635      	lsls	r5, r6, #24
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	d501      	bpl.n	800548c <_printf_i+0x1cc>
 8005488:	6019      	str	r1, [r3, #0]
 800548a:	e002      	b.n	8005492 <_printf_i+0x1d2>
 800548c:	0670      	lsls	r0, r6, #25
 800548e:	d5fb      	bpl.n	8005488 <_printf_i+0x1c8>
 8005490:	8019      	strh	r1, [r3, #0]
 8005492:	2300      	movs	r3, #0
 8005494:	6123      	str	r3, [r4, #16]
 8005496:	4615      	mov	r5, r2
 8005498:	e7ba      	b.n	8005410 <_printf_i+0x150>
 800549a:	682b      	ldr	r3, [r5, #0]
 800549c:	1d1a      	adds	r2, r3, #4
 800549e:	602a      	str	r2, [r5, #0]
 80054a0:	681d      	ldr	r5, [r3, #0]
 80054a2:	6862      	ldr	r2, [r4, #4]
 80054a4:	2100      	movs	r1, #0
 80054a6:	4628      	mov	r0, r5
 80054a8:	f7fa fe92 	bl	80001d0 <memchr>
 80054ac:	b108      	cbz	r0, 80054b2 <_printf_i+0x1f2>
 80054ae:	1b40      	subs	r0, r0, r5
 80054b0:	6060      	str	r0, [r4, #4]
 80054b2:	6863      	ldr	r3, [r4, #4]
 80054b4:	6123      	str	r3, [r4, #16]
 80054b6:	2300      	movs	r3, #0
 80054b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054bc:	e7a8      	b.n	8005410 <_printf_i+0x150>
 80054be:	6923      	ldr	r3, [r4, #16]
 80054c0:	462a      	mov	r2, r5
 80054c2:	4649      	mov	r1, r9
 80054c4:	4640      	mov	r0, r8
 80054c6:	47d0      	blx	sl
 80054c8:	3001      	adds	r0, #1
 80054ca:	d0ab      	beq.n	8005424 <_printf_i+0x164>
 80054cc:	6823      	ldr	r3, [r4, #0]
 80054ce:	079b      	lsls	r3, r3, #30
 80054d0:	d413      	bmi.n	80054fa <_printf_i+0x23a>
 80054d2:	68e0      	ldr	r0, [r4, #12]
 80054d4:	9b03      	ldr	r3, [sp, #12]
 80054d6:	4298      	cmp	r0, r3
 80054d8:	bfb8      	it	lt
 80054da:	4618      	movlt	r0, r3
 80054dc:	e7a4      	b.n	8005428 <_printf_i+0x168>
 80054de:	2301      	movs	r3, #1
 80054e0:	4632      	mov	r2, r6
 80054e2:	4649      	mov	r1, r9
 80054e4:	4640      	mov	r0, r8
 80054e6:	47d0      	blx	sl
 80054e8:	3001      	adds	r0, #1
 80054ea:	d09b      	beq.n	8005424 <_printf_i+0x164>
 80054ec:	3501      	adds	r5, #1
 80054ee:	68e3      	ldr	r3, [r4, #12]
 80054f0:	9903      	ldr	r1, [sp, #12]
 80054f2:	1a5b      	subs	r3, r3, r1
 80054f4:	42ab      	cmp	r3, r5
 80054f6:	dcf2      	bgt.n	80054de <_printf_i+0x21e>
 80054f8:	e7eb      	b.n	80054d2 <_printf_i+0x212>
 80054fa:	2500      	movs	r5, #0
 80054fc:	f104 0619 	add.w	r6, r4, #25
 8005500:	e7f5      	b.n	80054ee <_printf_i+0x22e>
 8005502:	bf00      	nop
 8005504:	08005861 	.word	0x08005861
 8005508:	08005872 	.word	0x08005872

0800550c <memcpy>:
 800550c:	440a      	add	r2, r1
 800550e:	4291      	cmp	r1, r2
 8005510:	f100 33ff 	add.w	r3, r0, #4294967295
 8005514:	d100      	bne.n	8005518 <memcpy+0xc>
 8005516:	4770      	bx	lr
 8005518:	b510      	push	{r4, lr}
 800551a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800551e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005522:	4291      	cmp	r1, r2
 8005524:	d1f9      	bne.n	800551a <memcpy+0xe>
 8005526:	bd10      	pop	{r4, pc}

08005528 <memmove>:
 8005528:	4288      	cmp	r0, r1
 800552a:	b510      	push	{r4, lr}
 800552c:	eb01 0402 	add.w	r4, r1, r2
 8005530:	d902      	bls.n	8005538 <memmove+0x10>
 8005532:	4284      	cmp	r4, r0
 8005534:	4623      	mov	r3, r4
 8005536:	d807      	bhi.n	8005548 <memmove+0x20>
 8005538:	1e43      	subs	r3, r0, #1
 800553a:	42a1      	cmp	r1, r4
 800553c:	d008      	beq.n	8005550 <memmove+0x28>
 800553e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005542:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005546:	e7f8      	b.n	800553a <memmove+0x12>
 8005548:	4402      	add	r2, r0
 800554a:	4601      	mov	r1, r0
 800554c:	428a      	cmp	r2, r1
 800554e:	d100      	bne.n	8005552 <memmove+0x2a>
 8005550:	bd10      	pop	{r4, pc}
 8005552:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005556:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800555a:	e7f7      	b.n	800554c <memmove+0x24>

0800555c <_free_r>:
 800555c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800555e:	2900      	cmp	r1, #0
 8005560:	d044      	beq.n	80055ec <_free_r+0x90>
 8005562:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005566:	9001      	str	r0, [sp, #4]
 8005568:	2b00      	cmp	r3, #0
 800556a:	f1a1 0404 	sub.w	r4, r1, #4
 800556e:	bfb8      	it	lt
 8005570:	18e4      	addlt	r4, r4, r3
 8005572:	f000 f913 	bl	800579c <__malloc_lock>
 8005576:	4a1e      	ldr	r2, [pc, #120]	; (80055f0 <_free_r+0x94>)
 8005578:	9801      	ldr	r0, [sp, #4]
 800557a:	6813      	ldr	r3, [r2, #0]
 800557c:	b933      	cbnz	r3, 800558c <_free_r+0x30>
 800557e:	6063      	str	r3, [r4, #4]
 8005580:	6014      	str	r4, [r2, #0]
 8005582:	b003      	add	sp, #12
 8005584:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005588:	f000 b90e 	b.w	80057a8 <__malloc_unlock>
 800558c:	42a3      	cmp	r3, r4
 800558e:	d908      	bls.n	80055a2 <_free_r+0x46>
 8005590:	6825      	ldr	r5, [r4, #0]
 8005592:	1961      	adds	r1, r4, r5
 8005594:	428b      	cmp	r3, r1
 8005596:	bf01      	itttt	eq
 8005598:	6819      	ldreq	r1, [r3, #0]
 800559a:	685b      	ldreq	r3, [r3, #4]
 800559c:	1949      	addeq	r1, r1, r5
 800559e:	6021      	streq	r1, [r4, #0]
 80055a0:	e7ed      	b.n	800557e <_free_r+0x22>
 80055a2:	461a      	mov	r2, r3
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	b10b      	cbz	r3, 80055ac <_free_r+0x50>
 80055a8:	42a3      	cmp	r3, r4
 80055aa:	d9fa      	bls.n	80055a2 <_free_r+0x46>
 80055ac:	6811      	ldr	r1, [r2, #0]
 80055ae:	1855      	adds	r5, r2, r1
 80055b0:	42a5      	cmp	r5, r4
 80055b2:	d10b      	bne.n	80055cc <_free_r+0x70>
 80055b4:	6824      	ldr	r4, [r4, #0]
 80055b6:	4421      	add	r1, r4
 80055b8:	1854      	adds	r4, r2, r1
 80055ba:	42a3      	cmp	r3, r4
 80055bc:	6011      	str	r1, [r2, #0]
 80055be:	d1e0      	bne.n	8005582 <_free_r+0x26>
 80055c0:	681c      	ldr	r4, [r3, #0]
 80055c2:	685b      	ldr	r3, [r3, #4]
 80055c4:	6053      	str	r3, [r2, #4]
 80055c6:	4421      	add	r1, r4
 80055c8:	6011      	str	r1, [r2, #0]
 80055ca:	e7da      	b.n	8005582 <_free_r+0x26>
 80055cc:	d902      	bls.n	80055d4 <_free_r+0x78>
 80055ce:	230c      	movs	r3, #12
 80055d0:	6003      	str	r3, [r0, #0]
 80055d2:	e7d6      	b.n	8005582 <_free_r+0x26>
 80055d4:	6825      	ldr	r5, [r4, #0]
 80055d6:	1961      	adds	r1, r4, r5
 80055d8:	428b      	cmp	r3, r1
 80055da:	bf04      	itt	eq
 80055dc:	6819      	ldreq	r1, [r3, #0]
 80055de:	685b      	ldreq	r3, [r3, #4]
 80055e0:	6063      	str	r3, [r4, #4]
 80055e2:	bf04      	itt	eq
 80055e4:	1949      	addeq	r1, r1, r5
 80055e6:	6021      	streq	r1, [r4, #0]
 80055e8:	6054      	str	r4, [r2, #4]
 80055ea:	e7ca      	b.n	8005582 <_free_r+0x26>
 80055ec:	b003      	add	sp, #12
 80055ee:	bd30      	pop	{r4, r5, pc}
 80055f0:	20000180 	.word	0x20000180

080055f4 <sbrk_aligned>:
 80055f4:	b570      	push	{r4, r5, r6, lr}
 80055f6:	4e0e      	ldr	r6, [pc, #56]	; (8005630 <sbrk_aligned+0x3c>)
 80055f8:	460c      	mov	r4, r1
 80055fa:	6831      	ldr	r1, [r6, #0]
 80055fc:	4605      	mov	r5, r0
 80055fe:	b911      	cbnz	r1, 8005606 <sbrk_aligned+0x12>
 8005600:	f000 f8bc 	bl	800577c <_sbrk_r>
 8005604:	6030      	str	r0, [r6, #0]
 8005606:	4621      	mov	r1, r4
 8005608:	4628      	mov	r0, r5
 800560a:	f000 f8b7 	bl	800577c <_sbrk_r>
 800560e:	1c43      	adds	r3, r0, #1
 8005610:	d00a      	beq.n	8005628 <sbrk_aligned+0x34>
 8005612:	1cc4      	adds	r4, r0, #3
 8005614:	f024 0403 	bic.w	r4, r4, #3
 8005618:	42a0      	cmp	r0, r4
 800561a:	d007      	beq.n	800562c <sbrk_aligned+0x38>
 800561c:	1a21      	subs	r1, r4, r0
 800561e:	4628      	mov	r0, r5
 8005620:	f000 f8ac 	bl	800577c <_sbrk_r>
 8005624:	3001      	adds	r0, #1
 8005626:	d101      	bne.n	800562c <sbrk_aligned+0x38>
 8005628:	f04f 34ff 	mov.w	r4, #4294967295
 800562c:	4620      	mov	r0, r4
 800562e:	bd70      	pop	{r4, r5, r6, pc}
 8005630:	20000184 	.word	0x20000184

08005634 <_malloc_r>:
 8005634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005638:	1ccd      	adds	r5, r1, #3
 800563a:	f025 0503 	bic.w	r5, r5, #3
 800563e:	3508      	adds	r5, #8
 8005640:	2d0c      	cmp	r5, #12
 8005642:	bf38      	it	cc
 8005644:	250c      	movcc	r5, #12
 8005646:	2d00      	cmp	r5, #0
 8005648:	4607      	mov	r7, r0
 800564a:	db01      	blt.n	8005650 <_malloc_r+0x1c>
 800564c:	42a9      	cmp	r1, r5
 800564e:	d905      	bls.n	800565c <_malloc_r+0x28>
 8005650:	230c      	movs	r3, #12
 8005652:	603b      	str	r3, [r7, #0]
 8005654:	2600      	movs	r6, #0
 8005656:	4630      	mov	r0, r6
 8005658:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800565c:	4e2e      	ldr	r6, [pc, #184]	; (8005718 <_malloc_r+0xe4>)
 800565e:	f000 f89d 	bl	800579c <__malloc_lock>
 8005662:	6833      	ldr	r3, [r6, #0]
 8005664:	461c      	mov	r4, r3
 8005666:	bb34      	cbnz	r4, 80056b6 <_malloc_r+0x82>
 8005668:	4629      	mov	r1, r5
 800566a:	4638      	mov	r0, r7
 800566c:	f7ff ffc2 	bl	80055f4 <sbrk_aligned>
 8005670:	1c43      	adds	r3, r0, #1
 8005672:	4604      	mov	r4, r0
 8005674:	d14d      	bne.n	8005712 <_malloc_r+0xde>
 8005676:	6834      	ldr	r4, [r6, #0]
 8005678:	4626      	mov	r6, r4
 800567a:	2e00      	cmp	r6, #0
 800567c:	d140      	bne.n	8005700 <_malloc_r+0xcc>
 800567e:	6823      	ldr	r3, [r4, #0]
 8005680:	4631      	mov	r1, r6
 8005682:	4638      	mov	r0, r7
 8005684:	eb04 0803 	add.w	r8, r4, r3
 8005688:	f000 f878 	bl	800577c <_sbrk_r>
 800568c:	4580      	cmp	r8, r0
 800568e:	d13a      	bne.n	8005706 <_malloc_r+0xd2>
 8005690:	6821      	ldr	r1, [r4, #0]
 8005692:	3503      	adds	r5, #3
 8005694:	1a6d      	subs	r5, r5, r1
 8005696:	f025 0503 	bic.w	r5, r5, #3
 800569a:	3508      	adds	r5, #8
 800569c:	2d0c      	cmp	r5, #12
 800569e:	bf38      	it	cc
 80056a0:	250c      	movcc	r5, #12
 80056a2:	4629      	mov	r1, r5
 80056a4:	4638      	mov	r0, r7
 80056a6:	f7ff ffa5 	bl	80055f4 <sbrk_aligned>
 80056aa:	3001      	adds	r0, #1
 80056ac:	d02b      	beq.n	8005706 <_malloc_r+0xd2>
 80056ae:	6823      	ldr	r3, [r4, #0]
 80056b0:	442b      	add	r3, r5
 80056b2:	6023      	str	r3, [r4, #0]
 80056b4:	e00e      	b.n	80056d4 <_malloc_r+0xa0>
 80056b6:	6822      	ldr	r2, [r4, #0]
 80056b8:	1b52      	subs	r2, r2, r5
 80056ba:	d41e      	bmi.n	80056fa <_malloc_r+0xc6>
 80056bc:	2a0b      	cmp	r2, #11
 80056be:	d916      	bls.n	80056ee <_malloc_r+0xba>
 80056c0:	1961      	adds	r1, r4, r5
 80056c2:	42a3      	cmp	r3, r4
 80056c4:	6025      	str	r5, [r4, #0]
 80056c6:	bf18      	it	ne
 80056c8:	6059      	strne	r1, [r3, #4]
 80056ca:	6863      	ldr	r3, [r4, #4]
 80056cc:	bf08      	it	eq
 80056ce:	6031      	streq	r1, [r6, #0]
 80056d0:	5162      	str	r2, [r4, r5]
 80056d2:	604b      	str	r3, [r1, #4]
 80056d4:	4638      	mov	r0, r7
 80056d6:	f104 060b 	add.w	r6, r4, #11
 80056da:	f000 f865 	bl	80057a8 <__malloc_unlock>
 80056de:	f026 0607 	bic.w	r6, r6, #7
 80056e2:	1d23      	adds	r3, r4, #4
 80056e4:	1af2      	subs	r2, r6, r3
 80056e6:	d0b6      	beq.n	8005656 <_malloc_r+0x22>
 80056e8:	1b9b      	subs	r3, r3, r6
 80056ea:	50a3      	str	r3, [r4, r2]
 80056ec:	e7b3      	b.n	8005656 <_malloc_r+0x22>
 80056ee:	6862      	ldr	r2, [r4, #4]
 80056f0:	42a3      	cmp	r3, r4
 80056f2:	bf0c      	ite	eq
 80056f4:	6032      	streq	r2, [r6, #0]
 80056f6:	605a      	strne	r2, [r3, #4]
 80056f8:	e7ec      	b.n	80056d4 <_malloc_r+0xa0>
 80056fa:	4623      	mov	r3, r4
 80056fc:	6864      	ldr	r4, [r4, #4]
 80056fe:	e7b2      	b.n	8005666 <_malloc_r+0x32>
 8005700:	4634      	mov	r4, r6
 8005702:	6876      	ldr	r6, [r6, #4]
 8005704:	e7b9      	b.n	800567a <_malloc_r+0x46>
 8005706:	230c      	movs	r3, #12
 8005708:	603b      	str	r3, [r7, #0]
 800570a:	4638      	mov	r0, r7
 800570c:	f000 f84c 	bl	80057a8 <__malloc_unlock>
 8005710:	e7a1      	b.n	8005656 <_malloc_r+0x22>
 8005712:	6025      	str	r5, [r4, #0]
 8005714:	e7de      	b.n	80056d4 <_malloc_r+0xa0>
 8005716:	bf00      	nop
 8005718:	20000180 	.word	0x20000180

0800571c <_realloc_r>:
 800571c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005720:	4680      	mov	r8, r0
 8005722:	4614      	mov	r4, r2
 8005724:	460e      	mov	r6, r1
 8005726:	b921      	cbnz	r1, 8005732 <_realloc_r+0x16>
 8005728:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800572c:	4611      	mov	r1, r2
 800572e:	f7ff bf81 	b.w	8005634 <_malloc_r>
 8005732:	b92a      	cbnz	r2, 8005740 <_realloc_r+0x24>
 8005734:	f7ff ff12 	bl	800555c <_free_r>
 8005738:	4625      	mov	r5, r4
 800573a:	4628      	mov	r0, r5
 800573c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005740:	f000 f838 	bl	80057b4 <_malloc_usable_size_r>
 8005744:	4284      	cmp	r4, r0
 8005746:	4607      	mov	r7, r0
 8005748:	d802      	bhi.n	8005750 <_realloc_r+0x34>
 800574a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800574e:	d812      	bhi.n	8005776 <_realloc_r+0x5a>
 8005750:	4621      	mov	r1, r4
 8005752:	4640      	mov	r0, r8
 8005754:	f7ff ff6e 	bl	8005634 <_malloc_r>
 8005758:	4605      	mov	r5, r0
 800575a:	2800      	cmp	r0, #0
 800575c:	d0ed      	beq.n	800573a <_realloc_r+0x1e>
 800575e:	42bc      	cmp	r4, r7
 8005760:	4622      	mov	r2, r4
 8005762:	4631      	mov	r1, r6
 8005764:	bf28      	it	cs
 8005766:	463a      	movcs	r2, r7
 8005768:	f7ff fed0 	bl	800550c <memcpy>
 800576c:	4631      	mov	r1, r6
 800576e:	4640      	mov	r0, r8
 8005770:	f7ff fef4 	bl	800555c <_free_r>
 8005774:	e7e1      	b.n	800573a <_realloc_r+0x1e>
 8005776:	4635      	mov	r5, r6
 8005778:	e7df      	b.n	800573a <_realloc_r+0x1e>
	...

0800577c <_sbrk_r>:
 800577c:	b538      	push	{r3, r4, r5, lr}
 800577e:	4d06      	ldr	r5, [pc, #24]	; (8005798 <_sbrk_r+0x1c>)
 8005780:	2300      	movs	r3, #0
 8005782:	4604      	mov	r4, r0
 8005784:	4608      	mov	r0, r1
 8005786:	602b      	str	r3, [r5, #0]
 8005788:	f7fb fa76 	bl	8000c78 <_sbrk>
 800578c:	1c43      	adds	r3, r0, #1
 800578e:	d102      	bne.n	8005796 <_sbrk_r+0x1a>
 8005790:	682b      	ldr	r3, [r5, #0]
 8005792:	b103      	cbz	r3, 8005796 <_sbrk_r+0x1a>
 8005794:	6023      	str	r3, [r4, #0]
 8005796:	bd38      	pop	{r3, r4, r5, pc}
 8005798:	20000188 	.word	0x20000188

0800579c <__malloc_lock>:
 800579c:	4801      	ldr	r0, [pc, #4]	; (80057a4 <__malloc_lock+0x8>)
 800579e:	f000 b811 	b.w	80057c4 <__retarget_lock_acquire_recursive>
 80057a2:	bf00      	nop
 80057a4:	2000018c 	.word	0x2000018c

080057a8 <__malloc_unlock>:
 80057a8:	4801      	ldr	r0, [pc, #4]	; (80057b0 <__malloc_unlock+0x8>)
 80057aa:	f000 b80c 	b.w	80057c6 <__retarget_lock_release_recursive>
 80057ae:	bf00      	nop
 80057b0:	2000018c 	.word	0x2000018c

080057b4 <_malloc_usable_size_r>:
 80057b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057b8:	1f18      	subs	r0, r3, #4
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	bfbc      	itt	lt
 80057be:	580b      	ldrlt	r3, [r1, r0]
 80057c0:	18c0      	addlt	r0, r0, r3
 80057c2:	4770      	bx	lr

080057c4 <__retarget_lock_acquire_recursive>:
 80057c4:	4770      	bx	lr

080057c6 <__retarget_lock_release_recursive>:
 80057c6:	4770      	bx	lr

080057c8 <_init>:
 80057c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057ca:	bf00      	nop
 80057cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057ce:	bc08      	pop	{r3}
 80057d0:	469e      	mov	lr, r3
 80057d2:	4770      	bx	lr

080057d4 <_fini>:
 80057d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057d6:	bf00      	nop
 80057d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80057da:	bc08      	pop	{r3}
 80057dc:	469e      	mov	lr, r3
 80057de:	4770      	bx	lr
